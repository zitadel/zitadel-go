// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api.proto

package v3alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExampleService_Healthz_FullMethodName   = "/zitadel.go.example.api.v3alpha.ExampleService/Healthz"
	ExampleService_ListTasks_FullMethodName = "/zitadel.go.example.api.v3alpha.ExampleService/ListTasks"
	ExampleService_AddTask_FullMethodName   = "/zitadel.go.example.api.v3alpha.ExampleService/AddTask"
	ExampleService_AddTasks_FullMethodName  = "/zitadel.go.example.api.v3alpha.ExampleService/AddTasks"
)

// ExampleServiceClient is the client API for ExampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleServiceClient interface {
	// Healthz is accessible by anyone and will always return "OK" to indicate the API is running
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
	// ListTasks is only accessible with a valid authorization (in this case a valid access_token / PAT).
	// It will list all stored tasks. In case the user is granted the `admin` role it will add a separate task telling him
	// to add a new task.
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	// AddTask is only accessible with a valid authorization, which was granted the `admin` role (in any organization).
	// It will add the provided task to the list of existing ones.
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error)
	// AddTasks is only accessible with a valid authorization, which was granted the `admin` role (in any organization).
	// It demonstrates that GRPC client Stream can be used the same way a standard RPC methods.
	// It will also add the provided task(s) to the list of existing ones.
	AddTasks(ctx context.Context, opts ...grpc.CallOption) (ExampleService_AddTasksClient, error)
}

type exampleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleServiceClient(cc grpc.ClientConnInterface) ExampleServiceClient {
	return &exampleServiceClient{cc}
}

func (c *exampleServiceClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, ExampleService_Healthz_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	out := new(ListTasksResponse)
	err := c.cc.Invoke(ctx, ExampleService_ListTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error) {
	out := new(AddTaskResponse)
	err := c.cc.Invoke(ctx, ExampleService_AddTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleServiceClient) AddTasks(ctx context.Context, opts ...grpc.CallOption) (ExampleService_AddTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExampleService_ServiceDesc.Streams[0], ExampleService_AddTasks_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleServiceAddTasksClient{stream}
	return x, nil
}

type ExampleService_AddTasksClient interface {
	Send(*AddTasksRequest) error
	CloseAndRecv() (*AddTasksResponse, error)
	grpc.ClientStream
}

type exampleServiceAddTasksClient struct {
	grpc.ClientStream
}

func (x *exampleServiceAddTasksClient) Send(m *AddTasksRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleServiceAddTasksClient) CloseAndRecv() (*AddTasksResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddTasksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExampleServiceServer is the server API for ExampleService service.
// All implementations must embed UnimplementedExampleServiceServer
// for forward compatibility
type ExampleServiceServer interface {
	// Healthz is accessible by anyone and will always return "OK" to indicate the API is running
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
	// ListTasks is only accessible with a valid authorization (in this case a valid access_token / PAT).
	// It will list all stored tasks. In case the user is granted the `admin` role it will add a separate task telling him
	// to add a new task.
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	// AddTask is only accessible with a valid authorization, which was granted the `admin` role (in any organization).
	// It will add the provided task to the list of existing ones.
	AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error)
	// AddTasks is only accessible with a valid authorization, which was granted the `admin` role (in any organization).
	// It demonstrates that GRPC client Stream can be used the same way a standard RPC methods.
	// It will also add the provided task(s) to the list of existing ones.
	AddTasks(ExampleService_AddTasksServer) error
	mustEmbedUnimplementedExampleServiceServer()
}

// UnimplementedExampleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExampleServiceServer struct {
}

func (UnimplementedExampleServiceServer) Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedExampleServiceServer) ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedExampleServiceServer) AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedExampleServiceServer) AddTasks(ExampleService_AddTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method AddTasks not implemented")
}
func (UnimplementedExampleServiceServer) mustEmbedUnimplementedExampleServiceServer() {}

// UnsafeExampleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleServiceServer will
// result in compilation errors.
type UnsafeExampleServiceServer interface {
	mustEmbedUnimplementedExampleServiceServer()
}

func RegisterExampleServiceServer(s grpc.ServiceRegistrar, srv ExampleServiceServer) {
	s.RegisterService(&ExampleService_ServiceDesc, srv)
}

func _ExampleService_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_Healthz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServiceServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleService_AddTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServiceServer).AddTask(ctx, req.(*AddTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleService_AddTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServiceServer).AddTasks(&exampleServiceAddTasksServer{stream})
}

type ExampleService_AddTasksServer interface {
	SendAndClose(*AddTasksResponse) error
	Recv() (*AddTasksRequest, error)
	grpc.ServerStream
}

type exampleServiceAddTasksServer struct {
	grpc.ServerStream
}

func (x *exampleServiceAddTasksServer) SendAndClose(m *AddTasksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleServiceAddTasksServer) Recv() (*AddTasksRequest, error) {
	m := new(AddTasksRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExampleService_ServiceDesc is the grpc.ServiceDesc for ExampleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExampleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zitadel.go.example.api.v3alpha.ExampleService",
	HandlerType: (*ExampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthz",
			Handler:    _ExampleService_Healthz_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _ExampleService_ListTasks_Handler,
		},
		{
			MethodName: "AddTask",
			Handler:    _ExampleService_AddTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddTasks",
			Handler:       _ExampleService_AddTasks_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
