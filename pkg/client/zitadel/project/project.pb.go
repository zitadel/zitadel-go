// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/project.proto

package project

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	object "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/object"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProjectState int32

const (
	ProjectState_PROJECT_STATE_UNSPECIFIED ProjectState = 0
	ProjectState_PROJECT_STATE_ACTIVE      ProjectState = 1
	ProjectState_PROJECT_STATE_INACTIVE    ProjectState = 2
)

// Enum value maps for ProjectState.
var (
	ProjectState_name = map[int32]string{
		0: "PROJECT_STATE_UNSPECIFIED",
		1: "PROJECT_STATE_ACTIVE",
		2: "PROJECT_STATE_INACTIVE",
	}
	ProjectState_value = map[string]int32{
		"PROJECT_STATE_UNSPECIFIED": 0,
		"PROJECT_STATE_ACTIVE":      1,
		"PROJECT_STATE_INACTIVE":    2,
	}
)

func (x ProjectState) Enum() *ProjectState {
	p := new(ProjectState)
	*p = x
	return p
}

func (x ProjectState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectState) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_project_proto_enumTypes[0].Descriptor()
}

func (ProjectState) Type() protoreflect.EnumType {
	return &file_zitadel_project_proto_enumTypes[0]
}

func (x ProjectState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectState.Descriptor instead.
func (ProjectState) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_project_proto_rawDescGZIP(), []int{0}
}

type PrivateLabelingSetting int32

const (
	PrivateLabelingSetting_PRIVATE_LABELING_SETTING_UNSPECIFIED                            PrivateLabelingSetting = 0
	PrivateLabelingSetting_PRIVATE_LABELING_SETTING_ENFORCE_PROJECT_RESOURCE_OWNER_POLICY  PrivateLabelingSetting = 1
	PrivateLabelingSetting_PRIVATE_LABELING_SETTING_ALLOW_LOGIN_USER_RESOURCE_OWNER_POLICY PrivateLabelingSetting = 2
)

// Enum value maps for PrivateLabelingSetting.
var (
	PrivateLabelingSetting_name = map[int32]string{
		0: "PRIVATE_LABELING_SETTING_UNSPECIFIED",
		1: "PRIVATE_LABELING_SETTING_ENFORCE_PROJECT_RESOURCE_OWNER_POLICY",
		2: "PRIVATE_LABELING_SETTING_ALLOW_LOGIN_USER_RESOURCE_OWNER_POLICY",
	}
	PrivateLabelingSetting_value = map[string]int32{
		"PRIVATE_LABELING_SETTING_UNSPECIFIED":                            0,
		"PRIVATE_LABELING_SETTING_ENFORCE_PROJECT_RESOURCE_OWNER_POLICY":  1,
		"PRIVATE_LABELING_SETTING_ALLOW_LOGIN_USER_RESOURCE_OWNER_POLICY": 2,
	}
)

func (x PrivateLabelingSetting) Enum() *PrivateLabelingSetting {
	p := new(PrivateLabelingSetting)
	*p = x
	return p
}

func (x PrivateLabelingSetting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrivateLabelingSetting) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_project_proto_enumTypes[1].Descriptor()
}

func (PrivateLabelingSetting) Type() protoreflect.EnumType {
	return &file_zitadel_project_proto_enumTypes[1]
}

func (x PrivateLabelingSetting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrivateLabelingSetting.Descriptor instead.
func (PrivateLabelingSetting) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_project_proto_rawDescGZIP(), []int{1}
}

type ProjectGrantState int32

const (
	ProjectGrantState_PROJECT_GRANT_STATE_UNSPECIFIED ProjectGrantState = 0
	ProjectGrantState_PROJECT_GRANT_STATE_ACTIVE      ProjectGrantState = 1
	ProjectGrantState_PROJECT_GRANT_STATE_INACTIVE    ProjectGrantState = 2
)

// Enum value maps for ProjectGrantState.
var (
	ProjectGrantState_name = map[int32]string{
		0: "PROJECT_GRANT_STATE_UNSPECIFIED",
		1: "PROJECT_GRANT_STATE_ACTIVE",
		2: "PROJECT_GRANT_STATE_INACTIVE",
	}
	ProjectGrantState_value = map[string]int32{
		"PROJECT_GRANT_STATE_UNSPECIFIED": 0,
		"PROJECT_GRANT_STATE_ACTIVE":      1,
		"PROJECT_GRANT_STATE_INACTIVE":    2,
	}
)

func (x ProjectGrantState) Enum() *ProjectGrantState {
	p := new(ProjectGrantState)
	*p = x
	return p
}

func (x ProjectGrantState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectGrantState) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_project_proto_enumTypes[2].Descriptor()
}

func (ProjectGrantState) Type() protoreflect.EnumType {
	return &file_zitadel_project_proto_enumTypes[2]
}

func (x ProjectGrantState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectGrantState.Descriptor instead.
func (ProjectGrantState) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_project_proto_rawDescGZIP(), []int{2}
}

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Details *object.ObjectDetails `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	Name    string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	State   ProjectState          `protobuf:"varint,4,opt,name=state,proto3,enum=zitadel.project.v1.ProjectState" json:"state,omitempty"`
	// describes if the roles of the user should be added to the token
	ProjectRoleAssertion bool `protobuf:"varint,5,opt,name=project_role_assertion,json=projectRoleAssertion,proto3" json:"project_role_assertion,omitempty"`
	// ZITADEL checks if the user has at least one on this project
	ProjectRoleCheck bool `protobuf:"varint,6,opt,name=project_role_check,json=projectRoleCheck,proto3" json:"project_role_check,omitempty"`
	// ZITADEL checks if the org of the user has permission for this project
	HasProjectCheck bool `protobuf:"varint,7,opt,name=has_project_check,json=hasProjectCheck,proto3" json:"has_project_check,omitempty"`
	// Defines from where the private labeling should be triggered
	PrivateLabelingSetting PrivateLabelingSetting `protobuf:"varint,8,opt,name=private_labeling_setting,json=privateLabelingSetting,proto3,enum=zitadel.project.v1.PrivateLabelingSetting" json:"private_labeling_setting,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_zitadel_project_proto_rawDescGZIP(), []int{0}
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetState() ProjectState {
	if x != nil {
		return x.State
	}
	return ProjectState_PROJECT_STATE_UNSPECIFIED
}

func (x *Project) GetProjectRoleAssertion() bool {
	if x != nil {
		return x.ProjectRoleAssertion
	}
	return false
}

func (x *Project) GetProjectRoleCheck() bool {
	if x != nil {
		return x.ProjectRoleCheck
	}
	return false
}

func (x *Project) GetHasProjectCheck() bool {
	if x != nil {
		return x.HasProjectCheck
	}
	return false
}

func (x *Project) GetPrivateLabelingSetting() PrivateLabelingSetting {
	if x != nil {
		return x.PrivateLabelingSetting
	}
	return PrivateLabelingSetting_PRIVATE_LABELING_SETTING_UNSPECIFIED
}

type GrantedProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantId          string                `protobuf:"bytes,1,opt,name=grant_id,json=grantId,proto3" json:"grant_id,omitempty"`
	GrantedOrgId     string                `protobuf:"bytes,2,opt,name=granted_org_id,json=grantedOrgId,proto3" json:"granted_org_id,omitempty"`
	GrantedOrgName   string                `protobuf:"bytes,3,opt,name=granted_org_name,json=grantedOrgName,proto3" json:"granted_org_name,omitempty"`
	GrantedRoleKeys  []string              `protobuf:"bytes,4,rep,name=granted_role_keys,json=grantedRoleKeys,proto3" json:"granted_role_keys,omitempty"`
	State            ProjectGrantState     `protobuf:"varint,5,opt,name=state,proto3,enum=zitadel.project.v1.ProjectGrantState" json:"state,omitempty"`
	ProjectId        string                `protobuf:"bytes,6,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ProjectName      string                `protobuf:"bytes,7,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	ProjectOwnerId   string                `protobuf:"bytes,8,opt,name=project_owner_id,json=projectOwnerId,proto3" json:"project_owner_id,omitempty"`
	ProjectOwnerName string                `protobuf:"bytes,9,opt,name=project_owner_name,json=projectOwnerName,proto3" json:"project_owner_name,omitempty"`
	Details          *object.ObjectDetails `protobuf:"bytes,10,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *GrantedProject) Reset() {
	*x = GrantedProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantedProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantedProject) ProtoMessage() {}

func (x *GrantedProject) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantedProject.ProtoReflect.Descriptor instead.
func (*GrantedProject) Descriptor() ([]byte, []int) {
	return file_zitadel_project_proto_rawDescGZIP(), []int{1}
}

func (x *GrantedProject) GetGrantId() string {
	if x != nil {
		return x.GrantId
	}
	return ""
}

func (x *GrantedProject) GetGrantedOrgId() string {
	if x != nil {
		return x.GrantedOrgId
	}
	return ""
}

func (x *GrantedProject) GetGrantedOrgName() string {
	if x != nil {
		return x.GrantedOrgName
	}
	return ""
}

func (x *GrantedProject) GetGrantedRoleKeys() []string {
	if x != nil {
		return x.GrantedRoleKeys
	}
	return nil
}

func (x *GrantedProject) GetState() ProjectGrantState {
	if x != nil {
		return x.State
	}
	return ProjectGrantState_PROJECT_GRANT_STATE_UNSPECIFIED
}

func (x *GrantedProject) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GrantedProject) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *GrantedProject) GetProjectOwnerId() string {
	if x != nil {
		return x.ProjectOwnerId
	}
	return ""
}

func (x *GrantedProject) GetProjectOwnerName() string {
	if x != nil {
		return x.ProjectOwnerName
	}
	return ""
}

func (x *GrantedProject) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type ProjectQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*ProjectQuery_NameQuery
	//	*ProjectQuery_ProjectResourceOwnerQuery
	Query isProjectQuery_Query `protobuf_oneof:"query"`
}

func (x *ProjectQuery) Reset() {
	*x = ProjectQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectQuery) ProtoMessage() {}

func (x *ProjectQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectQuery.ProtoReflect.Descriptor instead.
func (*ProjectQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_project_proto_rawDescGZIP(), []int{2}
}

func (m *ProjectQuery) GetQuery() isProjectQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *ProjectQuery) GetNameQuery() *ProjectNameQuery {
	if x, ok := x.GetQuery().(*ProjectQuery_NameQuery); ok {
		return x.NameQuery
	}
	return nil
}

func (x *ProjectQuery) GetProjectResourceOwnerQuery() *ProjectResourceOwnerQuery {
	if x, ok := x.GetQuery().(*ProjectQuery_ProjectResourceOwnerQuery); ok {
		return x.ProjectResourceOwnerQuery
	}
	return nil
}

type isProjectQuery_Query interface {
	isProjectQuery_Query()
}

type ProjectQuery_NameQuery struct {
	NameQuery *ProjectNameQuery `protobuf:"bytes,1,opt,name=name_query,json=nameQuery,proto3,oneof"`
}

type ProjectQuery_ProjectResourceOwnerQuery struct {
	ProjectResourceOwnerQuery *ProjectResourceOwnerQuery `protobuf:"bytes,2,opt,name=project_resource_owner_query,json=projectResourceOwnerQuery,proto3,oneof"`
}

func (*ProjectQuery_NameQuery) isProjectQuery_Query() {}

func (*ProjectQuery_ProjectResourceOwnerQuery) isProjectQuery_Query() {}

type ProjectNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Method object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *ProjectNameQuery) Reset() {
	*x = ProjectNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectNameQuery) ProtoMessage() {}

func (x *ProjectNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectNameQuery.ProtoReflect.Descriptor instead.
func (*ProjectNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_project_proto_rawDescGZIP(), []int{3}
}

func (x *ProjectNameQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectNameQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type ProjectResourceOwnerQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceOwner string `protobuf:"bytes,1,opt,name=resource_owner,json=resourceOwner,proto3" json:"resource_owner,omitempty"`
}

func (x *ProjectResourceOwnerQuery) Reset() {
	*x = ProjectResourceOwnerQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectResourceOwnerQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectResourceOwnerQuery) ProtoMessage() {}

func (x *ProjectResourceOwnerQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectResourceOwnerQuery.ProtoReflect.Descriptor instead.
func (*ProjectResourceOwnerQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_project_proto_rawDescGZIP(), []int{4}
}

func (x *ProjectResourceOwnerQuery) GetResourceOwner() string {
	if x != nil {
		return x.ResourceOwner
	}
	return ""
}

type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string                `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Details     *object.ObjectDetails `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	DisplayName string                `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Group       string                `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_zitadel_project_proto_rawDescGZIP(), []int{5}
}

func (x *Role) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Role) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Role) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Role) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type RoleQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*RoleQuery_KeyQuery
	//	*RoleQuery_DisplayNameQuery
	Query isRoleQuery_Query `protobuf_oneof:"query"`
}

func (x *RoleQuery) Reset() {
	*x = RoleQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleQuery) ProtoMessage() {}

func (x *RoleQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleQuery.ProtoReflect.Descriptor instead.
func (*RoleQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_project_proto_rawDescGZIP(), []int{6}
}

func (m *RoleQuery) GetQuery() isRoleQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *RoleQuery) GetKeyQuery() *RoleKeyQuery {
	if x, ok := x.GetQuery().(*RoleQuery_KeyQuery); ok {
		return x.KeyQuery
	}
	return nil
}

func (x *RoleQuery) GetDisplayNameQuery() *RoleDisplayNameQuery {
	if x, ok := x.GetQuery().(*RoleQuery_DisplayNameQuery); ok {
		return x.DisplayNameQuery
	}
	return nil
}

type isRoleQuery_Query interface {
	isRoleQuery_Query()
}

type RoleQuery_KeyQuery struct {
	KeyQuery *RoleKeyQuery `protobuf:"bytes,1,opt,name=key_query,json=keyQuery,proto3,oneof"`
}

type RoleQuery_DisplayNameQuery struct {
	DisplayNameQuery *RoleDisplayNameQuery `protobuf:"bytes,2,opt,name=display_name_query,json=displayNameQuery,proto3,oneof"`
}

func (*RoleQuery_KeyQuery) isRoleQuery_Query() {}

func (*RoleQuery_DisplayNameQuery) isRoleQuery_Query() {}

type RoleKeyQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Method object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *RoleKeyQuery) Reset() {
	*x = RoleKeyQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleKeyQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleKeyQuery) ProtoMessage() {}

func (x *RoleKeyQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleKeyQuery.ProtoReflect.Descriptor instead.
func (*RoleKeyQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_project_proto_rawDescGZIP(), []int{7}
}

func (x *RoleKeyQuery) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RoleKeyQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type RoleDisplayNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string                 `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Method      object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *RoleDisplayNameQuery) Reset() {
	*x = RoleDisplayNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleDisplayNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleDisplayNameQuery) ProtoMessage() {}

func (x *RoleDisplayNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleDisplayNameQuery.ProtoReflect.Descriptor instead.
func (*RoleDisplayNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_project_proto_rawDescGZIP(), []int{8}
}

func (x *RoleDisplayNameQuery) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *RoleDisplayNameQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type ProjectGrantQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*ProjectGrantQuery_ProjectNameQuery
	//	*ProjectGrantQuery_RoleKeyQuery
	Query isProjectGrantQuery_Query `protobuf_oneof:"query"`
}

func (x *ProjectGrantQuery) Reset() {
	*x = ProjectGrantQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectGrantQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectGrantQuery) ProtoMessage() {}

func (x *ProjectGrantQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectGrantQuery.ProtoReflect.Descriptor instead.
func (*ProjectGrantQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_project_proto_rawDescGZIP(), []int{9}
}

func (m *ProjectGrantQuery) GetQuery() isProjectGrantQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *ProjectGrantQuery) GetProjectNameQuery() *GrantProjectNameQuery {
	if x, ok := x.GetQuery().(*ProjectGrantQuery_ProjectNameQuery); ok {
		return x.ProjectNameQuery
	}
	return nil
}

func (x *ProjectGrantQuery) GetRoleKeyQuery() *GrantRoleKeyQuery {
	if x, ok := x.GetQuery().(*ProjectGrantQuery_RoleKeyQuery); ok {
		return x.RoleKeyQuery
	}
	return nil
}

type isProjectGrantQuery_Query interface {
	isProjectGrantQuery_Query()
}

type ProjectGrantQuery_ProjectNameQuery struct {
	ProjectNameQuery *GrantProjectNameQuery `protobuf:"bytes,1,opt,name=project_name_query,json=projectNameQuery,proto3,oneof"`
}

type ProjectGrantQuery_RoleKeyQuery struct {
	RoleKeyQuery *GrantRoleKeyQuery `protobuf:"bytes,2,opt,name=role_key_query,json=roleKeyQuery,proto3,oneof"`
}

func (*ProjectGrantQuery_ProjectNameQuery) isProjectGrantQuery_Query() {}

func (*ProjectGrantQuery_RoleKeyQuery) isProjectGrantQuery_Query() {}

type AllProjectGrantQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*AllProjectGrantQuery_ProjectNameQuery
	//	*AllProjectGrantQuery_RoleKeyQuery
	//	*AllProjectGrantQuery_ProjectIdQuery
	//	*AllProjectGrantQuery_GrantedOrgIdQuery
	Query isAllProjectGrantQuery_Query `protobuf_oneof:"query"`
}

func (x *AllProjectGrantQuery) Reset() {
	*x = AllProjectGrantQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllProjectGrantQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllProjectGrantQuery) ProtoMessage() {}

func (x *AllProjectGrantQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllProjectGrantQuery.ProtoReflect.Descriptor instead.
func (*AllProjectGrantQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_project_proto_rawDescGZIP(), []int{10}
}

func (m *AllProjectGrantQuery) GetQuery() isAllProjectGrantQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *AllProjectGrantQuery) GetProjectNameQuery() *GrantProjectNameQuery {
	if x, ok := x.GetQuery().(*AllProjectGrantQuery_ProjectNameQuery); ok {
		return x.ProjectNameQuery
	}
	return nil
}

func (x *AllProjectGrantQuery) GetRoleKeyQuery() *GrantRoleKeyQuery {
	if x, ok := x.GetQuery().(*AllProjectGrantQuery_RoleKeyQuery); ok {
		return x.RoleKeyQuery
	}
	return nil
}

func (x *AllProjectGrantQuery) GetProjectIdQuery() *ProjectIDQuery {
	if x, ok := x.GetQuery().(*AllProjectGrantQuery_ProjectIdQuery); ok {
		return x.ProjectIdQuery
	}
	return nil
}

func (x *AllProjectGrantQuery) GetGrantedOrgIdQuery() *GrantedOrgIDQuery {
	if x, ok := x.GetQuery().(*AllProjectGrantQuery_GrantedOrgIdQuery); ok {
		return x.GrantedOrgIdQuery
	}
	return nil
}

type isAllProjectGrantQuery_Query interface {
	isAllProjectGrantQuery_Query()
}

type AllProjectGrantQuery_ProjectNameQuery struct {
	ProjectNameQuery *GrantProjectNameQuery `protobuf:"bytes,1,opt,name=project_name_query,json=projectNameQuery,proto3,oneof"`
}

type AllProjectGrantQuery_RoleKeyQuery struct {
	RoleKeyQuery *GrantRoleKeyQuery `protobuf:"bytes,2,opt,name=role_key_query,json=roleKeyQuery,proto3,oneof"`
}

type AllProjectGrantQuery_ProjectIdQuery struct {
	ProjectIdQuery *ProjectIDQuery `protobuf:"bytes,3,opt,name=project_id_query,json=projectIdQuery,proto3,oneof"`
}

type AllProjectGrantQuery_GrantedOrgIdQuery struct {
	GrantedOrgIdQuery *GrantedOrgIDQuery `protobuf:"bytes,4,opt,name=granted_org_id_query,json=grantedOrgIdQuery,proto3,oneof"`
}

func (*AllProjectGrantQuery_ProjectNameQuery) isAllProjectGrantQuery_Query() {}

func (*AllProjectGrantQuery_RoleKeyQuery) isAllProjectGrantQuery_Query() {}

func (*AllProjectGrantQuery_ProjectIdQuery) isAllProjectGrantQuery_Query() {}

func (*AllProjectGrantQuery_GrantedOrgIdQuery) isAllProjectGrantQuery_Query() {}

type GrantProjectNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Method object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *GrantProjectNameQuery) Reset() {
	*x = GrantProjectNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantProjectNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantProjectNameQuery) ProtoMessage() {}

func (x *GrantProjectNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantProjectNameQuery.ProtoReflect.Descriptor instead.
func (*GrantProjectNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_project_proto_rawDescGZIP(), []int{11}
}

func (x *GrantProjectNameQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GrantProjectNameQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type GrantRoleKeyQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleKey string                 `protobuf:"bytes,1,opt,name=role_key,json=roleKey,proto3" json:"role_key,omitempty"`
	Method  object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *GrantRoleKeyQuery) Reset() {
	*x = GrantRoleKeyQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantRoleKeyQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantRoleKeyQuery) ProtoMessage() {}

func (x *GrantRoleKeyQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantRoleKeyQuery.ProtoReflect.Descriptor instead.
func (*GrantRoleKeyQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_project_proto_rawDescGZIP(), []int{12}
}

func (x *GrantRoleKeyQuery) GetRoleKey() string {
	if x != nil {
		return x.RoleKey
	}
	return ""
}

func (x *GrantRoleKeyQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type ProjectIDQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *ProjectIDQuery) Reset() {
	*x = ProjectIDQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectIDQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectIDQuery) ProtoMessage() {}

func (x *ProjectIDQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectIDQuery.ProtoReflect.Descriptor instead.
func (*ProjectIDQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_project_proto_rawDescGZIP(), []int{13}
}

func (x *ProjectIDQuery) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type GrantedOrgIDQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantedOrgId string `protobuf:"bytes,1,opt,name=granted_org_id,json=grantedOrgId,proto3" json:"granted_org_id,omitempty"`
}

func (x *GrantedOrgIDQuery) Reset() {
	*x = GrantedOrgIDQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantedOrgIDQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantedOrgIDQuery) ProtoMessage() {}

func (x *GrantedOrgIDQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantedOrgIDQuery.ProtoReflect.Descriptor instead.
func (*GrantedOrgIDQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_project_proto_rawDescGZIP(), []int{14}
}

func (x *GrantedOrgIDQuery) GetGrantedOrgId() string {
	if x != nil {
		return x.GrantedOrgId
	}
	return ""
}

var File_zitadel_project_proto protoreflect.FileDescriptor

var file_zitadel_project_proto_rawDesc = []byte{
	0x0a, 0x15, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x03, 0x0a, 0x07, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30,
	0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x4a, 0x0b, 0x22, 0x4d, 0x79, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x21, 0x92, 0x41,
	0x1e, 0x32, 0x1c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x64, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x97, 0x05, 0x0a,
	0x0e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x33, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32,
	0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x07, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41,
	0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34,
	0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x4a, 0x12, 0x5b, 0x22, 0x72, 0x6f, 0x6c, 0x65,
	0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x22, 0x5d, 0x52, 0x0f, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x64, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36,
	0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34,
	0x22, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45,
	0x4c, 0x22, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x42, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13,
	0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33,
	0x33, 0x34, 0x22, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x22, 0x52,
	0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x70,
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x0c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xac,
	0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x16, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c,
	0x22, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x6c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92, 0x41,
	0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
	0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x64, 0x0a,
	0x19, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x0e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30,
	0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0xc8, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x22, 0xbe, 0x01, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x4a, 0x10,
	0x22, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x22,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0x92, 0x41, 0x0d, 0x4a, 0x0b, 0x22, 0x53, 0x75, 0x70, 0x65, 0x72, 0x20, 0x6d, 0x61,
	0x6e, 0x22, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x22, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0xb4, 0x01, 0x0a, 0x09, 0x52, 0x6f, 0x6c, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x3f, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x58, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x10, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0c, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xad, 0x01, 0x0a, 0x0c,
	0x52, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x12, 0x4a, 0x10,
	0x22, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x22,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x6c, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92, 0x41, 0x2c, 0x32,
	0x2a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74,
	0x65, 0x78, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x14,
	0x52, 0x6f, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x09, 0x4a,
	0x07, 0x22, 0x53, 0x55, 0x50, 0x45, 0x52, 0x22, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92, 0x41, 0x2c, 0x32,
	0x2a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74,
	0x65, 0x78, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x11,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x59, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x0e,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x72,
	0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0c, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xf8, 0x02, 0x0a, 0x14, 0x41, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x59, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4d, 0x0a,
	0x0e, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c,
	0x72, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x58, 0x0a, 0x14,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x49,
	0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x03, 0xf8, 0x42, 0x01, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41,
	0x0b, 0x4a, 0x09, 0x22, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x22, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0xc8, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x65, 0x78, 0x74,
	0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x11, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x38,
	0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0x92, 0x41, 0x12, 0x4a, 0x10, 0x22, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x22, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52,
	0x07, 0x72, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x6c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x65,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69,
	0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x51, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34,
	0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x11, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x46,
	0x0a, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39,
	0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x64, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x2a, 0x63, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a, 0xcb, 0x01, 0x0a, 0x16,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x42, 0x0a, 0x3e, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x4e, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x10, 0x01, 0x12, 0x43, 0x0a, 0x3f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x02, 0x2a, 0x7a, 0x0a, 0x11, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x47,
	0x52, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x47,
	0x52, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x02, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_project_proto_rawDescOnce sync.Once
	file_zitadel_project_proto_rawDescData = file_zitadel_project_proto_rawDesc
)

func file_zitadel_project_proto_rawDescGZIP() []byte {
	file_zitadel_project_proto_rawDescOnce.Do(func() {
		file_zitadel_project_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_project_proto_rawDescData)
	})
	return file_zitadel_project_proto_rawDescData
}

var file_zitadel_project_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_zitadel_project_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_zitadel_project_proto_goTypes = []interface{}{
	(ProjectState)(0),                 // 0: zitadel.project.v1.ProjectState
	(PrivateLabelingSetting)(0),       // 1: zitadel.project.v1.PrivateLabelingSetting
	(ProjectGrantState)(0),            // 2: zitadel.project.v1.ProjectGrantState
	(*Project)(nil),                   // 3: zitadel.project.v1.Project
	(*GrantedProject)(nil),            // 4: zitadel.project.v1.GrantedProject
	(*ProjectQuery)(nil),              // 5: zitadel.project.v1.ProjectQuery
	(*ProjectNameQuery)(nil),          // 6: zitadel.project.v1.ProjectNameQuery
	(*ProjectResourceOwnerQuery)(nil), // 7: zitadel.project.v1.ProjectResourceOwnerQuery
	(*Role)(nil),                      // 8: zitadel.project.v1.Role
	(*RoleQuery)(nil),                 // 9: zitadel.project.v1.RoleQuery
	(*RoleKeyQuery)(nil),              // 10: zitadel.project.v1.RoleKeyQuery
	(*RoleDisplayNameQuery)(nil),      // 11: zitadel.project.v1.RoleDisplayNameQuery
	(*ProjectGrantQuery)(nil),         // 12: zitadel.project.v1.ProjectGrantQuery
	(*AllProjectGrantQuery)(nil),      // 13: zitadel.project.v1.AllProjectGrantQuery
	(*GrantProjectNameQuery)(nil),     // 14: zitadel.project.v1.GrantProjectNameQuery
	(*GrantRoleKeyQuery)(nil),         // 15: zitadel.project.v1.GrantRoleKeyQuery
	(*ProjectIDQuery)(nil),            // 16: zitadel.project.v1.ProjectIDQuery
	(*GrantedOrgIDQuery)(nil),         // 17: zitadel.project.v1.GrantedOrgIDQuery
	(*object.ObjectDetails)(nil),      // 18: zitadel.v1.ObjectDetails
	(object.TextQueryMethod)(0),       // 19: zitadel.v1.TextQueryMethod
}
var file_zitadel_project_proto_depIdxs = []int32{
	18, // 0: zitadel.project.v1.Project.details:type_name -> zitadel.v1.ObjectDetails
	0,  // 1: zitadel.project.v1.Project.state:type_name -> zitadel.project.v1.ProjectState
	1,  // 2: zitadel.project.v1.Project.private_labeling_setting:type_name -> zitadel.project.v1.PrivateLabelingSetting
	2,  // 3: zitadel.project.v1.GrantedProject.state:type_name -> zitadel.project.v1.ProjectGrantState
	18, // 4: zitadel.project.v1.GrantedProject.details:type_name -> zitadel.v1.ObjectDetails
	6,  // 5: zitadel.project.v1.ProjectQuery.name_query:type_name -> zitadel.project.v1.ProjectNameQuery
	7,  // 6: zitadel.project.v1.ProjectQuery.project_resource_owner_query:type_name -> zitadel.project.v1.ProjectResourceOwnerQuery
	19, // 7: zitadel.project.v1.ProjectNameQuery.method:type_name -> zitadel.v1.TextQueryMethod
	18, // 8: zitadel.project.v1.Role.details:type_name -> zitadel.v1.ObjectDetails
	10, // 9: zitadel.project.v1.RoleQuery.key_query:type_name -> zitadel.project.v1.RoleKeyQuery
	11, // 10: zitadel.project.v1.RoleQuery.display_name_query:type_name -> zitadel.project.v1.RoleDisplayNameQuery
	19, // 11: zitadel.project.v1.RoleKeyQuery.method:type_name -> zitadel.v1.TextQueryMethod
	19, // 12: zitadel.project.v1.RoleDisplayNameQuery.method:type_name -> zitadel.v1.TextQueryMethod
	14, // 13: zitadel.project.v1.ProjectGrantQuery.project_name_query:type_name -> zitadel.project.v1.GrantProjectNameQuery
	15, // 14: zitadel.project.v1.ProjectGrantQuery.role_key_query:type_name -> zitadel.project.v1.GrantRoleKeyQuery
	14, // 15: zitadel.project.v1.AllProjectGrantQuery.project_name_query:type_name -> zitadel.project.v1.GrantProjectNameQuery
	15, // 16: zitadel.project.v1.AllProjectGrantQuery.role_key_query:type_name -> zitadel.project.v1.GrantRoleKeyQuery
	16, // 17: zitadel.project.v1.AllProjectGrantQuery.project_id_query:type_name -> zitadel.project.v1.ProjectIDQuery
	17, // 18: zitadel.project.v1.AllProjectGrantQuery.granted_org_id_query:type_name -> zitadel.project.v1.GrantedOrgIDQuery
	19, // 19: zitadel.project.v1.GrantProjectNameQuery.method:type_name -> zitadel.v1.TextQueryMethod
	19, // 20: zitadel.project.v1.GrantRoleKeyQuery.method:type_name -> zitadel.v1.TextQueryMethod
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_zitadel_project_proto_init() }
func file_zitadel_project_proto_init() {
	if File_zitadel_project_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zitadel_project_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantedProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectResourceOwnerQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleKeyQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleDisplayNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectGrantQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllProjectGrantQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantProjectNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantRoleKeyQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectIDQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantedOrgIDQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_project_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ProjectQuery_NameQuery)(nil),
		(*ProjectQuery_ProjectResourceOwnerQuery)(nil),
	}
	file_zitadel_project_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*RoleQuery_KeyQuery)(nil),
		(*RoleQuery_DisplayNameQuery)(nil),
	}
	file_zitadel_project_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ProjectGrantQuery_ProjectNameQuery)(nil),
		(*ProjectGrantQuery_RoleKeyQuery)(nil),
	}
	file_zitadel_project_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*AllProjectGrantQuery_ProjectNameQuery)(nil),
		(*AllProjectGrantQuery_RoleKeyQuery)(nil),
		(*AllProjectGrantQuery_ProjectIdQuery)(nil),
		(*AllProjectGrantQuery_GrantedOrgIdQuery)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_project_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_project_proto_goTypes,
		DependencyIndexes: file_zitadel_project_proto_depIdxs,
		EnumInfos:         file_zitadel_project_proto_enumTypes,
		MessageInfos:      file_zitadel_project_proto_msgTypes,
	}.Build()
	File_zitadel_project_proto = out.File
	file_zitadel_project_proto_rawDesc = nil
	file_zitadel_project_proto_goTypes = nil
	file_zitadel_project_proto_depIdxs = nil
}
