// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/project/v2beta/query.proto

package project

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	v2beta "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/filter/v2beta"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProjectGrantState int32

const (
	ProjectGrantState_PROJECT_GRANT_STATE_UNSPECIFIED ProjectGrantState = 0
	ProjectGrantState_PROJECT_GRANT_STATE_ACTIVE      ProjectGrantState = 1
	ProjectGrantState_PROJECT_GRANT_STATE_INACTIVE    ProjectGrantState = 2
)

// Enum value maps for ProjectGrantState.
var (
	ProjectGrantState_name = map[int32]string{
		0: "PROJECT_GRANT_STATE_UNSPECIFIED",
		1: "PROJECT_GRANT_STATE_ACTIVE",
		2: "PROJECT_GRANT_STATE_INACTIVE",
	}
	ProjectGrantState_value = map[string]int32{
		"PROJECT_GRANT_STATE_UNSPECIFIED": 0,
		"PROJECT_GRANT_STATE_ACTIVE":      1,
		"PROJECT_GRANT_STATE_INACTIVE":    2,
	}
)

func (x ProjectGrantState) Enum() *ProjectGrantState {
	p := new(ProjectGrantState)
	*p = x
	return p
}

func (x ProjectGrantState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectGrantState) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_project_v2beta_query_proto_enumTypes[0].Descriptor()
}

func (ProjectGrantState) Type() protoreflect.EnumType {
	return &file_zitadel_project_v2beta_query_proto_enumTypes[0]
}

func (x ProjectGrantState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectGrantState.Descriptor instead.
func (ProjectGrantState) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_query_proto_rawDescGZIP(), []int{0}
}

type ProjectState int32

const (
	ProjectState_PROJECT_STATE_UNSPECIFIED ProjectState = 0
	ProjectState_PROJECT_STATE_ACTIVE      ProjectState = 1
	ProjectState_PROJECT_STATE_INACTIVE    ProjectState = 2
)

// Enum value maps for ProjectState.
var (
	ProjectState_name = map[int32]string{
		0: "PROJECT_STATE_UNSPECIFIED",
		1: "PROJECT_STATE_ACTIVE",
		2: "PROJECT_STATE_INACTIVE",
	}
	ProjectState_value = map[string]int32{
		"PROJECT_STATE_UNSPECIFIED": 0,
		"PROJECT_STATE_ACTIVE":      1,
		"PROJECT_STATE_INACTIVE":    2,
	}
)

func (x ProjectState) Enum() *ProjectState {
	p := new(ProjectState)
	*p = x
	return p
}

func (x ProjectState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectState) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_project_v2beta_query_proto_enumTypes[1].Descriptor()
}

func (ProjectState) Type() protoreflect.EnumType {
	return &file_zitadel_project_v2beta_query_proto_enumTypes[1]
}

func (x ProjectState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectState.Descriptor instead.
func (ProjectState) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_query_proto_rawDescGZIP(), []int{1}
}

type GrantedProjectState int32

const (
	GrantedProjectState_GRANTED_PROJECT_STATE_UNSPECIFIED GrantedProjectState = 0
	GrantedProjectState_GRANTED_PROJECT_STATE_ACTIVE      GrantedProjectState = 1
	GrantedProjectState_GRANTED_PROJECT_STATE_INACTIVE    GrantedProjectState = 2
)

// Enum value maps for GrantedProjectState.
var (
	GrantedProjectState_name = map[int32]string{
		0: "GRANTED_PROJECT_STATE_UNSPECIFIED",
		1: "GRANTED_PROJECT_STATE_ACTIVE",
		2: "GRANTED_PROJECT_STATE_INACTIVE",
	}
	GrantedProjectState_value = map[string]int32{
		"GRANTED_PROJECT_STATE_UNSPECIFIED": 0,
		"GRANTED_PROJECT_STATE_ACTIVE":      1,
		"GRANTED_PROJECT_STATE_INACTIVE":    2,
	}
)

func (x GrantedProjectState) Enum() *GrantedProjectState {
	p := new(GrantedProjectState)
	*p = x
	return p
}

func (x GrantedProjectState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrantedProjectState) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_project_v2beta_query_proto_enumTypes[2].Descriptor()
}

func (GrantedProjectState) Type() protoreflect.EnumType {
	return &file_zitadel_project_v2beta_query_proto_enumTypes[2]
}

func (x GrantedProjectState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrantedProjectState.Descriptor instead.
func (GrantedProjectState) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_query_proto_rawDescGZIP(), []int{2}
}

type PrivateLabelingSetting int32

const (
	PrivateLabelingSetting_PRIVATE_LABELING_SETTING_UNSPECIFIED                            PrivateLabelingSetting = 0
	PrivateLabelingSetting_PRIVATE_LABELING_SETTING_ENFORCE_PROJECT_RESOURCE_OWNER_POLICY  PrivateLabelingSetting = 1
	PrivateLabelingSetting_PRIVATE_LABELING_SETTING_ALLOW_LOGIN_USER_RESOURCE_OWNER_POLICY PrivateLabelingSetting = 2
)

// Enum value maps for PrivateLabelingSetting.
var (
	PrivateLabelingSetting_name = map[int32]string{
		0: "PRIVATE_LABELING_SETTING_UNSPECIFIED",
		1: "PRIVATE_LABELING_SETTING_ENFORCE_PROJECT_RESOURCE_OWNER_POLICY",
		2: "PRIVATE_LABELING_SETTING_ALLOW_LOGIN_USER_RESOURCE_OWNER_POLICY",
	}
	PrivateLabelingSetting_value = map[string]int32{
		"PRIVATE_LABELING_SETTING_UNSPECIFIED":                            0,
		"PRIVATE_LABELING_SETTING_ENFORCE_PROJECT_RESOURCE_OWNER_POLICY":  1,
		"PRIVATE_LABELING_SETTING_ALLOW_LOGIN_USER_RESOURCE_OWNER_POLICY": 2,
	}
)

func (x PrivateLabelingSetting) Enum() *PrivateLabelingSetting {
	p := new(PrivateLabelingSetting)
	*p = x
	return p
}

func (x PrivateLabelingSetting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrivateLabelingSetting) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_project_v2beta_query_proto_enumTypes[3].Descriptor()
}

func (PrivateLabelingSetting) Type() protoreflect.EnumType {
	return &file_zitadel_project_v2beta_query_proto_enumTypes[3]
}

func (x PrivateLabelingSetting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrivateLabelingSetting.Descriptor instead.
func (PrivateLabelingSetting) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_query_proto_rawDescGZIP(), []int{3}
}

type ProjectFieldName int32

const (
	ProjectFieldName_PROJECT_FIELD_NAME_UNSPECIFIED   ProjectFieldName = 0
	ProjectFieldName_PROJECT_FIELD_NAME_ID            ProjectFieldName = 1
	ProjectFieldName_PROJECT_FIELD_NAME_CREATION_DATE ProjectFieldName = 2
	ProjectFieldName_PROJECT_FIELD_NAME_CHANGE_DATE   ProjectFieldName = 3
	ProjectFieldName_PROJECT_FIELD_NAME_NAME          ProjectFieldName = 4
)

// Enum value maps for ProjectFieldName.
var (
	ProjectFieldName_name = map[int32]string{
		0: "PROJECT_FIELD_NAME_UNSPECIFIED",
		1: "PROJECT_FIELD_NAME_ID",
		2: "PROJECT_FIELD_NAME_CREATION_DATE",
		3: "PROJECT_FIELD_NAME_CHANGE_DATE",
		4: "PROJECT_FIELD_NAME_NAME",
	}
	ProjectFieldName_value = map[string]int32{
		"PROJECT_FIELD_NAME_UNSPECIFIED":   0,
		"PROJECT_FIELD_NAME_ID":            1,
		"PROJECT_FIELD_NAME_CREATION_DATE": 2,
		"PROJECT_FIELD_NAME_CHANGE_DATE":   3,
		"PROJECT_FIELD_NAME_NAME":          4,
	}
)

func (x ProjectFieldName) Enum() *ProjectFieldName {
	p := new(ProjectFieldName)
	*p = x
	return p
}

func (x ProjectFieldName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectFieldName) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_project_v2beta_query_proto_enumTypes[4].Descriptor()
}

func (ProjectFieldName) Type() protoreflect.EnumType {
	return &file_zitadel_project_v2beta_query_proto_enumTypes[4]
}

func (x ProjectFieldName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectFieldName.Descriptor instead.
func (ProjectFieldName) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_query_proto_rawDescGZIP(), []int{4}
}

type ProjectGrantFieldName int32

const (
	ProjectGrantFieldName_PROJECT_GRANT_FIELD_NAME_UNSPECIFIED   ProjectGrantFieldName = 0
	ProjectGrantFieldName_PROJECT_GRANT_FIELD_NAME_PROJECT_ID    ProjectGrantFieldName = 1
	ProjectGrantFieldName_PROJECT_GRANT_FIELD_NAME_CREATION_DATE ProjectGrantFieldName = 2
	ProjectGrantFieldName_PROJECT_GRANT_FIELD_NAME_CHANGE_DATE   ProjectGrantFieldName = 3
)

// Enum value maps for ProjectGrantFieldName.
var (
	ProjectGrantFieldName_name = map[int32]string{
		0: "PROJECT_GRANT_FIELD_NAME_UNSPECIFIED",
		1: "PROJECT_GRANT_FIELD_NAME_PROJECT_ID",
		2: "PROJECT_GRANT_FIELD_NAME_CREATION_DATE",
		3: "PROJECT_GRANT_FIELD_NAME_CHANGE_DATE",
	}
	ProjectGrantFieldName_value = map[string]int32{
		"PROJECT_GRANT_FIELD_NAME_UNSPECIFIED":   0,
		"PROJECT_GRANT_FIELD_NAME_PROJECT_ID":    1,
		"PROJECT_GRANT_FIELD_NAME_CREATION_DATE": 2,
		"PROJECT_GRANT_FIELD_NAME_CHANGE_DATE":   3,
	}
)

func (x ProjectGrantFieldName) Enum() *ProjectGrantFieldName {
	p := new(ProjectGrantFieldName)
	*p = x
	return p
}

func (x ProjectGrantFieldName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectGrantFieldName) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_project_v2beta_query_proto_enumTypes[5].Descriptor()
}

func (ProjectGrantFieldName) Type() protoreflect.EnumType {
	return &file_zitadel_project_v2beta_query_proto_enumTypes[5]
}

func (x ProjectGrantFieldName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectGrantFieldName.Descriptor instead.
func (ProjectGrantFieldName) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_query_proto_rawDescGZIP(), []int{5}
}

type ProjectRoleFieldName int32

const (
	ProjectRoleFieldName_PROJECT_ROLE_FIELD_NAME_UNSPECIFIED   ProjectRoleFieldName = 0
	ProjectRoleFieldName_PROJECT_ROLE_FIELD_NAME_KEY           ProjectRoleFieldName = 1
	ProjectRoleFieldName_PROJECT_ROLE_FIELD_NAME_CREATION_DATE ProjectRoleFieldName = 2
	ProjectRoleFieldName_PROJECT_ROLE_FIELD_NAME_CHANGE_DATE   ProjectRoleFieldName = 3
)

// Enum value maps for ProjectRoleFieldName.
var (
	ProjectRoleFieldName_name = map[int32]string{
		0: "PROJECT_ROLE_FIELD_NAME_UNSPECIFIED",
		1: "PROJECT_ROLE_FIELD_NAME_KEY",
		2: "PROJECT_ROLE_FIELD_NAME_CREATION_DATE",
		3: "PROJECT_ROLE_FIELD_NAME_CHANGE_DATE",
	}
	ProjectRoleFieldName_value = map[string]int32{
		"PROJECT_ROLE_FIELD_NAME_UNSPECIFIED":   0,
		"PROJECT_ROLE_FIELD_NAME_KEY":           1,
		"PROJECT_ROLE_FIELD_NAME_CREATION_DATE": 2,
		"PROJECT_ROLE_FIELD_NAME_CHANGE_DATE":   3,
	}
)

func (x ProjectRoleFieldName) Enum() *ProjectRoleFieldName {
	p := new(ProjectRoleFieldName)
	*p = x
	return p
}

func (x ProjectRoleFieldName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectRoleFieldName) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_project_v2beta_query_proto_enumTypes[6].Descriptor()
}

func (ProjectRoleFieldName) Type() protoreflect.EnumType {
	return &file_zitadel_project_v2beta_query_proto_enumTypes[6]
}

func (x ProjectRoleFieldName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectRoleFieldName.Descriptor instead.
func (ProjectRoleFieldName) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_query_proto_rawDescGZIP(), []int{6}
}

type ProjectGrant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the organization which granted the project to the granted_organization_id.
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// The timestamp of the granted project creation.
	CreationDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	// The timestamp of the last change to the granted project (e.g. creation, activation, deactivation).
	ChangeDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=change_date,json=changeDate,proto3" json:"change_date,omitempty"`
	// The ID of the organization the project is granted to.
	GrantedOrganizationId string `protobuf:"bytes,5,opt,name=granted_organization_id,json=grantedOrganizationId,proto3" json:"granted_organization_id,omitempty"`
	// The name of the organization the project is granted to.
	GrantedOrganizationName string `protobuf:"bytes,6,opt,name=granted_organization_name,json=grantedOrganizationName,proto3" json:"granted_organization_name,omitempty"`
	// The roles of the granted project.
	GrantedRoleKeys []string `protobuf:"bytes,7,rep,name=granted_role_keys,json=grantedRoleKeys,proto3" json:"granted_role_keys,omitempty"`
	// The ID of the granted project.
	ProjectId string `protobuf:"bytes,8,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The name of the granted project.
	ProjectName string `protobuf:"bytes,9,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	// Describes the current state of the granted project.
	State ProjectGrantState `protobuf:"varint,10,opt,name=state,proto3,enum=zitadel.project.v2beta.ProjectGrantState" json:"state,omitempty"`
}

func (x *ProjectGrant) Reset() {
	*x = ProjectGrant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectGrant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectGrant) ProtoMessage() {}

func (x *ProjectGrant) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectGrant.ProtoReflect.Descriptor instead.
func (*ProjectGrant) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_query_proto_rawDescGZIP(), []int{0}
}

func (x *ProjectGrant) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ProjectGrant) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *ProjectGrant) GetChangeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeDate
	}
	return nil
}

func (x *ProjectGrant) GetGrantedOrganizationId() string {
	if x != nil {
		return x.GrantedOrganizationId
	}
	return ""
}

func (x *ProjectGrant) GetGrantedOrganizationName() string {
	if x != nil {
		return x.GrantedOrganizationName
	}
	return ""
}

func (x *ProjectGrant) GetGrantedRoleKeys() []string {
	if x != nil {
		return x.GrantedRoleKeys
	}
	return nil
}

func (x *ProjectGrant) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ProjectGrant) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ProjectGrant) GetState() ProjectGrantState {
	if x != nil {
		return x.State
	}
	return ProjectGrantState_PROJECT_GRANT_STATE_UNSPECIFIED
}

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the project.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The unique identifier of the organization the project belongs to.
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// The timestamp of the project creation.
	CreationDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	// The timestamp of the last change to the project (e.g. creation, activation, deactivation).
	ChangeDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=change_date,json=changeDate,proto3" json:"change_date,omitempty"`
	// The name of the project.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Describes the current state of the project.
	State ProjectState `protobuf:"varint,6,opt,name=state,proto3,enum=zitadel.project.v2beta.ProjectState" json:"state,omitempty"`
	// Describes if the roles of the user should be added to the token.
	ProjectRoleAssertion bool `protobuf:"varint,7,opt,name=project_role_assertion,json=projectRoleAssertion,proto3" json:"project_role_assertion,omitempty"`
	// When enabled ZITADEL will check if a user has an authorization to use this project assigned when login into an application of this project.
	AuthorizationRequired bool `protobuf:"varint,8,opt,name=authorization_required,json=authorizationRequired,proto3" json:"authorization_required,omitempty"`
	// When enabled ZITADEL will check if the organization of the user, that is trying to log in, has access to this project (either owns the project or is granted).
	ProjectAccessRequired bool `protobuf:"varint,9,opt,name=project_access_required,json=projectAccessRequired,proto3" json:"project_access_required,omitempty"`
	// Defines from where the private labeling should be triggered.
	PrivateLabelingSetting PrivateLabelingSetting `protobuf:"varint,10,opt,name=private_labeling_setting,json=privateLabelingSetting,proto3,enum=zitadel.project.v2beta.PrivateLabelingSetting" json:"private_labeling_setting,omitempty"`
	// The ID of the organization the project is granted to.
	GrantedOrganizationId *string `protobuf:"bytes,12,opt,name=granted_organization_id,json=grantedOrganizationId,proto3,oneof" json:"granted_organization_id,omitempty"`
	// The name of the organization the project is granted to.
	GrantedOrganizationName *string `protobuf:"bytes,13,opt,name=granted_organization_name,json=grantedOrganizationName,proto3,oneof" json:"granted_organization_name,omitempty"`
	// Describes the current state of the granted project.
	GrantedState GrantedProjectState `protobuf:"varint,14,opt,name=granted_state,json=grantedState,proto3,enum=zitadel.project.v2beta.GrantedProjectState" json:"granted_state,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_query_proto_rawDescGZIP(), []int{1}
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *Project) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *Project) GetChangeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeDate
	}
	return nil
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetState() ProjectState {
	if x != nil {
		return x.State
	}
	return ProjectState_PROJECT_STATE_UNSPECIFIED
}

func (x *Project) GetProjectRoleAssertion() bool {
	if x != nil {
		return x.ProjectRoleAssertion
	}
	return false
}

func (x *Project) GetAuthorizationRequired() bool {
	if x != nil {
		return x.AuthorizationRequired
	}
	return false
}

func (x *Project) GetProjectAccessRequired() bool {
	if x != nil {
		return x.ProjectAccessRequired
	}
	return false
}

func (x *Project) GetPrivateLabelingSetting() PrivateLabelingSetting {
	if x != nil {
		return x.PrivateLabelingSetting
	}
	return PrivateLabelingSetting_PRIVATE_LABELING_SETTING_UNSPECIFIED
}

func (x *Project) GetGrantedOrganizationId() string {
	if x != nil && x.GrantedOrganizationId != nil {
		return *x.GrantedOrganizationId
	}
	return ""
}

func (x *Project) GetGrantedOrganizationName() string {
	if x != nil && x.GrantedOrganizationName != nil {
		return *x.GrantedOrganizationName
	}
	return ""
}

func (x *Project) GetGrantedState() GrantedProjectState {
	if x != nil {
		return x.GrantedState
	}
	return GrantedProjectState_GRANTED_PROJECT_STATE_UNSPECIFIED
}

type ProjectSearchFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*ProjectSearchFilter_ProjectNameFilter
	//	*ProjectSearchFilter_InProjectIdsFilter
	//	*ProjectSearchFilter_ProjectResourceOwnerFilter
	//	*ProjectSearchFilter_ProjectGrantResourceOwnerFilter
	//	*ProjectSearchFilter_ProjectOrganizationIdFilter
	Filter isProjectSearchFilter_Filter `protobuf_oneof:"filter"`
}

func (x *ProjectSearchFilter) Reset() {
	*x = ProjectSearchFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectSearchFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectSearchFilter) ProtoMessage() {}

func (x *ProjectSearchFilter) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectSearchFilter.ProtoReflect.Descriptor instead.
func (*ProjectSearchFilter) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_query_proto_rawDescGZIP(), []int{2}
}

func (m *ProjectSearchFilter) GetFilter() isProjectSearchFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *ProjectSearchFilter) GetProjectNameFilter() *ProjectNameFilter {
	if x, ok := x.GetFilter().(*ProjectSearchFilter_ProjectNameFilter); ok {
		return x.ProjectNameFilter
	}
	return nil
}

func (x *ProjectSearchFilter) GetInProjectIdsFilter() *v2beta.InIDsFilter {
	if x, ok := x.GetFilter().(*ProjectSearchFilter_InProjectIdsFilter); ok {
		return x.InProjectIdsFilter
	}
	return nil
}

func (x *ProjectSearchFilter) GetProjectResourceOwnerFilter() *v2beta.IDFilter {
	if x, ok := x.GetFilter().(*ProjectSearchFilter_ProjectResourceOwnerFilter); ok {
		return x.ProjectResourceOwnerFilter
	}
	return nil
}

func (x *ProjectSearchFilter) GetProjectGrantResourceOwnerFilter() *v2beta.IDFilter {
	if x, ok := x.GetFilter().(*ProjectSearchFilter_ProjectGrantResourceOwnerFilter); ok {
		return x.ProjectGrantResourceOwnerFilter
	}
	return nil
}

func (x *ProjectSearchFilter) GetProjectOrganizationIdFilter() *v2beta.IDFilter {
	if x, ok := x.GetFilter().(*ProjectSearchFilter_ProjectOrganizationIdFilter); ok {
		return x.ProjectOrganizationIdFilter
	}
	return nil
}

type isProjectSearchFilter_Filter interface {
	isProjectSearchFilter_Filter()
}

type ProjectSearchFilter_ProjectNameFilter struct {
	ProjectNameFilter *ProjectNameFilter `protobuf:"bytes,1,opt,name=project_name_filter,json=projectNameFilter,proto3,oneof"`
}

type ProjectSearchFilter_InProjectIdsFilter struct {
	InProjectIdsFilter *v2beta.InIDsFilter `protobuf:"bytes,2,opt,name=in_project_ids_filter,json=inProjectIdsFilter,proto3,oneof"`
}

type ProjectSearchFilter_ProjectResourceOwnerFilter struct {
	ProjectResourceOwnerFilter *v2beta.IDFilter `protobuf:"bytes,3,opt,name=project_resource_owner_filter,json=projectResourceOwnerFilter,proto3,oneof"`
}

type ProjectSearchFilter_ProjectGrantResourceOwnerFilter struct {
	ProjectGrantResourceOwnerFilter *v2beta.IDFilter `protobuf:"bytes,4,opt,name=project_grant_resource_owner_filter,json=projectGrantResourceOwnerFilter,proto3,oneof"`
}

type ProjectSearchFilter_ProjectOrganizationIdFilter struct {
	ProjectOrganizationIdFilter *v2beta.IDFilter `protobuf:"bytes,5,opt,name=project_organization_id_filter,json=projectOrganizationIdFilter,proto3,oneof"`
}

func (*ProjectSearchFilter_ProjectNameFilter) isProjectSearchFilter_Filter() {}

func (*ProjectSearchFilter_InProjectIdsFilter) isProjectSearchFilter_Filter() {}

func (*ProjectSearchFilter_ProjectResourceOwnerFilter) isProjectSearchFilter_Filter() {}

func (*ProjectSearchFilter_ProjectGrantResourceOwnerFilter) isProjectSearchFilter_Filter() {}

func (*ProjectSearchFilter_ProjectOrganizationIdFilter) isProjectSearchFilter_Filter() {}

type ProjectNameFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines the name of the project to query for.
	ProjectName string `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	// Defines which text comparison method used for the name query.
	Method v2beta.TextFilterMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.filter.v2beta.TextFilterMethod" json:"method,omitempty"`
}

func (x *ProjectNameFilter) Reset() {
	*x = ProjectNameFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectNameFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectNameFilter) ProtoMessage() {}

func (x *ProjectNameFilter) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectNameFilter.ProtoReflect.Descriptor instead.
func (*ProjectNameFilter) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_query_proto_rawDescGZIP(), []int{3}
}

func (x *ProjectNameFilter) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ProjectNameFilter) GetMethod() v2beta.TextFilterMethod {
	if x != nil {
		return x.Method
	}
	return v2beta.TextFilterMethod(0)
}

type ProjectGrantSearchFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*ProjectGrantSearchFilter_ProjectNameFilter
	//	*ProjectGrantSearchFilter_RoleKeyFilter
	//	*ProjectGrantSearchFilter_InProjectIdsFilter
	//	*ProjectGrantSearchFilter_ProjectResourceOwnerFilter
	//	*ProjectGrantSearchFilter_ProjectGrantResourceOwnerFilter
	Filter isProjectGrantSearchFilter_Filter `protobuf_oneof:"filter"`
}

func (x *ProjectGrantSearchFilter) Reset() {
	*x = ProjectGrantSearchFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectGrantSearchFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectGrantSearchFilter) ProtoMessage() {}

func (x *ProjectGrantSearchFilter) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectGrantSearchFilter.ProtoReflect.Descriptor instead.
func (*ProjectGrantSearchFilter) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_query_proto_rawDescGZIP(), []int{4}
}

func (m *ProjectGrantSearchFilter) GetFilter() isProjectGrantSearchFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *ProjectGrantSearchFilter) GetProjectNameFilter() *ProjectNameFilter {
	if x, ok := x.GetFilter().(*ProjectGrantSearchFilter_ProjectNameFilter); ok {
		return x.ProjectNameFilter
	}
	return nil
}

func (x *ProjectGrantSearchFilter) GetRoleKeyFilter() *ProjectRoleKeyFilter {
	if x, ok := x.GetFilter().(*ProjectGrantSearchFilter_RoleKeyFilter); ok {
		return x.RoleKeyFilter
	}
	return nil
}

func (x *ProjectGrantSearchFilter) GetInProjectIdsFilter() *v2beta.InIDsFilter {
	if x, ok := x.GetFilter().(*ProjectGrantSearchFilter_InProjectIdsFilter); ok {
		return x.InProjectIdsFilter
	}
	return nil
}

func (x *ProjectGrantSearchFilter) GetProjectResourceOwnerFilter() *v2beta.IDFilter {
	if x, ok := x.GetFilter().(*ProjectGrantSearchFilter_ProjectResourceOwnerFilter); ok {
		return x.ProjectResourceOwnerFilter
	}
	return nil
}

func (x *ProjectGrantSearchFilter) GetProjectGrantResourceOwnerFilter() *v2beta.IDFilter {
	if x, ok := x.GetFilter().(*ProjectGrantSearchFilter_ProjectGrantResourceOwnerFilter); ok {
		return x.ProjectGrantResourceOwnerFilter
	}
	return nil
}

type isProjectGrantSearchFilter_Filter interface {
	isProjectGrantSearchFilter_Filter()
}

type ProjectGrantSearchFilter_ProjectNameFilter struct {
	ProjectNameFilter *ProjectNameFilter `protobuf:"bytes,1,opt,name=project_name_filter,json=projectNameFilter,proto3,oneof"`
}

type ProjectGrantSearchFilter_RoleKeyFilter struct {
	RoleKeyFilter *ProjectRoleKeyFilter `protobuf:"bytes,2,opt,name=role_key_filter,json=roleKeyFilter,proto3,oneof"`
}

type ProjectGrantSearchFilter_InProjectIdsFilter struct {
	InProjectIdsFilter *v2beta.InIDsFilter `protobuf:"bytes,3,opt,name=in_project_ids_filter,json=inProjectIdsFilter,proto3,oneof"`
}

type ProjectGrantSearchFilter_ProjectResourceOwnerFilter struct {
	ProjectResourceOwnerFilter *v2beta.IDFilter `protobuf:"bytes,4,opt,name=project_resource_owner_filter,json=projectResourceOwnerFilter,proto3,oneof"`
}

type ProjectGrantSearchFilter_ProjectGrantResourceOwnerFilter struct {
	ProjectGrantResourceOwnerFilter *v2beta.IDFilter `protobuf:"bytes,5,opt,name=project_grant_resource_owner_filter,json=projectGrantResourceOwnerFilter,proto3,oneof"`
}

func (*ProjectGrantSearchFilter_ProjectNameFilter) isProjectGrantSearchFilter_Filter() {}

func (*ProjectGrantSearchFilter_RoleKeyFilter) isProjectGrantSearchFilter_Filter() {}

func (*ProjectGrantSearchFilter_InProjectIdsFilter) isProjectGrantSearchFilter_Filter() {}

func (*ProjectGrantSearchFilter_ProjectResourceOwnerFilter) isProjectGrantSearchFilter_Filter() {}

func (*ProjectGrantSearchFilter_ProjectGrantResourceOwnerFilter) isProjectGrantSearchFilter_Filter() {
}

type ProjectRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Key of the project role.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The timestamp of the project role creation.
	CreationDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	// The timestamp of the last change to the project role.
	ChangeDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=change_date,json=changeDate,proto3" json:"change_date,omitempty"`
	// Display name of the project role.
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Group of the project role.
	Group string `protobuf:"bytes,6,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *ProjectRole) Reset() {
	*x = ProjectRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectRole) ProtoMessage() {}

func (x *ProjectRole) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectRole.ProtoReflect.Descriptor instead.
func (*ProjectRole) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_query_proto_rawDescGZIP(), []int{5}
}

func (x *ProjectRole) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ProjectRole) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ProjectRole) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *ProjectRole) GetChangeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeDate
	}
	return nil
}

func (x *ProjectRole) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ProjectRole) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type ProjectRoleSearchFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*ProjectRoleSearchFilter_RoleKeyFilter
	//	*ProjectRoleSearchFilter_DisplayNameFilter
	Filter isProjectRoleSearchFilter_Filter `protobuf_oneof:"filter"`
}

func (x *ProjectRoleSearchFilter) Reset() {
	*x = ProjectRoleSearchFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectRoleSearchFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectRoleSearchFilter) ProtoMessage() {}

func (x *ProjectRoleSearchFilter) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectRoleSearchFilter.ProtoReflect.Descriptor instead.
func (*ProjectRoleSearchFilter) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_query_proto_rawDescGZIP(), []int{6}
}

func (m *ProjectRoleSearchFilter) GetFilter() isProjectRoleSearchFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *ProjectRoleSearchFilter) GetRoleKeyFilter() *ProjectRoleKeyFilter {
	if x, ok := x.GetFilter().(*ProjectRoleSearchFilter_RoleKeyFilter); ok {
		return x.RoleKeyFilter
	}
	return nil
}

func (x *ProjectRoleSearchFilter) GetDisplayNameFilter() *ProjectRoleDisplayNameFilter {
	if x, ok := x.GetFilter().(*ProjectRoleSearchFilter_DisplayNameFilter); ok {
		return x.DisplayNameFilter
	}
	return nil
}

type isProjectRoleSearchFilter_Filter interface {
	isProjectRoleSearchFilter_Filter()
}

type ProjectRoleSearchFilter_RoleKeyFilter struct {
	RoleKeyFilter *ProjectRoleKeyFilter `protobuf:"bytes,1,opt,name=role_key_filter,json=roleKeyFilter,proto3,oneof"`
}

type ProjectRoleSearchFilter_DisplayNameFilter struct {
	DisplayNameFilter *ProjectRoleDisplayNameFilter `protobuf:"bytes,2,opt,name=display_name_filter,json=displayNameFilter,proto3,oneof"`
}

func (*ProjectRoleSearchFilter_RoleKeyFilter) isProjectRoleSearchFilter_Filter() {}

func (*ProjectRoleSearchFilter_DisplayNameFilter) isProjectRoleSearchFilter_Filter() {}

type ProjectRoleKeyFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Defines which text comparison method used for the name query.
	Method v2beta.TextFilterMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.filter.v2beta.TextFilterMethod" json:"method,omitempty"`
}

func (x *ProjectRoleKeyFilter) Reset() {
	*x = ProjectRoleKeyFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectRoleKeyFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectRoleKeyFilter) ProtoMessage() {}

func (x *ProjectRoleKeyFilter) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectRoleKeyFilter.ProtoReflect.Descriptor instead.
func (*ProjectRoleKeyFilter) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_query_proto_rawDescGZIP(), []int{7}
}

func (x *ProjectRoleKeyFilter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ProjectRoleKeyFilter) GetMethod() v2beta.TextFilterMethod {
	if x != nil {
		return x.Method
	}
	return v2beta.TextFilterMethod(0)
}

type ProjectRoleDisplayNameFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Defines which text comparison method used for the name query.
	Method v2beta.TextFilterMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.filter.v2beta.TextFilterMethod" json:"method,omitempty"`
}

func (x *ProjectRoleDisplayNameFilter) Reset() {
	*x = ProjectRoleDisplayNameFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectRoleDisplayNameFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectRoleDisplayNameFilter) ProtoMessage() {}

func (x *ProjectRoleDisplayNameFilter) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectRoleDisplayNameFilter.ProtoReflect.Descriptor instead.
func (*ProjectRoleDisplayNameFilter) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_query_proto_rawDescGZIP(), []int{8}
}

func (x *ProjectRoleDisplayNameFilter) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ProjectRoleDisplayNameFilter) GetMethod() v2beta.TextFilterMethod {
	if x != nil {
		return x.Method
	}
	return v2beta.TextFilterMethod(0)
}

var File_zitadel_project_v2beta_query_proto protoreflect.FileDescriptor

var file_zitadel_project_v2beta_query_proto_rawDesc = []byte{
	0x0a, 0x22, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x05, 0x0a, 0x0c,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36,
	0x32, 0x39, 0x30, 0x31, 0x32, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x60, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x31,
	0x32, 0x2d, 0x31, 0x38, 0x54, 0x30, 0x37, 0x3a, 0x35, 0x30, 0x3a, 0x34, 0x37, 0x2e, 0x34, 0x39,
	0x32, 0x5a, 0x22, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x35, 0x2d, 0x30,
	0x31, 0x2d, 0x32, 0x33, 0x54, 0x31, 0x30, 0x3a, 0x33, 0x34, 0x3a, 0x31, 0x38, 0x2e, 0x30, 0x35,
	0x31, 0x5a, 0x22, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x50, 0x0a, 0x17, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33,
	0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x15, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x54, 0x0a, 0x19, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x53, 0x6f, 0x6d, 0x65,
	0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x17,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x4a, 0x12, 0x5b, 0x22, 0x72, 0x6f, 0x6c, 0x65, 0x2e,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x22, 0x5d, 0x52, 0x0f, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x37, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33,
	0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b,
	0x4a, 0x09, 0x22, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x22, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xb7, 0x08, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32,
	0x39, 0x30, 0x31, 0x32, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x31, 0x32, 0x39, 0x30, 0x36, 0x34, 0x38,
	0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22,
	0x32, 0x30, 0x32, 0x34, 0x2d, 0x31, 0x32, 0x2d, 0x31, 0x38, 0x54, 0x30, 0x37, 0x3a, 0x35, 0x30,
	0x3a, 0x34, 0x37, 0x2e, 0x34, 0x39, 0x32, 0x5a, 0x22, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22,
	0x32, 0x30, 0x32, 0x35, 0x2d, 0x30, 0x31, 0x2d, 0x32, 0x33, 0x54, 0x31, 0x30, 0x3a, 0x33, 0x34,
	0x3a, 0x31, 0x38, 0x2e, 0x30, 0x35, 0x31, 0x5a, 0x22, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x4a, 0x0f, 0x22, 0x69, 0x70, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x5d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x68, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a,
	0x17, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30,
	0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x48, 0x00, 0x52, 0x15, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x19, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x53,
	0x6f, 0x6d, 0x65, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x48, 0x01, 0x52, 0x17, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x7b, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x24, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0c,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x1a, 0x0a, 0x18,
	0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x99, 0x04, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x5b,
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x15, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x49, 0x6e, 0x49, 0x44, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x12, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x49, 0x44, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x1a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x23, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x49, 0x44, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x1f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x1e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x44, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x03, 0xf8,
	0x42, 0x01, 0x22, 0xd1, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0x92, 0x41, 0x14, 0x4a, 0x0f, 0x22, 0x69, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x78, 0xc8, 0x01, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x78, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x65,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69,
	0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x8e, 0x04, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x56, 0x0a, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x6f, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x15, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x49, 0x6e, 0x49, 0x44, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x64, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x49, 0x44, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x1a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x23, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x44, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x1f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x89, 0x03, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36, 0x34, 0x38,
	0x39, 0x34, 0x35, 0x35, 0x22, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92,
	0x41, 0x12, 0x4a, 0x10, 0x22, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x2e,
	0x6d, 0x61, 0x6e, 0x22, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x60, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x31, 0x32, 0x2d, 0x31, 0x38, 0x54, 0x30,
	0x37, 0x3a, 0x35, 0x30, 0x3a, 0x34, 0x37, 0x2e, 0x34, 0x39, 0x32, 0x5a, 0x22, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41,
	0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x35, 0x2d, 0x30, 0x31, 0x2d, 0x32, 0x33, 0x54, 0x31,
	0x30, 0x3a, 0x33, 0x34, 0x3a, 0x31, 0x38, 0x2e, 0x30, 0x35, 0x31, 0x5a, 0x22, 0x52, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0x92, 0x41, 0x0d, 0x4a, 0x0b, 0x22, 0x53, 0x75, 0x70, 0x65, 0x72, 0x20, 0x6d, 0x61, 0x6e,
	0x22, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92,
	0x41, 0x0a, 0x4a, 0x08, 0x22, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x22, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0xe8, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x56, 0x0a, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x6f, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x0d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x92,
	0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x12, 0x4a, 0x10, 0x22, 0x72, 0x6f, 0x6c, 0x65,
	0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x22, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xc8, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x49, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x09, 0x4a,
	0x07, 0x22, 0x53, 0x55, 0x50, 0x45, 0x52, 0x22, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2a, 0x7a, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a,
	0x1f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x47, 0x52,
	0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x47, 0x52,
	0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x2a, 0x63, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49,
	0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a, 0x82, 0x01, 0x0a, 0x13, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x0a, 0x21, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x52, 0x41, 0x4e,
	0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x52,
	0x41, 0x4e, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a, 0xcb,
	0x01, 0x0a, 0x16, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x52, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x42, 0x0a, 0x3e, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x01, 0x12, 0x43, 0x0a, 0x3f, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x57,
	0x4e, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x02, 0x2a, 0xb8, 0x01, 0x0a,
	0x10, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x01,
	0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x2a, 0xc0, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x47, 0x52, 0x41,
	0x4e, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x49, 0x44, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x28, 0x0a, 0x24, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x47, 0x52, 0x41, 0x4e,
	0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x2a, 0xb4, 0x01, 0x0a, 0x14, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x01, 0x12, 0x29, 0x0a,
	0x25, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x03, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x3b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_project_v2beta_query_proto_rawDescOnce sync.Once
	file_zitadel_project_v2beta_query_proto_rawDescData = file_zitadel_project_v2beta_query_proto_rawDesc
)

func file_zitadel_project_v2beta_query_proto_rawDescGZIP() []byte {
	file_zitadel_project_v2beta_query_proto_rawDescOnce.Do(func() {
		file_zitadel_project_v2beta_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_project_v2beta_query_proto_rawDescData)
	})
	return file_zitadel_project_v2beta_query_proto_rawDescData
}

var file_zitadel_project_v2beta_query_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_zitadel_project_v2beta_query_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_zitadel_project_v2beta_query_proto_goTypes = []interface{}{
	(ProjectGrantState)(0),               // 0: zitadel.project.v2beta.ProjectGrantState
	(ProjectState)(0),                    // 1: zitadel.project.v2beta.ProjectState
	(GrantedProjectState)(0),             // 2: zitadel.project.v2beta.GrantedProjectState
	(PrivateLabelingSetting)(0),          // 3: zitadel.project.v2beta.PrivateLabelingSetting
	(ProjectFieldName)(0),                // 4: zitadel.project.v2beta.ProjectFieldName
	(ProjectGrantFieldName)(0),           // 5: zitadel.project.v2beta.ProjectGrantFieldName
	(ProjectRoleFieldName)(0),            // 6: zitadel.project.v2beta.ProjectRoleFieldName
	(*ProjectGrant)(nil),                 // 7: zitadel.project.v2beta.ProjectGrant
	(*Project)(nil),                      // 8: zitadel.project.v2beta.Project
	(*ProjectSearchFilter)(nil),          // 9: zitadel.project.v2beta.ProjectSearchFilter
	(*ProjectNameFilter)(nil),            // 10: zitadel.project.v2beta.ProjectNameFilter
	(*ProjectGrantSearchFilter)(nil),     // 11: zitadel.project.v2beta.ProjectGrantSearchFilter
	(*ProjectRole)(nil),                  // 12: zitadel.project.v2beta.ProjectRole
	(*ProjectRoleSearchFilter)(nil),      // 13: zitadel.project.v2beta.ProjectRoleSearchFilter
	(*ProjectRoleKeyFilter)(nil),         // 14: zitadel.project.v2beta.ProjectRoleKeyFilter
	(*ProjectRoleDisplayNameFilter)(nil), // 15: zitadel.project.v2beta.ProjectRoleDisplayNameFilter
	(*timestamppb.Timestamp)(nil),        // 16: google.protobuf.Timestamp
	(*v2beta.InIDsFilter)(nil),           // 17: zitadel.filter.v2beta.InIDsFilter
	(*v2beta.IDFilter)(nil),              // 18: zitadel.filter.v2beta.IDFilter
	(v2beta.TextFilterMethod)(0),         // 19: zitadel.filter.v2beta.TextFilterMethod
}
var file_zitadel_project_v2beta_query_proto_depIdxs = []int32{
	16, // 0: zitadel.project.v2beta.ProjectGrant.creation_date:type_name -> google.protobuf.Timestamp
	16, // 1: zitadel.project.v2beta.ProjectGrant.change_date:type_name -> google.protobuf.Timestamp
	0,  // 2: zitadel.project.v2beta.ProjectGrant.state:type_name -> zitadel.project.v2beta.ProjectGrantState
	16, // 3: zitadel.project.v2beta.Project.creation_date:type_name -> google.protobuf.Timestamp
	16, // 4: zitadel.project.v2beta.Project.change_date:type_name -> google.protobuf.Timestamp
	1,  // 5: zitadel.project.v2beta.Project.state:type_name -> zitadel.project.v2beta.ProjectState
	3,  // 6: zitadel.project.v2beta.Project.private_labeling_setting:type_name -> zitadel.project.v2beta.PrivateLabelingSetting
	2,  // 7: zitadel.project.v2beta.Project.granted_state:type_name -> zitadel.project.v2beta.GrantedProjectState
	10, // 8: zitadel.project.v2beta.ProjectSearchFilter.project_name_filter:type_name -> zitadel.project.v2beta.ProjectNameFilter
	17, // 9: zitadel.project.v2beta.ProjectSearchFilter.in_project_ids_filter:type_name -> zitadel.filter.v2beta.InIDsFilter
	18, // 10: zitadel.project.v2beta.ProjectSearchFilter.project_resource_owner_filter:type_name -> zitadel.filter.v2beta.IDFilter
	18, // 11: zitadel.project.v2beta.ProjectSearchFilter.project_grant_resource_owner_filter:type_name -> zitadel.filter.v2beta.IDFilter
	18, // 12: zitadel.project.v2beta.ProjectSearchFilter.project_organization_id_filter:type_name -> zitadel.filter.v2beta.IDFilter
	19, // 13: zitadel.project.v2beta.ProjectNameFilter.method:type_name -> zitadel.filter.v2beta.TextFilterMethod
	10, // 14: zitadel.project.v2beta.ProjectGrantSearchFilter.project_name_filter:type_name -> zitadel.project.v2beta.ProjectNameFilter
	14, // 15: zitadel.project.v2beta.ProjectGrantSearchFilter.role_key_filter:type_name -> zitadel.project.v2beta.ProjectRoleKeyFilter
	17, // 16: zitadel.project.v2beta.ProjectGrantSearchFilter.in_project_ids_filter:type_name -> zitadel.filter.v2beta.InIDsFilter
	18, // 17: zitadel.project.v2beta.ProjectGrantSearchFilter.project_resource_owner_filter:type_name -> zitadel.filter.v2beta.IDFilter
	18, // 18: zitadel.project.v2beta.ProjectGrantSearchFilter.project_grant_resource_owner_filter:type_name -> zitadel.filter.v2beta.IDFilter
	16, // 19: zitadel.project.v2beta.ProjectRole.creation_date:type_name -> google.protobuf.Timestamp
	16, // 20: zitadel.project.v2beta.ProjectRole.change_date:type_name -> google.protobuf.Timestamp
	14, // 21: zitadel.project.v2beta.ProjectRoleSearchFilter.role_key_filter:type_name -> zitadel.project.v2beta.ProjectRoleKeyFilter
	15, // 22: zitadel.project.v2beta.ProjectRoleSearchFilter.display_name_filter:type_name -> zitadel.project.v2beta.ProjectRoleDisplayNameFilter
	19, // 23: zitadel.project.v2beta.ProjectRoleKeyFilter.method:type_name -> zitadel.filter.v2beta.TextFilterMethod
	19, // 24: zitadel.project.v2beta.ProjectRoleDisplayNameFilter.method:type_name -> zitadel.filter.v2beta.TextFilterMethod
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_zitadel_project_v2beta_query_proto_init() }
func file_zitadel_project_v2beta_query_proto_init() {
	if File_zitadel_project_v2beta_query_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zitadel_project_v2beta_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectGrant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectSearchFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectNameFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectGrantSearchFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectRoleSearchFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectRoleKeyFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectRoleDisplayNameFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_project_v2beta_query_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_zitadel_project_v2beta_query_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ProjectSearchFilter_ProjectNameFilter)(nil),
		(*ProjectSearchFilter_InProjectIdsFilter)(nil),
		(*ProjectSearchFilter_ProjectResourceOwnerFilter)(nil),
		(*ProjectSearchFilter_ProjectGrantResourceOwnerFilter)(nil),
		(*ProjectSearchFilter_ProjectOrganizationIdFilter)(nil),
	}
	file_zitadel_project_v2beta_query_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ProjectGrantSearchFilter_ProjectNameFilter)(nil),
		(*ProjectGrantSearchFilter_RoleKeyFilter)(nil),
		(*ProjectGrantSearchFilter_InProjectIdsFilter)(nil),
		(*ProjectGrantSearchFilter_ProjectResourceOwnerFilter)(nil),
		(*ProjectGrantSearchFilter_ProjectGrantResourceOwnerFilter)(nil),
	}
	file_zitadel_project_v2beta_query_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ProjectRoleSearchFilter_RoleKeyFilter)(nil),
		(*ProjectRoleSearchFilter_DisplayNameFilter)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_project_v2beta_query_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_project_v2beta_query_proto_goTypes,
		DependencyIndexes: file_zitadel_project_v2beta_query_proto_depIdxs,
		EnumInfos:         file_zitadel_project_v2beta_query_proto_enumTypes,
		MessageInfos:      file_zitadel_project_v2beta_query_proto_msgTypes,
	}.Build()
	File_zitadel_project_v2beta_query_proto = out.File
	file_zitadel_project_v2beta_query_proto_rawDesc = nil
	file_zitadel_project_v2beta_query_proto_goTypes = nil
	file_zitadel_project_v2beta_query_proto_depIdxs = nil
}
