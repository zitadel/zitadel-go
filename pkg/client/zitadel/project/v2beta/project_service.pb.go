// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/project/v2beta/project_service.proto

package project

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	v2beta "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/filter/v2beta"
	_ "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/protoc/v2"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the organization the project belongs to.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// The unique identifier of the project.
	Id *string `protobuf:"bytes,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Name of the project.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Enable this setting to have role information included in the user info endpoint. It is also dependent on your application settings to include it in tokens and other types.
	ProjectRoleAssertion bool `protobuf:"varint,4,opt,name=project_role_assertion,json=projectRoleAssertion,proto3" json:"project_role_assertion,omitempty"`
	// When enabled ZITADEL will check if a user has an authorization to use this project assigned when login into an application of this project.
	AuthorizationRequired bool `protobuf:"varint,5,opt,name=authorization_required,json=authorizationRequired,proto3" json:"authorization_required,omitempty"`
	// When enabled ZITADEL will check if the organization of the user, that is trying to log in, has access to this project (either owns the project or is granted).
	ProjectAccessRequired bool `protobuf:"varint,6,opt,name=project_access_required,json=projectAccessRequired,proto3" json:"project_access_required,omitempty"`
	// Define which private labeling/branding should trigger when getting to a login of this project.
	PrivateLabelingSetting PrivateLabelingSetting `protobuf:"varint,7,opt,name=private_labeling_setting,json=privateLabelingSetting,proto3,enum=zitadel.project.v2beta.PrivateLabelingSetting" json:"private_labeling_setting,omitempty"`
}

func (x *CreateProjectRequest) Reset() {
	*x = CreateProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectRequest) ProtoMessage() {}

func (x *CreateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectRequest.ProtoReflect.Descriptor instead.
func (*CreateProjectRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateProjectRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateProjectRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *CreateProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateProjectRequest) GetProjectRoleAssertion() bool {
	if x != nil {
		return x.ProjectRoleAssertion
	}
	return false
}

func (x *CreateProjectRequest) GetAuthorizationRequired() bool {
	if x != nil {
		return x.AuthorizationRequired
	}
	return false
}

func (x *CreateProjectRequest) GetProjectAccessRequired() bool {
	if x != nil {
		return x.ProjectAccessRequired
	}
	return false
}

func (x *CreateProjectRequest) GetPrivateLabelingSetting() PrivateLabelingSetting {
	if x != nil {
		return x.PrivateLabelingSetting
	}
	return PrivateLabelingSetting_PRIVATE_LABELING_SETTING_UNSPECIFIED
}

type CreateProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the newly created project.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The timestamp of the project creation.
	CreationDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
}

func (x *CreateProjectResponse) Reset() {
	*x = CreateProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectResponse) ProtoMessage() {}

func (x *CreateProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectResponse.ProtoReflect.Descriptor instead.
func (*CreateProjectResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateProjectResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateProjectResponse) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

type UpdateProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the project.
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Enable this setting to have role information included in the user info endpoint. It is also dependent on your application settings to include it in tokens and other types.
	ProjectRoleAssertion *bool `protobuf:"varint,3,opt,name=project_role_assertion,json=projectRoleAssertion,proto3,oneof" json:"project_role_assertion,omitempty"`
	// When enabled ZITADEL will check if a user has a role of this project assigned when login into an application of this project.
	ProjectRoleCheck *bool `protobuf:"varint,4,opt,name=project_role_check,json=projectRoleCheck,proto3,oneof" json:"project_role_check,omitempty"`
	// When enabled ZITADEL will check if the organization of the user, that is trying to log in, has a grant to this project.
	HasProjectCheck *bool `protobuf:"varint,5,opt,name=has_project_check,json=hasProjectCheck,proto3,oneof" json:"has_project_check,omitempty"`
	// Define which private labeling/branding should trigger when getting to a login of this project.
	PrivateLabelingSetting *PrivateLabelingSetting `protobuf:"varint,6,opt,name=private_labeling_setting,json=privateLabelingSetting,proto3,enum=zitadel.project.v2beta.PrivateLabelingSetting,oneof" json:"private_labeling_setting,omitempty"`
}

func (x *UpdateProjectRequest) Reset() {
	*x = UpdateProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectRequest) ProtoMessage() {}

func (x *UpdateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateProjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateProjectRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateProjectRequest) GetProjectRoleAssertion() bool {
	if x != nil && x.ProjectRoleAssertion != nil {
		return *x.ProjectRoleAssertion
	}
	return false
}

func (x *UpdateProjectRequest) GetProjectRoleCheck() bool {
	if x != nil && x.ProjectRoleCheck != nil {
		return *x.ProjectRoleCheck
	}
	return false
}

func (x *UpdateProjectRequest) GetHasProjectCheck() bool {
	if x != nil && x.HasProjectCheck != nil {
		return *x.HasProjectCheck
	}
	return false
}

func (x *UpdateProjectRequest) GetPrivateLabelingSetting() PrivateLabelingSetting {
	if x != nil && x.PrivateLabelingSetting != nil {
		return *x.PrivateLabelingSetting
	}
	return PrivateLabelingSetting_PRIVATE_LABELING_SETTING_UNSPECIFIED
}

type UpdateProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp of the change of the project.
	ChangeDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=change_date,json=changeDate,proto3" json:"change_date,omitempty"`
}

func (x *UpdateProjectResponse) Reset() {
	*x = UpdateProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectResponse) ProtoMessage() {}

func (x *UpdateProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectResponse.ProtoReflect.Descriptor instead.
func (*UpdateProjectResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateProjectResponse) GetChangeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeDate
	}
	return nil
}

type DeleteProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the project.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteProjectRequest) Reset() {
	*x = DeleteProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectRequest) ProtoMessage() {}

func (x *DeleteProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteProjectRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteProjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp of the deletion of the project.
	// Note that the deletion date is only guaranteed to be set if the deletion was successful during the request.
	// In case the deletion occurred in a previous request, the deletion date might be empty.
	DeletionDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=deletion_date,json=deletionDate,proto3" json:"deletion_date,omitempty"`
}

func (x *DeleteProjectResponse) Reset() {
	*x = DeleteProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectResponse) ProtoMessage() {}

func (x *DeleteProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectResponse.ProtoReflect.Descriptor instead.
func (*DeleteProjectResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteProjectResponse) GetDeletionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletionDate
	}
	return nil
}

type GetProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the project.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetProjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *GetProjectResponse) Reset() {
	*x = GetProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectResponse) ProtoMessage() {}

func (x *GetProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectResponse.ProtoReflect.Descriptor instead.
func (*GetProjectResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetProjectResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type ListProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List limitations and ordering.
	Pagination *v2beta.PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
	// The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent.
	SortingColumn *ProjectFieldName `protobuf:"varint,2,opt,name=sorting_column,json=sortingColumn,proto3,enum=zitadel.project.v2beta.ProjectFieldName,oneof" json:"sorting_column,omitempty"`
	// Define the criteria to query for.
	Filters []*ProjectSearchFilter `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListProjectsRequest) Reset() {
	*x = ListProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsRequest) ProtoMessage() {}

func (x *ListProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsRequest.ProtoReflect.Descriptor instead.
func (*ListProjectsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListProjectsRequest) GetPagination() *v2beta.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListProjectsRequest) GetSortingColumn() ProjectFieldName {
	if x != nil && x.SortingColumn != nil {
		return *x.SortingColumn
	}
	return ProjectFieldName_PROJECT_FIELD_NAME_UNSPECIFIED
}

func (x *ListProjectsRequest) GetFilters() []*ProjectSearchFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *v2beta.PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Projects   []*Project                 `protobuf:"bytes,2,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (x *ListProjectsResponse) Reset() {
	*x = ListProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsResponse) ProtoMessage() {}

func (x *ListProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsResponse.ProtoReflect.Descriptor instead.
func (*ListProjectsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListProjectsResponse) GetPagination() *v2beta.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListProjectsResponse) GetProjects() []*Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

type DeactivateProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the project.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeactivateProjectRequest) Reset() {
	*x = DeactivateProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateProjectRequest) ProtoMessage() {}

func (x *DeactivateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateProjectRequest.ProtoReflect.Descriptor instead.
func (*DeactivateProjectRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{10}
}

func (x *DeactivateProjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeactivateProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp of the change of the project.
	ChangeDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=change_date,json=changeDate,proto3" json:"change_date,omitempty"`
}

func (x *DeactivateProjectResponse) Reset() {
	*x = DeactivateProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateProjectResponse) ProtoMessage() {}

func (x *DeactivateProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateProjectResponse.ProtoReflect.Descriptor instead.
func (*DeactivateProjectResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{11}
}

func (x *DeactivateProjectResponse) GetChangeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeDate
	}
	return nil
}

type ActivateProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the project.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivateProjectRequest) Reset() {
	*x = ActivateProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateProjectRequest) ProtoMessage() {}

func (x *ActivateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateProjectRequest.ProtoReflect.Descriptor instead.
func (*ActivateProjectRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{12}
}

func (x *ActivateProjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ActivateProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp of the change of the project.
	ChangeDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=change_date,json=changeDate,proto3" json:"change_date,omitempty"`
}

func (x *ActivateProjectResponse) Reset() {
	*x = ActivateProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateProjectResponse) ProtoMessage() {}

func (x *ActivateProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateProjectResponse.ProtoReflect.Descriptor instead.
func (*ActivateProjectResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{13}
}

func (x *ActivateProjectResponse) GetChangeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeDate
	}
	return nil
}

type AddProjectRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The key is the only relevant attribute for ZITADEL regarding the authorization checks.
	RoleKey string `protobuf:"bytes,2,opt,name=role_key,json=roleKey,proto3" json:"role_key,omitempty"`
	// Name displayed for the role.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The group is only used for display purposes. That you have better handling, like giving all the roles from a group to a user.
	Group *string `protobuf:"bytes,4,opt,name=group,proto3,oneof" json:"group,omitempty"`
}

func (x *AddProjectRoleRequest) Reset() {
	*x = AddProjectRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProjectRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProjectRoleRequest) ProtoMessage() {}

func (x *AddProjectRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProjectRoleRequest.ProtoReflect.Descriptor instead.
func (*AddProjectRoleRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{14}
}

func (x *AddProjectRoleRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AddProjectRoleRequest) GetRoleKey() string {
	if x != nil {
		return x.RoleKey
	}
	return ""
}

func (x *AddProjectRoleRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AddProjectRoleRequest) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

type AddProjectRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp of the project role creation.
	CreationDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
}

func (x *AddProjectRoleResponse) Reset() {
	*x = AddProjectRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProjectRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProjectRoleResponse) ProtoMessage() {}

func (x *AddProjectRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProjectRoleResponse.ProtoReflect.Descriptor instead.
func (*AddProjectRoleResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{15}
}

func (x *AddProjectRoleResponse) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

type UpdateProjectRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The key is the only relevant attribute for ZITADEL regarding the authorization checks.
	RoleKey string `protobuf:"bytes,2,opt,name=role_key,json=roleKey,proto3" json:"role_key,omitempty"`
	// Name displayed for the role.
	DisplayName *string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3,oneof" json:"display_name,omitempty"`
	// The group is only used for display purposes. That you have better handling, like giving all the roles from a group to a user.
	Group *string `protobuf:"bytes,4,opt,name=group,proto3,oneof" json:"group,omitempty"`
}

func (x *UpdateProjectRoleRequest) Reset() {
	*x = UpdateProjectRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectRoleRequest) ProtoMessage() {}

func (x *UpdateProjectRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectRoleRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectRoleRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateProjectRoleRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateProjectRoleRequest) GetRoleKey() string {
	if x != nil {
		return x.RoleKey
	}
	return ""
}

func (x *UpdateProjectRoleRequest) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *UpdateProjectRoleRequest) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

type UpdateProjectRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp of the change of the project role.
	ChangeDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=change_date,json=changeDate,proto3" json:"change_date,omitempty"`
}

func (x *UpdateProjectRoleResponse) Reset() {
	*x = UpdateProjectRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectRoleResponse) ProtoMessage() {}

func (x *UpdateProjectRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectRoleResponse.ProtoReflect.Descriptor instead.
func (*UpdateProjectRoleResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateProjectRoleResponse) GetChangeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeDate
	}
	return nil
}

type RemoveProjectRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The key is the only relevant attribute for ZITADEL regarding the authorization checks.
	RoleKey string `protobuf:"bytes,2,opt,name=role_key,json=roleKey,proto3" json:"role_key,omitempty"`
}

func (x *RemoveProjectRoleRequest) Reset() {
	*x = RemoveProjectRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveProjectRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveProjectRoleRequest) ProtoMessage() {}

func (x *RemoveProjectRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveProjectRoleRequest.ProtoReflect.Descriptor instead.
func (*RemoveProjectRoleRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveProjectRoleRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *RemoveProjectRoleRequest) GetRoleKey() string {
	if x != nil {
		return x.RoleKey
	}
	return ""
}

type RemoveProjectRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp of the removal of the project role.
	// Note that the removal date is only guaranteed to be set if the removal was successful during the request.
	// In case the removal occurred in a previous request, the removal date might be empty.
	RemovalDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=removal_date,json=removalDate,proto3" json:"removal_date,omitempty"`
}

func (x *RemoveProjectRoleResponse) Reset() {
	*x = RemoveProjectRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveProjectRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveProjectRoleResponse) ProtoMessage() {}

func (x *RemoveProjectRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveProjectRoleResponse.ProtoReflect.Descriptor instead.
func (*RemoveProjectRoleResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{19}
}

func (x *RemoveProjectRoleResponse) GetRemovalDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RemovalDate
	}
	return nil
}

type ListProjectRolesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// List limitations and ordering.
	Pagination *v2beta.PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
	// The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent.
	SortingColumn *ProjectRoleFieldName `protobuf:"varint,3,opt,name=sorting_column,json=sortingColumn,proto3,enum=zitadel.project.v2beta.ProjectRoleFieldName,oneof" json:"sorting_column,omitempty"`
	// Define the criteria to query for.
	Filters []*ProjectRoleSearchFilter `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListProjectRolesRequest) Reset() {
	*x = ListProjectRolesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectRolesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectRolesRequest) ProtoMessage() {}

func (x *ListProjectRolesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectRolesRequest.ProtoReflect.Descriptor instead.
func (*ListProjectRolesRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{20}
}

func (x *ListProjectRolesRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListProjectRolesRequest) GetPagination() *v2beta.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListProjectRolesRequest) GetSortingColumn() ProjectRoleFieldName {
	if x != nil && x.SortingColumn != nil {
		return *x.SortingColumn
	}
	return ProjectRoleFieldName_PROJECT_ROLE_FIELD_NAME_UNSPECIFIED
}

func (x *ListProjectRolesRequest) GetFilters() []*ProjectRoleSearchFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListProjectRolesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination   *v2beta.PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	ProjectRoles []*ProjectRole             `protobuf:"bytes,2,rep,name=project_roles,json=projectRoles,proto3" json:"project_roles,omitempty"`
}

func (x *ListProjectRolesResponse) Reset() {
	*x = ListProjectRolesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectRolesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectRolesResponse) ProtoMessage() {}

func (x *ListProjectRolesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectRolesResponse.ProtoReflect.Descriptor instead.
func (*ListProjectRolesResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{21}
}

func (x *ListProjectRolesResponse) GetPagination() *v2beta.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListProjectRolesResponse) GetProjectRoles() []*ProjectRole {
	if x != nil {
		return x.ProjectRoles
	}
	return nil
}

type CreateProjectGrantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Organization the project is granted to.
	GrantedOrganizationId string `protobuf:"bytes,2,opt,name=granted_organization_id,json=grantedOrganizationId,proto3" json:"granted_organization_id,omitempty"`
	// Keys of the role available for the project grant.
	RoleKeys []string `protobuf:"bytes,3,rep,name=role_keys,json=roleKeys,proto3" json:"role_keys,omitempty"`
}

func (x *CreateProjectGrantRequest) Reset() {
	*x = CreateProjectGrantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectGrantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectGrantRequest) ProtoMessage() {}

func (x *CreateProjectGrantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectGrantRequest.ProtoReflect.Descriptor instead.
func (*CreateProjectGrantRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{22}
}

func (x *CreateProjectGrantRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateProjectGrantRequest) GetGrantedOrganizationId() string {
	if x != nil {
		return x.GrantedOrganizationId
	}
	return ""
}

func (x *CreateProjectGrantRequest) GetRoleKeys() []string {
	if x != nil {
		return x.RoleKeys
	}
	return nil
}

type CreateProjectGrantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp of the project grant creation.
	CreationDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
}

func (x *CreateProjectGrantResponse) Reset() {
	*x = CreateProjectGrantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectGrantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectGrantResponse) ProtoMessage() {}

func (x *CreateProjectGrantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectGrantResponse.ProtoReflect.Descriptor instead.
func (*CreateProjectGrantResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{23}
}

func (x *CreateProjectGrantResponse) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

type UpdateProjectGrantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Organization the project is granted to.
	GrantedOrganizationId string `protobuf:"bytes,2,opt,name=granted_organization_id,json=grantedOrganizationId,proto3" json:"granted_organization_id,omitempty"`
	// Keys of the role available for the project grant.
	RoleKeys []string `protobuf:"bytes,3,rep,name=role_keys,json=roleKeys,proto3" json:"role_keys,omitempty"`
}

func (x *UpdateProjectGrantRequest) Reset() {
	*x = UpdateProjectGrantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectGrantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectGrantRequest) ProtoMessage() {}

func (x *UpdateProjectGrantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectGrantRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectGrantRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateProjectGrantRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateProjectGrantRequest) GetGrantedOrganizationId() string {
	if x != nil {
		return x.GrantedOrganizationId
	}
	return ""
}

func (x *UpdateProjectGrantRequest) GetRoleKeys() []string {
	if x != nil {
		return x.RoleKeys
	}
	return nil
}

type UpdateProjectGrantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp of the change of the project grant.
	ChangeDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=change_date,json=changeDate,proto3" json:"change_date,omitempty"`
}

func (x *UpdateProjectGrantResponse) Reset() {
	*x = UpdateProjectGrantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectGrantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectGrantResponse) ProtoMessage() {}

func (x *UpdateProjectGrantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectGrantResponse.ProtoReflect.Descriptor instead.
func (*UpdateProjectGrantResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateProjectGrantResponse) GetChangeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeDate
	}
	return nil
}

type DeleteProjectGrantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Organization the project is granted to.
	GrantedOrganizationId string `protobuf:"bytes,2,opt,name=granted_organization_id,json=grantedOrganizationId,proto3" json:"granted_organization_id,omitempty"`
}

func (x *DeleteProjectGrantRequest) Reset() {
	*x = DeleteProjectGrantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProjectGrantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectGrantRequest) ProtoMessage() {}

func (x *DeleteProjectGrantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectGrantRequest.ProtoReflect.Descriptor instead.
func (*DeleteProjectGrantRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteProjectGrantRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteProjectGrantRequest) GetGrantedOrganizationId() string {
	if x != nil {
		return x.GrantedOrganizationId
	}
	return ""
}

type DeleteProjectGrantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp of the deletion of the project grant.
	// Note that the deletion date is only guaranteed to be set if the deletion was successful during the request.
	// In case the deletion occurred in a previous request, the deletion date might be empty.
	DeletionDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=deletion_date,json=deletionDate,proto3" json:"deletion_date,omitempty"`
}

func (x *DeleteProjectGrantResponse) Reset() {
	*x = DeleteProjectGrantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProjectGrantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectGrantResponse) ProtoMessage() {}

func (x *DeleteProjectGrantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectGrantResponse.ProtoReflect.Descriptor instead.
func (*DeleteProjectGrantResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteProjectGrantResponse) GetDeletionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletionDate
	}
	return nil
}

type DeactivateProjectGrantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Organization the project is granted to.
	GrantedOrganizationId string `protobuf:"bytes,2,opt,name=granted_organization_id,json=grantedOrganizationId,proto3" json:"granted_organization_id,omitempty"`
}

func (x *DeactivateProjectGrantRequest) Reset() {
	*x = DeactivateProjectGrantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateProjectGrantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateProjectGrantRequest) ProtoMessage() {}

func (x *DeactivateProjectGrantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateProjectGrantRequest.ProtoReflect.Descriptor instead.
func (*DeactivateProjectGrantRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{28}
}

func (x *DeactivateProjectGrantRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeactivateProjectGrantRequest) GetGrantedOrganizationId() string {
	if x != nil {
		return x.GrantedOrganizationId
	}
	return ""
}

type DeactivateProjectGrantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp of the change of the project grant.
	ChangeDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=change_date,json=changeDate,proto3" json:"change_date,omitempty"`
}

func (x *DeactivateProjectGrantResponse) Reset() {
	*x = DeactivateProjectGrantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateProjectGrantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateProjectGrantResponse) ProtoMessage() {}

func (x *DeactivateProjectGrantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateProjectGrantResponse.ProtoReflect.Descriptor instead.
func (*DeactivateProjectGrantResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{29}
}

func (x *DeactivateProjectGrantResponse) GetChangeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeDate
	}
	return nil
}

type ActivateProjectGrantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the project.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Organization the project is granted to.
	GrantedOrganizationId string `protobuf:"bytes,2,opt,name=granted_organization_id,json=grantedOrganizationId,proto3" json:"granted_organization_id,omitempty"`
}

func (x *ActivateProjectGrantRequest) Reset() {
	*x = ActivateProjectGrantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateProjectGrantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateProjectGrantRequest) ProtoMessage() {}

func (x *ActivateProjectGrantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateProjectGrantRequest.ProtoReflect.Descriptor instead.
func (*ActivateProjectGrantRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{30}
}

func (x *ActivateProjectGrantRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ActivateProjectGrantRequest) GetGrantedOrganizationId() string {
	if x != nil {
		return x.GrantedOrganizationId
	}
	return ""
}

type ActivateProjectGrantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp of the change of the project grant.
	ChangeDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=change_date,json=changeDate,proto3" json:"change_date,omitempty"`
}

func (x *ActivateProjectGrantResponse) Reset() {
	*x = ActivateProjectGrantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateProjectGrantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateProjectGrantResponse) ProtoMessage() {}

func (x *ActivateProjectGrantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateProjectGrantResponse.ProtoReflect.Descriptor instead.
func (*ActivateProjectGrantResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{31}
}

func (x *ActivateProjectGrantResponse) GetChangeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeDate
	}
	return nil
}

type ListProjectGrantsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List limitations and ordering.
	Pagination *v2beta.PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
	// The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent.
	SortingColumn *ProjectGrantFieldName `protobuf:"varint,2,opt,name=sorting_column,json=sortingColumn,proto3,enum=zitadel.project.v2beta.ProjectGrantFieldName,oneof" json:"sorting_column,omitempty"`
	// Define the criteria to query for.
	Filters []*ProjectGrantSearchFilter `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListProjectGrantsRequest) Reset() {
	*x = ListProjectGrantsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectGrantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectGrantsRequest) ProtoMessage() {}

func (x *ListProjectGrantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectGrantsRequest.ProtoReflect.Descriptor instead.
func (*ListProjectGrantsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{32}
}

func (x *ListProjectGrantsRequest) GetPagination() *v2beta.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListProjectGrantsRequest) GetSortingColumn() ProjectGrantFieldName {
	if x != nil && x.SortingColumn != nil {
		return *x.SortingColumn
	}
	return ProjectGrantFieldName_PROJECT_GRANT_FIELD_NAME_UNSPECIFIED
}

func (x *ListProjectGrantsRequest) GetFilters() []*ProjectGrantSearchFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListProjectGrantsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination    *v2beta.PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	ProjectGrants []*ProjectGrant            `protobuf:"bytes,2,rep,name=project_grants,json=projectGrants,proto3" json:"project_grants,omitempty"`
}

func (x *ListProjectGrantsResponse) Reset() {
	*x = ListProjectGrantsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectGrantsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectGrantsResponse) ProtoMessage() {}

func (x *ListProjectGrantsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_project_v2beta_project_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectGrantsResponse.ProtoReflect.Descriptor instead.
func (*ListProjectGrantsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_project_v2beta_project_service_proto_rawDescGZIP(), []int{33}
}

func (x *ListProjectGrantsResponse) GetPagination() *v2beta.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListProjectGrantsResponse) GetProjectGrants() []*ProjectGrant {
	if x != nil {
		return x.ProjectGrants
	}
	return nil
}

var File_zitadel_project_v2beta_project_service_proto protoreflect.FileDescriptor

var file_zitadel_project_v2beta_project_service_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x5f, 0x67, 0x65, 0x6e,
	0x5f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2f, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xcf, 0x05, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32,
	0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8,
	0x01, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x1b, 0x4a,
	0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36, 0x34, 0x38, 0x39,
	0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0xc8, 0x01, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0x41, 0x13,
	0x4a, 0x0b, 0x22, 0x4d, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x78, 0xc8, 0x01,
	0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x16,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x72, 0x0a, 0x18, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a,
	0xcb, 0x01, 0x92, 0x41, 0xc7, 0x01, 0x32, 0xc4, 0x01, 0x7b, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3a, 0x22, 0x36, 0x39, 0x36, 0x32,
	0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x2c, 0x22,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x4d, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0x2c, 0x22, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x22, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22,
	0x3a, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x22, 0x68, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x22, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x22, 0x3a, 0x22, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x22, 0x7d, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a,
	0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x31, 0x32, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38,
	0x33, 0x33, 0x34, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x60, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c,
	0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x31, 0x32, 0x2d, 0x31, 0x38, 0x54, 0x30, 0x37,
	0x3a, 0x35, 0x30, 0x3a, 0x34, 0x37, 0x2e, 0x34, 0x39, 0x32, 0x5a, 0x22, 0x52, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0xcd, 0x05, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38,
	0x30, 0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28,
	0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x4d, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x10, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0f,
	0x68, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x77, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x04,
	0x52, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x3a, 0xae, 0x01, 0x92, 0x41,
	0xaa, 0x01, 0x32, 0xa7, 0x01, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x4d, 0x79,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22,
	0x2c, 0x22, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x22, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x3a,
	0x74, 0x72, 0x75, 0x65, 0x2c, 0x22, 0x68, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x22, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x22, 0x3a, 0x22, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x22, 0x7d, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x68, 0x61, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x75, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x35,
	0x2d, 0x30, 0x31, 0x2d, 0x32, 0x33, 0x54, 0x31, 0x30, 0x3a, 0x33, 0x34, 0x3a, 0x31, 0x38, 0x2e,
	0x30, 0x35, 0x31, 0x5a, 0x22, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x53, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36,
	0x32, 0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78,
	0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18,
	0xc8, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x79, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x60, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x35, 0x2d, 0x30,
	0x31, 0x2d, 0x32, 0x33, 0x54, 0x31, 0x30, 0x3a, 0x33, 0x34, 0x3a, 0x31, 0x38, 0x2e, 0x30, 0x35,
	0x31, 0x5a, 0x22, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x4d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30,
	0x32, 0x36, 0x38, 0x30, 0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80,
	0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x4f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0xec, 0x04, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x7d, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x27, 0x92, 0x41, 0x24, 0x3a,
	0x22, 0x22, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41,
	0x54, 0x45, 0x22, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x9d,
	0x02, 0x92, 0x41, 0x99, 0x02, 0x32, 0x96, 0x02, 0x7b, 0x22, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x7b, 0x22, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x3a,
	0x30, 0x2c, 0x22, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x61, 0x73, 0x63,
	0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x7d, 0x2c, 0x22, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x3a, 0x22, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x22, 0x2c, 0x22, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x3a, 0x7b, 0x22, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x4d, 0x79, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x2c, 0x22, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x3a, 0x22,
	0x54, 0x45, 0x58, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x22, 0x7d, 0x7d, 0x2c, 0x7b, 0x22, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x3a, 0x7b, 0x22, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22,
	0x3a, 0x5b, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38,
	0x38, 0x33, 0x33, 0x34, 0x22, 0x2c, 0x22, 0x36, 0x39, 0x36, 0x32, 0x32, 0x33, 0x36, 0x36, 0x30,
	0x31, 0x32, 0x33, 0x35, 0x35, 0x36, 0x36, 0x32, 0x22, 0x5d, 0x7d, 0x7d, 0x5d, 0x7d, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x22, 0x9e, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x22, 0x57, 0x0a, 0x18, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13,
	0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36, 0x34, 0x38, 0x39, 0x34,
	0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x79, 0x0a, 0x19, 0x44, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22,
	0x32, 0x30, 0x32, 0x35, 0x2d, 0x30, 0x31, 0x2d, 0x32, 0x33, 0x54, 0x31, 0x30, 0x3a, 0x33, 0x34,
	0x3a, 0x31, 0x38, 0x2e, 0x30, 0x35, 0x31, 0x5a, 0x22, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x55, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b,
	0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36, 0x34, 0x38,
	0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x77, 0x0a, 0x17,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22,
	0x32, 0x30, 0x32, 0x35, 0x2d, 0x30, 0x31, 0x2d, 0x32, 0x33, 0x54, 0x31, 0x30, 0x3a, 0x33, 0x34,
	0x3a, 0x31, 0x38, 0x2e, 0x30, 0x35, 0x31, 0x5a, 0x22, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0xaa, 0x02, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4a, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39,
	0x30, 0x32, 0x36, 0x38, 0x30, 0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01,
	0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92,
	0x41, 0x0f, 0x4a, 0x07, 0x22, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01,
	0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x07,
	0x72, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92,
	0x41, 0x17, 0x4a, 0x0f, 0x22, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x0d, 0x4a, 0x08, 0x22, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73,
	0x22, 0x78, 0xc8, 0x01, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x48, 0x00, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x7a, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x31, 0x32, 0x2d, 0x31,
	0x38, 0x54, 0x30, 0x37, 0x3a, 0x35, 0x30, 0x3a, 0x34, 0x37, 0x2e, 0x34, 0x39, 0x32, 0x5a, 0x22,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0xc3,
	0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38,
	0x30, 0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x0f, 0x4a, 0x07,
	0x22, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x17, 0x4a, 0x0f,
	0x22, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x78,
	0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18,
	0xc8, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x0d, 0x4a, 0x08, 0x22, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x73, 0x22, 0x78, 0xc8, 0x01, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x48, 0x01, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x79, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x35, 0x2d, 0x30,
	0x31, 0x2d, 0x32, 0x33, 0x54, 0x31, 0x30, 0x3a, 0x33, 0x34, 0x3a, 0x31, 0x38, 0x2e, 0x30, 0x35,
	0x31, 0x5a, 0x22, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22,
	0xa2, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36,
	0x38, 0x30, 0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x0f, 0x4a,
	0x07, 0x22, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x07, 0x72, 0x6f, 0x6c,
	0x65, 0x4b, 0x65, 0x79, 0x22, 0x7b, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5e, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x35, 0x2d,
	0x30, 0x31, 0x2d, 0x32, 0x33, 0x54, 0x31, 0x30, 0x3a, 0x33, 0x34, 0x3a, 0x31, 0x38, 0x2e, 0x30,
	0x35, 0x31, 0x5a, 0x22, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x65, 0x22, 0xa2, 0x05, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32,
	0x36, 0x38, 0x30, 0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01,
	0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x0e, 0x73, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x2c, 0x92, 0x41, 0x29, 0x3a, 0x27, 0x22, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x22, 0x48, 0x01, 0x52,
	0x0d, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x49, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0xf5, 0x01, 0x92,
	0x41, 0xf1, 0x01, 0x32, 0xee, 0x01, 0x7b, 0x22, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x3a, 0x7b, 0x22, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x3a, 0x30, 0x2c,
	0x22, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x61, 0x73, 0x63, 0x22, 0x3a,
	0x74, 0x72, 0x75, 0x65, 0x7d, 0x2c, 0x22, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x3a, 0x22, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x22, 0x2c, 0x22, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x6b, 0x65, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x3a, 0x7b, 0x22, 0x6b, 0x65, 0x79, 0x22, 0x3a, 0x22, 0x72, 0x6f,
	0x6c, 0x65, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x22, 0x2c, 0x22, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x3a, 0x22, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x53, 0x22, 0x7d, 0x7d, 0x2c, 0x7b, 0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x3a, 0x7b, 0x22, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x53, 0x55, 0x50, 0x45, 0x52, 0x22,
	0x7d, 0x7d, 0x5d, 0x7d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a,
	0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36, 0x34, 0x38, 0x39,
	0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x63, 0x0a, 0x17, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x32, 0x38, 0x37, 0x34, 0x36,
	0x30, 0x32, 0x38, 0x39, 0x30, 0x39, 0x35, 0x39, 0x33, 0x39, 0x38, 0x37, 0x22, 0x78, 0xc8, 0x01,
	0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01,
	0x52, 0x15, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x4a,
	0x18, 0x5b, 0x22, 0x52, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x31, 0x22, 0x2c, 0x20, 0x22, 0x52,
	0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x32, 0x22, 0x5d, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x73, 0x22, 0x7e, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x60, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x34,
	0x2d, 0x31, 0x32, 0x2d, 0x31, 0x38, 0x54, 0x30, 0x37, 0x3a, 0x35, 0x30, 0x3a, 0x34, 0x37, 0x2e,
	0x34, 0x39, 0x32, 0x5a, 0x22, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36,
	0x32, 0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78,
	0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18,
	0xc8, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a,
	0x17, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b,
	0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x32, 0x38, 0x37, 0x34, 0x36, 0x30, 0x32, 0x38, 0x39, 0x30,
	0x39, 0x35, 0x39, 0x33, 0x39, 0x38, 0x37, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x15, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x4a, 0x18, 0x5b, 0x22, 0x52, 0x6f,
	0x6c, 0x65, 0x4b, 0x65, 0x79, 0x31, 0x22, 0x2c, 0x20, 0x22, 0x52, 0x6f, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x32, 0x22, 0x5d, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x7a,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92,
	0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x35, 0x2d, 0x30, 0x31, 0x2d, 0x32, 0x33, 0x54,
	0x31, 0x30, 0x3a, 0x33, 0x34, 0x3a, 0x31, 0x38, 0x2e, 0x30, 0x35, 0x31, 0x5a, 0x22, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41,
	0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36, 0x34,
	0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x17, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x32, 0x38, 0x37,
	0x34, 0x36, 0x30, 0x32, 0x38, 0x39, 0x30, 0x39, 0x35, 0x39, 0x33, 0x39, 0x38, 0x37, 0x22, 0x78,
	0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18,
	0xc8, 0x01, 0x52, 0x15, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x1a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a,
	0x1a, 0x22, 0x32, 0x30, 0x32, 0x35, 0x2d, 0x30, 0x31, 0x2d, 0x32, 0x33, 0x54, 0x31, 0x30, 0x3a,
	0x33, 0x34, 0x3a, 0x31, 0x38, 0x2e, 0x30, 0x35, 0x31, 0x5a, 0x22, 0x52, 0x0c, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x1d, 0x44, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38,
	0x30, 0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x17, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22,
	0x32, 0x38, 0x37, 0x34, 0x36, 0x30, 0x32, 0x38, 0x39, 0x30, 0x39, 0x35, 0x39, 0x33, 0x39, 0x38,
	0x37, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x15, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x1e,
	0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x35, 0x2d, 0x30, 0x31, 0x2d, 0x32,
	0x33, 0x54, 0x31, 0x30, 0x3a, 0x33, 0x34, 0x3a, 0x31, 0x38, 0x2e, 0x30, 0x35, 0x31, 0x5a, 0x22,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0xce, 0x01, 0x0a,
	0x1b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36,
	0x38, 0x30, 0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x17, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13,
	0x22, 0x32, 0x38, 0x37, 0x34, 0x36, 0x30, 0x32, 0x38, 0x39, 0x30, 0x39, 0x35, 0x39, 0x33, 0x39,
	0x38, 0x37, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x15, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x7c, 0x0a,
	0x1c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f,
	0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x35, 0x2d, 0x30, 0x31, 0x2d, 0x32, 0x33,
	0x54, 0x31, 0x30, 0x3a, 0x33, 0x34, 0x3a, 0x31, 0x38, 0x2e, 0x30, 0x35, 0x31, 0x5a, 0x22, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0xcf, 0x04, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x88, 0x01, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x2d, 0x92, 0x41, 0x2a, 0x3a, 0x28, 0x22, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x47,
	0x52, 0x41, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x22, 0x48, 0x01,
	0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x4a, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x3a, 0xea,
	0x01, 0x92, 0x41, 0xe6, 0x01, 0x32, 0xe3, 0x01, 0x7b, 0x22, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x7b, 0x22, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x3a,
	0x30, 0x2c, 0x22, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x61, 0x73, 0x63,
	0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x7d, 0x2c, 0x22, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x3a, 0x7b, 0x22, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x4d, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0x2c, 0x22, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x3a, 0x22, 0x54, 0x45, 0x58,
	0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f,
	0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x22, 0x7d, 0x7d, 0x2c, 0x7b, 0x22, 0x69, 0x6e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x3a,
	0x7b, 0x22, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0x3a, 0x5b, 0x22,
	0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33,
	0x34, 0x22, 0x2c, 0x22, 0x36, 0x39, 0x36, 0x32, 0x32, 0x33, 0x36, 0x36, 0x30, 0x31, 0x32, 0x33,
	0x35, 0x35, 0x36, 0x36, 0x32, 0x22, 0x5d, 0x7d, 0x7d, 0x5d, 0x7d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xb3, 0x01,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x73, 0x32, 0x9e, 0x25, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xf9, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x92, 0x41, 0x57, 0x4a, 0x25, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x1e, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x6c, 0x79, 0x4a, 0x2e, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x27, 0x0a, 0x25, 0x54, 0x68, 0x65,
	0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x2e, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a,
	0x22, 0x10, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x90, 0x02, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa1, 0x01, 0x92, 0x41, 0x69, 0x4a, 0x37, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x30,
	0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6f,
	0x72, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x20, 0x75, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x4a, 0x2e, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x27, 0x0a, 0x25, 0x54, 0x68, 0x65, 0x20, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x2e,
	0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15,
	0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xca, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x92, 0x41, 0x27, 0x4a, 0x25, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x1e, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79,
	0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0xf0, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x92, 0x41, 0x56, 0x4a, 0x27,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x20, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x4a, 0x2b, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x24,
	0x0a, 0x22, 0x54, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f,
	0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x2e, 0x8a, 0xb5, 0x18, 0x10, 0x0a, 0x0e, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15,
	0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xf6, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x8a, 0x01, 0x92, 0x41, 0x51, 0x4a, 0x32, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x2b,
	0x0a, 0x29, 0x41, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x1b, 0x0a, 0x03, 0x34,
	0x30, 0x30, 0x12, 0x14, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x8a, 0xb5, 0x18, 0x10, 0x0a, 0x0e, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x9d,
	0x02, 0x0a, 0x11, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa2, 0x01, 0x92, 0x41, 0x5f, 0x4a,
	0x29, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x22, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x20, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x4a, 0x32, 0x0a, 0x03, 0x34, 0x30,
	0x34, 0x12, 0x2b, 0x0a, 0x29, 0x54, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x64,
	0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x8a, 0xb5,
	0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x91,
	0x02, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x92, 0x41, 0x5b, 0x4a, 0x27, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x20, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x6c, 0x79, 0x4a, 0x30, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x29, 0x0a, 0x27, 0x54, 0x68, 0x65,
	0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x2e, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a,
	0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0xa0, 0x02, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64,
	0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae, 0x01, 0x92, 0x41, 0x68, 0x4a, 0x28, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x21, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x72, 0x6f, 0x6c,
	0x65, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x4a, 0x3c, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x35, 0x0a, 0x33, 0x54,
	0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64,
	0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x72, 0x6f,
	0x6c, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x2e, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a,
	0x22, 0x23, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0xad, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x30, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xb2, 0x01, 0x92, 0x41, 0x61, 0x4a, 0x2a, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x23, 0x0a,
	0x21, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x6c, 0x79, 0x4a, 0x33, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2c, 0x0a, 0x2a, 0x54, 0x68, 0x65,
	0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x74, 0x6f,
	0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x7d, 0x12, 0xaa, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x30, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xaf, 0x01, 0x92, 0x41, 0x61, 0x4a, 0x2a, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x23, 0x0a,
	0x21, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x6c, 0x79, 0x4a, 0x33, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2c, 0x0a, 0x2a, 0x54, 0x68, 0x65,
	0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x74, 0x6f,
	0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x30, 0x2a, 0x2e, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x7d, 0x12, 0x9c, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa4, 0x01, 0x92, 0x41, 0x56,
	0x4a, 0x37, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x30, 0x0a, 0x2e, 0x41, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x1b, 0x0a, 0x03, 0x34, 0x30, 0x30,
	0x12, 0x14, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x8a, 0xb5, 0x18, 0x15, 0x0a, 0x13, 0x0a, 0x11, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x2a, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0xa8, 0x02, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x31, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xaa, 0x01, 0x92, 0x41, 0x63, 0x4a, 0x2b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x24, 0x0a, 0x22,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x6c, 0x79, 0x4a, 0x34, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x2d, 0x0a, 0x2b, 0x54, 0x68, 0x65,
	0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x74,
	0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x2e, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0xd4, 0x02, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x12, 0x31, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd6, 0x01, 0x92, 0x41, 0x75,
	0x4a, 0x3d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x36, 0x0a, 0x34, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x72,
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x20, 0x75, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4a,
	0x34, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2d, 0x0a, 0x2b, 0x54, 0x68, 0x65, 0x20, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x2e, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43,
	0x3a, 0x01, 0x2a, 0x22, 0x3e, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0x89, 0x02, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x31, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x8b, 0x01, 0x92, 0x41, 0x2d, 0x4a, 0x2b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x24,
	0x0a, 0x22, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x20,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x2a,
	0x3e, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0xa7, 0x02, 0x0a, 0x16, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x92, 0x41, 0x31, 0x4a,
	0x2f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x28, 0x0a, 0x26, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79,
	0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x3a, 0x01, 0x2a, 0x22, 0x49,
	0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x9d, 0x02, 0x0a, 0x14, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x12, 0x33, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x99, 0x01,
	0x92, 0x41, 0x2f, 0x4a, 0x2d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x26, 0x0a, 0x24, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x6c, 0x79, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x3a, 0x01, 0x2a,
	0x22, 0x47, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x98, 0x02, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12,
	0x30, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x92, 0x41, 0x57, 0x4a, 0x38, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x31, 0x0a, 0x2f, 0x41, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x6c, 0x6c, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x4a, 0x1b, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x14, 0x0a, 0x12, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x8a, 0xb5, 0x18, 0x16, 0x0a, 0x14, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x42, 0xa0, 0x08, 0x92, 0x41, 0xe0, 0x07, 0x12, 0xbe, 0x02, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xa7, 0x01, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x5a,
	0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x62, 0x65, 0x74, 0x61, 0x20, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x77,
	0x69, 0x6c, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x20, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x20, 0x61, 0x20, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x2e, 0x22, 0x2e, 0x0a, 0x07, 0x5a, 0x49, 0x54,
	0x41, 0x44, 0x45, 0x4c, 0x12, 0x13, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x1a, 0x0e, 0x68, 0x69, 0x40, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x47, 0x0a, 0x0a, 0x41, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x20, 0x32, 0x2e, 0x30, 0x12, 0x39, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x62, 0x6c, 0x6f, 0x62,
	0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x49, 0x4e, 0x47, 0x2e,
	0x6d, 0x64, 0x32, 0x08, 0x32, 0x2e, 0x30, 0x2d, 0x62, 0x65, 0x74, 0x61, 0x1a, 0x0e, 0x24, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x2d, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x22, 0x01, 0x2f, 0x2a,
	0x02, 0x02, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x32, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x77, 0x65, 0x62, 0x2b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x3a, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x77, 0x65, 0x62, 0x2b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x6d, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x66, 0x0a, 0x47, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61,
	0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f,
	0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x50, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x49, 0x0a, 0x2a, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5a, 0xc2, 0x01, 0x0a, 0xbf, 0x01, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x12, 0xb4, 0x01, 0x08, 0x03, 0x28, 0x04, 0x32, 0x21, 0x24, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x2d, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x3a, 0x1d, 0x24, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x2d, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x2f, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x6c, 0x0a, 0x10, 0x0a,
	0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x0a,
	0x58, 0x0a, 0x2a, 0x75, 0x72, 0x6e, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69,
	0x61, 0x6d, 0x3a, 0x6f, 0x72, 0x67, 0x3a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x69,
	0x64, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x61, 0x75, 0x64, 0x12, 0x2a, 0x75,
	0x72, 0x6e, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69, 0x61, 0x6d, 0x3a, 0x6f,
	0x72, 0x67, 0x3a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x69, 0x64, 0x3a, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x61, 0x75, 0x64, 0x62, 0x40, 0x0a, 0x3e, 0x0a, 0x06, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x0a,
	0x2a, 0x75, 0x72, 0x6e, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69, 0x61, 0x6d,
	0x3a, 0x6f, 0x72, 0x67, 0x3a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x69, 0x64, 0x3a,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x61, 0x75, 0x64, 0x72, 0x3e, 0x0a, 0x22, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45,
	0x4c, 0x12, 0x18, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x5a, 0x3a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x3b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_project_v2beta_project_service_proto_rawDescOnce sync.Once
	file_zitadel_project_v2beta_project_service_proto_rawDescData = file_zitadel_project_v2beta_project_service_proto_rawDesc
)

func file_zitadel_project_v2beta_project_service_proto_rawDescGZIP() []byte {
	file_zitadel_project_v2beta_project_service_proto_rawDescOnce.Do(func() {
		file_zitadel_project_v2beta_project_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_project_v2beta_project_service_proto_rawDescData)
	})
	return file_zitadel_project_v2beta_project_service_proto_rawDescData
}

var file_zitadel_project_v2beta_project_service_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_zitadel_project_v2beta_project_service_proto_goTypes = []interface{}{
	(*CreateProjectRequest)(nil),           // 0: zitadel.project.v2beta.CreateProjectRequest
	(*CreateProjectResponse)(nil),          // 1: zitadel.project.v2beta.CreateProjectResponse
	(*UpdateProjectRequest)(nil),           // 2: zitadel.project.v2beta.UpdateProjectRequest
	(*UpdateProjectResponse)(nil),          // 3: zitadel.project.v2beta.UpdateProjectResponse
	(*DeleteProjectRequest)(nil),           // 4: zitadel.project.v2beta.DeleteProjectRequest
	(*DeleteProjectResponse)(nil),          // 5: zitadel.project.v2beta.DeleteProjectResponse
	(*GetProjectRequest)(nil),              // 6: zitadel.project.v2beta.GetProjectRequest
	(*GetProjectResponse)(nil),             // 7: zitadel.project.v2beta.GetProjectResponse
	(*ListProjectsRequest)(nil),            // 8: zitadel.project.v2beta.ListProjectsRequest
	(*ListProjectsResponse)(nil),           // 9: zitadel.project.v2beta.ListProjectsResponse
	(*DeactivateProjectRequest)(nil),       // 10: zitadel.project.v2beta.DeactivateProjectRequest
	(*DeactivateProjectResponse)(nil),      // 11: zitadel.project.v2beta.DeactivateProjectResponse
	(*ActivateProjectRequest)(nil),         // 12: zitadel.project.v2beta.ActivateProjectRequest
	(*ActivateProjectResponse)(nil),        // 13: zitadel.project.v2beta.ActivateProjectResponse
	(*AddProjectRoleRequest)(nil),          // 14: zitadel.project.v2beta.AddProjectRoleRequest
	(*AddProjectRoleResponse)(nil),         // 15: zitadel.project.v2beta.AddProjectRoleResponse
	(*UpdateProjectRoleRequest)(nil),       // 16: zitadel.project.v2beta.UpdateProjectRoleRequest
	(*UpdateProjectRoleResponse)(nil),      // 17: zitadel.project.v2beta.UpdateProjectRoleResponse
	(*RemoveProjectRoleRequest)(nil),       // 18: zitadel.project.v2beta.RemoveProjectRoleRequest
	(*RemoveProjectRoleResponse)(nil),      // 19: zitadel.project.v2beta.RemoveProjectRoleResponse
	(*ListProjectRolesRequest)(nil),        // 20: zitadel.project.v2beta.ListProjectRolesRequest
	(*ListProjectRolesResponse)(nil),       // 21: zitadel.project.v2beta.ListProjectRolesResponse
	(*CreateProjectGrantRequest)(nil),      // 22: zitadel.project.v2beta.CreateProjectGrantRequest
	(*CreateProjectGrantResponse)(nil),     // 23: zitadel.project.v2beta.CreateProjectGrantResponse
	(*UpdateProjectGrantRequest)(nil),      // 24: zitadel.project.v2beta.UpdateProjectGrantRequest
	(*UpdateProjectGrantResponse)(nil),     // 25: zitadel.project.v2beta.UpdateProjectGrantResponse
	(*DeleteProjectGrantRequest)(nil),      // 26: zitadel.project.v2beta.DeleteProjectGrantRequest
	(*DeleteProjectGrantResponse)(nil),     // 27: zitadel.project.v2beta.DeleteProjectGrantResponse
	(*DeactivateProjectGrantRequest)(nil),  // 28: zitadel.project.v2beta.DeactivateProjectGrantRequest
	(*DeactivateProjectGrantResponse)(nil), // 29: zitadel.project.v2beta.DeactivateProjectGrantResponse
	(*ActivateProjectGrantRequest)(nil),    // 30: zitadel.project.v2beta.ActivateProjectGrantRequest
	(*ActivateProjectGrantResponse)(nil),   // 31: zitadel.project.v2beta.ActivateProjectGrantResponse
	(*ListProjectGrantsRequest)(nil),       // 32: zitadel.project.v2beta.ListProjectGrantsRequest
	(*ListProjectGrantsResponse)(nil),      // 33: zitadel.project.v2beta.ListProjectGrantsResponse
	(PrivateLabelingSetting)(0),            // 34: zitadel.project.v2beta.PrivateLabelingSetting
	(*timestamppb.Timestamp)(nil),          // 35: google.protobuf.Timestamp
	(*Project)(nil),                        // 36: zitadel.project.v2beta.Project
	(*v2beta.PaginationRequest)(nil),       // 37: zitadel.filter.v2beta.PaginationRequest
	(ProjectFieldName)(0),                  // 38: zitadel.project.v2beta.ProjectFieldName
	(*ProjectSearchFilter)(nil),            // 39: zitadel.project.v2beta.ProjectSearchFilter
	(*v2beta.PaginationResponse)(nil),      // 40: zitadel.filter.v2beta.PaginationResponse
	(ProjectRoleFieldName)(0),              // 41: zitadel.project.v2beta.ProjectRoleFieldName
	(*ProjectRoleSearchFilter)(nil),        // 42: zitadel.project.v2beta.ProjectRoleSearchFilter
	(*ProjectRole)(nil),                    // 43: zitadel.project.v2beta.ProjectRole
	(ProjectGrantFieldName)(0),             // 44: zitadel.project.v2beta.ProjectGrantFieldName
	(*ProjectGrantSearchFilter)(nil),       // 45: zitadel.project.v2beta.ProjectGrantSearchFilter
	(*ProjectGrant)(nil),                   // 46: zitadel.project.v2beta.ProjectGrant
}
var file_zitadel_project_v2beta_project_service_proto_depIdxs = []int32{
	34, // 0: zitadel.project.v2beta.CreateProjectRequest.private_labeling_setting:type_name -> zitadel.project.v2beta.PrivateLabelingSetting
	35, // 1: zitadel.project.v2beta.CreateProjectResponse.creation_date:type_name -> google.protobuf.Timestamp
	34, // 2: zitadel.project.v2beta.UpdateProjectRequest.private_labeling_setting:type_name -> zitadel.project.v2beta.PrivateLabelingSetting
	35, // 3: zitadel.project.v2beta.UpdateProjectResponse.change_date:type_name -> google.protobuf.Timestamp
	35, // 4: zitadel.project.v2beta.DeleteProjectResponse.deletion_date:type_name -> google.protobuf.Timestamp
	36, // 5: zitadel.project.v2beta.GetProjectResponse.project:type_name -> zitadel.project.v2beta.Project
	37, // 6: zitadel.project.v2beta.ListProjectsRequest.pagination:type_name -> zitadel.filter.v2beta.PaginationRequest
	38, // 7: zitadel.project.v2beta.ListProjectsRequest.sorting_column:type_name -> zitadel.project.v2beta.ProjectFieldName
	39, // 8: zitadel.project.v2beta.ListProjectsRequest.filters:type_name -> zitadel.project.v2beta.ProjectSearchFilter
	40, // 9: zitadel.project.v2beta.ListProjectsResponse.pagination:type_name -> zitadel.filter.v2beta.PaginationResponse
	36, // 10: zitadel.project.v2beta.ListProjectsResponse.projects:type_name -> zitadel.project.v2beta.Project
	35, // 11: zitadel.project.v2beta.DeactivateProjectResponse.change_date:type_name -> google.protobuf.Timestamp
	35, // 12: zitadel.project.v2beta.ActivateProjectResponse.change_date:type_name -> google.protobuf.Timestamp
	35, // 13: zitadel.project.v2beta.AddProjectRoleResponse.creation_date:type_name -> google.protobuf.Timestamp
	35, // 14: zitadel.project.v2beta.UpdateProjectRoleResponse.change_date:type_name -> google.protobuf.Timestamp
	35, // 15: zitadel.project.v2beta.RemoveProjectRoleResponse.removal_date:type_name -> google.protobuf.Timestamp
	37, // 16: zitadel.project.v2beta.ListProjectRolesRequest.pagination:type_name -> zitadel.filter.v2beta.PaginationRequest
	41, // 17: zitadel.project.v2beta.ListProjectRolesRequest.sorting_column:type_name -> zitadel.project.v2beta.ProjectRoleFieldName
	42, // 18: zitadel.project.v2beta.ListProjectRolesRequest.filters:type_name -> zitadel.project.v2beta.ProjectRoleSearchFilter
	40, // 19: zitadel.project.v2beta.ListProjectRolesResponse.pagination:type_name -> zitadel.filter.v2beta.PaginationResponse
	43, // 20: zitadel.project.v2beta.ListProjectRolesResponse.project_roles:type_name -> zitadel.project.v2beta.ProjectRole
	35, // 21: zitadel.project.v2beta.CreateProjectGrantResponse.creation_date:type_name -> google.protobuf.Timestamp
	35, // 22: zitadel.project.v2beta.UpdateProjectGrantResponse.change_date:type_name -> google.protobuf.Timestamp
	35, // 23: zitadel.project.v2beta.DeleteProjectGrantResponse.deletion_date:type_name -> google.protobuf.Timestamp
	35, // 24: zitadel.project.v2beta.DeactivateProjectGrantResponse.change_date:type_name -> google.protobuf.Timestamp
	35, // 25: zitadel.project.v2beta.ActivateProjectGrantResponse.change_date:type_name -> google.protobuf.Timestamp
	37, // 26: zitadel.project.v2beta.ListProjectGrantsRequest.pagination:type_name -> zitadel.filter.v2beta.PaginationRequest
	44, // 27: zitadel.project.v2beta.ListProjectGrantsRequest.sorting_column:type_name -> zitadel.project.v2beta.ProjectGrantFieldName
	45, // 28: zitadel.project.v2beta.ListProjectGrantsRequest.filters:type_name -> zitadel.project.v2beta.ProjectGrantSearchFilter
	40, // 29: zitadel.project.v2beta.ListProjectGrantsResponse.pagination:type_name -> zitadel.filter.v2beta.PaginationResponse
	46, // 30: zitadel.project.v2beta.ListProjectGrantsResponse.project_grants:type_name -> zitadel.project.v2beta.ProjectGrant
	0,  // 31: zitadel.project.v2beta.ProjectService.CreateProject:input_type -> zitadel.project.v2beta.CreateProjectRequest
	2,  // 32: zitadel.project.v2beta.ProjectService.UpdateProject:input_type -> zitadel.project.v2beta.UpdateProjectRequest
	4,  // 33: zitadel.project.v2beta.ProjectService.DeleteProject:input_type -> zitadel.project.v2beta.DeleteProjectRequest
	6,  // 34: zitadel.project.v2beta.ProjectService.GetProject:input_type -> zitadel.project.v2beta.GetProjectRequest
	8,  // 35: zitadel.project.v2beta.ProjectService.ListProjects:input_type -> zitadel.project.v2beta.ListProjectsRequest
	10, // 36: zitadel.project.v2beta.ProjectService.DeactivateProject:input_type -> zitadel.project.v2beta.DeactivateProjectRequest
	12, // 37: zitadel.project.v2beta.ProjectService.ActivateProject:input_type -> zitadel.project.v2beta.ActivateProjectRequest
	14, // 38: zitadel.project.v2beta.ProjectService.AddProjectRole:input_type -> zitadel.project.v2beta.AddProjectRoleRequest
	16, // 39: zitadel.project.v2beta.ProjectService.UpdateProjectRole:input_type -> zitadel.project.v2beta.UpdateProjectRoleRequest
	18, // 40: zitadel.project.v2beta.ProjectService.RemoveProjectRole:input_type -> zitadel.project.v2beta.RemoveProjectRoleRequest
	20, // 41: zitadel.project.v2beta.ProjectService.ListProjectRoles:input_type -> zitadel.project.v2beta.ListProjectRolesRequest
	22, // 42: zitadel.project.v2beta.ProjectService.CreateProjectGrant:input_type -> zitadel.project.v2beta.CreateProjectGrantRequest
	24, // 43: zitadel.project.v2beta.ProjectService.UpdateProjectGrant:input_type -> zitadel.project.v2beta.UpdateProjectGrantRequest
	26, // 44: zitadel.project.v2beta.ProjectService.DeleteProjectGrant:input_type -> zitadel.project.v2beta.DeleteProjectGrantRequest
	28, // 45: zitadel.project.v2beta.ProjectService.DeactivateProjectGrant:input_type -> zitadel.project.v2beta.DeactivateProjectGrantRequest
	30, // 46: zitadel.project.v2beta.ProjectService.ActivateProjectGrant:input_type -> zitadel.project.v2beta.ActivateProjectGrantRequest
	32, // 47: zitadel.project.v2beta.ProjectService.ListProjectGrants:input_type -> zitadel.project.v2beta.ListProjectGrantsRequest
	1,  // 48: zitadel.project.v2beta.ProjectService.CreateProject:output_type -> zitadel.project.v2beta.CreateProjectResponse
	3,  // 49: zitadel.project.v2beta.ProjectService.UpdateProject:output_type -> zitadel.project.v2beta.UpdateProjectResponse
	5,  // 50: zitadel.project.v2beta.ProjectService.DeleteProject:output_type -> zitadel.project.v2beta.DeleteProjectResponse
	7,  // 51: zitadel.project.v2beta.ProjectService.GetProject:output_type -> zitadel.project.v2beta.GetProjectResponse
	9,  // 52: zitadel.project.v2beta.ProjectService.ListProjects:output_type -> zitadel.project.v2beta.ListProjectsResponse
	11, // 53: zitadel.project.v2beta.ProjectService.DeactivateProject:output_type -> zitadel.project.v2beta.DeactivateProjectResponse
	13, // 54: zitadel.project.v2beta.ProjectService.ActivateProject:output_type -> zitadel.project.v2beta.ActivateProjectResponse
	15, // 55: zitadel.project.v2beta.ProjectService.AddProjectRole:output_type -> zitadel.project.v2beta.AddProjectRoleResponse
	17, // 56: zitadel.project.v2beta.ProjectService.UpdateProjectRole:output_type -> zitadel.project.v2beta.UpdateProjectRoleResponse
	19, // 57: zitadel.project.v2beta.ProjectService.RemoveProjectRole:output_type -> zitadel.project.v2beta.RemoveProjectRoleResponse
	21, // 58: zitadel.project.v2beta.ProjectService.ListProjectRoles:output_type -> zitadel.project.v2beta.ListProjectRolesResponse
	23, // 59: zitadel.project.v2beta.ProjectService.CreateProjectGrant:output_type -> zitadel.project.v2beta.CreateProjectGrantResponse
	25, // 60: zitadel.project.v2beta.ProjectService.UpdateProjectGrant:output_type -> zitadel.project.v2beta.UpdateProjectGrantResponse
	27, // 61: zitadel.project.v2beta.ProjectService.DeleteProjectGrant:output_type -> zitadel.project.v2beta.DeleteProjectGrantResponse
	29, // 62: zitadel.project.v2beta.ProjectService.DeactivateProjectGrant:output_type -> zitadel.project.v2beta.DeactivateProjectGrantResponse
	31, // 63: zitadel.project.v2beta.ProjectService.ActivateProjectGrant:output_type -> zitadel.project.v2beta.ActivateProjectGrantResponse
	33, // 64: zitadel.project.v2beta.ProjectService.ListProjectGrants:output_type -> zitadel.project.v2beta.ListProjectGrantsResponse
	48, // [48:65] is the sub-list for method output_type
	31, // [31:48] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_zitadel_project_v2beta_project_service_proto_init() }
func file_zitadel_project_v2beta_project_service_proto_init() {
	if File_zitadel_project_v2beta_project_service_proto != nil {
		return
	}
	file_zitadel_project_v2beta_query_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zitadel_project_v2beta_project_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProjectRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProjectRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveProjectRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveProjectRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectRolesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectRolesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectGrantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectGrantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectGrantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectGrantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProjectGrantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProjectGrantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateProjectGrantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateProjectGrantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateProjectGrantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateProjectGrantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectGrantsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_project_v2beta_project_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectGrantsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_project_v2beta_project_service_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_zitadel_project_v2beta_project_service_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_zitadel_project_v2beta_project_service_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_zitadel_project_v2beta_project_service_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_zitadel_project_v2beta_project_service_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_zitadel_project_v2beta_project_service_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_zitadel_project_v2beta_project_service_proto_msgTypes[32].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_project_v2beta_project_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zitadel_project_v2beta_project_service_proto_goTypes,
		DependencyIndexes: file_zitadel_project_v2beta_project_service_proto_depIdxs,
		MessageInfos:      file_zitadel_project_v2beta_project_service_proto_msgTypes,
	}.Build()
	File_zitadel_project_v2beta_project_service_proto = out.File
	file_zitadel_project_v2beta_project_service_proto_rawDesc = nil
	file_zitadel_project_v2beta_project_service_proto_goTypes = nil
	file_zitadel_project_v2beta_project_service_proto_depIdxs = nil
}
