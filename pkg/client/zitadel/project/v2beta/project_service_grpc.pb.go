// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: zitadel/project/v2beta/project_service.proto

package project

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProjectService_CreateProject_FullMethodName          = "/zitadel.project.v2beta.ProjectService/CreateProject"
	ProjectService_UpdateProject_FullMethodName          = "/zitadel.project.v2beta.ProjectService/UpdateProject"
	ProjectService_DeleteProject_FullMethodName          = "/zitadel.project.v2beta.ProjectService/DeleteProject"
	ProjectService_GetProject_FullMethodName             = "/zitadel.project.v2beta.ProjectService/GetProject"
	ProjectService_ListProjects_FullMethodName           = "/zitadel.project.v2beta.ProjectService/ListProjects"
	ProjectService_DeactivateProject_FullMethodName      = "/zitadel.project.v2beta.ProjectService/DeactivateProject"
	ProjectService_ActivateProject_FullMethodName        = "/zitadel.project.v2beta.ProjectService/ActivateProject"
	ProjectService_AddProjectRole_FullMethodName         = "/zitadel.project.v2beta.ProjectService/AddProjectRole"
	ProjectService_UpdateProjectRole_FullMethodName      = "/zitadel.project.v2beta.ProjectService/UpdateProjectRole"
	ProjectService_RemoveProjectRole_FullMethodName      = "/zitadel.project.v2beta.ProjectService/RemoveProjectRole"
	ProjectService_ListProjectRoles_FullMethodName       = "/zitadel.project.v2beta.ProjectService/ListProjectRoles"
	ProjectService_CreateProjectGrant_FullMethodName     = "/zitadel.project.v2beta.ProjectService/CreateProjectGrant"
	ProjectService_UpdateProjectGrant_FullMethodName     = "/zitadel.project.v2beta.ProjectService/UpdateProjectGrant"
	ProjectService_DeleteProjectGrant_FullMethodName     = "/zitadel.project.v2beta.ProjectService/DeleteProjectGrant"
	ProjectService_DeactivateProjectGrant_FullMethodName = "/zitadel.project.v2beta.ProjectService/DeactivateProjectGrant"
	ProjectService_ActivateProjectGrant_FullMethodName   = "/zitadel.project.v2beta.ProjectService/ActivateProjectGrant"
	ProjectService_ListProjectGrants_FullMethodName      = "/zitadel.project.v2beta.ProjectService/ListProjectGrants"
)

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	// Create Project
	//
	// Create a new Project.
	//
	// Required permission:
	//   - `project.create`
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	// Update Project
	//
	// Update an existing project.
	//
	// Required permission:
	//   - `project.write`
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	// Delete Project
	//
	// Delete an existing project.
	// In case the project is not found, the request will return a successful response as
	// the desired state is already achieved.
	//
	// Required permission:
	//   - `project.delete`
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	// Get Project
	//
	// Returns the project identified by the requested ID.
	//
	// Required permission:
	//   - `project.read`
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	// List Projects
	//
	// List all matching projects. By default all projects of the instance that the caller has permission to read are returned.
	// Make sure to include a limit and sorting for pagination.
	//
	// Required permission:
	//   - `project.read`
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// Deactivate Project
	//
	// Set the state of a project to deactivated. Request returns no error if the project is already deactivated.
	// Applications under deactivated projects are not able to login anymore.
	//
	// Required permission:
	//   - `project.write`
	DeactivateProject(ctx context.Context, in *DeactivateProjectRequest, opts ...grpc.CallOption) (*DeactivateProjectResponse, error)
	// Activate Project
	//
	// Set the state of a project to active. Request returns no error if the project is already activated.
	//
	// Required permission:
	//   - `project.write`
	ActivateProject(ctx context.Context, in *ActivateProjectRequest, opts ...grpc.CallOption) (*ActivateProjectResponse, error)
	// Add Project Role
	//
	// Add a new project role to a project. The key must be unique within the project.
	//
	// Required permission:
	//   - `project.role.write`
	AddProjectRole(ctx context.Context, in *AddProjectRoleRequest, opts ...grpc.CallOption) (*AddProjectRoleResponse, error)
	// Update Project Role
	//
	// Change a project role. The key is not editable. If a key should change, remove the role and create a new one.
	//
	// Required permission:
	//   - `project.role.write`
	UpdateProjectRole(ctx context.Context, in *UpdateProjectRoleRequest, opts ...grpc.CallOption) (*UpdateProjectRoleResponse, error)
	// Remove Project Role
	//
	// Removes the role from the project and on every resource it has a dependency. This includes project grants and user grants.
	//
	// Required permission:
	//   - `project.role.write`
	RemoveProjectRole(ctx context.Context, in *RemoveProjectRoleRequest, opts ...grpc.CallOption) (*RemoveProjectRoleResponse, error)
	// List Project Roles
	//
	// Returns all roles of a project matching the search query.
	//
	// Required permission:
	//   - `project.role.read`
	ListProjectRoles(ctx context.Context, in *ListProjectRolesRequest, opts ...grpc.CallOption) (*ListProjectRolesResponse, error)
	// Create Project Grant
	//
	// Grant a project to another organization.
	// The project grant will allow the granted organization to access the project and manage the authorizations for its users.
	//
	// Required permission:
	//   - `project.grant.create`
	CreateProjectGrant(ctx context.Context, in *CreateProjectGrantRequest, opts ...grpc.CallOption) (*CreateProjectGrantResponse, error)
	// Update Project Grant
	//
	// Change the roles of the project that is granted to another organization.
	// The project grant will allow the granted organization to access the project and manage the authorizations for its users.
	//
	// Required permission:
	//   - `project.grant.write`
	UpdateProjectGrant(ctx context.Context, in *UpdateProjectGrantRequest, opts ...grpc.CallOption) (*UpdateProjectGrantResponse, error)
	// Delete Project Grant
	//
	// Delete a project grant. All user grants for this project grant will also be removed.
	// A user will not have access to the project afterward (if permissions are checked).
	// In case the project grant is not found, the request will return a successful response as
	// the desired state is already achieved.
	//
	// Required permission:
	//   - `project.grant.delete`
	DeleteProjectGrant(ctx context.Context, in *DeleteProjectGrantRequest, opts ...grpc.CallOption) (*DeleteProjectGrantResponse, error)
	// Deactivate Project Grant
	//
	// Set the state of the project grant to deactivated.
	// Applications under deactivated projects grants are not able to login anymore.
	//
	// Required permission:
	//   - `project.grant.write`
	DeactivateProjectGrant(ctx context.Context, in *DeactivateProjectGrantRequest, opts ...grpc.CallOption) (*DeactivateProjectGrantResponse, error)
	// Activate Project Grant
	//
	// Set the state of the project grant to activated.
	//
	// Required permission:
	//   - `project.grant.write`
	ActivateProjectGrant(ctx context.Context, in *ActivateProjectGrantRequest, opts ...grpc.CallOption) (*ActivateProjectGrantResponse, error)
	// List Project Grants
	//
	// Returns a list of project grants. A project grant is when the organization grants its project to another organization.
	//
	// Required permission:
	//   - `project.grant.write`
	ListProjectGrants(ctx context.Context, in *ListProjectGrantsRequest, opts ...grpc.CallOption) (*ListProjectGrantsResponse, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, ProjectService_CreateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, ProjectService_UpdateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, ProjectService_DeleteProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, ProjectService_GetProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, ProjectService_ListProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeactivateProject(ctx context.Context, in *DeactivateProjectRequest, opts ...grpc.CallOption) (*DeactivateProjectResponse, error) {
	out := new(DeactivateProjectResponse)
	err := c.cc.Invoke(ctx, ProjectService_DeactivateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ActivateProject(ctx context.Context, in *ActivateProjectRequest, opts ...grpc.CallOption) (*ActivateProjectResponse, error) {
	out := new(ActivateProjectResponse)
	err := c.cc.Invoke(ctx, ProjectService_ActivateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) AddProjectRole(ctx context.Context, in *AddProjectRoleRequest, opts ...grpc.CallOption) (*AddProjectRoleResponse, error) {
	out := new(AddProjectRoleResponse)
	err := c.cc.Invoke(ctx, ProjectService_AddProjectRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateProjectRole(ctx context.Context, in *UpdateProjectRoleRequest, opts ...grpc.CallOption) (*UpdateProjectRoleResponse, error) {
	out := new(UpdateProjectRoleResponse)
	err := c.cc.Invoke(ctx, ProjectService_UpdateProjectRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) RemoveProjectRole(ctx context.Context, in *RemoveProjectRoleRequest, opts ...grpc.CallOption) (*RemoveProjectRoleResponse, error) {
	out := new(RemoveProjectRoleResponse)
	err := c.cc.Invoke(ctx, ProjectService_RemoveProjectRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ListProjectRoles(ctx context.Context, in *ListProjectRolesRequest, opts ...grpc.CallOption) (*ListProjectRolesResponse, error) {
	out := new(ListProjectRolesResponse)
	err := c.cc.Invoke(ctx, ProjectService_ListProjectRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateProjectGrant(ctx context.Context, in *CreateProjectGrantRequest, opts ...grpc.CallOption) (*CreateProjectGrantResponse, error) {
	out := new(CreateProjectGrantResponse)
	err := c.cc.Invoke(ctx, ProjectService_CreateProjectGrant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateProjectGrant(ctx context.Context, in *UpdateProjectGrantRequest, opts ...grpc.CallOption) (*UpdateProjectGrantResponse, error) {
	out := new(UpdateProjectGrantResponse)
	err := c.cc.Invoke(ctx, ProjectService_UpdateProjectGrant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteProjectGrant(ctx context.Context, in *DeleteProjectGrantRequest, opts ...grpc.CallOption) (*DeleteProjectGrantResponse, error) {
	out := new(DeleteProjectGrantResponse)
	err := c.cc.Invoke(ctx, ProjectService_DeleteProjectGrant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeactivateProjectGrant(ctx context.Context, in *DeactivateProjectGrantRequest, opts ...grpc.CallOption) (*DeactivateProjectGrantResponse, error) {
	out := new(DeactivateProjectGrantResponse)
	err := c.cc.Invoke(ctx, ProjectService_DeactivateProjectGrant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ActivateProjectGrant(ctx context.Context, in *ActivateProjectGrantRequest, opts ...grpc.CallOption) (*ActivateProjectGrantResponse, error) {
	out := new(ActivateProjectGrantResponse)
	err := c.cc.Invoke(ctx, ProjectService_ActivateProjectGrant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ListProjectGrants(ctx context.Context, in *ListProjectGrantsRequest, opts ...grpc.CallOption) (*ListProjectGrantsResponse, error) {
	out := new(ListProjectGrantsResponse)
	err := c.cc.Invoke(ctx, ProjectService_ListProjectGrants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations must embed UnimplementedProjectServiceServer
// for forward compatibility
type ProjectServiceServer interface {
	// Create Project
	//
	// Create a new Project.
	//
	// Required permission:
	//   - `project.create`
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	// Update Project
	//
	// Update an existing project.
	//
	// Required permission:
	//   - `project.write`
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	// Delete Project
	//
	// Delete an existing project.
	// In case the project is not found, the request will return a successful response as
	// the desired state is already achieved.
	//
	// Required permission:
	//   - `project.delete`
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	// Get Project
	//
	// Returns the project identified by the requested ID.
	//
	// Required permission:
	//   - `project.read`
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// List Projects
	//
	// List all matching projects. By default all projects of the instance that the caller has permission to read are returned.
	// Make sure to include a limit and sorting for pagination.
	//
	// Required permission:
	//   - `project.read`
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	// Deactivate Project
	//
	// Set the state of a project to deactivated. Request returns no error if the project is already deactivated.
	// Applications under deactivated projects are not able to login anymore.
	//
	// Required permission:
	//   - `project.write`
	DeactivateProject(context.Context, *DeactivateProjectRequest) (*DeactivateProjectResponse, error)
	// Activate Project
	//
	// Set the state of a project to active. Request returns no error if the project is already activated.
	//
	// Required permission:
	//   - `project.write`
	ActivateProject(context.Context, *ActivateProjectRequest) (*ActivateProjectResponse, error)
	// Add Project Role
	//
	// Add a new project role to a project. The key must be unique within the project.
	//
	// Required permission:
	//   - `project.role.write`
	AddProjectRole(context.Context, *AddProjectRoleRequest) (*AddProjectRoleResponse, error)
	// Update Project Role
	//
	// Change a project role. The key is not editable. If a key should change, remove the role and create a new one.
	//
	// Required permission:
	//   - `project.role.write`
	UpdateProjectRole(context.Context, *UpdateProjectRoleRequest) (*UpdateProjectRoleResponse, error)
	// Remove Project Role
	//
	// Removes the role from the project and on every resource it has a dependency. This includes project grants and user grants.
	//
	// Required permission:
	//   - `project.role.write`
	RemoveProjectRole(context.Context, *RemoveProjectRoleRequest) (*RemoveProjectRoleResponse, error)
	// List Project Roles
	//
	// Returns all roles of a project matching the search query.
	//
	// Required permission:
	//   - `project.role.read`
	ListProjectRoles(context.Context, *ListProjectRolesRequest) (*ListProjectRolesResponse, error)
	// Create Project Grant
	//
	// Grant a project to another organization.
	// The project grant will allow the granted organization to access the project and manage the authorizations for its users.
	//
	// Required permission:
	//   - `project.grant.create`
	CreateProjectGrant(context.Context, *CreateProjectGrantRequest) (*CreateProjectGrantResponse, error)
	// Update Project Grant
	//
	// Change the roles of the project that is granted to another organization.
	// The project grant will allow the granted organization to access the project and manage the authorizations for its users.
	//
	// Required permission:
	//   - `project.grant.write`
	UpdateProjectGrant(context.Context, *UpdateProjectGrantRequest) (*UpdateProjectGrantResponse, error)
	// Delete Project Grant
	//
	// Delete a project grant. All user grants for this project grant will also be removed.
	// A user will not have access to the project afterward (if permissions are checked).
	// In case the project grant is not found, the request will return a successful response as
	// the desired state is already achieved.
	//
	// Required permission:
	//   - `project.grant.delete`
	DeleteProjectGrant(context.Context, *DeleteProjectGrantRequest) (*DeleteProjectGrantResponse, error)
	// Deactivate Project Grant
	//
	// Set the state of the project grant to deactivated.
	// Applications under deactivated projects grants are not able to login anymore.
	//
	// Required permission:
	//   - `project.grant.write`
	DeactivateProjectGrant(context.Context, *DeactivateProjectGrantRequest) (*DeactivateProjectGrantResponse, error)
	// Activate Project Grant
	//
	// Set the state of the project grant to activated.
	//
	// Required permission:
	//   - `project.grant.write`
	ActivateProjectGrant(context.Context, *ActivateProjectGrantRequest) (*ActivateProjectGrantResponse, error)
	// List Project Grants
	//
	// Returns a list of project grants. A project grant is when the organization grants its project to another organization.
	//
	// Required permission:
	//   - `project.grant.write`
	ListProjectGrants(context.Context, *ListProjectGrantsRequest) (*ListProjectGrantsResponse, error)
	mustEmbedUnimplementedProjectServiceServer()
}

// UnimplementedProjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (UnimplementedProjectServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedProjectServiceServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedProjectServiceServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedProjectServiceServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedProjectServiceServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedProjectServiceServer) DeactivateProject(context.Context, *DeactivateProjectRequest) (*DeactivateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateProject not implemented")
}
func (UnimplementedProjectServiceServer) ActivateProject(context.Context, *ActivateProjectRequest) (*ActivateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateProject not implemented")
}
func (UnimplementedProjectServiceServer) AddProjectRole(context.Context, *AddProjectRoleRequest) (*AddProjectRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectRole not implemented")
}
func (UnimplementedProjectServiceServer) UpdateProjectRole(context.Context, *UpdateProjectRoleRequest) (*UpdateProjectRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectRole not implemented")
}
func (UnimplementedProjectServiceServer) RemoveProjectRole(context.Context, *RemoveProjectRoleRequest) (*RemoveProjectRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProjectRole not implemented")
}
func (UnimplementedProjectServiceServer) ListProjectRoles(context.Context, *ListProjectRolesRequest) (*ListProjectRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectRoles not implemented")
}
func (UnimplementedProjectServiceServer) CreateProjectGrant(context.Context, *CreateProjectGrantRequest) (*CreateProjectGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectGrant not implemented")
}
func (UnimplementedProjectServiceServer) UpdateProjectGrant(context.Context, *UpdateProjectGrantRequest) (*UpdateProjectGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectGrant not implemented")
}
func (UnimplementedProjectServiceServer) DeleteProjectGrant(context.Context, *DeleteProjectGrantRequest) (*DeleteProjectGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectGrant not implemented")
}
func (UnimplementedProjectServiceServer) DeactivateProjectGrant(context.Context, *DeactivateProjectGrantRequest) (*DeactivateProjectGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateProjectGrant not implemented")
}
func (UnimplementedProjectServiceServer) ActivateProjectGrant(context.Context, *ActivateProjectGrantRequest) (*ActivateProjectGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateProjectGrant not implemented")
}
func (UnimplementedProjectServiceServer) ListProjectGrants(context.Context, *ListProjectGrantsRequest) (*ListProjectGrantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectGrants not implemented")
}
func (UnimplementedProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_ListProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeactivateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeactivateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_DeactivateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeactivateProject(ctx, req.(*DeactivateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ActivateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ActivateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_ActivateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ActivateProject(ctx, req.(*ActivateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_AddProjectRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AddProjectRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_AddProjectRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AddProjectRole(ctx, req.(*AddProjectRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateProjectRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateProjectRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_UpdateProjectRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateProjectRole(ctx, req.(*UpdateProjectRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_RemoveProjectRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProjectRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RemoveProjectRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_RemoveProjectRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RemoveProjectRole(ctx, req.(*RemoveProjectRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ListProjectRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ListProjectRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_ListProjectRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ListProjectRoles(ctx, req.(*ListProjectRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateProjectGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProjectGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_CreateProjectGrant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProjectGrant(ctx, req.(*CreateProjectGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateProjectGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateProjectGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_UpdateProjectGrant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateProjectGrant(ctx, req.(*UpdateProjectGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteProjectGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteProjectGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_DeleteProjectGrant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteProjectGrant(ctx, req.(*DeleteProjectGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeactivateProjectGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateProjectGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeactivateProjectGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_DeactivateProjectGrant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeactivateProjectGrant(ctx, req.(*DeactivateProjectGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ActivateProjectGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateProjectGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ActivateProjectGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_ActivateProjectGrant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ActivateProjectGrant(ctx, req.(*ActivateProjectGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ListProjectGrants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectGrantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ListProjectGrants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_ListProjectGrants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ListProjectGrants(ctx, req.(*ListProjectGrantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zitadel.project.v2beta.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProject",
			Handler:    _ProjectService_CreateProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ProjectService_UpdateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _ProjectService_DeleteProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _ProjectService_GetProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _ProjectService_ListProjects_Handler,
		},
		{
			MethodName: "DeactivateProject",
			Handler:    _ProjectService_DeactivateProject_Handler,
		},
		{
			MethodName: "ActivateProject",
			Handler:    _ProjectService_ActivateProject_Handler,
		},
		{
			MethodName: "AddProjectRole",
			Handler:    _ProjectService_AddProjectRole_Handler,
		},
		{
			MethodName: "UpdateProjectRole",
			Handler:    _ProjectService_UpdateProjectRole_Handler,
		},
		{
			MethodName: "RemoveProjectRole",
			Handler:    _ProjectService_RemoveProjectRole_Handler,
		},
		{
			MethodName: "ListProjectRoles",
			Handler:    _ProjectService_ListProjectRoles_Handler,
		},
		{
			MethodName: "CreateProjectGrant",
			Handler:    _ProjectService_CreateProjectGrant_Handler,
		},
		{
			MethodName: "UpdateProjectGrant",
			Handler:    _ProjectService_UpdateProjectGrant_Handler,
		},
		{
			MethodName: "DeleteProjectGrant",
			Handler:    _ProjectService_DeleteProjectGrant_Handler,
		},
		{
			MethodName: "DeactivateProjectGrant",
			Handler:    _ProjectService_DeactivateProjectGrant_Handler,
		},
		{
			MethodName: "ActivateProjectGrant",
			Handler:    _ProjectService_ActivateProjectGrant_Handler,
		},
		{
			MethodName: "ListProjectGrants",
			Handler:    _ProjectService_ListProjectGrants_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zitadel/project/v2beta/project_service.proto",
}
