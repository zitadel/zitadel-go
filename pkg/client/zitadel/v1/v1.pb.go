// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/v1.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	authn "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/authn"
	idp "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/idp"
	management "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/management"
	org "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/org"
	user "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/user"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlowType int32

const (
	FlowType_FLOW_TYPE_UNSPECIFIED             FlowType = 0
	FlowType_FLOW_TYPE_EXTERNAL_AUTHENTICATION FlowType = 1
)

// Enum value maps for FlowType.
var (
	FlowType_name = map[int32]string{
		0: "FLOW_TYPE_UNSPECIFIED",
		1: "FLOW_TYPE_EXTERNAL_AUTHENTICATION",
	}
	FlowType_value = map[string]int32{
		"FLOW_TYPE_UNSPECIFIED":             0,
		"FLOW_TYPE_EXTERNAL_AUTHENTICATION": 1,
	}
)

func (x FlowType) Enum() *FlowType {
	p := new(FlowType)
	*p = x
	return p
}

func (x FlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_v1_proto_enumTypes[0].Descriptor()
}

func (FlowType) Type() protoreflect.EnumType {
	return &file_zitadel_v1_proto_enumTypes[0]
}

func (x FlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowType.Descriptor instead.
func (FlowType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{0}
}

type TriggerType int32

const (
	TriggerType_TRIGGER_TYPE_UNSPECIFIED         TriggerType = 0
	TriggerType_TRIGGER_TYPE_POST_AUTHENTICATION TriggerType = 1
	TriggerType_TRIGGER_TYPE_PRE_CREATION        TriggerType = 2
	TriggerType_TRIGGER_TYPE_POST_CREATION       TriggerType = 3
)

// Enum value maps for TriggerType.
var (
	TriggerType_name = map[int32]string{
		0: "TRIGGER_TYPE_UNSPECIFIED",
		1: "TRIGGER_TYPE_POST_AUTHENTICATION",
		2: "TRIGGER_TYPE_PRE_CREATION",
		3: "TRIGGER_TYPE_POST_CREATION",
	}
	TriggerType_value = map[string]int32{
		"TRIGGER_TYPE_UNSPECIFIED":         0,
		"TRIGGER_TYPE_POST_AUTHENTICATION": 1,
		"TRIGGER_TYPE_PRE_CREATION":        2,
		"TRIGGER_TYPE_POST_CREATION":       3,
	}
)

func (x TriggerType) Enum() *TriggerType {
	p := new(TriggerType)
	*p = x
	return p
}

func (x TriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_v1_proto_enumTypes[1].Descriptor()
}

func (TriggerType) Type() protoreflect.EnumType {
	return &file_zitadel_v1_proto_enumTypes[1]
}

func (x TriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerType.Descriptor instead.
func (TriggerType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{1}
}

type AddCustomOrgIAMPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId                 string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	UserLoginMustBeDomain bool   `protobuf:"varint,2,opt,name=user_login_must_be_domain,json=userLoginMustBeDomain,proto3" json:"user_login_must_be_domain,omitempty"` // the username has to end with the domain of its organization (uniqueness is organization based)
}

func (x *AddCustomOrgIAMPolicyRequest) Reset() {
	*x = AddCustomOrgIAMPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCustomOrgIAMPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCustomOrgIAMPolicyRequest) ProtoMessage() {}

func (x *AddCustomOrgIAMPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCustomOrgIAMPolicyRequest.ProtoReflect.Descriptor instead.
func (*AddCustomOrgIAMPolicyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{0}
}

func (x *AddCustomOrgIAMPolicyRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *AddCustomOrgIAMPolicyRequest) GetUserLoginMustBeDomain() bool {
	if x != nil {
		return x.UserLoginMustBeDomain
	}
	return false
}

type ImportDataOrg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orgs []*DataOrg `protobuf:"bytes,1,rep,name=orgs,proto3" json:"orgs,omitempty"`
}

func (x *ImportDataOrg) Reset() {
	*x = ImportDataOrg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDataOrg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDataOrg) ProtoMessage() {}

func (x *ImportDataOrg) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDataOrg.ProtoReflect.Descriptor instead.
func (*ImportDataOrg) Descriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{1}
}

func (x *ImportDataOrg) GetOrgs() []*DataOrg {
	if x != nil {
		return x.Orgs
	}
	return nil
}

type DataOrg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId                            string                                                            `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Org                              *management.AddOrgRequest                                         `protobuf:"bytes,3,opt,name=org,proto3" json:"org,omitempty"`
	IamPolicy                        *AddCustomOrgIAMPolicyRequest                                     `protobuf:"bytes,4,opt,name=iam_policy,json=iamPolicy,proto3" json:"iam_policy,omitempty"`
	LabelPolicy                      *management.AddCustomLabelPolicyRequest                           `protobuf:"bytes,5,opt,name=label_policy,json=labelPolicy,proto3" json:"label_policy,omitempty"`
	LockoutPolicy                    *management.AddCustomLockoutPolicyRequest                         `protobuf:"bytes,6,opt,name=lockout_policy,json=lockoutPolicy,proto3" json:"lockout_policy,omitempty"`
	LoginPolicy                      *management.AddCustomLoginPolicyRequest                           `protobuf:"bytes,7,opt,name=login_policy,json=loginPolicy,proto3" json:"login_policy,omitempty"`
	PasswordComplexityPolicy         *management.AddCustomPasswordComplexityPolicyRequest              `protobuf:"bytes,8,opt,name=password_complexity_policy,json=passwordComplexityPolicy,proto3" json:"password_complexity_policy,omitempty"`
	PrivacyPolicy                    *management.AddCustomPrivacyPolicyRequest                         `protobuf:"bytes,9,opt,name=privacy_policy,json=privacyPolicy,proto3" json:"privacy_policy,omitempty"`
	Projects                         []*DataProject                                                    `protobuf:"bytes,10,rep,name=projects,proto3" json:"projects,omitempty"`
	ProjectRoles                     []*management.AddProjectRoleRequest                               `protobuf:"bytes,11,rep,name=project_roles,json=projectRoles,proto3" json:"project_roles,omitempty"`
	ApiApps                          []*DataAPIApplication                                             `protobuf:"bytes,12,rep,name=api_apps,json=apiApps,proto3" json:"api_apps,omitempty"`
	OidcApps                         []*DataOIDCApplication                                            `protobuf:"bytes,13,rep,name=oidc_apps,json=oidcApps,proto3" json:"oidc_apps,omitempty"`
	HumanUsers                       []*DataHumanUser                                                  `protobuf:"bytes,14,rep,name=human_users,json=humanUsers,proto3" json:"human_users,omitempty"`
	MachineUsers                     []*DataMachineUser                                                `protobuf:"bytes,15,rep,name=machine_users,json=machineUsers,proto3" json:"machine_users,omitempty"`
	TriggerActions                   []*SetTriggerActionsRequest                                       `protobuf:"bytes,16,rep,name=trigger_actions,json=triggerActions,proto3" json:"trigger_actions,omitempty"`
	Actions                          []*DataAction                                                     `protobuf:"bytes,17,rep,name=actions,proto3" json:"actions,omitempty"`
	ProjectGrants                    []*DataProjectGrant                                               `protobuf:"bytes,18,rep,name=project_grants,json=projectGrants,proto3" json:"project_grants,omitempty"`
	UserGrants                       []*management.AddUserGrantRequest                                 `protobuf:"bytes,19,rep,name=user_grants,json=userGrants,proto3" json:"user_grants,omitempty"`
	OrgMembers                       []*management.AddOrgMemberRequest                                 `protobuf:"bytes,20,rep,name=org_members,json=orgMembers,proto3" json:"org_members,omitempty"`
	ProjectMembers                   []*management.AddProjectMemberRequest                             `protobuf:"bytes,21,rep,name=project_members,json=projectMembers,proto3" json:"project_members,omitempty"`
	ProjectGrantMembers              []*management.AddProjectGrantMemberRequest                        `protobuf:"bytes,22,rep,name=project_grant_members,json=projectGrantMembers,proto3" json:"project_grant_members,omitempty"`
	UserMetadata                     []*management.SetUserMetadataRequest                              `protobuf:"bytes,23,rep,name=user_metadata,json=userMetadata,proto3" json:"user_metadata,omitempty"`
	LoginTexts                       []*management.SetCustomLoginTextsRequest                          `protobuf:"bytes,24,rep,name=login_texts,json=loginTexts,proto3" json:"login_texts,omitempty"`
	InitMessages                     []*management.SetCustomInitMessageTextRequest                     `protobuf:"bytes,25,rep,name=init_messages,json=initMessages,proto3" json:"init_messages,omitempty"`
	PasswordResetMessages            []*management.SetCustomPasswordResetMessageTextRequest            `protobuf:"bytes,26,rep,name=password_reset_messages,json=passwordResetMessages,proto3" json:"password_reset_messages,omitempty"`
	VerifyEmailMessages              []*management.SetCustomVerifyEmailMessageTextRequest              `protobuf:"bytes,27,rep,name=verify_email_messages,json=verifyEmailMessages,proto3" json:"verify_email_messages,omitempty"`
	VerifyPhoneMessages              []*management.SetCustomVerifyPhoneMessageTextRequest              `protobuf:"bytes,28,rep,name=verify_phone_messages,json=verifyPhoneMessages,proto3" json:"verify_phone_messages,omitempty"`
	DomainClaimedMessages            []*management.SetCustomDomainClaimedMessageTextRequest            `protobuf:"bytes,29,rep,name=domain_claimed_messages,json=domainClaimedMessages,proto3" json:"domain_claimed_messages,omitempty"`
	PasswordlessRegistrationMessages []*management.SetCustomPasswordlessRegistrationMessageTextRequest `protobuf:"bytes,30,rep,name=passwordless_registration_messages,json=passwordlessRegistrationMessages,proto3" json:"passwordless_registration_messages,omitempty"`
	OidcIdps                         []*DataOIDCIDP                                                    `protobuf:"bytes,31,rep,name=oidc_idps,json=oidcIdps,proto3" json:"oidc_idps,omitempty"`
	JwtIdps                          []*DataJWTIDP                                                     `protobuf:"bytes,32,rep,name=jwt_idps,json=jwtIdps,proto3" json:"jwt_idps,omitempty"`
	SecondFactors                    []*management.AddSecondFactorToLoginPolicyRequest                 `protobuf:"bytes,33,rep,name=second_factors,json=secondFactors,proto3" json:"second_factors,omitempty"`
	MultiFactors                     []*management.AddMultiFactorToLoginPolicyRequest                  `protobuf:"bytes,34,rep,name=multi_factors,json=multiFactors,proto3" json:"multi_factors,omitempty"`
	Idps                             []*management.AddIDPToLoginPolicyRequest                          `protobuf:"bytes,35,rep,name=idps,proto3" json:"idps,omitempty"`
	UserLinks                        []*idp.IDPUserLink                                                `protobuf:"bytes,36,rep,name=user_links,json=userLinks,proto3" json:"user_links,omitempty"`
	Domains                          []*org.Domain                                                     `protobuf:"bytes,37,rep,name=domains,proto3" json:"domains,omitempty"`
	AppKeys                          []*DataAppKey                                                     `protobuf:"bytes,38,rep,name=app_keys,json=appKeys,proto3" json:"app_keys,omitempty"`
	MachineKeys                      []*DataMachineKey                                                 `protobuf:"bytes,39,rep,name=machine_keys,json=machineKeys,proto3" json:"machine_keys,omitempty"`
	InviteUserMessages               []*management.SetCustomInviteUserMessageTextRequest               `protobuf:"bytes,40,rep,name=invite_user_messages,json=inviteUserMessages,proto3" json:"invite_user_messages,omitempty"`
}

func (x *DataOrg) Reset() {
	*x = DataOrg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataOrg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataOrg) ProtoMessage() {}

func (x *DataOrg) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataOrg.ProtoReflect.Descriptor instead.
func (*DataOrg) Descriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{2}
}

func (x *DataOrg) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *DataOrg) GetOrg() *management.AddOrgRequest {
	if x != nil {
		return x.Org
	}
	return nil
}

func (x *DataOrg) GetIamPolicy() *AddCustomOrgIAMPolicyRequest {
	if x != nil {
		return x.IamPolicy
	}
	return nil
}

func (x *DataOrg) GetLabelPolicy() *management.AddCustomLabelPolicyRequest {
	if x != nil {
		return x.LabelPolicy
	}
	return nil
}

func (x *DataOrg) GetLockoutPolicy() *management.AddCustomLockoutPolicyRequest {
	if x != nil {
		return x.LockoutPolicy
	}
	return nil
}

func (x *DataOrg) GetLoginPolicy() *management.AddCustomLoginPolicyRequest {
	if x != nil {
		return x.LoginPolicy
	}
	return nil
}

func (x *DataOrg) GetPasswordComplexityPolicy() *management.AddCustomPasswordComplexityPolicyRequest {
	if x != nil {
		return x.PasswordComplexityPolicy
	}
	return nil
}

func (x *DataOrg) GetPrivacyPolicy() *management.AddCustomPrivacyPolicyRequest {
	if x != nil {
		return x.PrivacyPolicy
	}
	return nil
}

func (x *DataOrg) GetProjects() []*DataProject {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *DataOrg) GetProjectRoles() []*management.AddProjectRoleRequest {
	if x != nil {
		return x.ProjectRoles
	}
	return nil
}

func (x *DataOrg) GetApiApps() []*DataAPIApplication {
	if x != nil {
		return x.ApiApps
	}
	return nil
}

func (x *DataOrg) GetOidcApps() []*DataOIDCApplication {
	if x != nil {
		return x.OidcApps
	}
	return nil
}

func (x *DataOrg) GetHumanUsers() []*DataHumanUser {
	if x != nil {
		return x.HumanUsers
	}
	return nil
}

func (x *DataOrg) GetMachineUsers() []*DataMachineUser {
	if x != nil {
		return x.MachineUsers
	}
	return nil
}

func (x *DataOrg) GetTriggerActions() []*SetTriggerActionsRequest {
	if x != nil {
		return x.TriggerActions
	}
	return nil
}

func (x *DataOrg) GetActions() []*DataAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *DataOrg) GetProjectGrants() []*DataProjectGrant {
	if x != nil {
		return x.ProjectGrants
	}
	return nil
}

func (x *DataOrg) GetUserGrants() []*management.AddUserGrantRequest {
	if x != nil {
		return x.UserGrants
	}
	return nil
}

func (x *DataOrg) GetOrgMembers() []*management.AddOrgMemberRequest {
	if x != nil {
		return x.OrgMembers
	}
	return nil
}

func (x *DataOrg) GetProjectMembers() []*management.AddProjectMemberRequest {
	if x != nil {
		return x.ProjectMembers
	}
	return nil
}

func (x *DataOrg) GetProjectGrantMembers() []*management.AddProjectGrantMemberRequest {
	if x != nil {
		return x.ProjectGrantMembers
	}
	return nil
}

func (x *DataOrg) GetUserMetadata() []*management.SetUserMetadataRequest {
	if x != nil {
		return x.UserMetadata
	}
	return nil
}

func (x *DataOrg) GetLoginTexts() []*management.SetCustomLoginTextsRequest {
	if x != nil {
		return x.LoginTexts
	}
	return nil
}

func (x *DataOrg) GetInitMessages() []*management.SetCustomInitMessageTextRequest {
	if x != nil {
		return x.InitMessages
	}
	return nil
}

func (x *DataOrg) GetPasswordResetMessages() []*management.SetCustomPasswordResetMessageTextRequest {
	if x != nil {
		return x.PasswordResetMessages
	}
	return nil
}

func (x *DataOrg) GetVerifyEmailMessages() []*management.SetCustomVerifyEmailMessageTextRequest {
	if x != nil {
		return x.VerifyEmailMessages
	}
	return nil
}

func (x *DataOrg) GetVerifyPhoneMessages() []*management.SetCustomVerifyPhoneMessageTextRequest {
	if x != nil {
		return x.VerifyPhoneMessages
	}
	return nil
}

func (x *DataOrg) GetDomainClaimedMessages() []*management.SetCustomDomainClaimedMessageTextRequest {
	if x != nil {
		return x.DomainClaimedMessages
	}
	return nil
}

func (x *DataOrg) GetPasswordlessRegistrationMessages() []*management.SetCustomPasswordlessRegistrationMessageTextRequest {
	if x != nil {
		return x.PasswordlessRegistrationMessages
	}
	return nil
}

func (x *DataOrg) GetOidcIdps() []*DataOIDCIDP {
	if x != nil {
		return x.OidcIdps
	}
	return nil
}

func (x *DataOrg) GetJwtIdps() []*DataJWTIDP {
	if x != nil {
		return x.JwtIdps
	}
	return nil
}

func (x *DataOrg) GetSecondFactors() []*management.AddSecondFactorToLoginPolicyRequest {
	if x != nil {
		return x.SecondFactors
	}
	return nil
}

func (x *DataOrg) GetMultiFactors() []*management.AddMultiFactorToLoginPolicyRequest {
	if x != nil {
		return x.MultiFactors
	}
	return nil
}

func (x *DataOrg) GetIdps() []*management.AddIDPToLoginPolicyRequest {
	if x != nil {
		return x.Idps
	}
	return nil
}

func (x *DataOrg) GetUserLinks() []*idp.IDPUserLink {
	if x != nil {
		return x.UserLinks
	}
	return nil
}

func (x *DataOrg) GetDomains() []*org.Domain {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *DataOrg) GetAppKeys() []*DataAppKey {
	if x != nil {
		return x.AppKeys
	}
	return nil
}

func (x *DataOrg) GetMachineKeys() []*DataMachineKey {
	if x != nil {
		return x.MachineKeys
	}
	return nil
}

func (x *DataOrg) GetInviteUserMessages() []*management.SetCustomInviteUserMessageTextRequest {
	if x != nil {
		return x.InviteUserMessages
	}
	return nil
}

type DataOIDCIDP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpId string                           `protobuf:"bytes,1,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
	Idp   *management.AddOrgOIDCIDPRequest `protobuf:"bytes,2,opt,name=idp,proto3" json:"idp,omitempty"`
}

func (x *DataOIDCIDP) Reset() {
	*x = DataOIDCIDP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataOIDCIDP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataOIDCIDP) ProtoMessage() {}

func (x *DataOIDCIDP) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataOIDCIDP.ProtoReflect.Descriptor instead.
func (*DataOIDCIDP) Descriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{3}
}

func (x *DataOIDCIDP) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

func (x *DataOIDCIDP) GetIdp() *management.AddOrgOIDCIDPRequest {
	if x != nil {
		return x.Idp
	}
	return nil
}

type DataJWTIDP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpId string                          `protobuf:"bytes,1,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
	Idp   *management.AddOrgJWTIDPRequest `protobuf:"bytes,32,opt,name=idp,proto3" json:"idp,omitempty"`
}

func (x *DataJWTIDP) Reset() {
	*x = DataJWTIDP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataJWTIDP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataJWTIDP) ProtoMessage() {}

func (x *DataJWTIDP) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataJWTIDP.ProtoReflect.Descriptor instead.
func (*DataJWTIDP) Descriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{4}
}

func (x *DataJWTIDP) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

func (x *DataJWTIDP) GetIdp() *management.AddOrgJWTIDPRequest {
	if x != nil {
		return x.Idp
	}
	return nil
}

type ExportHumanUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName                        string                          `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Profile                         *ExportHumanUser_Profile        `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	Email                           *ExportHumanUser_Email          `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Phone                           *ExportHumanUser_Phone          `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Password                        string                          `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	HashedPassword                  *ExportHumanUser_HashedPassword `protobuf:"bytes,6,opt,name=hashed_password,json=hashedPassword,proto3" json:"hashed_password,omitempty"`
	PasswordChangeRequired          bool                            `protobuf:"varint,7,opt,name=password_change_required,json=passwordChangeRequired,proto3" json:"password_change_required,omitempty"`
	RequestPasswordlessRegistration bool                            `protobuf:"varint,8,opt,name=request_passwordless_registration,json=requestPasswordlessRegistration,proto3" json:"request_passwordless_registration,omitempty"`
	OtpCode                         string                          `protobuf:"bytes,9,opt,name=otp_code,json=otpCode,proto3" json:"otp_code,omitempty"`
}

func (x *ExportHumanUser) Reset() {
	*x = ExportHumanUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportHumanUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportHumanUser) ProtoMessage() {}

func (x *ExportHumanUser) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportHumanUser.ProtoReflect.Descriptor instead.
func (*ExportHumanUser) Descriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{5}
}

func (x *ExportHumanUser) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ExportHumanUser) GetProfile() *ExportHumanUser_Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *ExportHumanUser) GetEmail() *ExportHumanUser_Email {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *ExportHumanUser) GetPhone() *ExportHumanUser_Phone {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *ExportHumanUser) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ExportHumanUser) GetHashedPassword() *ExportHumanUser_HashedPassword {
	if x != nil {
		return x.HashedPassword
	}
	return nil
}

func (x *ExportHumanUser) GetPasswordChangeRequired() bool {
	if x != nil {
		return x.PasswordChangeRequired
	}
	return false
}

func (x *ExportHumanUser) GetRequestPasswordlessRegistration() bool {
	if x != nil {
		return x.RequestPasswordlessRegistration
	}
	return false
}

func (x *ExportHumanUser) GetOtpCode() string {
	if x != nil {
		return x.OtpCode
	}
	return ""
}

type DataAppKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId      string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	AppId          string                 `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ClientId       string                 `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Type           authn.KeyType          `protobuf:"varint,5,opt,name=type,proto3,enum=zitadel.authn.v1.KeyType" json:"type,omitempty"`
	ExpirationDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	PublicKey      []byte                 `protobuf:"bytes,7,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *DataAppKey) Reset() {
	*x = DataAppKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataAppKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAppKey) ProtoMessage() {}

func (x *DataAppKey) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAppKey.ProtoReflect.Descriptor instead.
func (*DataAppKey) Descriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{6}
}

func (x *DataAppKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataAppKey) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DataAppKey) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *DataAppKey) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *DataAppKey) GetType() authn.KeyType {
	if x != nil {
		return x.Type
	}
	return authn.KeyType(0)
}

func (x *DataAppKey) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *DataAppKey) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type DataMachineKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId          string                 `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	UserId         string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type           authn.KeyType          `protobuf:"varint,3,opt,name=type,proto3,enum=zitadel.authn.v1.KeyType" json:"type,omitempty"`
	ExpirationDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	PublicKey      []byte                 `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *DataMachineKey) Reset() {
	*x = DataMachineKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataMachineKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataMachineKey) ProtoMessage() {}

func (x *DataMachineKey) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataMachineKey.ProtoReflect.Descriptor instead.
func (*DataMachineKey) Descriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{7}
}

func (x *DataMachineKey) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *DataMachineKey) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DataMachineKey) GetType() authn.KeyType {
	if x != nil {
		return x.Type
	}
	return authn.KeyType(0)
}

func (x *DataMachineKey) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *DataMachineKey) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type DataProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string                        `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Project   *management.AddProjectRequest `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *DataProject) Reset() {
	*x = DataProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataProject) ProtoMessage() {}

func (x *DataProject) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataProject.ProtoReflect.Descriptor instead.
func (*DataProject) Descriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{8}
}

func (x *DataProject) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DataProject) GetProject() *management.AddProjectRequest {
	if x != nil {
		return x.Project
	}
	return nil
}

type DataAPIApplication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string                       `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	App   *management.AddAPIAppRequest `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *DataAPIApplication) Reset() {
	*x = DataAPIApplication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataAPIApplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAPIApplication) ProtoMessage() {}

func (x *DataAPIApplication) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAPIApplication.ProtoReflect.Descriptor instead.
func (*DataAPIApplication) Descriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{9}
}

func (x *DataAPIApplication) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *DataAPIApplication) GetApp() *management.AddAPIAppRequest {
	if x != nil {
		return x.App
	}
	return nil
}

type DataOIDCApplication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string                        `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	App   *management.AddOIDCAppRequest `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *DataOIDCApplication) Reset() {
	*x = DataOIDCApplication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataOIDCApplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataOIDCApplication) ProtoMessage() {}

func (x *DataOIDCApplication) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataOIDCApplication.ProtoReflect.Descriptor instead.
func (*DataOIDCApplication) Descriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{10}
}

func (x *DataOIDCApplication) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *DataOIDCApplication) GetApp() *management.AddOIDCAppRequest {
	if x != nil {
		return x.App
	}
	return nil
}

type DataHumanUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string                             `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	User   *management.ImportHumanUserRequest `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *DataHumanUser) Reset() {
	*x = DataHumanUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataHumanUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataHumanUser) ProtoMessage() {}

func (x *DataHumanUser) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataHumanUser.ProtoReflect.Descriptor instead.
func (*DataHumanUser) Descriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{11}
}

func (x *DataHumanUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DataHumanUser) GetUser() *management.ImportHumanUserRequest {
	if x != nil {
		return x.User
	}
	return nil
}

type DataMachineUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string                            `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	User   *management.AddMachineUserRequest `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *DataMachineUser) Reset() {
	*x = DataMachineUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataMachineUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataMachineUser) ProtoMessage() {}

func (x *DataMachineUser) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataMachineUser.ProtoReflect.Descriptor instead.
func (*DataMachineUser) Descriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{12}
}

func (x *DataMachineUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DataMachineUser) GetUser() *management.AddMachineUserRequest {
	if x != nil {
		return x.User
	}
	return nil
}

type DataAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionId string                          `protobuf:"bytes,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	Action   *management.CreateActionRequest `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *DataAction) Reset() {
	*x = DataAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAction) ProtoMessage() {}

func (x *DataAction) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAction.ProtoReflect.Descriptor instead.
func (*DataAction) Descriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{13}
}

func (x *DataAction) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *DataAction) GetAction() *management.CreateActionRequest {
	if x != nil {
		return x.Action
	}
	return nil
}

type DataProjectGrant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantId      string                             `protobuf:"bytes,1,opt,name=grant_id,json=grantId,proto3" json:"grant_id,omitempty"`
	ProjectGrant *management.AddProjectGrantRequest `protobuf:"bytes,2,opt,name=project_grant,json=projectGrant,proto3" json:"project_grant,omitempty"`
}

func (x *DataProjectGrant) Reset() {
	*x = DataProjectGrant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataProjectGrant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataProjectGrant) ProtoMessage() {}

func (x *DataProjectGrant) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataProjectGrant.ProtoReflect.Descriptor instead.
func (*DataProjectGrant) Descriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{14}
}

func (x *DataProjectGrant) GetGrantId() string {
	if x != nil {
		return x.GrantId
	}
	return ""
}

func (x *DataProjectGrant) GetProjectGrant() *management.AddProjectGrantRequest {
	if x != nil {
		return x.ProjectGrant
	}
	return nil
}

type SetTriggerActionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowType    FlowType    `protobuf:"varint,1,opt,name=flow_type,json=flowType,proto3,enum=zitadel.v1.v1.FlowType" json:"flow_type,omitempty"`
	TriggerType TriggerType `protobuf:"varint,2,opt,name=trigger_type,json=triggerType,proto3,enum=zitadel.v1.v1.TriggerType" json:"trigger_type,omitempty"`
	ActionIds   []string    `protobuf:"bytes,3,rep,name=action_ids,json=actionIds,proto3" json:"action_ids,omitempty"`
}

func (x *SetTriggerActionsRequest) Reset() {
	*x = SetTriggerActionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTriggerActionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTriggerActionsRequest) ProtoMessage() {}

func (x *SetTriggerActionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTriggerActionsRequest.ProtoReflect.Descriptor instead.
func (*SetTriggerActionsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{15}
}

func (x *SetTriggerActionsRequest) GetFlowType() FlowType {
	if x != nil {
		return x.FlowType
	}
	return FlowType_FLOW_TYPE_UNSPECIFIED
}

func (x *SetTriggerActionsRequest) GetTriggerType() TriggerType {
	if x != nil {
		return x.TriggerType
	}
	return TriggerType_TRIGGER_TYPE_UNSPECIFIED
}

func (x *SetTriggerActionsRequest) GetActionIds() []string {
	if x != nil {
		return x.ActionIds
	}
	return nil
}

type ExportHumanUser_Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName         string      `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName          string      `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	NickName          string      `protobuf:"bytes,3,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	DisplayName       string      `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	PreferredLanguage string      `protobuf:"bytes,5,opt,name=preferred_language,json=preferredLanguage,proto3" json:"preferred_language,omitempty"`
	Gender            user.Gender `protobuf:"varint,6,opt,name=gender,proto3,enum=zitadel.user.v1.Gender" json:"gender,omitempty"`
}

func (x *ExportHumanUser_Profile) Reset() {
	*x = ExportHumanUser_Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportHumanUser_Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportHumanUser_Profile) ProtoMessage() {}

func (x *ExportHumanUser_Profile) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportHumanUser_Profile.ProtoReflect.Descriptor instead.
func (*ExportHumanUser_Profile) Descriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ExportHumanUser_Profile) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *ExportHumanUser_Profile) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *ExportHumanUser_Profile) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *ExportHumanUser_Profile) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ExportHumanUser_Profile) GetPreferredLanguage() string {
	if x != nil {
		return x.PreferredLanguage
	}
	return ""
}

func (x *ExportHumanUser_Profile) GetGender() user.Gender {
	if x != nil {
		return x.Gender
	}
	return user.Gender(0)
}

type ExportHumanUser_Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email           string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"` //TODO: check if no value is allowed
	IsEmailVerified bool   `protobuf:"varint,2,opt,name=is_email_verified,json=isEmailVerified,proto3" json:"is_email_verified,omitempty"`
}

func (x *ExportHumanUser_Email) Reset() {
	*x = ExportHumanUser_Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportHumanUser_Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportHumanUser_Email) ProtoMessage() {}

func (x *ExportHumanUser_Email) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportHumanUser_Email.ProtoReflect.Descriptor instead.
func (*ExportHumanUser_Email) Descriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{5, 1}
}

func (x *ExportHumanUser_Email) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ExportHumanUser_Email) GetIsEmailVerified() bool {
	if x != nil {
		return x.IsEmailVerified
	}
	return false
}

type ExportHumanUser_Phone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// has to be a global number
	Phone           string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	IsPhoneVerified bool   `protobuf:"varint,2,opt,name=is_phone_verified,json=isPhoneVerified,proto3" json:"is_phone_verified,omitempty"`
}

func (x *ExportHumanUser_Phone) Reset() {
	*x = ExportHumanUser_Phone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_v1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportHumanUser_Phone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportHumanUser_Phone) ProtoMessage() {}

func (x *ExportHumanUser_Phone) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_v1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportHumanUser_Phone.ProtoReflect.Descriptor instead.
func (*ExportHumanUser_Phone) Descriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{5, 2}
}

func (x *ExportHumanUser_Phone) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ExportHumanUser_Phone) GetIsPhoneVerified() bool {
	if x != nil {
		return x.IsPhoneVerified
	}
	return false
}

type ExportHumanUser_HashedPassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Algorithm string `protobuf:"bytes,2,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
}

func (x *ExportHumanUser_HashedPassword) Reset() {
	*x = ExportHumanUser_HashedPassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_v1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportHumanUser_HashedPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportHumanUser_HashedPassword) ProtoMessage() {}

func (x *ExportHumanUser_HashedPassword) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_v1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportHumanUser_HashedPassword.ProtoReflect.Descriptor instead.
func (*ExportHumanUser_HashedPassword) Descriptor() ([]byte, []int) {
	return file_zitadel_v1_proto_rawDescGZIP(), []int{5, 3}
}

func (x *ExportHumanUser_HashedPassword) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ExportHumanUser_HashedPassword) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

var File_zitadel_v1_proto protoreflect.FileDescriptor

var file_zitadel_v1_proto_rawDesc = []byte{
	0x0a, 0x10, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x76,
	0x31, 0x1a, 0x12, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x69,
	0x64, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2f, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec, 0x01, 0x0a, 0x1c, 0x41, 0x64,
	0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x1c, 0x4a,
	0x14, 0x22, 0x23, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38,
	0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x7a, 0x0a, 0x19,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f,
	0x62, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x6f, 0x66,
	0x20, 0x69, 0x74, 0x73, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x75, 0x73, 0x74,
	0x42, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3a, 0x0e, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0xd2,
	0x01, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x72, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x6f, 0x72, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x72, 0x67, 0x52,
	0x04, 0x6f, 0x72, 0x67, 0x73, 0x22, 0x8b, 0x19, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x72,
	0x67, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x6f, 0x72, 0x67,
	0x12, 0x4a, 0x0a, 0x0a, 0x69, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72,
	0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x09, 0x69, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x55, 0x0a, 0x0c,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x5b, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x63,
	0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x55, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x7d, 0x0a, 0x1a, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x18, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x5b, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x3c,
	0x0a, 0x08, 0x61, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x50, 0x49, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x70, 0x69, 0x41, 0x70, 0x70, 0x73, 0x12, 0x3f, 0x0a, 0x09,
	0x6f, 0x69, 0x64, 0x63, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6f, 0x69, 0x64, 0x63, 0x41, 0x70, 0x70, 0x73, 0x12, 0x3d, 0x0a,
	0x0b, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x0a, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x0d,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x50, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73,
	0x12, 0x4b, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x4b, 0x0a,
	0x0b, 0x6f, 0x72, 0x67, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72,
	0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a,
	0x6f, 0x72, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x67, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x52, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x65, 0x78, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x69,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x77, 0x0a, 0x17, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x15, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x15, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x71, 0x0a,
	0x15, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x77, 0x0a, 0x17, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x15, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x22, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x70,
	0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x49, 0x44, 0x43,
	0x49, 0x44, 0x50, 0x52, 0x08, 0x6f, 0x69, 0x64, 0x63, 0x49, 0x64, 0x70, 0x73, 0x12, 0x34, 0x0a,
	0x08, 0x6a, 0x77, 0x74, 0x5f, 0x69, 0x64, 0x70, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x4a, 0x57, 0x54, 0x49, 0x44, 0x50, 0x52, 0x07, 0x6a, 0x77, 0x74, 0x49,
	0x64, 0x70, 0x73, 0x12, 0x61, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x04, 0x69, 0x64, 0x70, 0x73, 0x18, 0x23,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x49, 0x44, 0x50, 0x54, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x69, 0x64, 0x70, 0x73, 0x12, 0x3a, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x61,
	0x70, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x40, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x6e, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x12, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x49, 0x44, 0x43, 0x49,
	0x44, 0x50, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x70, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x03, 0x69, 0x64, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x4f, 0x72, 0x67, 0x4f, 0x49, 0x44, 0x43, 0x49, 0x44, 0x50, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x03, 0x69, 0x64, 0x70, 0x22, 0x61, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61,
	0x4a, 0x57, 0x54, 0x49, 0x44, 0x50, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x70, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x03, 0x69, 0x64, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x67, 0x4a, 0x57, 0x54, 0x49, 0x44, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x69, 0x64, 0x70, 0x22, 0xad, 0x08, 0x0a, 0x0f,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x48, 0x75, 0x6d, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x48, 0x75, 0x6d, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x56, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x21, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x9a, 0x02, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8,
	0x01, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x6e,
	0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0xc8, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x18, 0x0a, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x1a, 0x52, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1d, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x57, 0x0a, 0x05,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x72, 0x07, 0x10, 0x01, 0x18, 0x32, 0x3a,
	0x01, 0x2b, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x44, 0x0a, 0x0e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0x82, 0x02, 0x0a, 0x0a,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x22, 0xd3, 0x01, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x70, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x66, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61,
	0x41, 0x50, 0x49, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x50,
	0x49, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x61, 0x70, 0x70,
	0x22, 0x68, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x61, 0x70, 0x70, 0x22, 0x6b, 0x0a, 0x0d, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x6c, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x6d, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x42, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x2a, 0x4c, 0x0a, 0x08, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x25, 0x0a, 0x21, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0x90, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x49, 0x47, 0x47,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_v1_proto_rawDescOnce sync.Once
	file_zitadel_v1_proto_rawDescData = file_zitadel_v1_proto_rawDesc
)

func file_zitadel_v1_proto_rawDescGZIP() []byte {
	file_zitadel_v1_proto_rawDescOnce.Do(func() {
		file_zitadel_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_v1_proto_rawDescData)
	})
	return file_zitadel_v1_proto_rawDescData
}

var file_zitadel_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_zitadel_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_zitadel_v1_proto_goTypes = []interface{}{
	(FlowType)(0),                                                          // 0: zitadel.v1.v1.FlowType
	(TriggerType)(0),                                                       // 1: zitadel.v1.v1.TriggerType
	(*AddCustomOrgIAMPolicyRequest)(nil),                                   // 2: zitadel.v1.v1.AddCustomOrgIAMPolicyRequest
	(*ImportDataOrg)(nil),                                                  // 3: zitadel.v1.v1.ImportDataOrg
	(*DataOrg)(nil),                                                        // 4: zitadel.v1.v1.DataOrg
	(*DataOIDCIDP)(nil),                                                    // 5: zitadel.v1.v1.DataOIDCIDP
	(*DataJWTIDP)(nil),                                                     // 6: zitadel.v1.v1.DataJWTIDP
	(*ExportHumanUser)(nil),                                                // 7: zitadel.v1.v1.ExportHumanUser
	(*DataAppKey)(nil),                                                     // 8: zitadel.v1.v1.DataAppKey
	(*DataMachineKey)(nil),                                                 // 9: zitadel.v1.v1.DataMachineKey
	(*DataProject)(nil),                                                    // 10: zitadel.v1.v1.DataProject
	(*DataAPIApplication)(nil),                                             // 11: zitadel.v1.v1.DataAPIApplication
	(*DataOIDCApplication)(nil),                                            // 12: zitadel.v1.v1.DataOIDCApplication
	(*DataHumanUser)(nil),                                                  // 13: zitadel.v1.v1.DataHumanUser
	(*DataMachineUser)(nil),                                                // 14: zitadel.v1.v1.DataMachineUser
	(*DataAction)(nil),                                                     // 15: zitadel.v1.v1.DataAction
	(*DataProjectGrant)(nil),                                               // 16: zitadel.v1.v1.DataProjectGrant
	(*SetTriggerActionsRequest)(nil),                                       // 17: zitadel.v1.v1.SetTriggerActionsRequest
	(*ExportHumanUser_Profile)(nil),                                        // 18: zitadel.v1.v1.ExportHumanUser.Profile
	(*ExportHumanUser_Email)(nil),                                          // 19: zitadel.v1.v1.ExportHumanUser.Email
	(*ExportHumanUser_Phone)(nil),                                          // 20: zitadel.v1.v1.ExportHumanUser.Phone
	(*ExportHumanUser_HashedPassword)(nil),                                 // 21: zitadel.v1.v1.ExportHumanUser.HashedPassword
	(*management.AddOrgRequest)(nil),                                       // 22: zitadel.management.v1.AddOrgRequest
	(*management.AddCustomLabelPolicyRequest)(nil),                         // 23: zitadel.management.v1.AddCustomLabelPolicyRequest
	(*management.AddCustomLockoutPolicyRequest)(nil),                       // 24: zitadel.management.v1.AddCustomLockoutPolicyRequest
	(*management.AddCustomLoginPolicyRequest)(nil),                         // 25: zitadel.management.v1.AddCustomLoginPolicyRequest
	(*management.AddCustomPasswordComplexityPolicyRequest)(nil),            // 26: zitadel.management.v1.AddCustomPasswordComplexityPolicyRequest
	(*management.AddCustomPrivacyPolicyRequest)(nil),                       // 27: zitadel.management.v1.AddCustomPrivacyPolicyRequest
	(*management.AddProjectRoleRequest)(nil),                               // 28: zitadel.management.v1.AddProjectRoleRequest
	(*management.AddUserGrantRequest)(nil),                                 // 29: zitadel.management.v1.AddUserGrantRequest
	(*management.AddOrgMemberRequest)(nil),                                 // 30: zitadel.management.v1.AddOrgMemberRequest
	(*management.AddProjectMemberRequest)(nil),                             // 31: zitadel.management.v1.AddProjectMemberRequest
	(*management.AddProjectGrantMemberRequest)(nil),                        // 32: zitadel.management.v1.AddProjectGrantMemberRequest
	(*management.SetUserMetadataRequest)(nil),                              // 33: zitadel.management.v1.SetUserMetadataRequest
	(*management.SetCustomLoginTextsRequest)(nil),                          // 34: zitadel.management.v1.SetCustomLoginTextsRequest
	(*management.SetCustomInitMessageTextRequest)(nil),                     // 35: zitadel.management.v1.SetCustomInitMessageTextRequest
	(*management.SetCustomPasswordResetMessageTextRequest)(nil),            // 36: zitadel.management.v1.SetCustomPasswordResetMessageTextRequest
	(*management.SetCustomVerifyEmailMessageTextRequest)(nil),              // 37: zitadel.management.v1.SetCustomVerifyEmailMessageTextRequest
	(*management.SetCustomVerifyPhoneMessageTextRequest)(nil),              // 38: zitadel.management.v1.SetCustomVerifyPhoneMessageTextRequest
	(*management.SetCustomDomainClaimedMessageTextRequest)(nil),            // 39: zitadel.management.v1.SetCustomDomainClaimedMessageTextRequest
	(*management.SetCustomPasswordlessRegistrationMessageTextRequest)(nil), // 40: zitadel.management.v1.SetCustomPasswordlessRegistrationMessageTextRequest
	(*management.AddSecondFactorToLoginPolicyRequest)(nil),                 // 41: zitadel.management.v1.AddSecondFactorToLoginPolicyRequest
	(*management.AddMultiFactorToLoginPolicyRequest)(nil),                  // 42: zitadel.management.v1.AddMultiFactorToLoginPolicyRequest
	(*management.AddIDPToLoginPolicyRequest)(nil),                          // 43: zitadel.management.v1.AddIDPToLoginPolicyRequest
	(*idp.IDPUserLink)(nil),                                                // 44: zitadel.idp.v1.IDPUserLink
	(*org.Domain)(nil),                                                     // 45: zitadel.org.v1.Domain
	(*management.SetCustomInviteUserMessageTextRequest)(nil),               // 46: zitadel.management.v1.SetCustomInviteUserMessageTextRequest
	(*management.AddOrgOIDCIDPRequest)(nil),                                // 47: zitadel.management.v1.AddOrgOIDCIDPRequest
	(*management.AddOrgJWTIDPRequest)(nil),                                 // 48: zitadel.management.v1.AddOrgJWTIDPRequest
	(authn.KeyType)(0),                                                     // 49: zitadel.authn.v1.KeyType
	(*timestamppb.Timestamp)(nil),                                          // 50: google.protobuf.Timestamp
	(*management.AddProjectRequest)(nil),                                   // 51: zitadel.management.v1.AddProjectRequest
	(*management.AddAPIAppRequest)(nil),                                    // 52: zitadel.management.v1.AddAPIAppRequest
	(*management.AddOIDCAppRequest)(nil),                                   // 53: zitadel.management.v1.AddOIDCAppRequest
	(*management.ImportHumanUserRequest)(nil),                              // 54: zitadel.management.v1.ImportHumanUserRequest
	(*management.AddMachineUserRequest)(nil),                               // 55: zitadel.management.v1.AddMachineUserRequest
	(*management.CreateActionRequest)(nil),                                 // 56: zitadel.management.v1.CreateActionRequest
	(*management.AddProjectGrantRequest)(nil),                              // 57: zitadel.management.v1.AddProjectGrantRequest
	(user.Gender)(0),                                                       // 58: zitadel.user.v1.Gender
}
var file_zitadel_v1_proto_depIdxs = []int32{
	4,  // 0: zitadel.v1.v1.ImportDataOrg.orgs:type_name -> zitadel.v1.v1.DataOrg
	22, // 1: zitadel.v1.v1.DataOrg.org:type_name -> zitadel.management.v1.AddOrgRequest
	2,  // 2: zitadel.v1.v1.DataOrg.iam_policy:type_name -> zitadel.v1.v1.AddCustomOrgIAMPolicyRequest
	23, // 3: zitadel.v1.v1.DataOrg.label_policy:type_name -> zitadel.management.v1.AddCustomLabelPolicyRequest
	24, // 4: zitadel.v1.v1.DataOrg.lockout_policy:type_name -> zitadel.management.v1.AddCustomLockoutPolicyRequest
	25, // 5: zitadel.v1.v1.DataOrg.login_policy:type_name -> zitadel.management.v1.AddCustomLoginPolicyRequest
	26, // 6: zitadel.v1.v1.DataOrg.password_complexity_policy:type_name -> zitadel.management.v1.AddCustomPasswordComplexityPolicyRequest
	27, // 7: zitadel.v1.v1.DataOrg.privacy_policy:type_name -> zitadel.management.v1.AddCustomPrivacyPolicyRequest
	10, // 8: zitadel.v1.v1.DataOrg.projects:type_name -> zitadel.v1.v1.DataProject
	28, // 9: zitadel.v1.v1.DataOrg.project_roles:type_name -> zitadel.management.v1.AddProjectRoleRequest
	11, // 10: zitadel.v1.v1.DataOrg.api_apps:type_name -> zitadel.v1.v1.DataAPIApplication
	12, // 11: zitadel.v1.v1.DataOrg.oidc_apps:type_name -> zitadel.v1.v1.DataOIDCApplication
	13, // 12: zitadel.v1.v1.DataOrg.human_users:type_name -> zitadel.v1.v1.DataHumanUser
	14, // 13: zitadel.v1.v1.DataOrg.machine_users:type_name -> zitadel.v1.v1.DataMachineUser
	17, // 14: zitadel.v1.v1.DataOrg.trigger_actions:type_name -> zitadel.v1.v1.SetTriggerActionsRequest
	15, // 15: zitadel.v1.v1.DataOrg.actions:type_name -> zitadel.v1.v1.DataAction
	16, // 16: zitadel.v1.v1.DataOrg.project_grants:type_name -> zitadel.v1.v1.DataProjectGrant
	29, // 17: zitadel.v1.v1.DataOrg.user_grants:type_name -> zitadel.management.v1.AddUserGrantRequest
	30, // 18: zitadel.v1.v1.DataOrg.org_members:type_name -> zitadel.management.v1.AddOrgMemberRequest
	31, // 19: zitadel.v1.v1.DataOrg.project_members:type_name -> zitadel.management.v1.AddProjectMemberRequest
	32, // 20: zitadel.v1.v1.DataOrg.project_grant_members:type_name -> zitadel.management.v1.AddProjectGrantMemberRequest
	33, // 21: zitadel.v1.v1.DataOrg.user_metadata:type_name -> zitadel.management.v1.SetUserMetadataRequest
	34, // 22: zitadel.v1.v1.DataOrg.login_texts:type_name -> zitadel.management.v1.SetCustomLoginTextsRequest
	35, // 23: zitadel.v1.v1.DataOrg.init_messages:type_name -> zitadel.management.v1.SetCustomInitMessageTextRequest
	36, // 24: zitadel.v1.v1.DataOrg.password_reset_messages:type_name -> zitadel.management.v1.SetCustomPasswordResetMessageTextRequest
	37, // 25: zitadel.v1.v1.DataOrg.verify_email_messages:type_name -> zitadel.management.v1.SetCustomVerifyEmailMessageTextRequest
	38, // 26: zitadel.v1.v1.DataOrg.verify_phone_messages:type_name -> zitadel.management.v1.SetCustomVerifyPhoneMessageTextRequest
	39, // 27: zitadel.v1.v1.DataOrg.domain_claimed_messages:type_name -> zitadel.management.v1.SetCustomDomainClaimedMessageTextRequest
	40, // 28: zitadel.v1.v1.DataOrg.passwordless_registration_messages:type_name -> zitadel.management.v1.SetCustomPasswordlessRegistrationMessageTextRequest
	5,  // 29: zitadel.v1.v1.DataOrg.oidc_idps:type_name -> zitadel.v1.v1.DataOIDCIDP
	6,  // 30: zitadel.v1.v1.DataOrg.jwt_idps:type_name -> zitadel.v1.v1.DataJWTIDP
	41, // 31: zitadel.v1.v1.DataOrg.second_factors:type_name -> zitadel.management.v1.AddSecondFactorToLoginPolicyRequest
	42, // 32: zitadel.v1.v1.DataOrg.multi_factors:type_name -> zitadel.management.v1.AddMultiFactorToLoginPolicyRequest
	43, // 33: zitadel.v1.v1.DataOrg.idps:type_name -> zitadel.management.v1.AddIDPToLoginPolicyRequest
	44, // 34: zitadel.v1.v1.DataOrg.user_links:type_name -> zitadel.idp.v1.IDPUserLink
	45, // 35: zitadel.v1.v1.DataOrg.domains:type_name -> zitadel.org.v1.Domain
	8,  // 36: zitadel.v1.v1.DataOrg.app_keys:type_name -> zitadel.v1.v1.DataAppKey
	9,  // 37: zitadel.v1.v1.DataOrg.machine_keys:type_name -> zitadel.v1.v1.DataMachineKey
	46, // 38: zitadel.v1.v1.DataOrg.invite_user_messages:type_name -> zitadel.management.v1.SetCustomInviteUserMessageTextRequest
	47, // 39: zitadel.v1.v1.DataOIDCIDP.idp:type_name -> zitadel.management.v1.AddOrgOIDCIDPRequest
	48, // 40: zitadel.v1.v1.DataJWTIDP.idp:type_name -> zitadel.management.v1.AddOrgJWTIDPRequest
	18, // 41: zitadel.v1.v1.ExportHumanUser.profile:type_name -> zitadel.v1.v1.ExportHumanUser.Profile
	19, // 42: zitadel.v1.v1.ExportHumanUser.email:type_name -> zitadel.v1.v1.ExportHumanUser.Email
	20, // 43: zitadel.v1.v1.ExportHumanUser.phone:type_name -> zitadel.v1.v1.ExportHumanUser.Phone
	21, // 44: zitadel.v1.v1.ExportHumanUser.hashed_password:type_name -> zitadel.v1.v1.ExportHumanUser.HashedPassword
	49, // 45: zitadel.v1.v1.DataAppKey.type:type_name -> zitadel.authn.v1.KeyType
	50, // 46: zitadel.v1.v1.DataAppKey.expiration_date:type_name -> google.protobuf.Timestamp
	49, // 47: zitadel.v1.v1.DataMachineKey.type:type_name -> zitadel.authn.v1.KeyType
	50, // 48: zitadel.v1.v1.DataMachineKey.expiration_date:type_name -> google.protobuf.Timestamp
	51, // 49: zitadel.v1.v1.DataProject.project:type_name -> zitadel.management.v1.AddProjectRequest
	52, // 50: zitadel.v1.v1.DataAPIApplication.app:type_name -> zitadel.management.v1.AddAPIAppRequest
	53, // 51: zitadel.v1.v1.DataOIDCApplication.app:type_name -> zitadel.management.v1.AddOIDCAppRequest
	54, // 52: zitadel.v1.v1.DataHumanUser.user:type_name -> zitadel.management.v1.ImportHumanUserRequest
	55, // 53: zitadel.v1.v1.DataMachineUser.user:type_name -> zitadel.management.v1.AddMachineUserRequest
	56, // 54: zitadel.v1.v1.DataAction.action:type_name -> zitadel.management.v1.CreateActionRequest
	57, // 55: zitadel.v1.v1.DataProjectGrant.project_grant:type_name -> zitadel.management.v1.AddProjectGrantRequest
	0,  // 56: zitadel.v1.v1.SetTriggerActionsRequest.flow_type:type_name -> zitadel.v1.v1.FlowType
	1,  // 57: zitadel.v1.v1.SetTriggerActionsRequest.trigger_type:type_name -> zitadel.v1.v1.TriggerType
	58, // 58: zitadel.v1.v1.ExportHumanUser.Profile.gender:type_name -> zitadel.user.v1.Gender
	59, // [59:59] is the sub-list for method output_type
	59, // [59:59] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_zitadel_v1_proto_init() }
func file_zitadel_v1_proto_init() {
	if File_zitadel_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zitadel_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCustomOrgIAMPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportDataOrg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataOrg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataOIDCIDP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataJWTIDP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportHumanUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataAppKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataMachineKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataAPIApplication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataOIDCApplication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataHumanUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataMachineUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataProjectGrant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTriggerActionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_v1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportHumanUser_Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_v1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportHumanUser_Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_v1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportHumanUser_Phone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_v1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportHumanUser_HashedPassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_v1_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_v1_proto_goTypes,
		DependencyIndexes: file_zitadel_v1_proto_depIdxs,
		EnumInfos:         file_zitadel_v1_proto_enumTypes,
		MessageInfos:      file_zitadel_v1_proto_msgTypes,
	}.Build()
	File_zitadel_v1_proto = out.File
	file_zitadel_v1_proto_rawDesc = nil
	file_zitadel_v1_proto_goTypes = nil
	file_zitadel_v1_proto_depIdxs = nil
}
