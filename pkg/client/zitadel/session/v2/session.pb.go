// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/session/v2/session.proto

package session

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	object "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/object"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SessionFieldName int32

const (
	SessionFieldName_SESSION_FIELD_NAME_UNSPECIFIED   SessionFieldName = 0
	SessionFieldName_SESSION_FIELD_NAME_CREATION_DATE SessionFieldName = 1
)

// Enum value maps for SessionFieldName.
var (
	SessionFieldName_name = map[int32]string{
		0: "SESSION_FIELD_NAME_UNSPECIFIED",
		1: "SESSION_FIELD_NAME_CREATION_DATE",
	}
	SessionFieldName_value = map[string]int32{
		"SESSION_FIELD_NAME_UNSPECIFIED":   0,
		"SESSION_FIELD_NAME_CREATION_DATE": 1,
	}
)

func (x SessionFieldName) Enum() *SessionFieldName {
	p := new(SessionFieldName)
	*p = x
	return p
}

func (x SessionFieldName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionFieldName) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_session_v2_session_proto_enumTypes[0].Descriptor()
}

func (SessionFieldName) Type() protoreflect.EnumType {
	return &file_zitadel_session_v2_session_proto_enumTypes[0]
}

func (x SessionFieldName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionFieldName.Descriptor instead.
func (SessionFieldName) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_session_v2_session_proto_rawDescGZIP(), []int{0}
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreationDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	ChangeDate     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=change_date,json=changeDate,proto3" json:"change_date,omitempty"`
	Sequence       uint64                 `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Factors        *Factors               `protobuf:"bytes,5,opt,name=factors,proto3" json:"factors,omitempty"`
	Metadata       map[string][]byte      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UserAgent      *UserAgent             `protobuf:"bytes,7,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	ExpirationDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=expiration_date,json=expirationDate,proto3,oneof" json:"expiration_date,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2_session_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2_session_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2_session_proto_rawDescGZIP(), []int{0}
}

func (x *Session) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Session) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *Session) GetChangeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeDate
	}
	return nil
}

func (x *Session) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Session) GetFactors() *Factors {
	if x != nil {
		return x.Factors
	}
	return nil
}

func (x *Session) GetMetadata() map[string][]byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Session) GetUserAgent() *UserAgent {
	if x != nil {
		return x.UserAgent
	}
	return nil
}

func (x *Session) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

type Factors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     *UserFactor     `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Password *PasswordFactor `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	WebAuthN *WebAuthNFactor `protobuf:"bytes,3,opt,name=web_auth_n,json=webAuthN,proto3" json:"web_auth_n,omitempty"`
	Intent   *IntentFactor   `protobuf:"bytes,4,opt,name=intent,proto3" json:"intent,omitempty"`
	Totp     *TOTPFactor     `protobuf:"bytes,5,opt,name=totp,proto3" json:"totp,omitempty"`
	OtpSms   *OTPFactor      `protobuf:"bytes,6,opt,name=otp_sms,json=otpSms,proto3" json:"otp_sms,omitempty"`
	OtpEmail *OTPFactor      `protobuf:"bytes,7,opt,name=otp_email,json=otpEmail,proto3" json:"otp_email,omitempty"`
}

func (x *Factors) Reset() {
	*x = Factors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2_session_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Factors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Factors) ProtoMessage() {}

func (x *Factors) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2_session_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Factors.ProtoReflect.Descriptor instead.
func (*Factors) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2_session_proto_rawDescGZIP(), []int{1}
}

func (x *Factors) GetUser() *UserFactor {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Factors) GetPassword() *PasswordFactor {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *Factors) GetWebAuthN() *WebAuthNFactor {
	if x != nil {
		return x.WebAuthN
	}
	return nil
}

func (x *Factors) GetIntent() *IntentFactor {
	if x != nil {
		return x.Intent
	}
	return nil
}

func (x *Factors) GetTotp() *TOTPFactor {
	if x != nil {
		return x.Totp
	}
	return nil
}

func (x *Factors) GetOtpSms() *OTPFactor {
	if x != nil {
		return x.OtpSms
	}
	return nil
}

func (x *Factors) GetOtpEmail() *OTPFactor {
	if x != nil {
		return x.OtpEmail
	}
	return nil
}

type UserFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifiedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=verified_at,json=verifiedAt,proto3" json:"verified_at,omitempty"`
	Id             string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	LoginName      string                 `protobuf:"bytes,3,opt,name=login_name,json=loginName,proto3" json:"login_name,omitempty"`
	DisplayName    string                 `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	OrganizationId string                 `protobuf:"bytes,6,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *UserFactor) Reset() {
	*x = UserFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2_session_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFactor) ProtoMessage() {}

func (x *UserFactor) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2_session_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFactor.ProtoReflect.Descriptor instead.
func (*UserFactor) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2_session_proto_rawDescGZIP(), []int{2}
}

func (x *UserFactor) GetVerifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerifiedAt
	}
	return nil
}

func (x *UserFactor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserFactor) GetLoginName() string {
	if x != nil {
		return x.LoginName
	}
	return ""
}

func (x *UserFactor) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UserFactor) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type PasswordFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifiedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=verified_at,json=verifiedAt,proto3" json:"verified_at,omitempty"`
}

func (x *PasswordFactor) Reset() {
	*x = PasswordFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2_session_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordFactor) ProtoMessage() {}

func (x *PasswordFactor) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2_session_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordFactor.ProtoReflect.Descriptor instead.
func (*PasswordFactor) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2_session_proto_rawDescGZIP(), []int{3}
}

func (x *PasswordFactor) GetVerifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerifiedAt
	}
	return nil
}

type IntentFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifiedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=verified_at,json=verifiedAt,proto3" json:"verified_at,omitempty"`
}

func (x *IntentFactor) Reset() {
	*x = IntentFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2_session_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntentFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntentFactor) ProtoMessage() {}

func (x *IntentFactor) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2_session_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntentFactor.ProtoReflect.Descriptor instead.
func (*IntentFactor) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2_session_proto_rawDescGZIP(), []int{4}
}

func (x *IntentFactor) GetVerifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerifiedAt
	}
	return nil
}

type WebAuthNFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifiedAt   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=verified_at,json=verifiedAt,proto3" json:"verified_at,omitempty"`
	UserVerified bool                   `protobuf:"varint,2,opt,name=user_verified,json=userVerified,proto3" json:"user_verified,omitempty"`
}

func (x *WebAuthNFactor) Reset() {
	*x = WebAuthNFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2_session_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebAuthNFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebAuthNFactor) ProtoMessage() {}

func (x *WebAuthNFactor) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2_session_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebAuthNFactor.ProtoReflect.Descriptor instead.
func (*WebAuthNFactor) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2_session_proto_rawDescGZIP(), []int{5}
}

func (x *WebAuthNFactor) GetVerifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerifiedAt
	}
	return nil
}

func (x *WebAuthNFactor) GetUserVerified() bool {
	if x != nil {
		return x.UserVerified
	}
	return false
}

type TOTPFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifiedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=verified_at,json=verifiedAt,proto3" json:"verified_at,omitempty"`
}

func (x *TOTPFactor) Reset() {
	*x = TOTPFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2_session_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TOTPFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOTPFactor) ProtoMessage() {}

func (x *TOTPFactor) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2_session_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOTPFactor.ProtoReflect.Descriptor instead.
func (*TOTPFactor) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2_session_proto_rawDescGZIP(), []int{6}
}

func (x *TOTPFactor) GetVerifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerifiedAt
	}
	return nil
}

type OTPFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifiedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=verified_at,json=verifiedAt,proto3" json:"verified_at,omitempty"`
}

func (x *OTPFactor) Reset() {
	*x = OTPFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2_session_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTPFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTPFactor) ProtoMessage() {}

func (x *OTPFactor) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2_session_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTPFactor.ProtoReflect.Descriptor instead.
func (*OTPFactor) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2_session_proto_rawDescGZIP(), []int{7}
}

func (x *OTPFactor) GetVerifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerifiedAt
	}
	return nil
}

type SearchQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*SearchQuery_IdsQuery
	//	*SearchQuery_UserIdQuery
	//	*SearchQuery_CreationDateQuery
	Query isSearchQuery_Query `protobuf_oneof:"query"`
}

func (x *SearchQuery) Reset() {
	*x = SearchQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2_session_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery) ProtoMessage() {}

func (x *SearchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2_session_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery.ProtoReflect.Descriptor instead.
func (*SearchQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2_session_proto_rawDescGZIP(), []int{8}
}

func (m *SearchQuery) GetQuery() isSearchQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *SearchQuery) GetIdsQuery() *IDsQuery {
	if x, ok := x.GetQuery().(*SearchQuery_IdsQuery); ok {
		return x.IdsQuery
	}
	return nil
}

func (x *SearchQuery) GetUserIdQuery() *UserIDQuery {
	if x, ok := x.GetQuery().(*SearchQuery_UserIdQuery); ok {
		return x.UserIdQuery
	}
	return nil
}

func (x *SearchQuery) GetCreationDateQuery() *CreationDateQuery {
	if x, ok := x.GetQuery().(*SearchQuery_CreationDateQuery); ok {
		return x.CreationDateQuery
	}
	return nil
}

type isSearchQuery_Query interface {
	isSearchQuery_Query()
}

type SearchQuery_IdsQuery struct {
	IdsQuery *IDsQuery `protobuf:"bytes,1,opt,name=ids_query,json=idsQuery,proto3,oneof"`
}

type SearchQuery_UserIdQuery struct {
	UserIdQuery *UserIDQuery `protobuf:"bytes,2,opt,name=user_id_query,json=userIdQuery,proto3,oneof"`
}

type SearchQuery_CreationDateQuery struct {
	CreationDateQuery *CreationDateQuery `protobuf:"bytes,3,opt,name=creation_date_query,json=creationDateQuery,proto3,oneof"`
}

func (*SearchQuery_IdsQuery) isSearchQuery_Query() {}

func (*SearchQuery_UserIdQuery) isSearchQuery_Query() {}

func (*SearchQuery_CreationDateQuery) isSearchQuery_Query() {}

type IDsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *IDsQuery) Reset() {
	*x = IDsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2_session_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDsQuery) ProtoMessage() {}

func (x *IDsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2_session_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDsQuery.ProtoReflect.Descriptor instead.
func (*IDsQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2_session_proto_rawDescGZIP(), []int{9}
}

func (x *IDsQuery) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type UserIDQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserIDQuery) Reset() {
	*x = UserIDQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2_session_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIDQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIDQuery) ProtoMessage() {}

func (x *UserIDQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2_session_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIDQuery.ProtoReflect.Descriptor instead.
func (*UserIDQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2_session_proto_rawDescGZIP(), []int{10}
}

func (x *UserIDQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreationDateQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationDate *timestamppb.Timestamp      `protobuf:"bytes,1,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	Method       object.TimestampQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TimestampQueryMethod" json:"method,omitempty"`
}

func (x *CreationDateQuery) Reset() {
	*x = CreationDateQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2_session_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreationDateQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreationDateQuery) ProtoMessage() {}

func (x *CreationDateQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2_session_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreationDateQuery.ProtoReflect.Descriptor instead.
func (*CreationDateQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2_session_proto_rawDescGZIP(), []int{11}
}

func (x *CreationDateQuery) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *CreationDateQuery) GetMethod() object.TimestampQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TimestampQueryMethod(0)
}

type UserAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FingerprintId *string                            `protobuf:"bytes,1,opt,name=fingerprint_id,json=fingerprintId,proto3,oneof" json:"fingerprint_id,omitempty"`
	Ip            *string                            `protobuf:"bytes,2,opt,name=ip,proto3,oneof" json:"ip,omitempty"`
	Description   *string                            `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Header        map[string]*UserAgent_HeaderValues `protobuf:"bytes,4,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserAgent) Reset() {
	*x = UserAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2_session_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAgent) ProtoMessage() {}

func (x *UserAgent) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2_session_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAgent.ProtoReflect.Descriptor instead.
func (*UserAgent) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2_session_proto_rawDescGZIP(), []int{12}
}

func (x *UserAgent) GetFingerprintId() string {
	if x != nil && x.FingerprintId != nil {
		return *x.FingerprintId
	}
	return ""
}

func (x *UserAgent) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *UserAgent) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UserAgent) GetHeader() map[string]*UserAgent_HeaderValues {
	if x != nil {
		return x.Header
	}
	return nil
}

// A header may have multiple values.
// In Go, headers are defined
// as map[string][]string, but protobuf
// doesn't allow this scheme.
type UserAgent_HeaderValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *UserAgent_HeaderValues) Reset() {
	*x = UserAgent_HeaderValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2_session_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAgent_HeaderValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAgent_HeaderValues) ProtoMessage() {}

func (x *UserAgent_HeaderValues) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2_session_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAgent_HeaderValues.ProtoReflect.Descriptor instead.
func (*UserAgent_HeaderValues) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2_session_proto_rawDescGZIP(), []int{12, 0}
}

func (x *UserAgent_HeaderValues) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_zitadel_session_v2_session_proto protoreflect.FileDescriptor

var file_zitadel_session_v2_session_proto_rawDesc = []byte{
	0x0a, 0x20, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x12, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x1a, 0x14, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x06, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0x92, 0x41, 0x15, 0x32, 0x13, 0x22, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x69, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x61, 0x73,
	0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x22,
	0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x22, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x7e, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x47, 0x92,
	0x41, 0x44, 0x32, 0x42, 0x22, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x2c, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x6d, 0x6f, 0x72, 0x65, 0x22, 0x52, 0x07, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x63, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1c, 0x92, 0x41,
	0x19, 0x32, 0x17, 0x22, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x34, 0x22,
	0x74, 0x69, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x22, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0xa1, 0x03, 0x0a, 0x07, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x4e, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x77, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x4e, 0x12, 0x38, 0x0a, 0x06, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x4f, 0x54, 0x50, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x12, 0x36, 0x0a, 0x07, 0x6f, 0x74, 0x70,
	0x5f, 0x73, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e,
	0x4f, 0x54, 0x50, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6f, 0x74, 0x70, 0x53, 0x6d,
	0x73, 0x12, 0x3a, 0x0a, 0x09, 0x6f, 0x74, 0x70, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x54, 0x50, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x74, 0x70, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xa2, 0x03,
	0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x67, 0x0a, 0x0b,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x2a, 0x92,
	0x41, 0x27, 0x32, 0x25, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6c, 0x61, 0x73, 0x74,
	0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x22, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x22,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x22,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x22, 0x52,
	0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x22, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x22, 0x52, 0x0e, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x05, 0x10,
	0x06, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x22, 0x7d, 0x0a, 0x0e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x6b, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x29, 0x22, 0x74, 0x69, 0x6d,
	0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x64, 0x22, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x78, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x68, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x61,
	0x73, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x52,
	0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x0e,
	0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x4e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x74,
	0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x37, 0x92, 0x41, 0x34, 0x32, 0x32, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x20, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x0a, 0x54, 0x4f,
	0x54, 0x50, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x7f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x32, 0x3d,
	0x22, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54,
	0x69, 0x6d, 0x65, 0x2d, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x4f, 0x6e, 0x65, 0x2d, 0x54, 0x69,
	0x6d, 0x65, 0x20, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x77, 0x61, 0x73, 0x20,
	0x6c, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x52, 0x0a, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x09, 0x4f, 0x54,
	0x50, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x74, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x32, 0x22,
	0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4f, 0x6e,
	0x65, 0x2d, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20,
	0x77, 0x61, 0x73, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64,
	0x22, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf8, 0x01,
	0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3b, 0x0a,
	0x09, 0x69, 0x64, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x44, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x08, 0x69, 0x64, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x57, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0c, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x1c, 0x0a, 0x08, 0x49, 0x44, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x1d, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x78, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x3e,
	0x92, 0x41, 0x33, 0x32, 0x31, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69,
	0x63, 0x68, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69,
	0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xef, 0x02, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d,
	0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x02,
	0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a,
	0x26, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x65, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x5c, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x1e,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x24, 0x0a, 0x20, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x3b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_session_v2_session_proto_rawDescOnce sync.Once
	file_zitadel_session_v2_session_proto_rawDescData = file_zitadel_session_v2_session_proto_rawDesc
)

func file_zitadel_session_v2_session_proto_rawDescGZIP() []byte {
	file_zitadel_session_v2_session_proto_rawDescOnce.Do(func() {
		file_zitadel_session_v2_session_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_session_v2_session_proto_rawDescData)
	})
	return file_zitadel_session_v2_session_proto_rawDescData
}

var file_zitadel_session_v2_session_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zitadel_session_v2_session_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_zitadel_session_v2_session_proto_goTypes = []interface{}{
	(SessionFieldName)(0),            // 0: zitadel.session.v2.SessionFieldName
	(*Session)(nil),                  // 1: zitadel.session.v2.Session
	(*Factors)(nil),                  // 2: zitadel.session.v2.Factors
	(*UserFactor)(nil),               // 3: zitadel.session.v2.UserFactor
	(*PasswordFactor)(nil),           // 4: zitadel.session.v2.PasswordFactor
	(*IntentFactor)(nil),             // 5: zitadel.session.v2.IntentFactor
	(*WebAuthNFactor)(nil),           // 6: zitadel.session.v2.WebAuthNFactor
	(*TOTPFactor)(nil),               // 7: zitadel.session.v2.TOTPFactor
	(*OTPFactor)(nil),                // 8: zitadel.session.v2.OTPFactor
	(*SearchQuery)(nil),              // 9: zitadel.session.v2.SearchQuery
	(*IDsQuery)(nil),                 // 10: zitadel.session.v2.IDsQuery
	(*UserIDQuery)(nil),              // 11: zitadel.session.v2.UserIDQuery
	(*CreationDateQuery)(nil),        // 12: zitadel.session.v2.CreationDateQuery
	(*UserAgent)(nil),                // 13: zitadel.session.v2.UserAgent
	nil,                              // 14: zitadel.session.v2.Session.MetadataEntry
	(*UserAgent_HeaderValues)(nil),   // 15: zitadel.session.v2.UserAgent.HeaderValues
	nil,                              // 16: zitadel.session.v2.UserAgent.HeaderEntry
	(*timestamppb.Timestamp)(nil),    // 17: google.protobuf.Timestamp
	(object.TimestampQueryMethod)(0), // 18: zitadel.v1.TimestampQueryMethod
}
var file_zitadel_session_v2_session_proto_depIdxs = []int32{
	17, // 0: zitadel.session.v2.Session.creation_date:type_name -> google.protobuf.Timestamp
	17, // 1: zitadel.session.v2.Session.change_date:type_name -> google.protobuf.Timestamp
	2,  // 2: zitadel.session.v2.Session.factors:type_name -> zitadel.session.v2.Factors
	14, // 3: zitadel.session.v2.Session.metadata:type_name -> zitadel.session.v2.Session.MetadataEntry
	13, // 4: zitadel.session.v2.Session.user_agent:type_name -> zitadel.session.v2.UserAgent
	17, // 5: zitadel.session.v2.Session.expiration_date:type_name -> google.protobuf.Timestamp
	3,  // 6: zitadel.session.v2.Factors.user:type_name -> zitadel.session.v2.UserFactor
	4,  // 7: zitadel.session.v2.Factors.password:type_name -> zitadel.session.v2.PasswordFactor
	6,  // 8: zitadel.session.v2.Factors.web_auth_n:type_name -> zitadel.session.v2.WebAuthNFactor
	5,  // 9: zitadel.session.v2.Factors.intent:type_name -> zitadel.session.v2.IntentFactor
	7,  // 10: zitadel.session.v2.Factors.totp:type_name -> zitadel.session.v2.TOTPFactor
	8,  // 11: zitadel.session.v2.Factors.otp_sms:type_name -> zitadel.session.v2.OTPFactor
	8,  // 12: zitadel.session.v2.Factors.otp_email:type_name -> zitadel.session.v2.OTPFactor
	17, // 13: zitadel.session.v2.UserFactor.verified_at:type_name -> google.protobuf.Timestamp
	17, // 14: zitadel.session.v2.PasswordFactor.verified_at:type_name -> google.protobuf.Timestamp
	17, // 15: zitadel.session.v2.IntentFactor.verified_at:type_name -> google.protobuf.Timestamp
	17, // 16: zitadel.session.v2.WebAuthNFactor.verified_at:type_name -> google.protobuf.Timestamp
	17, // 17: zitadel.session.v2.TOTPFactor.verified_at:type_name -> google.protobuf.Timestamp
	17, // 18: zitadel.session.v2.OTPFactor.verified_at:type_name -> google.protobuf.Timestamp
	10, // 19: zitadel.session.v2.SearchQuery.ids_query:type_name -> zitadel.session.v2.IDsQuery
	11, // 20: zitadel.session.v2.SearchQuery.user_id_query:type_name -> zitadel.session.v2.UserIDQuery
	12, // 21: zitadel.session.v2.SearchQuery.creation_date_query:type_name -> zitadel.session.v2.CreationDateQuery
	17, // 22: zitadel.session.v2.CreationDateQuery.creation_date:type_name -> google.protobuf.Timestamp
	18, // 23: zitadel.session.v2.CreationDateQuery.method:type_name -> zitadel.v1.TimestampQueryMethod
	16, // 24: zitadel.session.v2.UserAgent.header:type_name -> zitadel.session.v2.UserAgent.HeaderEntry
	15, // 25: zitadel.session.v2.UserAgent.HeaderEntry.value:type_name -> zitadel.session.v2.UserAgent.HeaderValues
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_zitadel_session_v2_session_proto_init() }
func file_zitadel_session_v2_session_proto_init() {
	if File_zitadel_session_v2_session_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zitadel_session_v2_session_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2_session_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Factors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2_session_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2_session_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2_session_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntentFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2_session_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebAuthNFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2_session_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TOTPFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2_session_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTPFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2_session_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2_session_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2_session_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIDQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2_session_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreationDateQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2_session_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2_session_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAgent_HeaderValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_session_v2_session_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_zitadel_session_v2_session_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*SearchQuery_IdsQuery)(nil),
		(*SearchQuery_UserIdQuery)(nil),
		(*SearchQuery_CreationDateQuery)(nil),
	}
	file_zitadel_session_v2_session_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_session_v2_session_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_session_v2_session_proto_goTypes,
		DependencyIndexes: file_zitadel_session_v2_session_proto_depIdxs,
		EnumInfos:         file_zitadel_session_v2_session_proto_enumTypes,
		MessageInfos:      file_zitadel_session_v2_session_proto_msgTypes,
	}.Build()
	File_zitadel_session_v2_session_proto = out.File
	file_zitadel_session_v2_session_proto_rawDesc = nil
	file_zitadel_session_v2_session_proto_goTypes = nil
	file_zitadel_session_v2_session_proto_depIdxs = nil
}
