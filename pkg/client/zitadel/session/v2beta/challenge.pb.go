// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/session/v2beta/challenge.proto

package session

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserVerificationRequirement int32

const (
	UserVerificationRequirement_USER_VERIFICATION_REQUIREMENT_UNSPECIFIED UserVerificationRequirement = 0
	UserVerificationRequirement_USER_VERIFICATION_REQUIREMENT_REQUIRED    UserVerificationRequirement = 1
	UserVerificationRequirement_USER_VERIFICATION_REQUIREMENT_PREFERRED   UserVerificationRequirement = 2
	UserVerificationRequirement_USER_VERIFICATION_REQUIREMENT_DISCOURAGED UserVerificationRequirement = 3
)

// Enum value maps for UserVerificationRequirement.
var (
	UserVerificationRequirement_name = map[int32]string{
		0: "USER_VERIFICATION_REQUIREMENT_UNSPECIFIED",
		1: "USER_VERIFICATION_REQUIREMENT_REQUIRED",
		2: "USER_VERIFICATION_REQUIREMENT_PREFERRED",
		3: "USER_VERIFICATION_REQUIREMENT_DISCOURAGED",
	}
	UserVerificationRequirement_value = map[string]int32{
		"USER_VERIFICATION_REQUIREMENT_UNSPECIFIED": 0,
		"USER_VERIFICATION_REQUIREMENT_REQUIRED":    1,
		"USER_VERIFICATION_REQUIREMENT_PREFERRED":   2,
		"USER_VERIFICATION_REQUIREMENT_DISCOURAGED": 3,
	}
)

func (x UserVerificationRequirement) Enum() *UserVerificationRequirement {
	p := new(UserVerificationRequirement)
	*p = x
	return p
}

func (x UserVerificationRequirement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserVerificationRequirement) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_session_v2beta_challenge_proto_enumTypes[0].Descriptor()
}

func (UserVerificationRequirement) Type() protoreflect.EnumType {
	return &file_zitadel_session_v2beta_challenge_proto_enumTypes[0]
}

func (x UserVerificationRequirement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserVerificationRequirement.Descriptor instead.
func (UserVerificationRequirement) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_session_v2beta_challenge_proto_rawDescGZIP(), []int{0}
}

type RequestChallenges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebAuthN *RequestChallenges_WebAuthN `protobuf:"bytes,1,opt,name=web_auth_n,json=webAuthN,proto3,oneof" json:"web_auth_n,omitempty"`
	OtpSms   *RequestChallenges_OTPSMS   `protobuf:"bytes,2,opt,name=otp_sms,json=otpSms,proto3,oneof" json:"otp_sms,omitempty"`
	OtpEmail *RequestChallenges_OTPEmail `protobuf:"bytes,3,opt,name=otp_email,json=otpEmail,proto3,oneof" json:"otp_email,omitempty"`
}

func (x *RequestChallenges) Reset() {
	*x = RequestChallenges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2beta_challenge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestChallenges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestChallenges) ProtoMessage() {}

func (x *RequestChallenges) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2beta_challenge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestChallenges.ProtoReflect.Descriptor instead.
func (*RequestChallenges) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2beta_challenge_proto_rawDescGZIP(), []int{0}
}

func (x *RequestChallenges) GetWebAuthN() *RequestChallenges_WebAuthN {
	if x != nil {
		return x.WebAuthN
	}
	return nil
}

func (x *RequestChallenges) GetOtpSms() *RequestChallenges_OTPSMS {
	if x != nil {
		return x.OtpSms
	}
	return nil
}

func (x *RequestChallenges) GetOtpEmail() *RequestChallenges_OTPEmail {
	if x != nil {
		return x.OtpEmail
	}
	return nil
}

type Challenges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebAuthN *Challenges_WebAuthN `protobuf:"bytes,1,opt,name=web_auth_n,json=webAuthN,proto3,oneof" json:"web_auth_n,omitempty"`
	OtpSms   *string              `protobuf:"bytes,2,opt,name=otp_sms,json=otpSms,proto3,oneof" json:"otp_sms,omitempty"`
	OtpEmail *string              `protobuf:"bytes,3,opt,name=otp_email,json=otpEmail,proto3,oneof" json:"otp_email,omitempty"`
}

func (x *Challenges) Reset() {
	*x = Challenges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2beta_challenge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Challenges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenges) ProtoMessage() {}

func (x *Challenges) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2beta_challenge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenges.ProtoReflect.Descriptor instead.
func (*Challenges) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2beta_challenge_proto_rawDescGZIP(), []int{1}
}

func (x *Challenges) GetWebAuthN() *Challenges_WebAuthN {
	if x != nil {
		return x.WebAuthN
	}
	return nil
}

func (x *Challenges) GetOtpSms() string {
	if x != nil && x.OtpSms != nil {
		return *x.OtpSms
	}
	return ""
}

func (x *Challenges) GetOtpEmail() string {
	if x != nil && x.OtpEmail != nil {
		return *x.OtpEmail
	}
	return ""
}

type RequestChallenges_WebAuthN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain                      string                      `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	UserVerificationRequirement UserVerificationRequirement `protobuf:"varint,2,opt,name=user_verification_requirement,json=userVerificationRequirement,proto3,enum=zitadel.session.v2beta.UserVerificationRequirement" json:"user_verification_requirement,omitempty"`
}

func (x *RequestChallenges_WebAuthN) Reset() {
	*x = RequestChallenges_WebAuthN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2beta_challenge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestChallenges_WebAuthN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestChallenges_WebAuthN) ProtoMessage() {}

func (x *RequestChallenges_WebAuthN) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2beta_challenge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestChallenges_WebAuthN.ProtoReflect.Descriptor instead.
func (*RequestChallenges_WebAuthN) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2beta_challenge_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RequestChallenges_WebAuthN) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RequestChallenges_WebAuthN) GetUserVerificationRequirement() UserVerificationRequirement {
	if x != nil {
		return x.UserVerificationRequirement
	}
	return UserVerificationRequirement_USER_VERIFICATION_REQUIREMENT_UNSPECIFIED
}

type RequestChallenges_OTPSMS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnCode bool `protobuf:"varint,1,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
}

func (x *RequestChallenges_OTPSMS) Reset() {
	*x = RequestChallenges_OTPSMS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2beta_challenge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestChallenges_OTPSMS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestChallenges_OTPSMS) ProtoMessage() {}

func (x *RequestChallenges_OTPSMS) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2beta_challenge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestChallenges_OTPSMS.ProtoReflect.Descriptor instead.
func (*RequestChallenges_OTPSMS) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2beta_challenge_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RequestChallenges_OTPSMS) GetReturnCode() bool {
	if x != nil {
		return x.ReturnCode
	}
	return false
}

type RequestChallenges_OTPEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if no delivery_type is specified, an email is sent with the default url
	//
	// Types that are assignable to DeliveryType:
	//
	//	*RequestChallenges_OTPEmail_SendCode_
	//	*RequestChallenges_OTPEmail_ReturnCode_
	DeliveryType isRequestChallenges_OTPEmail_DeliveryType `protobuf_oneof:"delivery_type"`
}

func (x *RequestChallenges_OTPEmail) Reset() {
	*x = RequestChallenges_OTPEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2beta_challenge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestChallenges_OTPEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestChallenges_OTPEmail) ProtoMessage() {}

func (x *RequestChallenges_OTPEmail) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2beta_challenge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestChallenges_OTPEmail.ProtoReflect.Descriptor instead.
func (*RequestChallenges_OTPEmail) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2beta_challenge_proto_rawDescGZIP(), []int{0, 2}
}

func (m *RequestChallenges_OTPEmail) GetDeliveryType() isRequestChallenges_OTPEmail_DeliveryType {
	if m != nil {
		return m.DeliveryType
	}
	return nil
}

func (x *RequestChallenges_OTPEmail) GetSendCode() *RequestChallenges_OTPEmail_SendCode {
	if x, ok := x.GetDeliveryType().(*RequestChallenges_OTPEmail_SendCode_); ok {
		return x.SendCode
	}
	return nil
}

func (x *RequestChallenges_OTPEmail) GetReturnCode() *RequestChallenges_OTPEmail_ReturnCode {
	if x, ok := x.GetDeliveryType().(*RequestChallenges_OTPEmail_ReturnCode_); ok {
		return x.ReturnCode
	}
	return nil
}

type isRequestChallenges_OTPEmail_DeliveryType interface {
	isRequestChallenges_OTPEmail_DeliveryType()
}

type RequestChallenges_OTPEmail_SendCode_ struct {
	SendCode *RequestChallenges_OTPEmail_SendCode `protobuf:"bytes,2,opt,name=send_code,json=sendCode,proto3,oneof"`
}

type RequestChallenges_OTPEmail_ReturnCode_ struct {
	ReturnCode *RequestChallenges_OTPEmail_ReturnCode `protobuf:"bytes,3,opt,name=return_code,json=returnCode,proto3,oneof"`
}

func (*RequestChallenges_OTPEmail_SendCode_) isRequestChallenges_OTPEmail_DeliveryType() {}

func (*RequestChallenges_OTPEmail_ReturnCode_) isRequestChallenges_OTPEmail_DeliveryType() {}

type RequestChallenges_OTPEmail_SendCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UrlTemplate *string `protobuf:"bytes,1,opt,name=url_template,json=urlTemplate,proto3,oneof" json:"url_template,omitempty"`
}

func (x *RequestChallenges_OTPEmail_SendCode) Reset() {
	*x = RequestChallenges_OTPEmail_SendCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2beta_challenge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestChallenges_OTPEmail_SendCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestChallenges_OTPEmail_SendCode) ProtoMessage() {}

func (x *RequestChallenges_OTPEmail_SendCode) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2beta_challenge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestChallenges_OTPEmail_SendCode.ProtoReflect.Descriptor instead.
func (*RequestChallenges_OTPEmail_SendCode) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2beta_challenge_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *RequestChallenges_OTPEmail_SendCode) GetUrlTemplate() string {
	if x != nil && x.UrlTemplate != nil {
		return *x.UrlTemplate
	}
	return ""
}

type RequestChallenges_OTPEmail_ReturnCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestChallenges_OTPEmail_ReturnCode) Reset() {
	*x = RequestChallenges_OTPEmail_ReturnCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2beta_challenge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestChallenges_OTPEmail_ReturnCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestChallenges_OTPEmail_ReturnCode) ProtoMessage() {}

func (x *RequestChallenges_OTPEmail_ReturnCode) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2beta_challenge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestChallenges_OTPEmail_ReturnCode.ProtoReflect.Descriptor instead.
func (*RequestChallenges_OTPEmail_ReturnCode) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2beta_challenge_proto_rawDescGZIP(), []int{0, 2, 1}
}

type Challenges_WebAuthN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKeyCredentialRequestOptions *structpb.Struct `protobuf:"bytes,1,opt,name=public_key_credential_request_options,json=publicKeyCredentialRequestOptions,proto3" json:"public_key_credential_request_options,omitempty"`
}

func (x *Challenges_WebAuthN) Reset() {
	*x = Challenges_WebAuthN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_session_v2beta_challenge_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Challenges_WebAuthN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenges_WebAuthN) ProtoMessage() {}

func (x *Challenges_WebAuthN) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_session_v2beta_challenge_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenges_WebAuthN.ProtoReflect.Descriptor instead.
func (*Challenges_WebAuthN) Descriptor() ([]byte, []int) {
	return file_zitadel_session_v2beta_challenge_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Challenges_WebAuthN) GetPublicKeyCredentialRequestOptions() *structpb.Struct {
	if x != nil {
		return x.PublicKeyCredentialRequestOptions
	}
	return nil
}

var File_zitadel_session_v2beta_challenge_proto protoreflect.FileDescriptor

var file_zitadel_session_v2beta_challenge_proto_rawDesc = []byte{
	0x0a, 0x26, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x0b, 0x0a, 0x11, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x55,
	0x0a, 0x0a, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x2e, 0x57, 0x65,
	0x62, 0x41, 0x75, 0x74, 0x68, 0x4e, 0x48, 0x00, 0x52, 0x08, 0x77, 0x65, 0x62, 0x41, 0x75, 0x74,
	0x68, 0x4e, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x07, 0x6f, 0x74, 0x70, 0x5f, 0x73, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x73, 0x2e, 0x4f, 0x54, 0x50, 0x53, 0x4d, 0x53, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x74, 0x70, 0x53,
	0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x09, 0x6f, 0x74, 0x70, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x73, 0x2e, 0x4f, 0x54, 0x50, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x48, 0x02, 0x52, 0x08,
	0x6f, 0x74, 0x70, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x1a, 0x8f, 0x04, 0x0a, 0x08,
	0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x4e, 0x12, 0x7c, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x64, 0x92, 0x41, 0x54, 0x32, 0x52, 0x22,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x61, 0x73, 0x20,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x20, 0x57, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x57, 0x65, 0x62,
	0x41, 0x75, 0x74, 0x68, 0x4e, 0x20, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e,
	0x22, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x84, 0x03, 0x0a, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x8a, 0x02, 0x92, 0x41, 0xf9, 0x01, 0x1a, 0x40, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x54,
	0x52, 0x2f, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2f, 0x23, 0x65, 0x6e, 0x75, 0x6d,
	0x2d, 0x75, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0xb4, 0x01, 0x22,
	0x55, 0x73, 0x65, 0x72, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74,
	0x6f, 0x20, 0x60, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x60, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x20, 0x69, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x20, 0x55,
	0x32, 0x46, 0x22, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00,
	0x52, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x29, 0x0a,
	0x06, 0x4f, 0x54, 0x50, 0x53, 0x4d, 0x53, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0xc5, 0x04, 0x0a, 0x08, 0x4f, 0x54, 0x50,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x5a, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x73, 0x2e, 0x4f, 0x54, 0x50, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x60, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x73, 0x2e, 0x4f, 0x54, 0x50, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x1a, 0xdb, 0x02, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0xbd, 0x02, 0x0a, 0x0c, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x94, 0x02, 0x92, 0x41, 0x86, 0x02, 0x32, 0xb9,
	0x01, 0x22, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x73, 0x65, 0x74,
	0x20, 0x61, 0x20, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2c,
	0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x69, 0x6c, 0x20,
	0x73, 0x65, 0x6e, 0x74, 0x20, 0x62, 0x79, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20,
	0x74, 0x6f, 0x20, 0x67, 0x75, 0x69, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x20, 0x49, 0x66, 0x20,
	0x6e, 0x6f, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x20, 0x69, 0x73, 0x20, 0x73,
	0x65, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20,
	0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x75, 0x72, 0x6c, 0x20, 0x77, 0x69, 0x6c, 0x6c,
	0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x2e, 0x22, 0x4a, 0x42, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x74, 0x70, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x3f, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x3d, 0x7b, 0x7b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x7d, 0x26, 0x63,
	0x6f, 0x64, 0x65, 0x3d, 0x7b, 0x7b, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x7d, 0x7d, 0x22, 0x78, 0xc8,
	0x01, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x48, 0x00,
	0x52, 0x0b, 0x75, 0x72, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x1a, 0x0c, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6e, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x74, 0x70, 0x5f, 0x73, 0x6d, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6f, 0x74, 0x70, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xae, 0x06, 0x0a, 0x0a, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73,
	0x2e, 0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x4e, 0x48, 0x00, 0x52, 0x08, 0x77, 0x65, 0x62,
	0x41, 0x75, 0x74, 0x68, 0x4e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x74, 0x70, 0x5f,
	0x73, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x74, 0x70,
	0x53, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x74, 0x70, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x6f, 0x74, 0x70,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x1a, 0xe6, 0x04, 0x0a, 0x08, 0x57, 0x65, 0x62,
	0x41, 0x75, 0x74, 0x68, 0x4e, 0x12, 0xd9, 0x04, 0x0a, 0x25, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0xed,
	0x03, 0x92, 0x41, 0xe9, 0x03, 0x32, 0xfa, 0x01, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x20, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x29, 0x2e, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x4a, 0x53, 0x4f, 0x4e, 0x2c,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x57, 0x65,
	0x62, 0x61, 0x75, 0x74, 0x68, 0x4e, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x53,
	0x65, 0x65, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x77, 0x77, 0x77, 0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x54, 0x52, 0x2f, 0x77,
	0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2f, 0x23, 0x64, 0x69, 0x63, 0x74, 0x64, 0x65, 0x66,
	0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4a, 0xe9, 0x01, 0x7b, 0x22, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x22, 0x3a, 0x7b, 0x22, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x41, 0x54,
	0x6d, 0x71, 0x42, 0x67, 0x2d, 0x39, 0x39, 0x71, 0x79, 0x4f, 0x5a, 0x6b, 0x32, 0x7a, 0x6c, 0x6f,
	0x50, 0x64, 0x4a, 0x51, 0x79, 0x53, 0x32, 0x52, 0x37, 0x49, 0x6b, 0x46, 0x54, 0x37, 0x76, 0x39,
	0x48, 0x6f, 0x6f, 0x73, 0x5f, 0x42, 0x5f, 0x6e, 0x4d, 0x22, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x3a, 0x22, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x6b, 0x65, 0x79, 0x22, 0x7d, 0x5d,
	0x2c, 0x22, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x3a, 0x22, 0x47, 0x41,
	0x4f, 0x48, 0x59, 0x7a, 0x32, 0x6a, 0x45, 0x36, 0x39, 0x6b, 0x4a, 0x4d, 0x59, 0x6f, 0x36, 0x4c,
	0x61, 0x69, 0x6a, 0x38, 0x79, 0x57, 0x77, 0x39, 0x2d, 0x64, 0x4b, 0x4b, 0x67, 0x62, 0x56, 0x69,
	0x4e, 0x68, 0x66, 0x75, 0x79, 0x30, 0x53, 0x74, 0x41, 0x22, 0x2c, 0x22, 0x72, 0x70, 0x49, 0x64,
	0x22, 0x3a, 0x22, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x2c, 0x22, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x3a, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2c, 0x22,
	0x75, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x7d, 0x7d, 0x52, 0x21,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6e,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x74, 0x70, 0x5f, 0x73, 0x6d, 0x73, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x6f, 0x74, 0x70, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2a, 0xd4, 0x01, 0x0a, 0x1b, 0x55,
	0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x29, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x45,
	0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x52, 0x41, 0x47, 0x45, 0x44, 0x10,
	0x03, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x3b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_session_v2beta_challenge_proto_rawDescOnce sync.Once
	file_zitadel_session_v2beta_challenge_proto_rawDescData = file_zitadel_session_v2beta_challenge_proto_rawDesc
)

func file_zitadel_session_v2beta_challenge_proto_rawDescGZIP() []byte {
	file_zitadel_session_v2beta_challenge_proto_rawDescOnce.Do(func() {
		file_zitadel_session_v2beta_challenge_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_session_v2beta_challenge_proto_rawDescData)
	})
	return file_zitadel_session_v2beta_challenge_proto_rawDescData
}

var file_zitadel_session_v2beta_challenge_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zitadel_session_v2beta_challenge_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_zitadel_session_v2beta_challenge_proto_goTypes = []interface{}{
	(UserVerificationRequirement)(0),              // 0: zitadel.session.v2beta.UserVerificationRequirement
	(*RequestChallenges)(nil),                     // 1: zitadel.session.v2beta.RequestChallenges
	(*Challenges)(nil),                            // 2: zitadel.session.v2beta.Challenges
	(*RequestChallenges_WebAuthN)(nil),            // 3: zitadel.session.v2beta.RequestChallenges.WebAuthN
	(*RequestChallenges_OTPSMS)(nil),              // 4: zitadel.session.v2beta.RequestChallenges.OTPSMS
	(*RequestChallenges_OTPEmail)(nil),            // 5: zitadel.session.v2beta.RequestChallenges.OTPEmail
	(*RequestChallenges_OTPEmail_SendCode)(nil),   // 6: zitadel.session.v2beta.RequestChallenges.OTPEmail.SendCode
	(*RequestChallenges_OTPEmail_ReturnCode)(nil), // 7: zitadel.session.v2beta.RequestChallenges.OTPEmail.ReturnCode
	(*Challenges_WebAuthN)(nil),                   // 8: zitadel.session.v2beta.Challenges.WebAuthN
	(*structpb.Struct)(nil),                       // 9: google.protobuf.Struct
}
var file_zitadel_session_v2beta_challenge_proto_depIdxs = []int32{
	3, // 0: zitadel.session.v2beta.RequestChallenges.web_auth_n:type_name -> zitadel.session.v2beta.RequestChallenges.WebAuthN
	4, // 1: zitadel.session.v2beta.RequestChallenges.otp_sms:type_name -> zitadel.session.v2beta.RequestChallenges.OTPSMS
	5, // 2: zitadel.session.v2beta.RequestChallenges.otp_email:type_name -> zitadel.session.v2beta.RequestChallenges.OTPEmail
	8, // 3: zitadel.session.v2beta.Challenges.web_auth_n:type_name -> zitadel.session.v2beta.Challenges.WebAuthN
	0, // 4: zitadel.session.v2beta.RequestChallenges.WebAuthN.user_verification_requirement:type_name -> zitadel.session.v2beta.UserVerificationRequirement
	6, // 5: zitadel.session.v2beta.RequestChallenges.OTPEmail.send_code:type_name -> zitadel.session.v2beta.RequestChallenges.OTPEmail.SendCode
	7, // 6: zitadel.session.v2beta.RequestChallenges.OTPEmail.return_code:type_name -> zitadel.session.v2beta.RequestChallenges.OTPEmail.ReturnCode
	9, // 7: zitadel.session.v2beta.Challenges.WebAuthN.public_key_credential_request_options:type_name -> google.protobuf.Struct
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_zitadel_session_v2beta_challenge_proto_init() }
func file_zitadel_session_v2beta_challenge_proto_init() {
	if File_zitadel_session_v2beta_challenge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zitadel_session_v2beta_challenge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestChallenges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2beta_challenge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Challenges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2beta_challenge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestChallenges_WebAuthN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2beta_challenge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestChallenges_OTPSMS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2beta_challenge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestChallenges_OTPEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2beta_challenge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestChallenges_OTPEmail_SendCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2beta_challenge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestChallenges_OTPEmail_ReturnCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_session_v2beta_challenge_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Challenges_WebAuthN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_session_v2beta_challenge_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_zitadel_session_v2beta_challenge_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_zitadel_session_v2beta_challenge_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*RequestChallenges_OTPEmail_SendCode_)(nil),
		(*RequestChallenges_OTPEmail_ReturnCode_)(nil),
	}
	file_zitadel_session_v2beta_challenge_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_session_v2beta_challenge_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_session_v2beta_challenge_proto_goTypes,
		DependencyIndexes: file_zitadel_session_v2beta_challenge_proto_depIdxs,
		EnumInfos:         file_zitadel_session_v2beta_challenge_proto_enumTypes,
		MessageInfos:      file_zitadel_session_v2beta_challenge_proto_msgTypes,
	}.Build()
	File_zitadel_session_v2beta_challenge_proto = out.File
	file_zitadel_session_v2beta_challenge_proto_rawDesc = nil
	file_zitadel_session_v2beta_challenge_proto_goTypes = nil
	file_zitadel_session_v2beta_challenge_proto_depIdxs = nil
}
