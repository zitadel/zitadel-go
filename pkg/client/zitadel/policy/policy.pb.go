// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/policy.proto

package policy

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	idp "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/idp"
	object "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/object"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ThemeMode int32

const (
	ThemeMode_THEME_MODE_UNSPECIFIED ThemeMode = 0
	ThemeMode_THEME_MODE_AUTO        ThemeMode = 1
	ThemeMode_THEME_MODE_DARK        ThemeMode = 2
	ThemeMode_THEME_MODE_LIGHT       ThemeMode = 3
)

// Enum value maps for ThemeMode.
var (
	ThemeMode_name = map[int32]string{
		0: "THEME_MODE_UNSPECIFIED",
		1: "THEME_MODE_AUTO",
		2: "THEME_MODE_DARK",
		3: "THEME_MODE_LIGHT",
	}
	ThemeMode_value = map[string]int32{
		"THEME_MODE_UNSPECIFIED": 0,
		"THEME_MODE_AUTO":        1,
		"THEME_MODE_DARK":        2,
		"THEME_MODE_LIGHT":       3,
	}
)

func (x ThemeMode) Enum() *ThemeMode {
	p := new(ThemeMode)
	*p = x
	return p
}

func (x ThemeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThemeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_policy_proto_enumTypes[0].Descriptor()
}

func (ThemeMode) Type() protoreflect.EnumType {
	return &file_zitadel_policy_proto_enumTypes[0]
}

func (x ThemeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThemeMode.Descriptor instead.
func (ThemeMode) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{0}
}

type SecondFactorType int32

const (
	SecondFactorType_SECOND_FACTOR_TYPE_UNSPECIFIED SecondFactorType = 0
	// SECOND_FACTOR_TYPE_OTP is the type for TOTP
	SecondFactorType_SECOND_FACTOR_TYPE_OTP       SecondFactorType = 1
	SecondFactorType_SECOND_FACTOR_TYPE_U2F       SecondFactorType = 2
	SecondFactorType_SECOND_FACTOR_TYPE_OTP_EMAIL SecondFactorType = 3
	SecondFactorType_SECOND_FACTOR_TYPE_OTP_SMS   SecondFactorType = 4
)

// Enum value maps for SecondFactorType.
var (
	SecondFactorType_name = map[int32]string{
		0: "SECOND_FACTOR_TYPE_UNSPECIFIED",
		1: "SECOND_FACTOR_TYPE_OTP",
		2: "SECOND_FACTOR_TYPE_U2F",
		3: "SECOND_FACTOR_TYPE_OTP_EMAIL",
		4: "SECOND_FACTOR_TYPE_OTP_SMS",
	}
	SecondFactorType_value = map[string]int32{
		"SECOND_FACTOR_TYPE_UNSPECIFIED": 0,
		"SECOND_FACTOR_TYPE_OTP":         1,
		"SECOND_FACTOR_TYPE_U2F":         2,
		"SECOND_FACTOR_TYPE_OTP_EMAIL":   3,
		"SECOND_FACTOR_TYPE_OTP_SMS":     4,
	}
)

func (x SecondFactorType) Enum() *SecondFactorType {
	p := new(SecondFactorType)
	*p = x
	return p
}

func (x SecondFactorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecondFactorType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_policy_proto_enumTypes[1].Descriptor()
}

func (SecondFactorType) Type() protoreflect.EnumType {
	return &file_zitadel_policy_proto_enumTypes[1]
}

func (x SecondFactorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecondFactorType.Descriptor instead.
func (SecondFactorType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{1}
}

type MultiFactorType int32

const (
	MultiFactorType_MULTI_FACTOR_TYPE_UNSPECIFIED           MultiFactorType = 0
	MultiFactorType_MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION MultiFactorType = 1
)

// Enum value maps for MultiFactorType.
var (
	MultiFactorType_name = map[int32]string{
		0: "MULTI_FACTOR_TYPE_UNSPECIFIED",
		1: "MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION",
	}
	MultiFactorType_value = map[string]int32{
		"MULTI_FACTOR_TYPE_UNSPECIFIED":           0,
		"MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION": 1,
	}
)

func (x MultiFactorType) Enum() *MultiFactorType {
	p := new(MultiFactorType)
	*p = x
	return p
}

func (x MultiFactorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultiFactorType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_policy_proto_enumTypes[2].Descriptor()
}

func (MultiFactorType) Type() protoreflect.EnumType {
	return &file_zitadel_policy_proto_enumTypes[2]
}

func (x MultiFactorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultiFactorType.Descriptor instead.
func (MultiFactorType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{2}
}

type PasswordlessType int32

const (
	PasswordlessType_PASSWORDLESS_TYPE_NOT_ALLOWED PasswordlessType = 0
	PasswordlessType_PASSWORDLESS_TYPE_ALLOWED     PasswordlessType = 1 //PLANNED: PASSWORDLESS_TYPE_WITH_CERT
)

// Enum value maps for PasswordlessType.
var (
	PasswordlessType_name = map[int32]string{
		0: "PASSWORDLESS_TYPE_NOT_ALLOWED",
		1: "PASSWORDLESS_TYPE_ALLOWED",
	}
	PasswordlessType_value = map[string]int32{
		"PASSWORDLESS_TYPE_NOT_ALLOWED": 0,
		"PASSWORDLESS_TYPE_ALLOWED":     1,
	}
)

func (x PasswordlessType) Enum() *PasswordlessType {
	p := new(PasswordlessType)
	*p = x
	return p
}

func (x PasswordlessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PasswordlessType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_policy_proto_enumTypes[3].Descriptor()
}

func (PasswordlessType) Type() protoreflect.EnumType {
	return &file_zitadel_policy_proto_enumTypes[3]
}

func (x PasswordlessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PasswordlessType.Descriptor instead.
func (PasswordlessType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{3}
}

// deprecated: please use DomainPolicy instead
type OrgIAMPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details               *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	UserLoginMustBeDomain bool                  `protobuf:"varint,2,opt,name=user_login_must_be_domain,json=userLoginMustBeDomain,proto3" json:"user_login_must_be_domain,omitempty"`
	IsDefault             bool                  `protobuf:"varint,3,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
}

func (x *OrgIAMPolicy) Reset() {
	*x = OrgIAMPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgIAMPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgIAMPolicy) ProtoMessage() {}

func (x *OrgIAMPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgIAMPolicy.ProtoReflect.Descriptor instead.
func (*OrgIAMPolicy) Descriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{0}
}

func (x *OrgIAMPolicy) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *OrgIAMPolicy) GetUserLoginMustBeDomain() bool {
	if x != nil {
		return x.UserLoginMustBeDomain
	}
	return false
}

func (x *OrgIAMPolicy) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type DomainPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details                                *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	UserLoginMustBeDomain                  bool                  `protobuf:"varint,2,opt,name=user_login_must_be_domain,json=userLoginMustBeDomain,proto3" json:"user_login_must_be_domain,omitempty"`
	IsDefault                              bool                  `protobuf:"varint,3,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	ValidateOrgDomains                     bool                  `protobuf:"varint,4,opt,name=validate_org_domains,json=validateOrgDomains,proto3" json:"validate_org_domains,omitempty"`
	SmtpSenderAddressMatchesInstanceDomain bool                  `protobuf:"varint,5,opt,name=smtp_sender_address_matches_instance_domain,json=smtpSenderAddressMatchesInstanceDomain,proto3" json:"smtp_sender_address_matches_instance_domain,omitempty"`
}

func (x *DomainPolicy) Reset() {
	*x = DomainPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainPolicy) ProtoMessage() {}

func (x *DomainPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainPolicy.ProtoReflect.Descriptor instead.
func (*DomainPolicy) Descriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{1}
}

func (x *DomainPolicy) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *DomainPolicy) GetUserLoginMustBeDomain() bool {
	if x != nil {
		return x.UserLoginMustBeDomain
	}
	return false
}

func (x *DomainPolicy) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *DomainPolicy) GetValidateOrgDomains() bool {
	if x != nil {
		return x.ValidateOrgDomains
	}
	return false
}

func (x *DomainPolicy) GetSmtpSenderAddressMatchesInstanceDomain() bool {
	if x != nil {
		return x.SmtpSenderAddressMatchesInstanceDomain
	}
	return false
}

type LabelPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	// hex value for primary color
	PrimaryColor string `protobuf:"bytes,2,opt,name=primary_color,json=primaryColor,proto3" json:"primary_color,omitempty"`
	// defines if the organization's admin changed the policy
	IsDefault bool `protobuf:"varint,4,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	// hides the org suffix on the login form if the scope \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set
	HideLoginNameSuffix bool `protobuf:"varint,5,opt,name=hide_login_name_suffix,json=hideLoginNameSuffix,proto3" json:"hide_login_name_suffix,omitempty"`
	// hex value for secondary color
	WarnColor string `protobuf:"bytes,6,opt,name=warn_color,json=warnColor,proto3" json:"warn_color,omitempty"`
	// hex value for background color
	BackgroundColor string `protobuf:"bytes,7,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"`
	// hex value for font color
	FontColor string `protobuf:"bytes,8,opt,name=font_color,json=fontColor,proto3" json:"font_color,omitempty"`
	// hex value for primary color dark theme
	PrimaryColorDark string `protobuf:"bytes,9,opt,name=primary_color_dark,json=primaryColorDark,proto3" json:"primary_color_dark,omitempty"`
	// hex value for background color dark theme
	BackgroundColorDark string `protobuf:"bytes,10,opt,name=background_color_dark,json=backgroundColorDark,proto3" json:"background_color_dark,omitempty"`
	// hex value for warning color dark theme
	WarnColorDark string `protobuf:"bytes,11,opt,name=warn_color_dark,json=warnColorDark,proto3" json:"warn_color_dark,omitempty"`
	// hex value for font color dark theme
	FontColorDark    string    `protobuf:"bytes,12,opt,name=font_color_dark,json=fontColorDark,proto3" json:"font_color_dark,omitempty"`
	DisableWatermark bool      `protobuf:"varint,13,opt,name=disable_watermark,json=disableWatermark,proto3" json:"disable_watermark,omitempty"`
	LogoUrl          string    `protobuf:"bytes,14,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	IconUrl          string    `protobuf:"bytes,15,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	LogoUrlDark      string    `protobuf:"bytes,16,opt,name=logo_url_dark,json=logoUrlDark,proto3" json:"logo_url_dark,omitempty"`
	IconUrlDark      string    `protobuf:"bytes,17,opt,name=icon_url_dark,json=iconUrlDark,proto3" json:"icon_url_dark,omitempty"`
	FontUrl          string    `protobuf:"bytes,18,opt,name=font_url,json=fontUrl,proto3" json:"font_url,omitempty"`
	ThemeMode        ThemeMode `protobuf:"varint,19,opt,name=theme_mode,json=themeMode,proto3,enum=zitadel.policy.v1.ThemeMode" json:"theme_mode,omitempty"`
}

func (x *LabelPolicy) Reset() {
	*x = LabelPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelPolicy) ProtoMessage() {}

func (x *LabelPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelPolicy.ProtoReflect.Descriptor instead.
func (*LabelPolicy) Descriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{2}
}

func (x *LabelPolicy) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *LabelPolicy) GetPrimaryColor() string {
	if x != nil {
		return x.PrimaryColor
	}
	return ""
}

func (x *LabelPolicy) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *LabelPolicy) GetHideLoginNameSuffix() bool {
	if x != nil {
		return x.HideLoginNameSuffix
	}
	return false
}

func (x *LabelPolicy) GetWarnColor() string {
	if x != nil {
		return x.WarnColor
	}
	return ""
}

func (x *LabelPolicy) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

func (x *LabelPolicy) GetFontColor() string {
	if x != nil {
		return x.FontColor
	}
	return ""
}

func (x *LabelPolicy) GetPrimaryColorDark() string {
	if x != nil {
		return x.PrimaryColorDark
	}
	return ""
}

func (x *LabelPolicy) GetBackgroundColorDark() string {
	if x != nil {
		return x.BackgroundColorDark
	}
	return ""
}

func (x *LabelPolicy) GetWarnColorDark() string {
	if x != nil {
		return x.WarnColorDark
	}
	return ""
}

func (x *LabelPolicy) GetFontColorDark() string {
	if x != nil {
		return x.FontColorDark
	}
	return ""
}

func (x *LabelPolicy) GetDisableWatermark() bool {
	if x != nil {
		return x.DisableWatermark
	}
	return false
}

func (x *LabelPolicy) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *LabelPolicy) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *LabelPolicy) GetLogoUrlDark() string {
	if x != nil {
		return x.LogoUrlDark
	}
	return ""
}

func (x *LabelPolicy) GetIconUrlDark() string {
	if x != nil {
		return x.IconUrlDark
	}
	return ""
}

func (x *LabelPolicy) GetFontUrl() string {
	if x != nil {
		return x.FontUrl
	}
	return ""
}

func (x *LabelPolicy) GetThemeMode() ThemeMode {
	if x != nil {
		return x.ThemeMode
	}
	return ThemeMode_THEME_MODE_UNSPECIFIED
}

type LoginPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details                    *object.ObjectDetails     `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	AllowUsernamePassword      bool                      `protobuf:"varint,2,opt,name=allow_username_password,json=allowUsernamePassword,proto3" json:"allow_username_password,omitempty"`
	AllowRegister              bool                      `protobuf:"varint,3,opt,name=allow_register,json=allowRegister,proto3" json:"allow_register,omitempty"`
	AllowExternalIdp           bool                      `protobuf:"varint,4,opt,name=allow_external_idp,json=allowExternalIdp,proto3" json:"allow_external_idp,omitempty"`
	ForceMfa                   bool                      `protobuf:"varint,5,opt,name=force_mfa,json=forceMfa,proto3" json:"force_mfa,omitempty"`
	PasswordlessType           PasswordlessType          `protobuf:"varint,6,opt,name=passwordless_type,json=passwordlessType,proto3,enum=zitadel.policy.v1.PasswordlessType" json:"passwordless_type,omitempty"`
	IsDefault                  bool                      `protobuf:"varint,7,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	HidePasswordReset          bool                      `protobuf:"varint,8,opt,name=hide_password_reset,json=hidePasswordReset,proto3" json:"hide_password_reset,omitempty"`
	IgnoreUnknownUsernames     bool                      `protobuf:"varint,9,opt,name=ignore_unknown_usernames,json=ignoreUnknownUsernames,proto3" json:"ignore_unknown_usernames,omitempty"`
	DefaultRedirectUri         string                    `protobuf:"bytes,10,opt,name=default_redirect_uri,json=defaultRedirectUri,proto3" json:"default_redirect_uri,omitempty"`
	PasswordCheckLifetime      *durationpb.Duration      `protobuf:"bytes,11,opt,name=password_check_lifetime,json=passwordCheckLifetime,proto3" json:"password_check_lifetime,omitempty"`
	ExternalLoginCheckLifetime *durationpb.Duration      `protobuf:"bytes,12,opt,name=external_login_check_lifetime,json=externalLoginCheckLifetime,proto3" json:"external_login_check_lifetime,omitempty"`
	MfaInitSkipLifetime        *durationpb.Duration      `protobuf:"bytes,13,opt,name=mfa_init_skip_lifetime,json=mfaInitSkipLifetime,proto3" json:"mfa_init_skip_lifetime,omitempty"`
	SecondFactorCheckLifetime  *durationpb.Duration      `protobuf:"bytes,14,opt,name=second_factor_check_lifetime,json=secondFactorCheckLifetime,proto3" json:"second_factor_check_lifetime,omitempty"`
	MultiFactorCheckLifetime   *durationpb.Duration      `protobuf:"bytes,15,opt,name=multi_factor_check_lifetime,json=multiFactorCheckLifetime,proto3" json:"multi_factor_check_lifetime,omitempty"`
	SecondFactors              []SecondFactorType        `protobuf:"varint,16,rep,packed,name=second_factors,json=secondFactors,proto3,enum=zitadel.policy.v1.SecondFactorType" json:"second_factors,omitempty"`
	MultiFactors               []MultiFactorType         `protobuf:"varint,17,rep,packed,name=multi_factors,json=multiFactors,proto3,enum=zitadel.policy.v1.MultiFactorType" json:"multi_factors,omitempty"`
	Idps                       []*idp.IDPLoginPolicyLink `protobuf:"bytes,18,rep,name=idps,proto3" json:"idps,omitempty"`
	// If set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organization on success.
	AllowDomainDiscovery  bool `protobuf:"varint,19,opt,name=allow_domain_discovery,json=allowDomainDiscovery,proto3" json:"allow_domain_discovery,omitempty"`
	DisableLoginWithEmail bool `protobuf:"varint,20,opt,name=disable_login_with_email,json=disableLoginWithEmail,proto3" json:"disable_login_with_email,omitempty"`
	DisableLoginWithPhone bool `protobuf:"varint,21,opt,name=disable_login_with_phone,json=disableLoginWithPhone,proto3" json:"disable_login_with_phone,omitempty"`
	ForceMfaLocalOnly     bool `protobuf:"varint,22,opt,name=force_mfa_local_only,json=forceMfaLocalOnly,proto3" json:"force_mfa_local_only,omitempty"`
}

func (x *LoginPolicy) Reset() {
	*x = LoginPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginPolicy) ProtoMessage() {}

func (x *LoginPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginPolicy.ProtoReflect.Descriptor instead.
func (*LoginPolicy) Descriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{3}
}

func (x *LoginPolicy) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *LoginPolicy) GetAllowUsernamePassword() bool {
	if x != nil {
		return x.AllowUsernamePassword
	}
	return false
}

func (x *LoginPolicy) GetAllowRegister() bool {
	if x != nil {
		return x.AllowRegister
	}
	return false
}

func (x *LoginPolicy) GetAllowExternalIdp() bool {
	if x != nil {
		return x.AllowExternalIdp
	}
	return false
}

func (x *LoginPolicy) GetForceMfa() bool {
	if x != nil {
		return x.ForceMfa
	}
	return false
}

func (x *LoginPolicy) GetPasswordlessType() PasswordlessType {
	if x != nil {
		return x.PasswordlessType
	}
	return PasswordlessType_PASSWORDLESS_TYPE_NOT_ALLOWED
}

func (x *LoginPolicy) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *LoginPolicy) GetHidePasswordReset() bool {
	if x != nil {
		return x.HidePasswordReset
	}
	return false
}

func (x *LoginPolicy) GetIgnoreUnknownUsernames() bool {
	if x != nil {
		return x.IgnoreUnknownUsernames
	}
	return false
}

func (x *LoginPolicy) GetDefaultRedirectUri() string {
	if x != nil {
		return x.DefaultRedirectUri
	}
	return ""
}

func (x *LoginPolicy) GetPasswordCheckLifetime() *durationpb.Duration {
	if x != nil {
		return x.PasswordCheckLifetime
	}
	return nil
}

func (x *LoginPolicy) GetExternalLoginCheckLifetime() *durationpb.Duration {
	if x != nil {
		return x.ExternalLoginCheckLifetime
	}
	return nil
}

func (x *LoginPolicy) GetMfaInitSkipLifetime() *durationpb.Duration {
	if x != nil {
		return x.MfaInitSkipLifetime
	}
	return nil
}

func (x *LoginPolicy) GetSecondFactorCheckLifetime() *durationpb.Duration {
	if x != nil {
		return x.SecondFactorCheckLifetime
	}
	return nil
}

func (x *LoginPolicy) GetMultiFactorCheckLifetime() *durationpb.Duration {
	if x != nil {
		return x.MultiFactorCheckLifetime
	}
	return nil
}

func (x *LoginPolicy) GetSecondFactors() []SecondFactorType {
	if x != nil {
		return x.SecondFactors
	}
	return nil
}

func (x *LoginPolicy) GetMultiFactors() []MultiFactorType {
	if x != nil {
		return x.MultiFactors
	}
	return nil
}

func (x *LoginPolicy) GetIdps() []*idp.IDPLoginPolicyLink {
	if x != nil {
		return x.Idps
	}
	return nil
}

func (x *LoginPolicy) GetAllowDomainDiscovery() bool {
	if x != nil {
		return x.AllowDomainDiscovery
	}
	return false
}

func (x *LoginPolicy) GetDisableLoginWithEmail() bool {
	if x != nil {
		return x.DisableLoginWithEmail
	}
	return false
}

func (x *LoginPolicy) GetDisableLoginWithPhone() bool {
	if x != nil {
		return x.DisableLoginWithPhone
	}
	return false
}

func (x *LoginPolicy) GetForceMfaLocalOnly() bool {
	if x != nil {
		return x.ForceMfaLocalOnly
	}
	return false
}

type PasswordComplexityPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details      *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	MinLength    uint64                `protobuf:"varint,2,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"`
	HasUppercase bool                  `protobuf:"varint,3,opt,name=has_uppercase,json=hasUppercase,proto3" json:"has_uppercase,omitempty"`
	HasLowercase bool                  `protobuf:"varint,4,opt,name=has_lowercase,json=hasLowercase,proto3" json:"has_lowercase,omitempty"`
	HasNumber    bool                  `protobuf:"varint,5,opt,name=has_number,json=hasNumber,proto3" json:"has_number,omitempty"`
	HasSymbol    bool                  `protobuf:"varint,6,opt,name=has_symbol,json=hasSymbol,proto3" json:"has_symbol,omitempty"`
	IsDefault    bool                  `protobuf:"varint,7,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
}

func (x *PasswordComplexityPolicy) Reset() {
	*x = PasswordComplexityPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordComplexityPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordComplexityPolicy) ProtoMessage() {}

func (x *PasswordComplexityPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordComplexityPolicy.ProtoReflect.Descriptor instead.
func (*PasswordComplexityPolicy) Descriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{4}
}

func (x *PasswordComplexityPolicy) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *PasswordComplexityPolicy) GetMinLength() uint64 {
	if x != nil {
		return x.MinLength
	}
	return 0
}

func (x *PasswordComplexityPolicy) GetHasUppercase() bool {
	if x != nil {
		return x.HasUppercase
	}
	return false
}

func (x *PasswordComplexityPolicy) GetHasLowercase() bool {
	if x != nil {
		return x.HasLowercase
	}
	return false
}

func (x *PasswordComplexityPolicy) GetHasNumber() bool {
	if x != nil {
		return x.HasNumber
	}
	return false
}

func (x *PasswordComplexityPolicy) GetHasSymbol() bool {
	if x != nil {
		return x.HasSymbol
	}
	return false
}

func (x *PasswordComplexityPolicy) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type PasswordAgePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	// Amount of days after which a password will expire. The user will be forced to change the password on the following authentication.
	MaxAgeDays uint64 `protobuf:"varint,2,opt,name=max_age_days,json=maxAgeDays,proto3" json:"max_age_days,omitempty"`
	// Amount of days after which the user should be notified of the upcoming expiry. ZITADEL will not notify the user.
	ExpireWarnDays uint64 `protobuf:"varint,3,opt,name=expire_warn_days,json=expireWarnDays,proto3" json:"expire_warn_days,omitempty"`
	// If true, the returned values represent the instance settings, e.g. by an organization without custom settings.
	IsDefault bool `protobuf:"varint,4,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
}

func (x *PasswordAgePolicy) Reset() {
	*x = PasswordAgePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordAgePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordAgePolicy) ProtoMessage() {}

func (x *PasswordAgePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordAgePolicy.ProtoReflect.Descriptor instead.
func (*PasswordAgePolicy) Descriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{5}
}

func (x *PasswordAgePolicy) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *PasswordAgePolicy) GetMaxAgeDays() uint64 {
	if x != nil {
		return x.MaxAgeDays
	}
	return 0
}

func (x *PasswordAgePolicy) GetExpireWarnDays() uint64 {
	if x != nil {
		return x.ExpireWarnDays
	}
	return 0
}

func (x *PasswordAgePolicy) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type LockoutPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details             *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	MaxPasswordAttempts uint64                `protobuf:"varint,2,opt,name=max_password_attempts,json=maxPasswordAttempts,proto3" json:"max_password_attempts,omitempty"`
	MaxOtpAttempts      uint64                `protobuf:"varint,3,opt,name=max_otp_attempts,json=maxOtpAttempts,proto3" json:"max_otp_attempts,omitempty"`
	IsDefault           bool                  `protobuf:"varint,4,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
}

func (x *LockoutPolicy) Reset() {
	*x = LockoutPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockoutPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockoutPolicy) ProtoMessage() {}

func (x *LockoutPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockoutPolicy.ProtoReflect.Descriptor instead.
func (*LockoutPolicy) Descriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{6}
}

func (x *LockoutPolicy) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *LockoutPolicy) GetMaxPasswordAttempts() uint64 {
	if x != nil {
		return x.MaxPasswordAttempts
	}
	return 0
}

func (x *LockoutPolicy) GetMaxOtpAttempts() uint64 {
	if x != nil {
		return x.MaxOtpAttempts
	}
	return 0
}

func (x *LockoutPolicy) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type PrivacyPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details        *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	TosLink        string                `protobuf:"bytes,2,opt,name=tos_link,json=tosLink,proto3" json:"tos_link,omitempty"`
	PrivacyLink    string                `protobuf:"bytes,3,opt,name=privacy_link,json=privacyLink,proto3" json:"privacy_link,omitempty"`
	IsDefault      bool                  `protobuf:"varint,4,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	HelpLink       string                `protobuf:"bytes,5,opt,name=help_link,json=helpLink,proto3" json:"help_link,omitempty"`
	SupportEmail   string                `protobuf:"bytes,6,opt,name=support_email,json=supportEmail,proto3" json:"support_email,omitempty"`
	DocsLink       string                `protobuf:"bytes,7,opt,name=docs_link,json=docsLink,proto3" json:"docs_link,omitempty"`
	CustomLink     string                `protobuf:"bytes,8,opt,name=custom_link,json=customLink,proto3" json:"custom_link,omitempty"`
	CustomLinkText string                `protobuf:"bytes,9,opt,name=custom_link_text,json=customLinkText,proto3" json:"custom_link_text,omitempty"`
}

func (x *PrivacyPolicy) Reset() {
	*x = PrivacyPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivacyPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivacyPolicy) ProtoMessage() {}

func (x *PrivacyPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivacyPolicy.ProtoReflect.Descriptor instead.
func (*PrivacyPolicy) Descriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{7}
}

func (x *PrivacyPolicy) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *PrivacyPolicy) GetTosLink() string {
	if x != nil {
		return x.TosLink
	}
	return ""
}

func (x *PrivacyPolicy) GetPrivacyLink() string {
	if x != nil {
		return x.PrivacyLink
	}
	return ""
}

func (x *PrivacyPolicy) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *PrivacyPolicy) GetHelpLink() string {
	if x != nil {
		return x.HelpLink
	}
	return ""
}

func (x *PrivacyPolicy) GetSupportEmail() string {
	if x != nil {
		return x.SupportEmail
	}
	return ""
}

func (x *PrivacyPolicy) GetDocsLink() string {
	if x != nil {
		return x.DocsLink
	}
	return ""
}

func (x *PrivacyPolicy) GetCustomLink() string {
	if x != nil {
		return x.CustomLink
	}
	return ""
}

func (x *PrivacyPolicy) GetCustomLinkText() string {
	if x != nil {
		return x.CustomLinkText
	}
	return ""
}

type NotificationPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details        *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	IsDefault      bool                  `protobuf:"varint,2,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	PasswordChange bool                  `protobuf:"varint,3,opt,name=password_change,json=passwordChange,proto3" json:"password_change,omitempty"`
}

func (x *NotificationPolicy) Reset() {
	*x = NotificationPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationPolicy) ProtoMessage() {}

func (x *NotificationPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationPolicy.ProtoReflect.Descriptor instead.
func (*NotificationPolicy) Descriptor() ([]byte, []int) {
	return file_zitadel_policy_proto_rawDescGZIP(), []int{8}
}

func (x *NotificationPolicy) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *NotificationPolicy) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *NotificationPolicy) GetPasswordChange() bool {
	if x != nil {
		return x.PasswordChange
	}
	return false
}

var File_zitadel_policy_proto protoreflect.FileDescriptor

var file_zitadel_policy_proto_rawDesc = []byte{
	0x0a, 0x14, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x69, 0x64, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x02, 0x0a, 0x0c,
	0x4f, 0x72, 0x67, 0x49, 0x41, 0x4d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x7a, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x6d, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0x74, 0x68, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x65,
	0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x73, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x4d, 0x75, 0x73, 0x74, 0x42, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x5a, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x32, 0x36, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20,
	0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x27, 0x73, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09,
	0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xeb, 0x04, 0x0a, 0x0c, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x7a, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x75,
	0x73, 0x74, 0x5f, 0x62, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e, 0x64,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x73, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d,
	0x75, 0x73, 0x74, 0x42, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x5a, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x3b, 0x92, 0x41, 0x38, 0x32, 0x36, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x27, 0x73, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x8f, 0x01, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x5d, 0x92, 0x41, 0x5a, 0x32, 0x58, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x6f, 0x72, 0x67, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x61, 0x73, 0x20, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0xbb, 0x01, 0x0a, 0x2b, 0x73, 0x6d,
	0x74, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x5e, 0x92, 0x41, 0x5b, 0x32, 0x59, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x4d, 0x54, 0x50, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x61, 0x6e, 0x20,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20,
	0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x26, 0x73, 0x6d, 0x74, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xb1, 0x0e, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x50, 0x0a, 0x0d,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x1b, 0x68, 0x65, 0x78, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x20,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4a, 0x09, 0x22, 0x23, 0x35, 0x34, 0x36, 0x39, 0x64, 0x34, 0x22,
	0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x5a,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x32, 0x36, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73,
	0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x27, 0x73, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0xa6, 0x01, 0x0a, 0x16, 0x68,
	0x69, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x71, 0x92, 0x41, 0x6e,
	0x32, 0x6c, 0x68, 0x69, 0x64, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x20,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x22, 0x75, 0x72, 0x6e, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x3a, 0x69, 0x61, 0x6d, 0x3a, 0x6f, 0x72, 0x67, 0x3a, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x3a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x3a, 0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x22, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x52, 0x13,
	0x68, 0x69, 0x64, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x12, 0x47, 0x0a, 0x0a, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x18, 0x68, 0x65,
	0x78, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x77, 0x61, 0x72, 0x6e,
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4a, 0x09, 0x22, 0x23, 0x43, 0x44, 0x33, 0x44, 0x35, 0x36,
	0x22, 0x52, 0x09, 0x77, 0x61, 0x72, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x59, 0x0a, 0x10,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x1e, 0x68, 0x65, 0x78,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4a, 0x09, 0x22, 0x23, 0x46,
	0x41, 0x46, 0x41, 0x46, 0x41, 0x22, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25,
	0x32, 0x18, 0x68, 0x65, 0x78, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x66, 0x6f, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4a, 0x09, 0x22, 0x23, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x22, 0x52, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x68, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x64, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41,
	0x37, 0x32, 0x2a, 0x68, 0x65, 0x78, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x20, 0x64, 0x61, 0x72, 0x6b, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x4a, 0x09, 0x22,
	0x23, 0x42, 0x42, 0x42, 0x41, 0x46, 0x41, 0x22, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x44, 0x61, 0x72, 0x6b, 0x12, 0x6d, 0x0a, 0x15, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x64,
	0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x29,
	0x68, 0x65, 0x78, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x64,
	0x61, 0x72, 0x6b, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x4a, 0x09, 0x22, 0x23, 0x31, 0x31, 0x31,
	0x38, 0x32, 0x37, 0x22, 0x52, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x44, 0x61, 0x72, 0x6b, 0x12, 0x5e, 0x0a, 0x0f, 0x77, 0x61, 0x72,
	0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x72, 0x6b, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x26, 0x68, 0x65, 0x78, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x64, 0x61, 0x72, 0x6b, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x4a,
	0x09, 0x22, 0x23, 0x46, 0x46, 0x33, 0x42, 0x35, 0x42, 0x22, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x6e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x44, 0x61, 0x72, 0x6b, 0x12, 0x5b, 0x0a, 0x0f, 0x66, 0x6f, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x23, 0x68, 0x65, 0x78, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x20, 0x64, 0x61, 0x72, 0x6b, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x4a, 0x09, 0x22, 0x23,
	0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x22, 0x52, 0x0d, 0x66, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x44, 0x61, 0x72, 0x6b, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x99, 0x01, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7e, 0x92, 0x41, 0x7b, 0x32, 0x23, 0x68, 0x65, 0x78,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x6e, 0x74, 0x20,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x64, 0x61, 0x72, 0x6b, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x4a, 0x54, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x6d, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x31, 0x36,
	0x35, 0x36, 0x31, 0x37, 0x38, 0x35, 0x30, 0x36, 0x39, 0x32, 0x36, 0x35, 0x34, 0x36, 0x30, 0x31,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2f, 0x6c, 0x6f,
	0x67, 0x6f, 0x2d, 0x31, 0x38, 0x30, 0x39, 0x35, 0x30, 0x34, 0x31, 0x36, 0x33, 0x32, 0x31, 0x34,
	0x39, 0x34, 0x36, 0x35, 0x37, 0x22, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12,
	0x99, 0x01, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x7e, 0x92, 0x41, 0x7b, 0x32, 0x23, 0x68, 0x65, 0x78, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x20, 0x64, 0x61, 0x72, 0x6b, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x4a, 0x54, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x31, 0x36, 0x35, 0x36, 0x31, 0x37,
	0x38, 0x35, 0x30, 0x36, 0x39, 0x32, 0x36, 0x35, 0x34, 0x36, 0x30, 0x31, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2f, 0x69, 0x63, 0x6f, 0x6e, 0x2d, 0x31,
	0x38, 0x30, 0x39, 0x35, 0x30, 0x34, 0x39, 0x38, 0x38, 0x37, 0x34, 0x31, 0x37, 0x38, 0x38, 0x31,
	0x37, 0x22, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0xa9, 0x01, 0x0a, 0x0d,
	0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x64, 0x61, 0x72, 0x6b, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x84, 0x01, 0x92, 0x41, 0x80, 0x01, 0x32, 0x23, 0x68, 0x65, 0x78, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x6e, 0x74, 0x20, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x64, 0x61, 0x72, 0x6b, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x4a,
	0x59, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x31, 0x36, 0x35,
	0x36, 0x31, 0x37, 0x38, 0x35, 0x30, 0x36, 0x39, 0x32, 0x36, 0x35, 0x34, 0x36, 0x30, 0x31, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2f, 0x6c, 0x6f, 0x67,
	0x6f, 0x2d, 0x64, 0x61, 0x72, 0x6b, 0x2d, 0x31, 0x38, 0x30, 0x39, 0x35, 0x30, 0x32, 0x32, 0x39,
	0x33, 0x37, 0x36, 0x34, 0x36, 0x31, 0x33, 0x34, 0x35, 0x22, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x6f,
	0x55, 0x72, 0x6c, 0x44, 0x61, 0x72, 0x6b, 0x12, 0xa9, 0x01, 0x0a, 0x0d, 0x69, 0x63, 0x6f, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x64, 0x61, 0x72, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x84, 0x01, 0x92, 0x41, 0x80, 0x01, 0x32, 0x23, 0x68, 0x65, 0x78, 0x20, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x66, 0x6f, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x20, 0x64, 0x61, 0x72, 0x6b, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x4a, 0x59, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x31, 0x36, 0x35, 0x36, 0x31, 0x37, 0x38,
	0x35, 0x30, 0x36, 0x39, 0x32, 0x36, 0x35, 0x34, 0x36, 0x30, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2f, 0x69, 0x63, 0x6f, 0x6e, 0x2d, 0x64, 0x61,
	0x72, 0x6b, 0x2d, 0x31, 0x38, 0x30, 0x39, 0x35, 0x30, 0x32, 0x34, 0x33, 0x32, 0x33, 0x37, 0x34,
	0x30, 0x35, 0x34, 0x34, 0x31, 0x22, 0x52, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x44,
	0x61, 0x72, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x3b,
	0x0a, 0x0a, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xcb, 0x15, 0x0a, 0x0b,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x7e, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x46, 0x92, 0x41, 0x43, 0x32, 0x41, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20,
	0x69, 0x66, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x6f, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x72, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x4b, 0x92, 0x41, 0x48, 0x32, 0x46, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x56, 0x92, 0x41, 0x53, 0x32, 0x51, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20,
	0x69, 0x66, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x20, 0x61, 0x20, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x20, 0x45, 0x2e, 0x67, 0x2e, 0x20, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x70, 0x12, 0x55, 0x0a, 0x09, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x66, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x38,
	0x92, 0x41, 0x35, 0x32, 0x33, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20,
	0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x4d, 0x55, 0x53, 0x54, 0x20, 0x75, 0x73, 0x65, 0x20,
	0x61, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x2d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x74,
	0x6f, 0x20, 0x6c, 0x6f, 0x67, 0x20, 0x69, 0x6e, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4d,
	0x66, 0x61, 0x12, 0x83, 0x01, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x73, 0x20, 0x69, 0x66, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73,
	0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3b, 0x92, 0x41,
	0x38, 0x32, 0x36, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x73,
	0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x77, 0x0a, 0x13, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x47, 0x92, 0x41, 0x44, 0x32, 0x42, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20,
	0x69, 0x66, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65,
	0x20, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x20, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x11, 0x68, 0x69, 0x64, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0xab, 0x01,
	0x0a, 0x18, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x71, 0x92, 0x41, 0x6e, 0x32, 0x6c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69,
	0x66, 0x20, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x72, 0x20,
	0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x52, 0x16, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x14,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x8e, 0x01, 0x92, 0x41, 0x8a,
	0x01, 0x32, 0x69, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62,
	0x65, 0x20, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x69, 0x73, 0x20,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20,
	0x61, 0x70, 0x70, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x28, 0x65, 0x2e, 0x67,
	0x2e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x6d, 0x61, 0x69, 0x6c, 0x29, 0x4a, 0x1d, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x75, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x22, 0x52, 0x12, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12,
	0x61, 0x0a, 0x17, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x92, 0x41, 0x0b,
	0x4a, 0x09, 0x22, 0x38, 0x36, 0x34, 0x30, 0x30, 0x30, 0x73, 0x22, 0x52, 0x15, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x1d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x38, 0x36, 0x34, 0x30,
	0x30, 0x30, 0x73, 0x22, 0x52, 0x1a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x5f, 0x0a, 0x16, 0x6d, 0x66, 0x61, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x92, 0x41, 0x0c,
	0x4a, 0x0a, 0x22, 0x32, 0x35, 0x39, 0x32, 0x30, 0x30, 0x30, 0x73, 0x22, 0x52, 0x13, 0x6d, 0x66,
	0x61, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x69, 0x0a, 0x1c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22, 0x36, 0x34, 0x38, 0x30, 0x30, 0x73,
	0x22, 0x52, 0x19, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x67, 0x0a, 0x1b,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x92, 0x41,
	0x0a, 0x4a, 0x08, 0x22, 0x34, 0x33, 0x32, 0x30, 0x30, 0x73, 0x22, 0x52, 0x18, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x47, 0x0a, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x69, 0x64,
	0x70, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x69, 0x64,
	0x70, 0x73, 0x12, 0x86, 0x02, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x42, 0xcf, 0x01, 0x92, 0x41, 0xcb, 0x01, 0x32, 0xc8, 0x01, 0x49, 0x66, 0x20,
	0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x20, 0x28, 0x40, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x6d, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0xa4, 0x01, 0x0a, 0x18,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x42, 0x6b,
	0x92, 0x41, 0x68, 0x32, 0x66, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x28, 0x74, 0x6f, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x62, 0x65,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74,
	0x68, 0x65, 0x69, 0x72, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x15, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0xa3, 0x01, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x42, 0x6a, 0x92, 0x41, 0x67, 0x32, 0x65, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x63, 0x61, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79,
	0x20, 0x28, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x29, 0x20, 0x62, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0xbe, 0x01, 0x0a, 0x14, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x5f, 0x6d, 0x66, 0x61, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x42, 0x8c, 0x01, 0x92, 0x41, 0x88, 0x01, 0x32, 0x85,
	0x01, 0x69, 0x66, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x6f,
	0x6e, 0x6c, 0x79, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x61, 0x72,
	0x65, 0x20, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20,
	0x4d, 0x46, 0x41, 0x2e, 0x20, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x49, 0x44, 0x50, 0x73,
	0x20, 0x77, 0x6f, 0x6e, 0x27, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x20, 0x61, 0x20,
	0x4d, 0x46, 0x41, 0x20, 0x73, 0x74, 0x65, 0x70, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x66, 0x61,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xcc, 0x04, 0x0a, 0x18, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0a, 0x6d,
	0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x08, 0x92, 0x41, 0x05, 0x4a, 0x03, 0x22, 0x38, 0x22, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x63, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3e, 0x92, 0x41, 0x3b,
	0x32, 0x39, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x4d, 0x55, 0x53, 0x54, 0x20, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x70, 0x70, 0x65, 0x72, 0x20,
	0x63, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x68, 0x61, 0x73,
	0x55, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0d, 0x68, 0x61, 0x73,
	0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x3c, 0x92, 0x41, 0x39, 0x32, 0x37, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x4d,
	0x55, 0x53, 0x54, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x0c,
	0x68, 0x61, 0x73, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0a,
	0x68, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x32, 0x92, 0x41, 0x2f, 0x32, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x4d,
	0x55, 0x53, 0x54, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x09, 0x68, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x5b, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x32, 0x37, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x20, 0x4d, 0x55, 0x53, 0x54, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61,
	0x20, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2e, 0x20, 0x45, 0x2e, 0x67, 0x2e, 0x20, 0x22, 0x24,
	0x22, 0x52, 0x09, 0x68, 0x61, 0x73, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x5a, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x3b, 0x92, 0x41, 0x38, 0x32, 0x36, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x27, 0x73, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x69,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x33,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x4a, 0x05,
	0x22, 0x33, 0x36, 0x35, 0x22, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x33, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x92, 0x41, 0x06,
	0x4a, 0x04, 0x22, 0x31, 0x30, 0x22, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x57, 0x61,
	0x72, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xb1, 0x05, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x89, 0x02, 0x0a,
	0x15, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0xd4, 0x01, 0x92,
	0x41, 0xd0, 0x01, 0x32, 0xc7, 0x01, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x2e, 0x20, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x20, 0x61,
	0x72, 0x65, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x61, 0x73, 0x20, 0x73, 0x6f, 0x6f, 0x6e,
	0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x20, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x6c, 0x79, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x20,
	0x49, 0x66, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x6e, 0x65, 0x76,
	0x65, 0x72, 0x20, 0x62, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x2e, 0x4a, 0x04, 0x22,
	0x31, 0x30, 0x22, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x82, 0x02, 0x0a, 0x10, 0x6d, 0x61, 0x78,
	0x5f, 0x6f, 0x74, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x42, 0xd7, 0x01, 0x92, 0x41, 0xd3, 0x01, 0x32, 0xca, 0x01, 0x4d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x20, 0x4f, 0x54, 0x50, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x28, 0x54, 0x4f, 0x54, 0x50,
	0x2c, 0x20, 0x53, 0x4d, 0x53, 0x2c, 0x20, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x29, 0x20, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x2e, 0x20, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x20, 0x61, 0x73, 0x20, 0x73, 0x6f, 0x6f, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x4f, 0x54, 0x50, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x73, 0x65, 0x74,
	0x20, 0x74, 0x6f, 0x20, 0x30, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x20, 0x62, 0x65, 0x20,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x2e, 0x4a, 0x04, 0x22, 0x31, 0x30, 0x22, 0x52, 0x0e, 0x6d,
	0x61, 0x78, 0x4f, 0x74, 0x70, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x5a, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x32, 0x36, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20,
	0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x27, 0x73, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09,
	0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xd6, 0x06, 0x0a, 0x0d, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x51, 0x0a, 0x08, 0x74, 0x6f, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x33, 0x4a, 0x31, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f,
	0x63, 0x73, 0x2f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x2d, 0x6f,
	0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x52, 0x07, 0x74, 0x6f, 0x73, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x57, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x4a, 0x2f,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x2f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x52,
	0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x51, 0x0a, 0x09, 0x68,
	0x65, 0x6c, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34,
	0x92, 0x41, 0x31, 0x4a, 0x2f, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x6d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x52, 0x08, 0x68, 0x65, 0x6c, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x6e,
	0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0x92, 0x41, 0x39, 0x32, 0x1d, 0x68, 0x65, 0x6c, 0x70,
	0x20, 0x2f, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x4a, 0x18, 0x22, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x2d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x40, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x63,
	0x6f, 0x6d, 0x22, 0xfa, 0x42, 0x0a, 0x72, 0x08, 0x18, 0xc0, 0x02, 0xd0, 0x01, 0x01, 0x60, 0x01,
	0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x6f,
	0x0a, 0x09, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x52, 0x92, 0x41, 0x4f, 0x32, 0x31, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x74, 0x6f, 0x20,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f,
	0x20, 0x62, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x4a, 0x1a, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x6f, 0x63, 0x73, 0x22, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x8b, 0x01, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6a, 0x92, 0x41, 0x67, 0x32, 0x4c, 0x4c, 0x69, 0x6e, 0x6b,
	0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x69,
	0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x4a, 0x17, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x22, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x82, 0x01,
	0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0x92, 0x41, 0x55, 0x32, 0x47, 0x54,
	0x68, 0x65, 0x20, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x73, 0x68, 0x6f,
	0x77, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x20, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x4a, 0x0a, 0x22, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x22, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65,
	0x78, 0x74, 0x22, 0xf3, 0x01, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x88, 0x01,
	0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x5f, 0x92, 0x41, 0x5c, 0x32, 0x5a, 0x49, 0x66,
	0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x67, 0x65, 0x74, 0x20,
	0x61, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x2e, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2a, 0x67, 0x0a, 0x09, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x48, 0x45, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10,
	0x03, 0x2a, 0xb0, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x54, 0x50, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x32, 0x46,
	0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x50, 0x5f, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x46,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x50, 0x5f, 0x53,
	0x4d, 0x53, 0x10, 0x04, 0x2a, 0x61, 0x0a, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x32, 0x46, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0x54, 0x0a, 0x10, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x50,
	0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d,
	0x0a, 0x19, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x42, 0x2c, 0x5a,
	0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_zitadel_policy_proto_rawDescOnce sync.Once
	file_zitadel_policy_proto_rawDescData = file_zitadel_policy_proto_rawDesc
)

func file_zitadel_policy_proto_rawDescGZIP() []byte {
	file_zitadel_policy_proto_rawDescOnce.Do(func() {
		file_zitadel_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_policy_proto_rawDescData)
	})
	return file_zitadel_policy_proto_rawDescData
}

var file_zitadel_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_zitadel_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_zitadel_policy_proto_goTypes = []interface{}{
	(ThemeMode)(0),                   // 0: zitadel.policy.v1.ThemeMode
	(SecondFactorType)(0),            // 1: zitadel.policy.v1.SecondFactorType
	(MultiFactorType)(0),             // 2: zitadel.policy.v1.MultiFactorType
	(PasswordlessType)(0),            // 3: zitadel.policy.v1.PasswordlessType
	(*OrgIAMPolicy)(nil),             // 4: zitadel.policy.v1.OrgIAMPolicy
	(*DomainPolicy)(nil),             // 5: zitadel.policy.v1.DomainPolicy
	(*LabelPolicy)(nil),              // 6: zitadel.policy.v1.LabelPolicy
	(*LoginPolicy)(nil),              // 7: zitadel.policy.v1.LoginPolicy
	(*PasswordComplexityPolicy)(nil), // 8: zitadel.policy.v1.PasswordComplexityPolicy
	(*PasswordAgePolicy)(nil),        // 9: zitadel.policy.v1.PasswordAgePolicy
	(*LockoutPolicy)(nil),            // 10: zitadel.policy.v1.LockoutPolicy
	(*PrivacyPolicy)(nil),            // 11: zitadel.policy.v1.PrivacyPolicy
	(*NotificationPolicy)(nil),       // 12: zitadel.policy.v1.NotificationPolicy
	(*object.ObjectDetails)(nil),     // 13: zitadel.v1.ObjectDetails
	(*durationpb.Duration)(nil),      // 14: google.protobuf.Duration
	(*idp.IDPLoginPolicyLink)(nil),   // 15: zitadel.idp.v1.IDPLoginPolicyLink
}
var file_zitadel_policy_proto_depIdxs = []int32{
	13, // 0: zitadel.policy.v1.OrgIAMPolicy.details:type_name -> zitadel.v1.ObjectDetails
	13, // 1: zitadel.policy.v1.DomainPolicy.details:type_name -> zitadel.v1.ObjectDetails
	13, // 2: zitadel.policy.v1.LabelPolicy.details:type_name -> zitadel.v1.ObjectDetails
	0,  // 3: zitadel.policy.v1.LabelPolicy.theme_mode:type_name -> zitadel.policy.v1.ThemeMode
	13, // 4: zitadel.policy.v1.LoginPolicy.details:type_name -> zitadel.v1.ObjectDetails
	3,  // 5: zitadel.policy.v1.LoginPolicy.passwordless_type:type_name -> zitadel.policy.v1.PasswordlessType
	14, // 6: zitadel.policy.v1.LoginPolicy.password_check_lifetime:type_name -> google.protobuf.Duration
	14, // 7: zitadel.policy.v1.LoginPolicy.external_login_check_lifetime:type_name -> google.protobuf.Duration
	14, // 8: zitadel.policy.v1.LoginPolicy.mfa_init_skip_lifetime:type_name -> google.protobuf.Duration
	14, // 9: zitadel.policy.v1.LoginPolicy.second_factor_check_lifetime:type_name -> google.protobuf.Duration
	14, // 10: zitadel.policy.v1.LoginPolicy.multi_factor_check_lifetime:type_name -> google.protobuf.Duration
	1,  // 11: zitadel.policy.v1.LoginPolicy.second_factors:type_name -> zitadel.policy.v1.SecondFactorType
	2,  // 12: zitadel.policy.v1.LoginPolicy.multi_factors:type_name -> zitadel.policy.v1.MultiFactorType
	15, // 13: zitadel.policy.v1.LoginPolicy.idps:type_name -> zitadel.idp.v1.IDPLoginPolicyLink
	13, // 14: zitadel.policy.v1.PasswordComplexityPolicy.details:type_name -> zitadel.v1.ObjectDetails
	13, // 15: zitadel.policy.v1.PasswordAgePolicy.details:type_name -> zitadel.v1.ObjectDetails
	13, // 16: zitadel.policy.v1.LockoutPolicy.details:type_name -> zitadel.v1.ObjectDetails
	13, // 17: zitadel.policy.v1.PrivacyPolicy.details:type_name -> zitadel.v1.ObjectDetails
	13, // 18: zitadel.policy.v1.NotificationPolicy.details:type_name -> zitadel.v1.ObjectDetails
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_zitadel_policy_proto_init() }
func file_zitadel_policy_proto_init() {
	if File_zitadel_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zitadel_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgIAMPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordComplexityPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordAgePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockoutPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivacyPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_policy_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_policy_proto_goTypes,
		DependencyIndexes: file_zitadel_policy_proto_depIdxs,
		EnumInfos:         file_zitadel_policy_proto_enumTypes,
		MessageInfos:      file_zitadel_policy_proto_msgTypes,
	}.Build()
	File_zitadel_policy_proto = out.File
	file_zitadel_policy_proto_rawDesc = nil
	file_zitadel_policy_proto_goTypes = nil
	file_zitadel_policy_proto_depIdxs = nil
}
