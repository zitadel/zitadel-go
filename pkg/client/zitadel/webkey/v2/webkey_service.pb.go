// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/webkey/v2/webkey_service.proto

package webkey

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/protoc/v2"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateWebKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key type to create (RSA, ECDSA, ED25519).
	// If no key type is provided, a RSA key pair with 2048 bits and SHA256 hashing will be created.
	//
	// Types that are assignable to Key:
	//
	//	*CreateWebKeyRequest_Rsa
	//	*CreateWebKeyRequest_Ecdsa
	//	*CreateWebKeyRequest_Ed25519
	Key isCreateWebKeyRequest_Key `protobuf_oneof:"key"`
}

func (x *CreateWebKeyRequest) Reset() {
	*x = CreateWebKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_webkey_v2_webkey_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWebKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWebKeyRequest) ProtoMessage() {}

func (x *CreateWebKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_webkey_v2_webkey_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWebKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateWebKeyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_webkey_v2_webkey_service_proto_rawDescGZIP(), []int{0}
}

func (m *CreateWebKeyRequest) GetKey() isCreateWebKeyRequest_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *CreateWebKeyRequest) GetRsa() *RSA {
	if x, ok := x.GetKey().(*CreateWebKeyRequest_Rsa); ok {
		return x.Rsa
	}
	return nil
}

func (x *CreateWebKeyRequest) GetEcdsa() *ECDSA {
	if x, ok := x.GetKey().(*CreateWebKeyRequest_Ecdsa); ok {
		return x.Ecdsa
	}
	return nil
}

func (x *CreateWebKeyRequest) GetEd25519() *ED25519 {
	if x, ok := x.GetKey().(*CreateWebKeyRequest_Ed25519); ok {
		return x.Ed25519
	}
	return nil
}

type isCreateWebKeyRequest_Key interface {
	isCreateWebKeyRequest_Key()
}

type CreateWebKeyRequest_Rsa struct {
	// Create a RSA key pair and specify the bit size and hashing algorithm.
	// If no bits and hasher are provided, a RSA key pair with 2048 bits and SHA256 hashing will be created.
	Rsa *RSA `protobuf:"bytes,1,opt,name=rsa,proto3,oneof"`
}

type CreateWebKeyRequest_Ecdsa struct {
	// Create a ECDSA key pair and specify the curve.
	// If no curve is provided, a ECDSA key pair with P-256 curve will be created.
	Ecdsa *ECDSA `protobuf:"bytes,2,opt,name=ecdsa,proto3,oneof"`
}

type CreateWebKeyRequest_Ed25519 struct {
	// Create a ED25519 key pair.
	Ed25519 *ED25519 `protobuf:"bytes,3,opt,name=ed25519,proto3,oneof"`
}

func (*CreateWebKeyRequest_Rsa) isCreateWebKeyRequest_Key() {}

func (*CreateWebKeyRequest_Ecdsa) isCreateWebKeyRequest_Key() {}

func (*CreateWebKeyRequest_Ed25519) isCreateWebKeyRequest_Key() {}

type CreateWebKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the newly created key.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The timestamp of the key creation.
	CreationDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
}

func (x *CreateWebKeyResponse) Reset() {
	*x = CreateWebKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_webkey_v2_webkey_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWebKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWebKeyResponse) ProtoMessage() {}

func (x *CreateWebKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_webkey_v2_webkey_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWebKeyResponse.ProtoReflect.Descriptor instead.
func (*CreateWebKeyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_webkey_v2_webkey_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateWebKeyResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateWebKeyResponse) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

type ActivateWebKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivateWebKeyRequest) Reset() {
	*x = ActivateWebKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_webkey_v2_webkey_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateWebKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateWebKeyRequest) ProtoMessage() {}

func (x *ActivateWebKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_webkey_v2_webkey_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateWebKeyRequest.ProtoReflect.Descriptor instead.
func (*ActivateWebKeyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_webkey_v2_webkey_service_proto_rawDescGZIP(), []int{2}
}

func (x *ActivateWebKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ActivateWebKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp of the activation of the key.
	ChangeDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=change_date,json=changeDate,proto3" json:"change_date,omitempty"`
}

func (x *ActivateWebKeyResponse) Reset() {
	*x = ActivateWebKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_webkey_v2_webkey_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateWebKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateWebKeyResponse) ProtoMessage() {}

func (x *ActivateWebKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_webkey_v2_webkey_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateWebKeyResponse.ProtoReflect.Descriptor instead.
func (*ActivateWebKeyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_webkey_v2_webkey_service_proto_rawDescGZIP(), []int{3}
}

func (x *ActivateWebKeyResponse) GetChangeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeDate
	}
	return nil
}

type DeleteWebKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteWebKeyRequest) Reset() {
	*x = DeleteWebKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_webkey_v2_webkey_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWebKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWebKeyRequest) ProtoMessage() {}

func (x *DeleteWebKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_webkey_v2_webkey_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWebKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteWebKeyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_webkey_v2_webkey_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteWebKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteWebKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp of the deletion of the key.
	// Note that the deletion date is only guaranteed to be set if the deletion was successful during the request.
	// In case the deletion occurred in a previous request, the deletion date might be empty.
	DeletionDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=deletion_date,json=deletionDate,proto3" json:"deletion_date,omitempty"`
}

func (x *DeleteWebKeyResponse) Reset() {
	*x = DeleteWebKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_webkey_v2_webkey_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWebKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWebKeyResponse) ProtoMessage() {}

func (x *DeleteWebKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_webkey_v2_webkey_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWebKeyResponse.ProtoReflect.Descriptor instead.
func (*DeleteWebKeyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_webkey_v2_webkey_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteWebKeyResponse) GetDeletionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletionDate
	}
	return nil
}

type ListWebKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListWebKeysRequest) Reset() {
	*x = ListWebKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_webkey_v2_webkey_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWebKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWebKeysRequest) ProtoMessage() {}

func (x *ListWebKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_webkey_v2_webkey_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWebKeysRequest.ProtoReflect.Descriptor instead.
func (*ListWebKeysRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_webkey_v2_webkey_service_proto_rawDescGZIP(), []int{6}
}

type ListWebKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebKeys []*WebKey `protobuf:"bytes,1,rep,name=web_keys,json=webKeys,proto3" json:"web_keys,omitempty"`
}

func (x *ListWebKeysResponse) Reset() {
	*x = ListWebKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_webkey_v2_webkey_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWebKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWebKeysResponse) ProtoMessage() {}

func (x *ListWebKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_webkey_v2_webkey_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWebKeysResponse.ProtoReflect.Descriptor instead.
func (*ListWebKeysResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_webkey_v2_webkey_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListWebKeysResponse) GetWebKeys() []*WebKey {
	if x != nil {
		return x.WebKeys
	}
	return nil
}

var File_zitadel_webkey_v2_webkey_service_proto protoreflect.FileDescriptor

var file_zitadel_webkey_v2_webkey_service_proto_rawDesc = []byte{
	0x0a, 0x26, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79,
	0x2f, 0x76, 0x32, 0x2f, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x77, 0x65, 0x62, 0x6b, 0x65,
	0x79, 0x2f, 0x76, 0x32, 0x2f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf6,
	0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x72, 0x73, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x77, 0x65,
	0x62, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x53, 0x41, 0x48, 0x00, 0x52, 0x03, 0x72,
	0x73, 0x61, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x63, 0x64, 0x73, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x77, 0x65, 0x62, 0x6b,
	0x65, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x43, 0x44, 0x53, 0x41, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x63, 0x64, 0x73, 0x61, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x44, 0x32, 0x35, 0x35, 0x31,
	0x39, 0x48, 0x00, 0x52, 0x07, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x3a, 0x42, 0x92, 0x41,
	0x3f, 0x32, 0x3d, 0x7b, 0x22, 0x72, 0x73, 0x61, 0x22, 0x3a, 0x7b, 0x22, 0x62, 0x69, 0x74, 0x73,
	0x22, 0x3a, 0x22, 0x52, 0x53, 0x41, 0x5f, 0x42, 0x49, 0x54, 0x53, 0x5f, 0x32, 0x30, 0x34, 0x38,
	0x22, 0x2c, 0x22, 0x68, 0x61, 0x73, 0x68, 0x65, 0x72, 0x22, 0x3a, 0x22, 0x52, 0x53, 0x41, 0x5f,
	0x48, 0x41, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x22, 0x7d, 0x7d,
	0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xa2, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41,
	0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x31, 0x32, 0x39, 0x30, 0x36, 0x34,
	0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x60, 0x0a, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92,
	0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x31, 0x32, 0x2d, 0x31, 0x38, 0x54,
	0x30, 0x37, 0x3a, 0x35, 0x30, 0x3a, 0x34, 0x37, 0x2e, 0x34, 0x39, 0x32, 0x5a, 0x22, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x54, 0x0a, 0x15,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32,
	0x36, 0x38, 0x30, 0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01,
	0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x76, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x57, 0x65,
	0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92,
	0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x35, 0x2d, 0x30, 0x31, 0x2d, 0x32, 0x33, 0x54,
	0x31, 0x30, 0x3a, 0x33, 0x34, 0x3a, 0x31, 0x38, 0x2e, 0x30, 0x35, 0x31, 0x5a, 0x22, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x52, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92,
	0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36,
	0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x78,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a,
	0x22, 0x32, 0x30, 0x32, 0x35, 0x2d, 0x30, 0x31, 0x2d, 0x32, 0x33, 0x54, 0x31, 0x30, 0x3a, 0x33,
	0x34, 0x3a, 0x31, 0x38, 0x2e, 0x30, 0x35, 0x31, 0x5a, 0x22, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x99,
	0x03, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x03, 0x0a, 0x08, 0x77, 0x65, 0x62, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x65,
	0x62, 0x4b, 0x65, 0x79, 0x42, 0xca, 0x02, 0x92, 0x41, 0xc6, 0x02, 0x4a, 0xc3, 0x02, 0x5b, 0x7b,
	0x22, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x31, 0x32, 0x39, 0x30,
	0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x2c, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x22, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x31, 0x32,
	0x2d, 0x31, 0x38, 0x54, 0x30, 0x37, 0x3a, 0x35, 0x30, 0x3a, 0x34, 0x37, 0x2e, 0x34, 0x39, 0x32,
	0x5a, 0x22, 0x2c, 0x22, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x3a,
	0x22, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x31, 0x32, 0x2d, 0x31, 0x38, 0x54, 0x30, 0x38, 0x3a, 0x30,
	0x34, 0x3a, 0x34, 0x37, 0x2e, 0x34, 0x39, 0x32, 0x5a, 0x22, 0x2c, 0x22, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x3a, 0x22, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x22, 0x2c, 0x22, 0x72, 0x73, 0x61, 0x22, 0x3a, 0x7b, 0x22, 0x62, 0x69, 0x74, 0x73, 0x22, 0x3a,
	0x22, 0x52, 0x53, 0x41, 0x5f, 0x42, 0x49, 0x54, 0x53, 0x5f, 0x32, 0x30, 0x34, 0x38, 0x22, 0x2c,
	0x22, 0x68, 0x61, 0x73, 0x68, 0x65, 0x72, 0x22, 0x3a, 0x22, 0x52, 0x53, 0x41, 0x5f, 0x48, 0x41,
	0x53, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x22, 0x7d, 0x7d, 0x2c, 0x7b,
	0x22, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x31, 0x32, 0x39, 0x30,
	0x39, 0x33, 0x34, 0x36, 0x32, 0x30, 0x30, 0x22, 0x2c, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x22, 0x32, 0x30, 0x32, 0x35, 0x2d, 0x30, 0x31,
	0x2d, 0x31, 0x38, 0x54, 0x31, 0x32, 0x3a, 0x30, 0x35, 0x3a, 0x34, 0x37, 0x2e, 0x34, 0x39, 0x32,
	0x5a, 0x22, 0x2c, 0x22, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x22, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x22, 0x2c, 0x22, 0x65, 0x63, 0x64, 0x73,
	0x61, 0x22, 0x3a, 0x7b, 0x22, 0x63, 0x75, 0x72, 0x76, 0x65, 0x22, 0x3a, 0x22, 0x45, 0x43, 0x44,
	0x53, 0x41, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x50, 0x32, 0x35, 0x36, 0x22, 0x7d, 0x7d,
	0x5d, 0x52, 0x07, 0x77, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x32, 0xa4, 0x07, 0x0a, 0x0d, 0x57,
	0x65, 0x62, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7a, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x77,
	0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x65, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x8a,
	0xb5, 0x18, 0x15, 0x0a, 0x13, 0x0a, 0x11, 0x69, 0x61, 0x6d, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x6b,
	0x65, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x94, 0x02, 0x0a, 0x0e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xac, 0x01, 0x92, 0x41, 0x8f, 0x01, 0x4a, 0x28, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x21,
	0x0a, 0x1f, 0x57, 0x65, 0x62, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79,
	0x2e, 0x4a, 0x33, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x2c, 0x0a, 0x2a, 0x54, 0x68, 0x65, 0x20,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x60, 0x77, 0x65,
	0x62, 0x5f, 0x6b, 0x65, 0x79, 0x60, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x2e, 0x4a, 0x2e, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x27, 0x0a,
	0x25, 0x54, 0x68, 0x65, 0x20, 0x77, 0x65, 0x62, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x74, 0x6f, 0x20,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x8a, 0xb5, 0x18, 0x15, 0x0a, 0x13, 0x0a, 0x11, 0x69, 0x61,
	0x6d, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12,
	0x99, 0x02, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79,
	0x12, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xb7, 0x01, 0x92, 0x41, 0x80, 0x01, 0x4a, 0x26, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x1f, 0x0a, 0x1d, 0x57, 0x65, 0x62, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x2e,
	0x4a, 0x56, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x4f, 0x0a, 0x4d, 0x54, 0x68, 0x65, 0x20, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x60, 0x77, 0x65, 0x62,
	0x5f, 0x6b, 0x65, 0x79, 0x60, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x65, 0x62, 0x20,
	0x6b, 0x65, 0x79, 0x20, 0x69, 0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79,
	0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x8a, 0xb5, 0x18, 0x16, 0x0a, 0x14, 0x0a, 0x12,
	0x69, 0x61, 0x6d, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x65,
	0x62, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xe3, 0x01, 0x0a, 0x0b,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x25, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x77, 0x65, 0x62,
	0x6b, 0x65, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x4b, 0x65,
	0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x92, 0x41, 0x55,
	0x4a, 0x1e, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x17, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x77, 0x65, 0x62, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x2e,
	0x4a, 0x33, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x2c, 0x0a, 0x2a, 0x54, 0x68, 0x65, 0x20, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x60, 0x77, 0x65, 0x62,
	0x5f, 0x6b, 0x65, 0x79, 0x60, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x2e, 0x8a, 0xb5, 0x18, 0x14, 0x0a, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d,
	0x2e, 0x77, 0x65, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x77, 0x65, 0x62, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x42, 0xa9, 0x09, 0x92, 0x41, 0xef, 0x08, 0x12, 0xcd, 0x03, 0x0a, 0x0f, 0x57, 0x65, 0x62,
	0x20, 0x4b, 0x65, 0x79, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xbb, 0x02, 0x54,
	0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x77, 0x65,
	0x62, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x5a, 0x49, 0x54,
	0x41, 0x44, 0x45, 0x4c, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2c, 0x20, 0x75,
	0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x20, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x0a, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x28,
	0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x29, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x0a, 0x0a, 0x50,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x73, 0x75, 0x72, 0x65, 0x20,
	0x74, 0x6f, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x60, 0x77,
	0x65, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x60, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20,
	0x66, 0x6c, 0x61, 0x67, 0x20, 0x6f, 0x6e, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x22, 0x2e, 0x0a, 0x07, 0x5a, 0x49,
	0x54, 0x41, 0x44, 0x45, 0x4c, 0x12, 0x13, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x1a, 0x0e, 0x68, 0x69, 0x40, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x47, 0x0a, 0x0a, 0x41, 0x70,
	0x61, 0x63, 0x68, 0x65, 0x20, 0x32, 0x2e, 0x30, 0x12, 0x39, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x62, 0x6c, 0x6f,
	0x62, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x49, 0x4e, 0x47,
	0x2e, 0x6d, 0x64, 0x32, 0x03, 0x32, 0x2e, 0x30, 0x1a, 0x0e, 0x24, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x2d, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x22, 0x01, 0x2f, 0x2a, 0x02, 0x02, 0x01, 0x32,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x32, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x77, 0x65, 0x62, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x3a, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x77, 0x65, 0x62, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x6d, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x66, 0x0a, 0x47, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x50,
	0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x49, 0x0a, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5a, 0xc2, 0x01, 0x0a, 0xbf, 0x01, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0xb4,
	0x01, 0x08, 0x03, 0x28, 0x04, 0x32, 0x21, 0x24, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x2d, 0x44,
	0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x32, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x3a, 0x1d, 0x24, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x2d, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76,
	0x32, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x6c, 0x0a, 0x10, 0x0a, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x64, 0x12, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x0a, 0x58, 0x0a, 0x2a, 0x75,
	0x72, 0x6e, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69, 0x61, 0x6d, 0x3a, 0x6f,
	0x72, 0x67, 0x3a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x69, 0x64, 0x3a, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x61, 0x75, 0x64, 0x12, 0x2a, 0x75, 0x72, 0x6e, 0x3a, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69, 0x61, 0x6d, 0x3a, 0x6f, 0x72, 0x67, 0x3a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x69, 0x64, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x3a, 0x61, 0x75, 0x64, 0x62, 0x40, 0x0a, 0x3e, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x32, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x0a, 0x2a, 0x75, 0x72, 0x6e,
	0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69, 0x61, 0x6d, 0x3a, 0x6f, 0x72, 0x67,
	0x3a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x69, 0x64, 0x3a, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x3a, 0x61, 0x75, 0x64, 0x72, 0x3e, 0x0a, 0x22, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x12, 0x18, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x77, 0x65, 0x62,
	0x6b, 0x65, 0x79, 0x2f, 0x76, 0x32, 0x3b, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_webkey_v2_webkey_service_proto_rawDescOnce sync.Once
	file_zitadel_webkey_v2_webkey_service_proto_rawDescData = file_zitadel_webkey_v2_webkey_service_proto_rawDesc
)

func file_zitadel_webkey_v2_webkey_service_proto_rawDescGZIP() []byte {
	file_zitadel_webkey_v2_webkey_service_proto_rawDescOnce.Do(func() {
		file_zitadel_webkey_v2_webkey_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_webkey_v2_webkey_service_proto_rawDescData)
	})
	return file_zitadel_webkey_v2_webkey_service_proto_rawDescData
}

var file_zitadel_webkey_v2_webkey_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_zitadel_webkey_v2_webkey_service_proto_goTypes = []interface{}{
	(*CreateWebKeyRequest)(nil),    // 0: zitadel.webkey.v2.CreateWebKeyRequest
	(*CreateWebKeyResponse)(nil),   // 1: zitadel.webkey.v2.CreateWebKeyResponse
	(*ActivateWebKeyRequest)(nil),  // 2: zitadel.webkey.v2.ActivateWebKeyRequest
	(*ActivateWebKeyResponse)(nil), // 3: zitadel.webkey.v2.ActivateWebKeyResponse
	(*DeleteWebKeyRequest)(nil),    // 4: zitadel.webkey.v2.DeleteWebKeyRequest
	(*DeleteWebKeyResponse)(nil),   // 5: zitadel.webkey.v2.DeleteWebKeyResponse
	(*ListWebKeysRequest)(nil),     // 6: zitadel.webkey.v2.ListWebKeysRequest
	(*ListWebKeysResponse)(nil),    // 7: zitadel.webkey.v2.ListWebKeysResponse
	(*RSA)(nil),                    // 8: zitadel.webkey.v2.RSA
	(*ECDSA)(nil),                  // 9: zitadel.webkey.v2.ECDSA
	(*ED25519)(nil),                // 10: zitadel.webkey.v2.ED25519
	(*timestamppb.Timestamp)(nil),  // 11: google.protobuf.Timestamp
	(*WebKey)(nil),                 // 12: zitadel.webkey.v2.WebKey
}
var file_zitadel_webkey_v2_webkey_service_proto_depIdxs = []int32{
	8,  // 0: zitadel.webkey.v2.CreateWebKeyRequest.rsa:type_name -> zitadel.webkey.v2.RSA
	9,  // 1: zitadel.webkey.v2.CreateWebKeyRequest.ecdsa:type_name -> zitadel.webkey.v2.ECDSA
	10, // 2: zitadel.webkey.v2.CreateWebKeyRequest.ed25519:type_name -> zitadel.webkey.v2.ED25519
	11, // 3: zitadel.webkey.v2.CreateWebKeyResponse.creation_date:type_name -> google.protobuf.Timestamp
	11, // 4: zitadel.webkey.v2.ActivateWebKeyResponse.change_date:type_name -> google.protobuf.Timestamp
	11, // 5: zitadel.webkey.v2.DeleteWebKeyResponse.deletion_date:type_name -> google.protobuf.Timestamp
	12, // 6: zitadel.webkey.v2.ListWebKeysResponse.web_keys:type_name -> zitadel.webkey.v2.WebKey
	0,  // 7: zitadel.webkey.v2.WebKeyService.CreateWebKey:input_type -> zitadel.webkey.v2.CreateWebKeyRequest
	2,  // 8: zitadel.webkey.v2.WebKeyService.ActivateWebKey:input_type -> zitadel.webkey.v2.ActivateWebKeyRequest
	4,  // 9: zitadel.webkey.v2.WebKeyService.DeleteWebKey:input_type -> zitadel.webkey.v2.DeleteWebKeyRequest
	6,  // 10: zitadel.webkey.v2.WebKeyService.ListWebKeys:input_type -> zitadel.webkey.v2.ListWebKeysRequest
	1,  // 11: zitadel.webkey.v2.WebKeyService.CreateWebKey:output_type -> zitadel.webkey.v2.CreateWebKeyResponse
	3,  // 12: zitadel.webkey.v2.WebKeyService.ActivateWebKey:output_type -> zitadel.webkey.v2.ActivateWebKeyResponse
	5,  // 13: zitadel.webkey.v2.WebKeyService.DeleteWebKey:output_type -> zitadel.webkey.v2.DeleteWebKeyResponse
	7,  // 14: zitadel.webkey.v2.WebKeyService.ListWebKeys:output_type -> zitadel.webkey.v2.ListWebKeysResponse
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_zitadel_webkey_v2_webkey_service_proto_init() }
func file_zitadel_webkey_v2_webkey_service_proto_init() {
	if File_zitadel_webkey_v2_webkey_service_proto != nil {
		return
	}
	file_zitadel_webkey_v2_key_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zitadel_webkey_v2_webkey_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWebKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_webkey_v2_webkey_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWebKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_webkey_v2_webkey_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateWebKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_webkey_v2_webkey_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateWebKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_webkey_v2_webkey_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWebKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_webkey_v2_webkey_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWebKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_webkey_v2_webkey_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWebKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_webkey_v2_webkey_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWebKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_webkey_v2_webkey_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CreateWebKeyRequest_Rsa)(nil),
		(*CreateWebKeyRequest_Ecdsa)(nil),
		(*CreateWebKeyRequest_Ed25519)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_webkey_v2_webkey_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zitadel_webkey_v2_webkey_service_proto_goTypes,
		DependencyIndexes: file_zitadel_webkey_v2_webkey_service_proto_depIdxs,
		MessageInfos:      file_zitadel_webkey_v2_webkey_service_proto_msgTypes,
	}.Build()
	File_zitadel_webkey_v2_webkey_service_proto = out.File
	file_zitadel_webkey_v2_webkey_service_proto_rawDesc = nil
	file_zitadel_webkey_v2_webkey_service_proto_goTypes = nil
	file_zitadel_webkey_v2_webkey_service_proto_depIdxs = nil
}
