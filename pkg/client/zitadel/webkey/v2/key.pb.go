// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/webkey/v2/key.proto

package webkey

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type State int32

const (
	State_STATE_UNSPECIFIED State = 0
	// A newly created key is in the initial state and published to the public key endpoint.
	State_STATE_INITIAL State = 1
	// The active key is used to sign tokens. Only one key can be active at a time.
	State_STATE_ACTIVE State = 2
	// The inactive key is not used to sign tokens anymore, but still published to the public key endpoint.
	State_STATE_INACTIVE State = 3
	// The removed key is not used to sign tokens anymore and not published to the public key endpoint.
	State_STATE_REMOVED State = 4
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_INITIAL",
		2: "STATE_ACTIVE",
		3: "STATE_INACTIVE",
		4: "STATE_REMOVED",
	}
	State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_INITIAL":     1,
		"STATE_ACTIVE":      2,
		"STATE_INACTIVE":    3,
		"STATE_REMOVED":     4,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_webkey_v2_key_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_zitadel_webkey_v2_key_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_webkey_v2_key_proto_rawDescGZIP(), []int{0}
}

type RSABits int32

const (
	RSABits_RSA_BITS_UNSPECIFIED RSABits = 0
	// 2048 bit RSA key
	RSABits_RSA_BITS_2048 RSABits = 1
	// 3072 bit RSA key
	RSABits_RSA_BITS_3072 RSABits = 2
	// 4096 bit RSA key
	RSABits_RSA_BITS_4096 RSABits = 3
)

// Enum value maps for RSABits.
var (
	RSABits_name = map[int32]string{
		0: "RSA_BITS_UNSPECIFIED",
		1: "RSA_BITS_2048",
		2: "RSA_BITS_3072",
		3: "RSA_BITS_4096",
	}
	RSABits_value = map[string]int32{
		"RSA_BITS_UNSPECIFIED": 0,
		"RSA_BITS_2048":        1,
		"RSA_BITS_3072":        2,
		"RSA_BITS_4096":        3,
	}
)

func (x RSABits) Enum() *RSABits {
	p := new(RSABits)
	*p = x
	return p
}

func (x RSABits) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RSABits) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_webkey_v2_key_proto_enumTypes[1].Descriptor()
}

func (RSABits) Type() protoreflect.EnumType {
	return &file_zitadel_webkey_v2_key_proto_enumTypes[1]
}

func (x RSABits) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RSABits.Descriptor instead.
func (RSABits) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_webkey_v2_key_proto_rawDescGZIP(), []int{1}
}

type RSAHasher int32

const (
	RSAHasher_RSA_HASHER_UNSPECIFIED RSAHasher = 0
	// SHA256 hashing algorithm resulting in the RS256 algorithm header
	RSAHasher_RSA_HASHER_SHA256 RSAHasher = 1
	// SHA384 hashing algorithm resulting in the RS384 algorithm header
	RSAHasher_RSA_HASHER_SHA384 RSAHasher = 2
	// SHA512 hashing algorithm resulting in the RS512 algorithm header
	RSAHasher_RSA_HASHER_SHA512 RSAHasher = 3
)

// Enum value maps for RSAHasher.
var (
	RSAHasher_name = map[int32]string{
		0: "RSA_HASHER_UNSPECIFIED",
		1: "RSA_HASHER_SHA256",
		2: "RSA_HASHER_SHA384",
		3: "RSA_HASHER_SHA512",
	}
	RSAHasher_value = map[string]int32{
		"RSA_HASHER_UNSPECIFIED": 0,
		"RSA_HASHER_SHA256":      1,
		"RSA_HASHER_SHA384":      2,
		"RSA_HASHER_SHA512":      3,
	}
)

func (x RSAHasher) Enum() *RSAHasher {
	p := new(RSAHasher)
	*p = x
	return p
}

func (x RSAHasher) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RSAHasher) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_webkey_v2_key_proto_enumTypes[2].Descriptor()
}

func (RSAHasher) Type() protoreflect.EnumType {
	return &file_zitadel_webkey_v2_key_proto_enumTypes[2]
}

func (x RSAHasher) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RSAHasher.Descriptor instead.
func (RSAHasher) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_webkey_v2_key_proto_rawDescGZIP(), []int{2}
}

type ECDSACurve int32

const (
	ECDSACurve_ECDSA_CURVE_UNSPECIFIED ECDSACurve = 0
	// NIST P-256 curve resulting in the ES256 algorithm header
	ECDSACurve_ECDSA_CURVE_P256 ECDSACurve = 1
	// NIST P-384 curve resulting in the ES384 algorithm header
	ECDSACurve_ECDSA_CURVE_P384 ECDSACurve = 2
	// NIST P-512 curve resulting in the ES512 algorithm header
	ECDSACurve_ECDSA_CURVE_P512 ECDSACurve = 3
)

// Enum value maps for ECDSACurve.
var (
	ECDSACurve_name = map[int32]string{
		0: "ECDSA_CURVE_UNSPECIFIED",
		1: "ECDSA_CURVE_P256",
		2: "ECDSA_CURVE_P384",
		3: "ECDSA_CURVE_P512",
	}
	ECDSACurve_value = map[string]int32{
		"ECDSA_CURVE_UNSPECIFIED": 0,
		"ECDSA_CURVE_P256":        1,
		"ECDSA_CURVE_P384":        2,
		"ECDSA_CURVE_P512":        3,
	}
)

func (x ECDSACurve) Enum() *ECDSACurve {
	p := new(ECDSACurve)
	*p = x
	return p
}

func (x ECDSACurve) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECDSACurve) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_webkey_v2_key_proto_enumTypes[3].Descriptor()
}

func (ECDSACurve) Type() protoreflect.EnumType {
	return &file_zitadel_webkey_v2_key_proto_enumTypes[3]
}

func (x ECDSACurve) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ECDSACurve.Descriptor instead.
func (ECDSACurve) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_webkey_v2_key_proto_rawDescGZIP(), []int{3}
}

type WebKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the key.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The timestamp of the key creation.
	CreationDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	// The timestamp of the last change to the key (e.g. creation, activation, deactivation).
	ChangeDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=change_date,json=changeDate,proto3" json:"change_date,omitempty"`
	// State of the key
	State State `protobuf:"varint,4,opt,name=state,proto3,enum=zitadel.webkey.v2.State" json:"state,omitempty"`
	// Configured type of the key (either RSA, ECDSA or ED25519)
	//
	// Types that are assignable to Key:
	//
	//	*WebKey_Rsa
	//	*WebKey_Ecdsa
	//	*WebKey_Ed25519
	Key isWebKey_Key `protobuf_oneof:"key"`
}

func (x *WebKey) Reset() {
	*x = WebKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_webkey_v2_key_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebKey) ProtoMessage() {}

func (x *WebKey) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_webkey_v2_key_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebKey.ProtoReflect.Descriptor instead.
func (*WebKey) Descriptor() ([]byte, []int) {
	return file_zitadel_webkey_v2_key_proto_rawDescGZIP(), []int{0}
}

func (x *WebKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WebKey) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *WebKey) GetChangeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeDate
	}
	return nil
}

func (x *WebKey) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STATE_UNSPECIFIED
}

func (m *WebKey) GetKey() isWebKey_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *WebKey) GetRsa() *RSA {
	if x, ok := x.GetKey().(*WebKey_Rsa); ok {
		return x.Rsa
	}
	return nil
}

func (x *WebKey) GetEcdsa() *ECDSA {
	if x, ok := x.GetKey().(*WebKey_Ecdsa); ok {
		return x.Ecdsa
	}
	return nil
}

func (x *WebKey) GetEd25519() *ED25519 {
	if x, ok := x.GetKey().(*WebKey_Ed25519); ok {
		return x.Ed25519
	}
	return nil
}

type isWebKey_Key interface {
	isWebKey_Key()
}

type WebKey_Rsa struct {
	Rsa *RSA `protobuf:"bytes,5,opt,name=rsa,proto3,oneof"`
}

type WebKey_Ecdsa struct {
	Ecdsa *ECDSA `protobuf:"bytes,6,opt,name=ecdsa,proto3,oneof"`
}

type WebKey_Ed25519 struct {
	Ed25519 *ED25519 `protobuf:"bytes,7,opt,name=ed25519,proto3,oneof"`
}

func (*WebKey_Rsa) isWebKey_Key() {}

func (*WebKey_Ecdsa) isWebKey_Key() {}

func (*WebKey_Ed25519) isWebKey_Key() {}

type RSA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bit size of the RSA key. Default is 2048 bits.
	Bits RSABits `protobuf:"varint,1,opt,name=bits,proto3,enum=zitadel.webkey.v2.RSABits" json:"bits,omitempty"`
	// Signing algrithm used. Default is SHA256.
	Hasher RSAHasher `protobuf:"varint,2,opt,name=hasher,proto3,enum=zitadel.webkey.v2.RSAHasher" json:"hasher,omitempty"`
}

func (x *RSA) Reset() {
	*x = RSA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_webkey_v2_key_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RSA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RSA) ProtoMessage() {}

func (x *RSA) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_webkey_v2_key_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RSA.ProtoReflect.Descriptor instead.
func (*RSA) Descriptor() ([]byte, []int) {
	return file_zitadel_webkey_v2_key_proto_rawDescGZIP(), []int{1}
}

func (x *RSA) GetBits() RSABits {
	if x != nil {
		return x.Bits
	}
	return RSABits_RSA_BITS_UNSPECIFIED
}

func (x *RSA) GetHasher() RSAHasher {
	if x != nil {
		return x.Hasher
	}
	return RSAHasher_RSA_HASHER_UNSPECIFIED
}

type ECDSA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Curve of the ECDSA key. Default is P-256.
	Curve ECDSACurve `protobuf:"varint,1,opt,name=curve,proto3,enum=zitadel.webkey.v2.ECDSACurve" json:"curve,omitempty"`
}

func (x *ECDSA) Reset() {
	*x = ECDSA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_webkey_v2_key_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECDSA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECDSA) ProtoMessage() {}

func (x *ECDSA) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_webkey_v2_key_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECDSA.ProtoReflect.Descriptor instead.
func (*ECDSA) Descriptor() ([]byte, []int) {
	return file_zitadel_webkey_v2_key_proto_rawDescGZIP(), []int{2}
}

func (x *ECDSA) GetCurve() ECDSACurve {
	if x != nil {
		return x.Curve
	}
	return ECDSACurve_ECDSA_CURVE_UNSPECIFIED
}

type ED25519 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ED25519) Reset() {
	*x = ED25519{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_webkey_v2_key_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ED25519) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ED25519) ProtoMessage() {}

func (x *ED25519) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_webkey_v2_key_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ED25519.ProtoReflect.Descriptor instead.
func (*ED25519) Descriptor() ([]byte, []int) {
	return file_zitadel_webkey_v2_key_proto_rawDescGZIP(), []int{3}
}

var File_zitadel_webkey_v2_key_proto protoreflect.FileDescriptor

var file_zitadel_webkey_v2_key_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79,
	0x2f, 0x76, 0x32, 0x2f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x32,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x03, 0x0a, 0x06, 0x57,
	0x65, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x31,
	0x32, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x60, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x31,
	0x32, 0x2d, 0x31, 0x38, 0x54, 0x30, 0x37, 0x3a, 0x35, 0x30, 0x3a, 0x34, 0x37, 0x2e, 0x34, 0x39,
	0x32, 0x5a, 0x22, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x35, 0x2d, 0x30,
	0x31, 0x2d, 0x32, 0x33, 0x54, 0x31, 0x30, 0x3a, 0x33, 0x34, 0x3a, 0x31, 0x38, 0x2e, 0x30, 0x35,
	0x31, 0x5a, 0x22, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x03, 0x72, 0x73, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x52, 0x53, 0x41, 0x48, 0x00, 0x52, 0x03, 0x72, 0x73, 0x61, 0x12, 0x30, 0x0a, 0x05, 0x65,
	0x63, 0x64, 0x73, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45,
	0x43, 0x44, 0x53, 0x41, 0x48, 0x00, 0x52, 0x05, 0x65, 0x63, 0x64, 0x73, 0x61, 0x12, 0x36, 0x0a,
	0x07, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x44, 0x32, 0x35, 0x35, 0x31, 0x39, 0x48, 0x00, 0x52, 0x07, 0x65, 0x64,
	0x32, 0x35, 0x35, 0x31, 0x39, 0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xab, 0x01, 0x0a,
	0x03, 0x52, 0x53, 0x41, 0x12, 0x4c, 0x0a, 0x04, 0x62, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x77, 0x65, 0x62,
	0x6b, 0x65, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x53, 0x41, 0x42, 0x69, 0x74, 0x73, 0x42, 0x1c,
	0x92, 0x41, 0x0f, 0x3a, 0x0d, 0x52, 0x53, 0x41, 0x5f, 0x42, 0x49, 0x54, 0x53, 0x5f, 0x32, 0x30,
	0x34, 0x38, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x04, 0x62, 0x69,
	0x74, 0x73, 0x12, 0x56, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x77, 0x65, 0x62,
	0x6b, 0x65, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x53, 0x41, 0x48, 0x61, 0x73, 0x68, 0x65, 0x72,
	0x42, 0x20, 0x92, 0x41, 0x13, 0x3a, 0x11, 0x52, 0x53, 0x41, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x45,
	0x52, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01,
	0x20, 0x00, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x72, 0x22, 0x5d, 0x0a, 0x05, 0x45, 0x43,
	0x44, 0x53, 0x41, 0x12, 0x54, 0x0a, 0x05, 0x63, 0x75, 0x72, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x77, 0x65, 0x62,
	0x6b, 0x65, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x43, 0x44, 0x53, 0x41, 0x43, 0x75, 0x72, 0x76,
	0x65, 0x42, 0x1f, 0x92, 0x41, 0x12, 0x3a, 0x10, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x43, 0x55,
	0x52, 0x56, 0x45, 0x5f, 0x50, 0x32, 0x35, 0x36, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01,
	0x20, 0x00, 0x52, 0x05, 0x63, 0x75, 0x72, 0x76, 0x65, 0x22, 0x09, 0x0a, 0x07, 0x45, 0x44, 0x32,
	0x35, 0x35, 0x31, 0x39, 0x2a, 0x6a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x04,
	0x2a, 0x5c, 0x0a, 0x07, 0x52, 0x53, 0x41, 0x42, 0x69, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x52,
	0x53, 0x41, 0x5f, 0x42, 0x49, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x53, 0x41, 0x5f, 0x42, 0x49, 0x54,
	0x53, 0x5f, 0x32, 0x30, 0x34, 0x38, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x53, 0x41, 0x5f,
	0x42, 0x49, 0x54, 0x53, 0x5f, 0x33, 0x30, 0x37, 0x32, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52,
	0x53, 0x41, 0x5f, 0x42, 0x49, 0x54, 0x53, 0x5f, 0x34, 0x30, 0x39, 0x36, 0x10, 0x03, 0x2a, 0x6c,
	0x0a, 0x09, 0x52, 0x53, 0x41, 0x48, 0x61, 0x73, 0x68, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x52,
	0x53, 0x41, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x53, 0x41, 0x5f, 0x48,
	0x41, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x52, 0x53, 0x41, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x41,
	0x33, 0x38, 0x34, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x53, 0x41, 0x5f, 0x48, 0x41, 0x53,
	0x48, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x10, 0x03, 0x2a, 0x6b, 0x0a, 0x0a,
	0x45, 0x43, 0x44, 0x53, 0x41, 0x43, 0x75, 0x72, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x43,
	0x44, 0x53, 0x41, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x43, 0x44, 0x53, 0x41,
	0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x50, 0x32, 0x35, 0x36, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x50, 0x33, 0x38,
	0x34, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x43, 0x55, 0x52,
	0x56, 0x45, 0x5f, 0x50, 0x35, 0x31, 0x32, 0x10, 0x03, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2f, 0x76, 0x32, 0x3b, 0x77, 0x65, 0x62, 0x6b, 0x65,
	0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_webkey_v2_key_proto_rawDescOnce sync.Once
	file_zitadel_webkey_v2_key_proto_rawDescData = file_zitadel_webkey_v2_key_proto_rawDesc
)

func file_zitadel_webkey_v2_key_proto_rawDescGZIP() []byte {
	file_zitadel_webkey_v2_key_proto_rawDescOnce.Do(func() {
		file_zitadel_webkey_v2_key_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_webkey_v2_key_proto_rawDescData)
	})
	return file_zitadel_webkey_v2_key_proto_rawDescData
}

var file_zitadel_webkey_v2_key_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_zitadel_webkey_v2_key_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_zitadel_webkey_v2_key_proto_goTypes = []interface{}{
	(State)(0),                    // 0: zitadel.webkey.v2.State
	(RSABits)(0),                  // 1: zitadel.webkey.v2.RSABits
	(RSAHasher)(0),                // 2: zitadel.webkey.v2.RSAHasher
	(ECDSACurve)(0),               // 3: zitadel.webkey.v2.ECDSACurve
	(*WebKey)(nil),                // 4: zitadel.webkey.v2.WebKey
	(*RSA)(nil),                   // 5: zitadel.webkey.v2.RSA
	(*ECDSA)(nil),                 // 6: zitadel.webkey.v2.ECDSA
	(*ED25519)(nil),               // 7: zitadel.webkey.v2.ED25519
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
}
var file_zitadel_webkey_v2_key_proto_depIdxs = []int32{
	8, // 0: zitadel.webkey.v2.WebKey.creation_date:type_name -> google.protobuf.Timestamp
	8, // 1: zitadel.webkey.v2.WebKey.change_date:type_name -> google.protobuf.Timestamp
	0, // 2: zitadel.webkey.v2.WebKey.state:type_name -> zitadel.webkey.v2.State
	5, // 3: zitadel.webkey.v2.WebKey.rsa:type_name -> zitadel.webkey.v2.RSA
	6, // 4: zitadel.webkey.v2.WebKey.ecdsa:type_name -> zitadel.webkey.v2.ECDSA
	7, // 5: zitadel.webkey.v2.WebKey.ed25519:type_name -> zitadel.webkey.v2.ED25519
	1, // 6: zitadel.webkey.v2.RSA.bits:type_name -> zitadel.webkey.v2.RSABits
	2, // 7: zitadel.webkey.v2.RSA.hasher:type_name -> zitadel.webkey.v2.RSAHasher
	3, // 8: zitadel.webkey.v2.ECDSA.curve:type_name -> zitadel.webkey.v2.ECDSACurve
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_zitadel_webkey_v2_key_proto_init() }
func file_zitadel_webkey_v2_key_proto_init() {
	if File_zitadel_webkey_v2_key_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zitadel_webkey_v2_key_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_webkey_v2_key_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RSA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_webkey_v2_key_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECDSA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_webkey_v2_key_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ED25519); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_webkey_v2_key_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*WebKey_Rsa)(nil),
		(*WebKey_Ecdsa)(nil),
		(*WebKey_Ed25519)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_webkey_v2_key_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_webkey_v2_key_proto_goTypes,
		DependencyIndexes: file_zitadel_webkey_v2_key_proto_depIdxs,
		EnumInfos:         file_zitadel_webkey_v2_key_proto_enumTypes,
		MessageInfos:      file_zitadel_webkey_v2_key_proto_msgTypes,
	}.Build()
	File_zitadel_webkey_v2_key_proto = out.File
	file_zitadel_webkey_v2_key_proto_rawDesc = nil
	file_zitadel_webkey_v2_key_proto_goTypes = nil
	file_zitadel_webkey_v2_key_proto_depIdxs = nil
}
