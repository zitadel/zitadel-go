// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: zitadel/webkey/v2/webkey_service.proto

package webkey

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebKeyService_CreateWebKey_FullMethodName   = "/zitadel.webkey.v2.WebKeyService/CreateWebKey"
	WebKeyService_ActivateWebKey_FullMethodName = "/zitadel.webkey.v2.WebKeyService/ActivateWebKey"
	WebKeyService_DeleteWebKey_FullMethodName   = "/zitadel.webkey.v2.WebKeyService/DeleteWebKey"
	WebKeyService_ListWebKeys_FullMethodName    = "/zitadel.webkey.v2.WebKeyService/ListWebKeys"
)

// WebKeyServiceClient is the client API for WebKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebKeyServiceClient interface {
	// Create Web Key
	//
	// Generate a private and public key pair. The private key can be used to sign OIDC tokens after activation.
	// The public key can be used to validate OIDC tokens.
	// The newly created key will have the state `STATE_INITIAL` and is published to the public key endpoint.
	// Note that the JWKs OIDC endpoint returns a cacheable response.
	//
	// If no key type is provided, a RSA key pair with 2048 bits and SHA256 hashing will be created.
	//
	// Required permission:
	//   - `iam.web_key.write`
	//
	// Required feature flag:
	//   - `web_key`
	CreateWebKey(ctx context.Context, in *CreateWebKeyRequest, opts ...grpc.CallOption) (*CreateWebKeyResponse, error)
	// Activate Web Key
	//
	// Switch the active signing web key. The previously active key will be deactivated.
	// Note that the JWKs OIDC endpoint returns a cacheable response.
	// Therefore it is not advised to activate a key that has been created within the cache duration (default is 5min),
	// as the public key may not have been propagated to caches and clients yet.
	//
	// Required permission:
	//   - `iam.web_key.write`
	//
	// Required feature flag:
	//   - `web_key`
	ActivateWebKey(ctx context.Context, in *ActivateWebKeyRequest, opts ...grpc.CallOption) (*ActivateWebKeyResponse, error)
	// Delete Web Key
	//
	// Delete a web key pair. Only inactive keys can be deleted. Once a key is deleted,
	// any tokens signed by this key will be invalid.
	// Note that the JWKs OIDC endpoint returns a cacheable response.
	// In case the web key is not found, the request will return a successful response as
	// the desired state is already achieved.
	// You can check the change date in the response to verify if the web key was deleted during the request.
	//
	// Required permission:
	//   - `iam.web_key.delete`
	//
	// Required feature flag:
	//   - `web_key`
	DeleteWebKey(ctx context.Context, in *DeleteWebKeyRequest, opts ...grpc.CallOption) (*DeleteWebKeyResponse, error)
	// List Web Keys
	//
	// List all web keys and their states.
	//
	// Required permission:
	//   - `iam.web_key.read`
	//
	// Required feature flag:
	//   - `web_key`
	ListWebKeys(ctx context.Context, in *ListWebKeysRequest, opts ...grpc.CallOption) (*ListWebKeysResponse, error)
}

type webKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebKeyServiceClient(cc grpc.ClientConnInterface) WebKeyServiceClient {
	return &webKeyServiceClient{cc}
}

func (c *webKeyServiceClient) CreateWebKey(ctx context.Context, in *CreateWebKeyRequest, opts ...grpc.CallOption) (*CreateWebKeyResponse, error) {
	out := new(CreateWebKeyResponse)
	err := c.cc.Invoke(ctx, WebKeyService_CreateWebKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webKeyServiceClient) ActivateWebKey(ctx context.Context, in *ActivateWebKeyRequest, opts ...grpc.CallOption) (*ActivateWebKeyResponse, error) {
	out := new(ActivateWebKeyResponse)
	err := c.cc.Invoke(ctx, WebKeyService_ActivateWebKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webKeyServiceClient) DeleteWebKey(ctx context.Context, in *DeleteWebKeyRequest, opts ...grpc.CallOption) (*DeleteWebKeyResponse, error) {
	out := new(DeleteWebKeyResponse)
	err := c.cc.Invoke(ctx, WebKeyService_DeleteWebKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webKeyServiceClient) ListWebKeys(ctx context.Context, in *ListWebKeysRequest, opts ...grpc.CallOption) (*ListWebKeysResponse, error) {
	out := new(ListWebKeysResponse)
	err := c.cc.Invoke(ctx, WebKeyService_ListWebKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebKeyServiceServer is the server API for WebKeyService service.
// All implementations must embed UnimplementedWebKeyServiceServer
// for forward compatibility
type WebKeyServiceServer interface {
	// Create Web Key
	//
	// Generate a private and public key pair. The private key can be used to sign OIDC tokens after activation.
	// The public key can be used to validate OIDC tokens.
	// The newly created key will have the state `STATE_INITIAL` and is published to the public key endpoint.
	// Note that the JWKs OIDC endpoint returns a cacheable response.
	//
	// If no key type is provided, a RSA key pair with 2048 bits and SHA256 hashing will be created.
	//
	// Required permission:
	//   - `iam.web_key.write`
	//
	// Required feature flag:
	//   - `web_key`
	CreateWebKey(context.Context, *CreateWebKeyRequest) (*CreateWebKeyResponse, error)
	// Activate Web Key
	//
	// Switch the active signing web key. The previously active key will be deactivated.
	// Note that the JWKs OIDC endpoint returns a cacheable response.
	// Therefore it is not advised to activate a key that has been created within the cache duration (default is 5min),
	// as the public key may not have been propagated to caches and clients yet.
	//
	// Required permission:
	//   - `iam.web_key.write`
	//
	// Required feature flag:
	//   - `web_key`
	ActivateWebKey(context.Context, *ActivateWebKeyRequest) (*ActivateWebKeyResponse, error)
	// Delete Web Key
	//
	// Delete a web key pair. Only inactive keys can be deleted. Once a key is deleted,
	// any tokens signed by this key will be invalid.
	// Note that the JWKs OIDC endpoint returns a cacheable response.
	// In case the web key is not found, the request will return a successful response as
	// the desired state is already achieved.
	// You can check the change date in the response to verify if the web key was deleted during the request.
	//
	// Required permission:
	//   - `iam.web_key.delete`
	//
	// Required feature flag:
	//   - `web_key`
	DeleteWebKey(context.Context, *DeleteWebKeyRequest) (*DeleteWebKeyResponse, error)
	// List Web Keys
	//
	// List all web keys and their states.
	//
	// Required permission:
	//   - `iam.web_key.read`
	//
	// Required feature flag:
	//   - `web_key`
	ListWebKeys(context.Context, *ListWebKeysRequest) (*ListWebKeysResponse, error)
	mustEmbedUnimplementedWebKeyServiceServer()
}

// UnimplementedWebKeyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebKeyServiceServer struct {
}

func (UnimplementedWebKeyServiceServer) CreateWebKey(context.Context, *CreateWebKeyRequest) (*CreateWebKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebKey not implemented")
}
func (UnimplementedWebKeyServiceServer) ActivateWebKey(context.Context, *ActivateWebKeyRequest) (*ActivateWebKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateWebKey not implemented")
}
func (UnimplementedWebKeyServiceServer) DeleteWebKey(context.Context, *DeleteWebKeyRequest) (*DeleteWebKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebKey not implemented")
}
func (UnimplementedWebKeyServiceServer) ListWebKeys(context.Context, *ListWebKeysRequest) (*ListWebKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebKeys not implemented")
}
func (UnimplementedWebKeyServiceServer) mustEmbedUnimplementedWebKeyServiceServer() {}

// UnsafeWebKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebKeyServiceServer will
// result in compilation errors.
type UnsafeWebKeyServiceServer interface {
	mustEmbedUnimplementedWebKeyServiceServer()
}

func RegisterWebKeyServiceServer(s grpc.ServiceRegistrar, srv WebKeyServiceServer) {
	s.RegisterService(&WebKeyService_ServiceDesc, srv)
}

func _WebKeyService_CreateWebKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebKeyServiceServer).CreateWebKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebKeyService_CreateWebKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebKeyServiceServer).CreateWebKey(ctx, req.(*CreateWebKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebKeyService_ActivateWebKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateWebKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebKeyServiceServer).ActivateWebKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebKeyService_ActivateWebKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebKeyServiceServer).ActivateWebKey(ctx, req.(*ActivateWebKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebKeyService_DeleteWebKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebKeyServiceServer).DeleteWebKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebKeyService_DeleteWebKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebKeyServiceServer).DeleteWebKey(ctx, req.(*DeleteWebKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebKeyService_ListWebKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebKeyServiceServer).ListWebKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebKeyService_ListWebKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebKeyServiceServer).ListWebKeys(ctx, req.(*ListWebKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebKeyService_ServiceDesc is the grpc.ServiceDesc for WebKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zitadel.webkey.v2.WebKeyService",
	HandlerType: (*WebKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWebKey",
			Handler:    _WebKeyService_CreateWebKey_Handler,
		},
		{
			MethodName: "ActivateWebKey",
			Handler:    _WebKeyService_ActivateWebKey_Handler,
		},
		{
			MethodName: "DeleteWebKey",
			Handler:    _WebKeyService_DeleteWebKey_Handler,
		},
		{
			MethodName: "ListWebKeys",
			Handler:    _WebKeyService_ListWebKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zitadel/webkey/v2/webkey_service.proto",
}
