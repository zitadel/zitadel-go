// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/authorization/v2beta/authorization.proto

package authorization

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	v2beta "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/filter/v2beta"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type State int32

const (
	State_STATE_UNSPECIFIED State = 0
	// An active authorization grants the user access with the roles specified on the project.
	State_STATE_ACTIVE State = 1
	// An inactive authorization temporarily deactivates the granted access and roles.
	// ZITADEL will not include the specific authorization in any authorization information like an access token.
	// But the information can still be accessed using the API.
	State_STATE_INACTIVE State = 2
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_ACTIVE",
		2: "STATE_INACTIVE",
	}
	State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_ACTIVE":      1,
		"STATE_INACTIVE":    2,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_authorization_v2beta_authorization_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_zitadel_authorization_v2beta_authorization_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_authorization_v2beta_authorization_proto_rawDescGZIP(), []int{0}
}

type AuthorizationFieldName int32

const (
	AuthorizationFieldName_AUTHORIZATION_FIELD_NAME_UNSPECIFIED          AuthorizationFieldName = 0
	AuthorizationFieldName_AUTHORIZATION_FIELD_NAME_CREATED_DATE         AuthorizationFieldName = 1
	AuthorizationFieldName_AUTHORIZATION_FIELD_NAME_CHANGED_DATE         AuthorizationFieldName = 2
	AuthorizationFieldName_AUTHORIZATION_FIELD_NAME_ID                   AuthorizationFieldName = 3
	AuthorizationFieldName_AUTHORIZATION_FIELD_NAME_USER_ID              AuthorizationFieldName = 4
	AuthorizationFieldName_AUTHORIZATION_FIELD_NAME_PROJECT_ID           AuthorizationFieldName = 5
	AuthorizationFieldName_AUTHORIZATION_FIELD_NAME_ORGANIZATION_ID      AuthorizationFieldName = 6
	AuthorizationFieldName_AUTHORIZATION_FIELD_NAME_USER_ORGANIZATION_ID AuthorizationFieldName = 7
)

// Enum value maps for AuthorizationFieldName.
var (
	AuthorizationFieldName_name = map[int32]string{
		0: "AUTHORIZATION_FIELD_NAME_UNSPECIFIED",
		1: "AUTHORIZATION_FIELD_NAME_CREATED_DATE",
		2: "AUTHORIZATION_FIELD_NAME_CHANGED_DATE",
		3: "AUTHORIZATION_FIELD_NAME_ID",
		4: "AUTHORIZATION_FIELD_NAME_USER_ID",
		5: "AUTHORIZATION_FIELD_NAME_PROJECT_ID",
		6: "AUTHORIZATION_FIELD_NAME_ORGANIZATION_ID",
		7: "AUTHORIZATION_FIELD_NAME_USER_ORGANIZATION_ID",
	}
	AuthorizationFieldName_value = map[string]int32{
		"AUTHORIZATION_FIELD_NAME_UNSPECIFIED":          0,
		"AUTHORIZATION_FIELD_NAME_CREATED_DATE":         1,
		"AUTHORIZATION_FIELD_NAME_CHANGED_DATE":         2,
		"AUTHORIZATION_FIELD_NAME_ID":                   3,
		"AUTHORIZATION_FIELD_NAME_USER_ID":              4,
		"AUTHORIZATION_FIELD_NAME_PROJECT_ID":           5,
		"AUTHORIZATION_FIELD_NAME_ORGANIZATION_ID":      6,
		"AUTHORIZATION_FIELD_NAME_USER_ORGANIZATION_ID": 7,
	}
)

func (x AuthorizationFieldName) Enum() *AuthorizationFieldName {
	p := new(AuthorizationFieldName)
	*p = x
	return p
}

func (x AuthorizationFieldName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthorizationFieldName) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_authorization_v2beta_authorization_proto_enumTypes[1].Descriptor()
}

func (AuthorizationFieldName) Type() protoreflect.EnumType {
	return &file_zitadel_authorization_v2beta_authorization_proto_enumTypes[1]
}

func (x AuthorizationFieldName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthorizationFieldName.Descriptor instead.
func (AuthorizationFieldName) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_authorization_v2beta_authorization_proto_rawDescGZIP(), []int{1}
}

type Authorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of the authorization.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID is the unique identifier of the project the user was granted the authorization for.
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Name is the name of the project the user was granted the authorization for.
	ProjectName string `protobuf:"bytes,3,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	// OrganizationID is the ID of the organization the project belongs to.
	ProjectOrganizationId string `protobuf:"bytes,4,opt,name=project_organization_id,json=projectOrganizationId,proto3" json:"project_organization_id,omitempty"`
	// ID of the granted project, only provided if it is a granted project.
	ProjectGrantId *string `protobuf:"bytes,5,opt,name=project_grant_id,json=projectGrantId,proto3,oneof" json:"project_grant_id,omitempty"`
	// ID of the organization the project is granted to, only provided if it is a granted project.
	GrantedOrganizationId *string `protobuf:"bytes,6,opt,name=granted_organization_id,json=grantedOrganizationId,proto3,oneof" json:"granted_organization_id,omitempty"`
	// The unique identifier of the organization the authorization belongs to.
	OrganizationId string `protobuf:"bytes,7,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// CreationDate is the timestamp when the authorization was created.
	CreationDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	// ChangeDate is the timestamp when the authorization was last updated.
	// In case the authorization was not updated, this field is equal to the creation date.
	ChangeDate *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=change_date,json=changeDate,proto3" json:"change_date,omitempty"`
	// State is the current state of the authorization.
	State State `protobuf:"varint,10,opt,name=state,proto3,enum=zitadel.authorization.v2beta.State" json:"state,omitempty"`
	User  *User `protobuf:"bytes,11,opt,name=user,proto3" json:"user,omitempty"`
	// Roles contains the roles the user was granted for the project.
	Roles []string `protobuf:"bytes,12,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *Authorization) Reset() {
	*x = Authorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_authorization_v2beta_authorization_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authorization) ProtoMessage() {}

func (x *Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_authorization_v2beta_authorization_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authorization.ProtoReflect.Descriptor instead.
func (*Authorization) Descriptor() ([]byte, []int) {
	return file_zitadel_authorization_v2beta_authorization_proto_rawDescGZIP(), []int{0}
}

func (x *Authorization) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Authorization) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Authorization) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *Authorization) GetProjectOrganizationId() string {
	if x != nil {
		return x.ProjectOrganizationId
	}
	return ""
}

func (x *Authorization) GetProjectGrantId() string {
	if x != nil && x.ProjectGrantId != nil {
		return *x.ProjectGrantId
	}
	return ""
}

func (x *Authorization) GetGrantedOrganizationId() string {
	if x != nil && x.GrantedOrganizationId != nil {
		return *x.GrantedOrganizationId
	}
	return ""
}

func (x *Authorization) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *Authorization) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *Authorization) GetChangeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeDate
	}
	return nil
}

func (x *Authorization) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STATE_UNSPECIFIED
}

func (x *Authorization) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Authorization) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID represents the ID of the user who was granted the authorization.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// PreferredLoginName represents the preferred login name of the granted user.
	PreferredLoginName string `protobuf:"bytes,2,opt,name=preferred_login_name,json=preferredLoginName,proto3" json:"preferred_login_name,omitempty"`
	// DisplayName represents the public display name of the granted user.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// AvatarURL is the URL to the user's public avatar image.
	AvatarUrl string `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	// The organization the user belong to.
	// This does not have to correspond with the authorizations organization.
	OrganizationId string `protobuf:"bytes,5,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_authorization_v2beta_authorization_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_authorization_v2beta_authorization_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_zitadel_authorization_v2beta_authorization_proto_rawDescGZIP(), []int{1}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetPreferredLoginName() string {
	if x != nil {
		return x.PreferredLoginName
	}
	return ""
}

func (x *User) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *User) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *User) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type AuthorizationsSearchFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*AuthorizationsSearchFilter_AuthorizationIds
	//	*AuthorizationsSearchFilter_OrganizationId
	//	*AuthorizationsSearchFilter_State
	//	*AuthorizationsSearchFilter_UserId
	//	*AuthorizationsSearchFilter_UserOrganizationId
	//	*AuthorizationsSearchFilter_UserPreferredLoginName
	//	*AuthorizationsSearchFilter_UserDisplayName
	//	*AuthorizationsSearchFilter_ProjectId
	//	*AuthorizationsSearchFilter_ProjectName
	//	*AuthorizationsSearchFilter_RoleKey
	//	*AuthorizationsSearchFilter_ProjectGrantId
	Filter isAuthorizationsSearchFilter_Filter `protobuf_oneof:"filter"`
}

func (x *AuthorizationsSearchFilter) Reset() {
	*x = AuthorizationsSearchFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_authorization_v2beta_authorization_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationsSearchFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationsSearchFilter) ProtoMessage() {}

func (x *AuthorizationsSearchFilter) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_authorization_v2beta_authorization_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationsSearchFilter.ProtoReflect.Descriptor instead.
func (*AuthorizationsSearchFilter) Descriptor() ([]byte, []int) {
	return file_zitadel_authorization_v2beta_authorization_proto_rawDescGZIP(), []int{2}
}

func (m *AuthorizationsSearchFilter) GetFilter() isAuthorizationsSearchFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *AuthorizationsSearchFilter) GetAuthorizationIds() *v2beta.InIDsFilter {
	if x, ok := x.GetFilter().(*AuthorizationsSearchFilter_AuthorizationIds); ok {
		return x.AuthorizationIds
	}
	return nil
}

func (x *AuthorizationsSearchFilter) GetOrganizationId() *v2beta.IDFilter {
	if x, ok := x.GetFilter().(*AuthorizationsSearchFilter_OrganizationId); ok {
		return x.OrganizationId
	}
	return nil
}

func (x *AuthorizationsSearchFilter) GetState() *StateQuery {
	if x, ok := x.GetFilter().(*AuthorizationsSearchFilter_State); ok {
		return x.State
	}
	return nil
}

func (x *AuthorizationsSearchFilter) GetUserId() *v2beta.IDFilter {
	if x, ok := x.GetFilter().(*AuthorizationsSearchFilter_UserId); ok {
		return x.UserId
	}
	return nil
}

func (x *AuthorizationsSearchFilter) GetUserOrganizationId() *v2beta.IDFilter {
	if x, ok := x.GetFilter().(*AuthorizationsSearchFilter_UserOrganizationId); ok {
		return x.UserOrganizationId
	}
	return nil
}

func (x *AuthorizationsSearchFilter) GetUserPreferredLoginName() *UserPreferredLoginNameQuery {
	if x, ok := x.GetFilter().(*AuthorizationsSearchFilter_UserPreferredLoginName); ok {
		return x.UserPreferredLoginName
	}
	return nil
}

func (x *AuthorizationsSearchFilter) GetUserDisplayName() *UserDisplayNameQuery {
	if x, ok := x.GetFilter().(*AuthorizationsSearchFilter_UserDisplayName); ok {
		return x.UserDisplayName
	}
	return nil
}

func (x *AuthorizationsSearchFilter) GetProjectId() *v2beta.IDFilter {
	if x, ok := x.GetFilter().(*AuthorizationsSearchFilter_ProjectId); ok {
		return x.ProjectId
	}
	return nil
}

func (x *AuthorizationsSearchFilter) GetProjectName() *ProjectNameQuery {
	if x, ok := x.GetFilter().(*AuthorizationsSearchFilter_ProjectName); ok {
		return x.ProjectName
	}
	return nil
}

func (x *AuthorizationsSearchFilter) GetRoleKey() *RoleKeyQuery {
	if x, ok := x.GetFilter().(*AuthorizationsSearchFilter_RoleKey); ok {
		return x.RoleKey
	}
	return nil
}

func (x *AuthorizationsSearchFilter) GetProjectGrantId() *v2beta.IDFilter {
	if x, ok := x.GetFilter().(*AuthorizationsSearchFilter_ProjectGrantId); ok {
		return x.ProjectGrantId
	}
	return nil
}

type isAuthorizationsSearchFilter_Filter interface {
	isAuthorizationsSearchFilter_Filter()
}

type AuthorizationsSearchFilter_AuthorizationIds struct {
	// Search for authorizations by their IDs.
	AuthorizationIds *v2beta.InIDsFilter `protobuf:"bytes,1,opt,name=authorization_ids,json=authorizationIds,proto3,oneof"`
}

type AuthorizationsSearchFilter_OrganizationId struct {
	// Search for an organizations authorizations by its ID.
	OrganizationId *v2beta.IDFilter `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3,oneof"`
}

type AuthorizationsSearchFilter_State struct {
	// Search for authorizations by their state.
	State *StateQuery `protobuf:"bytes,3,opt,name=state,proto3,oneof"`
}

type AuthorizationsSearchFilter_UserId struct {
	// Search for authorizations by the ID of the user who was granted the authorization.
	UserId *v2beta.IDFilter `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3,oneof"`
}

type AuthorizationsSearchFilter_UserOrganizationId struct {
	// Search for authorizations by the ID of the organisation the user is part of.
	UserOrganizationId *v2beta.IDFilter `protobuf:"bytes,5,opt,name=user_organization_id,json=userOrganizationId,proto3,oneof"`
}

type AuthorizationsSearchFilter_UserPreferredLoginName struct {
	// Search for authorizations by the preferred login name of the granted user.
	UserPreferredLoginName *UserPreferredLoginNameQuery `protobuf:"bytes,6,opt,name=user_preferred_login_name,json=userPreferredLoginName,proto3,oneof"`
}

type AuthorizationsSearchFilter_UserDisplayName struct {
	// Search for authorizations by the public display name of the granted user.
	UserDisplayName *UserDisplayNameQuery `protobuf:"bytes,7,opt,name=user_display_name,json=userDisplayName,proto3,oneof"`
}

type AuthorizationsSearchFilter_ProjectId struct {
	// Search for authorizations by the ID of the project the user was granted the authorization for.
	// This will also include authorizations granted for project grants of the same project.
	ProjectId *v2beta.IDFilter `protobuf:"bytes,8,opt,name=project_id,json=projectId,proto3,oneof"`
}

type AuthorizationsSearchFilter_ProjectName struct {
	// Search for authorizations by the name of the project the user was granted the authorization for.
	// This will also include authorizations granted for project grants of the same project.
	ProjectName *ProjectNameQuery `protobuf:"bytes,9,opt,name=project_name,json=projectName,proto3,oneof"`
}

type AuthorizationsSearchFilter_RoleKey struct {
	// Search for authorizations by the key of the role the user was granted.
	RoleKey *RoleKeyQuery `protobuf:"bytes,10,opt,name=role_key,json=roleKey,proto3,oneof"`
}

type AuthorizationsSearchFilter_ProjectGrantId struct {
	// Search for authorizations by the ID of the project grant the user was granted the authorization for.
	// This will also include authorizations granted for project grants of the same project.
	ProjectGrantId *v2beta.IDFilter `protobuf:"bytes,11,opt,name=project_grant_id,json=projectGrantId,proto3,oneof"`
}

func (*AuthorizationsSearchFilter_AuthorizationIds) isAuthorizationsSearchFilter_Filter() {}

func (*AuthorizationsSearchFilter_OrganizationId) isAuthorizationsSearchFilter_Filter() {}

func (*AuthorizationsSearchFilter_State) isAuthorizationsSearchFilter_Filter() {}

func (*AuthorizationsSearchFilter_UserId) isAuthorizationsSearchFilter_Filter() {}

func (*AuthorizationsSearchFilter_UserOrganizationId) isAuthorizationsSearchFilter_Filter() {}

func (*AuthorizationsSearchFilter_UserPreferredLoginName) isAuthorizationsSearchFilter_Filter() {}

func (*AuthorizationsSearchFilter_UserDisplayName) isAuthorizationsSearchFilter_Filter() {}

func (*AuthorizationsSearchFilter_ProjectId) isAuthorizationsSearchFilter_Filter() {}

func (*AuthorizationsSearchFilter_ProjectName) isAuthorizationsSearchFilter_Filter() {}

func (*AuthorizationsSearchFilter_RoleKey) isAuthorizationsSearchFilter_Filter() {}

func (*AuthorizationsSearchFilter_ProjectGrantId) isAuthorizationsSearchFilter_Filter() {}

type StateQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify the state of the authorization to search for.
	State State `protobuf:"varint,1,opt,name=state,proto3,enum=zitadel.authorization.v2beta.State" json:"state,omitempty"`
}

func (x *StateQuery) Reset() {
	*x = StateQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_authorization_v2beta_authorization_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateQuery) ProtoMessage() {}

func (x *StateQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_authorization_v2beta_authorization_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateQuery.ProtoReflect.Descriptor instead.
func (*StateQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_authorization_v2beta_authorization_proto_rawDescGZIP(), []int{3}
}

func (x *StateQuery) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STATE_UNSPECIFIED
}

type UserPreferredLoginNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify the preferred login name of the granted user to search for.
	LoginName string `protobuf:"bytes,1,opt,name=login_name,json=loginName,proto3" json:"login_name,omitempty"`
	// Specify the method to search for the preferred login name. Default is EQUAL.
	// For example, to search for all authorizations granted to a user with
	// a preferred login name containing a specific string, use CONTAINS or CONTAINS_IGNORE_CASE.
	Method v2beta.TextFilterMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.filter.v2beta.TextFilterMethod" json:"method,omitempty"`
}

func (x *UserPreferredLoginNameQuery) Reset() {
	*x = UserPreferredLoginNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_authorization_v2beta_authorization_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPreferredLoginNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPreferredLoginNameQuery) ProtoMessage() {}

func (x *UserPreferredLoginNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_authorization_v2beta_authorization_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPreferredLoginNameQuery.ProtoReflect.Descriptor instead.
func (*UserPreferredLoginNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_authorization_v2beta_authorization_proto_rawDescGZIP(), []int{4}
}

func (x *UserPreferredLoginNameQuery) GetLoginName() string {
	if x != nil {
		return x.LoginName
	}
	return ""
}

func (x *UserPreferredLoginNameQuery) GetMethod() v2beta.TextFilterMethod {
	if x != nil {
		return x.Method
	}
	return v2beta.TextFilterMethod(0)
}

type UserDisplayNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify the public display name of the granted user to search for.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Specify the method to search for the display name. Default is EQUAL.
	// For example, to search for all authorizations granted to a user with
	// a display name containing a specific string, use CONTAINS or CONTAINS_IGNORE_CASE.
	Method v2beta.TextFilterMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.filter.v2beta.TextFilterMethod" json:"method,omitempty"`
}

func (x *UserDisplayNameQuery) Reset() {
	*x = UserDisplayNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_authorization_v2beta_authorization_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDisplayNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDisplayNameQuery) ProtoMessage() {}

func (x *UserDisplayNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_authorization_v2beta_authorization_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDisplayNameQuery.ProtoReflect.Descriptor instead.
func (*UserDisplayNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_authorization_v2beta_authorization_proto_rawDescGZIP(), []int{5}
}

func (x *UserDisplayNameQuery) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UserDisplayNameQuery) GetMethod() v2beta.TextFilterMethod {
	if x != nil {
		return x.Method
	}
	return v2beta.TextFilterMethod(0)
}

type ProjectNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify the name of the project the user was granted the authorization for to search for.
	// Note that this will also include authorizations granted for project grants of the same project.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Specify the method to search for the project name. Default is EQUAL.
	// For example, to search for all authorizations granted on a project with
	// a name containing a specific string, use CONTAINS or CONTAINS_IGNORE_CASE.
	Method v2beta.TextFilterMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.filter.v2beta.TextFilterMethod" json:"method,omitempty"`
}

func (x *ProjectNameQuery) Reset() {
	*x = ProjectNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_authorization_v2beta_authorization_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectNameQuery) ProtoMessage() {}

func (x *ProjectNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_authorization_v2beta_authorization_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectNameQuery.ProtoReflect.Descriptor instead.
func (*ProjectNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_authorization_v2beta_authorization_proto_rawDescGZIP(), []int{6}
}

func (x *ProjectNameQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectNameQuery) GetMethod() v2beta.TextFilterMethod {
	if x != nil {
		return x.Method
	}
	return v2beta.TextFilterMethod(0)
}

type OrganizationNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify the name of the organization the authorization was granted for to search for.
	// This can either be the organization the project or the project grant is part of.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Specify the method to search for the organization name. Default is EQUAL.
	// For example, to search for all authorizations with an organization name containing a specific string,
	// use CONTAINS or CONTAINS_IGNORE_CASE.
	Method v2beta.TextFilterMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.filter.v2beta.TextFilterMethod" json:"method,omitempty"`
}

func (x *OrganizationNameQuery) Reset() {
	*x = OrganizationNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_authorization_v2beta_authorization_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationNameQuery) ProtoMessage() {}

func (x *OrganizationNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_authorization_v2beta_authorization_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationNameQuery.ProtoReflect.Descriptor instead.
func (*OrganizationNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_authorization_v2beta_authorization_proto_rawDescGZIP(), []int{7}
}

func (x *OrganizationNameQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OrganizationNameQuery) GetMethod() v2beta.TextFilterMethod {
	if x != nil {
		return x.Method
	}
	return v2beta.TextFilterMethod(0)
}

type RoleKeyQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify the key of the role the user was granted to search for.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Specify the method to search for the role key. Default is EQUAL.
	// For example, to search for all authorizations starting with a specific role key,
	// use STARTS_WITH or STARTS_WITH_IGNORE_CASE.
	Method v2beta.TextFilterMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.filter.v2beta.TextFilterMethod" json:"method,omitempty"`
}

func (x *RoleKeyQuery) Reset() {
	*x = RoleKeyQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_authorization_v2beta_authorization_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleKeyQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleKeyQuery) ProtoMessage() {}

func (x *RoleKeyQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_authorization_v2beta_authorization_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleKeyQuery.ProtoReflect.Descriptor instead.
func (*RoleKeyQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_authorization_v2beta_authorization_proto_rawDescGZIP(), []int{8}
}

func (x *RoleKeyQuery) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *RoleKeyQuery) GetMethod() v2beta.TextFilterMethod {
	if x != nil {
		return x.Method
	}
	return v2beta.TextFilterMethod(0)
}

var File_zitadel_authorization_v2beta_authorization_proto protoreflect.FileDescriptor

var file_zitadel_authorization_v2beta_authorization_proto_rawDesc = []byte{
	0x0a, 0x30, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1c, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc,
	0x05, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41,
	0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x31, 0x32, 0x39, 0x30, 0x36, 0x34,
	0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x15, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x41, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13,
	0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x31, 0x32, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33,
	0x33, 0x34, 0x22, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30,
	0x32, 0x34, 0x2d, 0x31, 0x32, 0x2d, 0x31, 0x38, 0x54, 0x30, 0x37, 0x3a, 0x35, 0x30, 0x3a, 0x34,
	0x37, 0x2e, 0x34, 0x39, 0x32, 0x5a, 0x22, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30,
	0x32, 0x35, 0x2d, 0x30, 0x31, 0x2d, 0x32, 0x33, 0x54, 0x31, 0x30, 0x3a, 0x33, 0x34, 0x3a, 0x31,
	0x38, 0x2e, 0x30, 0x35, 0x31, 0x5a, 0x22, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xb3, 0x01,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0xa4, 0x07, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x51, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x49, 0x44, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x44, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x44, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x53, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x44, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x76, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x11,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x44, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x53, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x4b,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x49, 0x44, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x53, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x82, 0x01, 0x04, 0x10, 0x01, 0x20, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x93, 0x01, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x29, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2d,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x7b, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0xc8, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x15, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x75, 0x0a, 0x0c, 0x52, 0x6f, 0x6c, 0x65,
	0x4b, 0x65, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x49, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2a,
	0x44, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x02, 0x2a, 0xe9, 0x02, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x44, 0x10,
	0x03, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55, 0x54, 0x48, 0x4f,
	0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x05,
	0x12, 0x2c, 0x0a, 0x28, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x52, 0x47,
	0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x06, 0x12, 0x31,
	0x0a, 0x2d, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10,
	0x07, 0x42, 0x48, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x3b, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_zitadel_authorization_v2beta_authorization_proto_rawDescOnce sync.Once
	file_zitadel_authorization_v2beta_authorization_proto_rawDescData = file_zitadel_authorization_v2beta_authorization_proto_rawDesc
)

func file_zitadel_authorization_v2beta_authorization_proto_rawDescGZIP() []byte {
	file_zitadel_authorization_v2beta_authorization_proto_rawDescOnce.Do(func() {
		file_zitadel_authorization_v2beta_authorization_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_authorization_v2beta_authorization_proto_rawDescData)
	})
	return file_zitadel_authorization_v2beta_authorization_proto_rawDescData
}

var file_zitadel_authorization_v2beta_authorization_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_zitadel_authorization_v2beta_authorization_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_zitadel_authorization_v2beta_authorization_proto_goTypes = []interface{}{
	(State)(0),                          // 0: zitadel.authorization.v2beta.State
	(AuthorizationFieldName)(0),         // 1: zitadel.authorization.v2beta.AuthorizationFieldName
	(*Authorization)(nil),               // 2: zitadel.authorization.v2beta.Authorization
	(*User)(nil),                        // 3: zitadel.authorization.v2beta.User
	(*AuthorizationsSearchFilter)(nil),  // 4: zitadel.authorization.v2beta.AuthorizationsSearchFilter
	(*StateQuery)(nil),                  // 5: zitadel.authorization.v2beta.StateQuery
	(*UserPreferredLoginNameQuery)(nil), // 6: zitadel.authorization.v2beta.UserPreferredLoginNameQuery
	(*UserDisplayNameQuery)(nil),        // 7: zitadel.authorization.v2beta.UserDisplayNameQuery
	(*ProjectNameQuery)(nil),            // 8: zitadel.authorization.v2beta.ProjectNameQuery
	(*OrganizationNameQuery)(nil),       // 9: zitadel.authorization.v2beta.OrganizationNameQuery
	(*RoleKeyQuery)(nil),                // 10: zitadel.authorization.v2beta.RoleKeyQuery
	(*timestamppb.Timestamp)(nil),       // 11: google.protobuf.Timestamp
	(*v2beta.InIDsFilter)(nil),          // 12: zitadel.filter.v2beta.InIDsFilter
	(*v2beta.IDFilter)(nil),             // 13: zitadel.filter.v2beta.IDFilter
	(v2beta.TextFilterMethod)(0),        // 14: zitadel.filter.v2beta.TextFilterMethod
}
var file_zitadel_authorization_v2beta_authorization_proto_depIdxs = []int32{
	11, // 0: zitadel.authorization.v2beta.Authorization.creation_date:type_name -> google.protobuf.Timestamp
	11, // 1: zitadel.authorization.v2beta.Authorization.change_date:type_name -> google.protobuf.Timestamp
	0,  // 2: zitadel.authorization.v2beta.Authorization.state:type_name -> zitadel.authorization.v2beta.State
	3,  // 3: zitadel.authorization.v2beta.Authorization.user:type_name -> zitadel.authorization.v2beta.User
	12, // 4: zitadel.authorization.v2beta.AuthorizationsSearchFilter.authorization_ids:type_name -> zitadel.filter.v2beta.InIDsFilter
	13, // 5: zitadel.authorization.v2beta.AuthorizationsSearchFilter.organization_id:type_name -> zitadel.filter.v2beta.IDFilter
	5,  // 6: zitadel.authorization.v2beta.AuthorizationsSearchFilter.state:type_name -> zitadel.authorization.v2beta.StateQuery
	13, // 7: zitadel.authorization.v2beta.AuthorizationsSearchFilter.user_id:type_name -> zitadel.filter.v2beta.IDFilter
	13, // 8: zitadel.authorization.v2beta.AuthorizationsSearchFilter.user_organization_id:type_name -> zitadel.filter.v2beta.IDFilter
	6,  // 9: zitadel.authorization.v2beta.AuthorizationsSearchFilter.user_preferred_login_name:type_name -> zitadel.authorization.v2beta.UserPreferredLoginNameQuery
	7,  // 10: zitadel.authorization.v2beta.AuthorizationsSearchFilter.user_display_name:type_name -> zitadel.authorization.v2beta.UserDisplayNameQuery
	13, // 11: zitadel.authorization.v2beta.AuthorizationsSearchFilter.project_id:type_name -> zitadel.filter.v2beta.IDFilter
	8,  // 12: zitadel.authorization.v2beta.AuthorizationsSearchFilter.project_name:type_name -> zitadel.authorization.v2beta.ProjectNameQuery
	10, // 13: zitadel.authorization.v2beta.AuthorizationsSearchFilter.role_key:type_name -> zitadel.authorization.v2beta.RoleKeyQuery
	13, // 14: zitadel.authorization.v2beta.AuthorizationsSearchFilter.project_grant_id:type_name -> zitadel.filter.v2beta.IDFilter
	0,  // 15: zitadel.authorization.v2beta.StateQuery.state:type_name -> zitadel.authorization.v2beta.State
	14, // 16: zitadel.authorization.v2beta.UserPreferredLoginNameQuery.method:type_name -> zitadel.filter.v2beta.TextFilterMethod
	14, // 17: zitadel.authorization.v2beta.UserDisplayNameQuery.method:type_name -> zitadel.filter.v2beta.TextFilterMethod
	14, // 18: zitadel.authorization.v2beta.ProjectNameQuery.method:type_name -> zitadel.filter.v2beta.TextFilterMethod
	14, // 19: zitadel.authorization.v2beta.OrganizationNameQuery.method:type_name -> zitadel.filter.v2beta.TextFilterMethod
	14, // 20: zitadel.authorization.v2beta.RoleKeyQuery.method:type_name -> zitadel.filter.v2beta.TextFilterMethod
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_zitadel_authorization_v2beta_authorization_proto_init() }
func file_zitadel_authorization_v2beta_authorization_proto_init() {
	if File_zitadel_authorization_v2beta_authorization_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zitadel_authorization_v2beta_authorization_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_authorization_v2beta_authorization_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_authorization_v2beta_authorization_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationsSearchFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_authorization_v2beta_authorization_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_authorization_v2beta_authorization_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPreferredLoginNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_authorization_v2beta_authorization_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDisplayNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_authorization_v2beta_authorization_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_authorization_v2beta_authorization_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_authorization_v2beta_authorization_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleKeyQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_authorization_v2beta_authorization_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_zitadel_authorization_v2beta_authorization_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*AuthorizationsSearchFilter_AuthorizationIds)(nil),
		(*AuthorizationsSearchFilter_OrganizationId)(nil),
		(*AuthorizationsSearchFilter_State)(nil),
		(*AuthorizationsSearchFilter_UserId)(nil),
		(*AuthorizationsSearchFilter_UserOrganizationId)(nil),
		(*AuthorizationsSearchFilter_UserPreferredLoginName)(nil),
		(*AuthorizationsSearchFilter_UserDisplayName)(nil),
		(*AuthorizationsSearchFilter_ProjectId)(nil),
		(*AuthorizationsSearchFilter_ProjectName)(nil),
		(*AuthorizationsSearchFilter_RoleKey)(nil),
		(*AuthorizationsSearchFilter_ProjectGrantId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_authorization_v2beta_authorization_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_authorization_v2beta_authorization_proto_goTypes,
		DependencyIndexes: file_zitadel_authorization_v2beta_authorization_proto_depIdxs,
		EnumInfos:         file_zitadel_authorization_v2beta_authorization_proto_enumTypes,
		MessageInfos:      file_zitadel_authorization_v2beta_authorization_proto_msgTypes,
	}.Build()
	File_zitadel_authorization_v2beta_authorization_proto = out.File
	file_zitadel_authorization_v2beta_authorization_proto_rawDesc = nil
	file_zitadel_authorization_v2beta_authorization_proto_goTypes = nil
	file_zitadel_authorization_v2beta_authorization_proto_depIdxs = nil
}
