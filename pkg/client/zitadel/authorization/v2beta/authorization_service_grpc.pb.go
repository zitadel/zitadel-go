// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: zitadel/authorization/v2beta/authorization_service.proto

package authorization

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthorizationService_ListAuthorizations_FullMethodName      = "/zitadel.authorization.v2beta.AuthorizationService/ListAuthorizations"
	AuthorizationService_CreateAuthorization_FullMethodName     = "/zitadel.authorization.v2beta.AuthorizationService/CreateAuthorization"
	AuthorizationService_UpdateAuthorization_FullMethodName     = "/zitadel.authorization.v2beta.AuthorizationService/UpdateAuthorization"
	AuthorizationService_DeleteAuthorization_FullMethodName     = "/zitadel.authorization.v2beta.AuthorizationService/DeleteAuthorization"
	AuthorizationService_ActivateAuthorization_FullMethodName   = "/zitadel.authorization.v2beta.AuthorizationService/ActivateAuthorization"
	AuthorizationService_DeactivateAuthorization_FullMethodName = "/zitadel.authorization.v2beta.AuthorizationService/DeactivateAuthorization"
)

// AuthorizationServiceClient is the client API for AuthorizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationServiceClient interface {
	// List Authorizations
	//
	// ListAuthorizations returns all authorizations matching the request and necessary permissions.
	//
	// Required permissions:
	//   - "user.grant.read"
	//   - no permissions required for listing own authorizations
	ListAuthorizations(ctx context.Context, in *ListAuthorizationsRequest, opts ...grpc.CallOption) (*ListAuthorizationsResponse, error)
	// Create Authorization
	//
	// CreateAuthorization creates a new authorization for a user in an owned or granted project.
	//
	// Required permissions:
	//   - "user.grant.write"
	CreateAuthorization(ctx context.Context, in *CreateAuthorizationRequest, opts ...grpc.CallOption) (*CreateAuthorizationResponse, error)
	// Update Authorization
	//
	// UpdateAuthorization updates the authorization.
	//
	// Note that any role keys previously granted to the user and not present in the request will be revoked.
	//
	// Required permissions:
	//   - "user.grant.write"
	UpdateAuthorization(ctx context.Context, in *UpdateAuthorizationRequest, opts ...grpc.CallOption) (*UpdateAuthorizationResponse, error)
	// Delete Authorization
	//
	// DeleteAuthorization deletes the authorization.
	//
	// In case the authorization is not found, the request will return a successful response as
	// the desired state is already achieved.
	// You can check the deletion date in the response to verify if the authorization was deleted by the request.
	//
	// Required permissions:
	//   - "user.grant.delete"
	DeleteAuthorization(ctx context.Context, in *DeleteAuthorizationRequest, opts ...grpc.CallOption) (*DeleteAuthorizationResponse, error)
	// Activate Authorization
	//
	// ActivateAuthorization activates an existing but inactive authorization.
	//
	// In case the authorization is already active, the request will return a successful response as
	// the desired state is already achieved.
	// You can check the change date in the response to verify if the authorization was activated by the request.
	//
	// Required permissions:
	//   - "user.grant.write"
	ActivateAuthorization(ctx context.Context, in *ActivateAuthorizationRequest, opts ...grpc.CallOption) (*ActivateAuthorizationResponse, error)
	// Deactivate Authorization
	//
	// DeactivateAuthorization deactivates an existing and active authorization.
	//
	// In case the authorization is already inactive, the request will return a successful response as
	// the desired state is already achieved.
	// You can check the change date in the response to verify if the authorization was deactivated by the request.
	//
	// Required permissions:
	//   - "user.grant.write"
	DeactivateAuthorization(ctx context.Context, in *DeactivateAuthorizationRequest, opts ...grpc.CallOption) (*DeactivateAuthorizationResponse, error)
}

type authorizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationServiceClient(cc grpc.ClientConnInterface) AuthorizationServiceClient {
	return &authorizationServiceClient{cc}
}

func (c *authorizationServiceClient) ListAuthorizations(ctx context.Context, in *ListAuthorizationsRequest, opts ...grpc.CallOption) (*ListAuthorizationsResponse, error) {
	out := new(ListAuthorizationsResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_ListAuthorizations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) CreateAuthorization(ctx context.Context, in *CreateAuthorizationRequest, opts ...grpc.CallOption) (*CreateAuthorizationResponse, error) {
	out := new(CreateAuthorizationResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_CreateAuthorization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) UpdateAuthorization(ctx context.Context, in *UpdateAuthorizationRequest, opts ...grpc.CallOption) (*UpdateAuthorizationResponse, error) {
	out := new(UpdateAuthorizationResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_UpdateAuthorization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) DeleteAuthorization(ctx context.Context, in *DeleteAuthorizationRequest, opts ...grpc.CallOption) (*DeleteAuthorizationResponse, error) {
	out := new(DeleteAuthorizationResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_DeleteAuthorization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) ActivateAuthorization(ctx context.Context, in *ActivateAuthorizationRequest, opts ...grpc.CallOption) (*ActivateAuthorizationResponse, error) {
	out := new(ActivateAuthorizationResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_ActivateAuthorization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) DeactivateAuthorization(ctx context.Context, in *DeactivateAuthorizationRequest, opts ...grpc.CallOption) (*DeactivateAuthorizationResponse, error) {
	out := new(DeactivateAuthorizationResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_DeactivateAuthorization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServiceServer is the server API for AuthorizationService service.
// All implementations must embed UnimplementedAuthorizationServiceServer
// for forward compatibility
type AuthorizationServiceServer interface {
	// List Authorizations
	//
	// ListAuthorizations returns all authorizations matching the request and necessary permissions.
	//
	// Required permissions:
	//   - "user.grant.read"
	//   - no permissions required for listing own authorizations
	ListAuthorizations(context.Context, *ListAuthorizationsRequest) (*ListAuthorizationsResponse, error)
	// Create Authorization
	//
	// CreateAuthorization creates a new authorization for a user in an owned or granted project.
	//
	// Required permissions:
	//   - "user.grant.write"
	CreateAuthorization(context.Context, *CreateAuthorizationRequest) (*CreateAuthorizationResponse, error)
	// Update Authorization
	//
	// UpdateAuthorization updates the authorization.
	//
	// Note that any role keys previously granted to the user and not present in the request will be revoked.
	//
	// Required permissions:
	//   - "user.grant.write"
	UpdateAuthorization(context.Context, *UpdateAuthorizationRequest) (*UpdateAuthorizationResponse, error)
	// Delete Authorization
	//
	// DeleteAuthorization deletes the authorization.
	//
	// In case the authorization is not found, the request will return a successful response as
	// the desired state is already achieved.
	// You can check the deletion date in the response to verify if the authorization was deleted by the request.
	//
	// Required permissions:
	//   - "user.grant.delete"
	DeleteAuthorization(context.Context, *DeleteAuthorizationRequest) (*DeleteAuthorizationResponse, error)
	// Activate Authorization
	//
	// ActivateAuthorization activates an existing but inactive authorization.
	//
	// In case the authorization is already active, the request will return a successful response as
	// the desired state is already achieved.
	// You can check the change date in the response to verify if the authorization was activated by the request.
	//
	// Required permissions:
	//   - "user.grant.write"
	ActivateAuthorization(context.Context, *ActivateAuthorizationRequest) (*ActivateAuthorizationResponse, error)
	// Deactivate Authorization
	//
	// DeactivateAuthorization deactivates an existing and active authorization.
	//
	// In case the authorization is already inactive, the request will return a successful response as
	// the desired state is already achieved.
	// You can check the change date in the response to verify if the authorization was deactivated by the request.
	//
	// Required permissions:
	//   - "user.grant.write"
	DeactivateAuthorization(context.Context, *DeactivateAuthorizationRequest) (*DeactivateAuthorizationResponse, error)
	mustEmbedUnimplementedAuthorizationServiceServer()
}

// UnimplementedAuthorizationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationServiceServer struct {
}

func (UnimplementedAuthorizationServiceServer) ListAuthorizations(context.Context, *ListAuthorizationsRequest) (*ListAuthorizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthorizations not implemented")
}
func (UnimplementedAuthorizationServiceServer) CreateAuthorization(context.Context, *CreateAuthorizationRequest) (*CreateAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthorization not implemented")
}
func (UnimplementedAuthorizationServiceServer) UpdateAuthorization(context.Context, *UpdateAuthorizationRequest) (*UpdateAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthorization not implemented")
}
func (UnimplementedAuthorizationServiceServer) DeleteAuthorization(context.Context, *DeleteAuthorizationRequest) (*DeleteAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthorization not implemented")
}
func (UnimplementedAuthorizationServiceServer) ActivateAuthorization(context.Context, *ActivateAuthorizationRequest) (*ActivateAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateAuthorization not implemented")
}
func (UnimplementedAuthorizationServiceServer) DeactivateAuthorization(context.Context, *DeactivateAuthorizationRequest) (*DeactivateAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateAuthorization not implemented")
}
func (UnimplementedAuthorizationServiceServer) mustEmbedUnimplementedAuthorizationServiceServer() {}

// UnsafeAuthorizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationServiceServer will
// result in compilation errors.
type UnsafeAuthorizationServiceServer interface {
	mustEmbedUnimplementedAuthorizationServiceServer()
}

func RegisterAuthorizationServiceServer(s grpc.ServiceRegistrar, srv AuthorizationServiceServer) {
	s.RegisterService(&AuthorizationService_ServiceDesc, srv)
}

func _AuthorizationService_ListAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).ListAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_ListAuthorizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).ListAuthorizations(ctx, req.(*ListAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_CreateAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).CreateAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_CreateAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).CreateAuthorization(ctx, req.(*CreateAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_UpdateAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).UpdateAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_UpdateAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).UpdateAuthorization(ctx, req.(*UpdateAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_DeleteAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).DeleteAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_DeleteAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).DeleteAuthorization(ctx, req.(*DeleteAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_ActivateAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).ActivateAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_ActivateAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).ActivateAuthorization(ctx, req.(*ActivateAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_DeactivateAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).DeactivateAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_DeactivateAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).DeactivateAuthorization(ctx, req.(*DeactivateAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorizationService_ServiceDesc is the grpc.ServiceDesc for AuthorizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zitadel.authorization.v2beta.AuthorizationService",
	HandlerType: (*AuthorizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAuthorizations",
			Handler:    _AuthorizationService_ListAuthorizations_Handler,
		},
		{
			MethodName: "CreateAuthorization",
			Handler:    _AuthorizationService_CreateAuthorization_Handler,
		},
		{
			MethodName: "UpdateAuthorization",
			Handler:    _AuthorizationService_UpdateAuthorization_Handler,
		},
		{
			MethodName: "DeleteAuthorization",
			Handler:    _AuthorizationService_DeleteAuthorization_Handler,
		},
		{
			MethodName: "ActivateAuthorization",
			Handler:    _AuthorizationService_ActivateAuthorization_Handler,
		},
		{
			MethodName: "DeactivateAuthorization",
			Handler:    _AuthorizationService_DeactivateAuthorization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zitadel/authorization/v2beta/authorization_service.proto",
}
