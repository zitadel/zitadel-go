// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/org.proto

package org

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	object "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/object"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrgState int32

const (
	OrgState_ORG_STATE_UNSPECIFIED OrgState = 0
	OrgState_ORG_STATE_ACTIVE      OrgState = 1
	OrgState_ORG_STATE_INACTIVE    OrgState = 2
	OrgState_ORG_STATE_REMOVED     OrgState = 3
)

// Enum value maps for OrgState.
var (
	OrgState_name = map[int32]string{
		0: "ORG_STATE_UNSPECIFIED",
		1: "ORG_STATE_ACTIVE",
		2: "ORG_STATE_INACTIVE",
		3: "ORG_STATE_REMOVED",
	}
	OrgState_value = map[string]int32{
		"ORG_STATE_UNSPECIFIED": 0,
		"ORG_STATE_ACTIVE":      1,
		"ORG_STATE_INACTIVE":    2,
		"ORG_STATE_REMOVED":     3,
	}
)

func (x OrgState) Enum() *OrgState {
	p := new(OrgState)
	*p = x
	return p
}

func (x OrgState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrgState) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_org_proto_enumTypes[0].Descriptor()
}

func (OrgState) Type() protoreflect.EnumType {
	return &file_zitadel_org_proto_enumTypes[0]
}

func (x OrgState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrgState.Descriptor instead.
func (OrgState) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_org_proto_rawDescGZIP(), []int{0}
}

type DomainValidationType int32

const (
	DomainValidationType_DOMAIN_VALIDATION_TYPE_UNSPECIFIED DomainValidationType = 0
	DomainValidationType_DOMAIN_VALIDATION_TYPE_HTTP        DomainValidationType = 1
	DomainValidationType_DOMAIN_VALIDATION_TYPE_DNS         DomainValidationType = 2
)

// Enum value maps for DomainValidationType.
var (
	DomainValidationType_name = map[int32]string{
		0: "DOMAIN_VALIDATION_TYPE_UNSPECIFIED",
		1: "DOMAIN_VALIDATION_TYPE_HTTP",
		2: "DOMAIN_VALIDATION_TYPE_DNS",
	}
	DomainValidationType_value = map[string]int32{
		"DOMAIN_VALIDATION_TYPE_UNSPECIFIED": 0,
		"DOMAIN_VALIDATION_TYPE_HTTP":        1,
		"DOMAIN_VALIDATION_TYPE_DNS":         2,
	}
)

func (x DomainValidationType) Enum() *DomainValidationType {
	p := new(DomainValidationType)
	*p = x
	return p
}

func (x DomainValidationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DomainValidationType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_org_proto_enumTypes[1].Descriptor()
}

func (DomainValidationType) Type() protoreflect.EnumType {
	return &file_zitadel_org_proto_enumTypes[1]
}

func (x DomainValidationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DomainValidationType.Descriptor instead.
func (DomainValidationType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_org_proto_rawDescGZIP(), []int{1}
}

type OrgFieldName int32

const (
	OrgFieldName_ORG_FIELD_NAME_UNSPECIFIED OrgFieldName = 0
	OrgFieldName_ORG_FIELD_NAME_NAME        OrgFieldName = 1
)

// Enum value maps for OrgFieldName.
var (
	OrgFieldName_name = map[int32]string{
		0: "ORG_FIELD_NAME_UNSPECIFIED",
		1: "ORG_FIELD_NAME_NAME",
	}
	OrgFieldName_value = map[string]int32{
		"ORG_FIELD_NAME_UNSPECIFIED": 0,
		"ORG_FIELD_NAME_NAME":        1,
	}
)

func (x OrgFieldName) Enum() *OrgFieldName {
	p := new(OrgFieldName)
	*p = x
	return p
}

func (x OrgFieldName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrgFieldName) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_org_proto_enumTypes[2].Descriptor()
}

func (OrgFieldName) Type() protoreflect.EnumType {
	return &file_zitadel_org_proto_enumTypes[2]
}

func (x OrgFieldName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrgFieldName.Descriptor instead.
func (OrgFieldName) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_org_proto_rawDescGZIP(), []int{2}
}

type Org struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Details       *object.ObjectDetails `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	State         OrgState              `protobuf:"varint,3,opt,name=state,proto3,enum=zitadel.org.v1.OrgState" json:"state,omitempty"`
	Name          string                `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	PrimaryDomain string                `protobuf:"bytes,5,opt,name=primary_domain,json=primaryDomain,proto3" json:"primary_domain,omitempty"`
}

func (x *Org) Reset() {
	*x = Org{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_org_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Org) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Org) ProtoMessage() {}

func (x *Org) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_org_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Org.ProtoReflect.Descriptor instead.
func (*Org) Descriptor() ([]byte, []int) {
	return file_zitadel_org_proto_rawDescGZIP(), []int{0}
}

func (x *Org) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Org) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Org) GetState() OrgState {
	if x != nil {
		return x.State
	}
	return OrgState_ORG_STATE_UNSPECIFIED
}

func (x *Org) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Org) GetPrimaryDomain() string {
	if x != nil {
		return x.PrimaryDomain
	}
	return ""
}

type Domain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId          string                `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Details        *object.ObjectDetails `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	DomainName     string                `protobuf:"bytes,3,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	IsVerified     bool                  `protobuf:"varint,4,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	IsPrimary      bool                  `protobuf:"varint,5,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
	ValidationType DomainValidationType  `protobuf:"varint,6,opt,name=validation_type,json=validationType,proto3,enum=zitadel.org.v1.DomainValidationType" json:"validation_type,omitempty"`
}

func (x *Domain) Reset() {
	*x = Domain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_org_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Domain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Domain) ProtoMessage() {}

func (x *Domain) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_org_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Domain.ProtoReflect.Descriptor instead.
func (*Domain) Descriptor() ([]byte, []int) {
	return file_zitadel_org_proto_rawDescGZIP(), []int{1}
}

func (x *Domain) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *Domain) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Domain) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *Domain) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *Domain) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *Domain) GetValidationType() DomainValidationType {
	if x != nil {
		return x.ValidationType
	}
	return DomainValidationType_DOMAIN_VALIDATION_TYPE_UNSPECIFIED
}

type OrgQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*OrgQuery_NameQuery
	//	*OrgQuery_DomainQuery
	//	*OrgQuery_StateQuery
	//	*OrgQuery_IdQuery
	Query isOrgQuery_Query `protobuf_oneof:"query"`
}

func (x *OrgQuery) Reset() {
	*x = OrgQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_org_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgQuery) ProtoMessage() {}

func (x *OrgQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_org_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgQuery.ProtoReflect.Descriptor instead.
func (*OrgQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_org_proto_rawDescGZIP(), []int{2}
}

func (m *OrgQuery) GetQuery() isOrgQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *OrgQuery) GetNameQuery() *OrgNameQuery {
	if x, ok := x.GetQuery().(*OrgQuery_NameQuery); ok {
		return x.NameQuery
	}
	return nil
}

func (x *OrgQuery) GetDomainQuery() *OrgDomainQuery {
	if x, ok := x.GetQuery().(*OrgQuery_DomainQuery); ok {
		return x.DomainQuery
	}
	return nil
}

func (x *OrgQuery) GetStateQuery() *OrgStateQuery {
	if x, ok := x.GetQuery().(*OrgQuery_StateQuery); ok {
		return x.StateQuery
	}
	return nil
}

func (x *OrgQuery) GetIdQuery() *OrgIDQuery {
	if x, ok := x.GetQuery().(*OrgQuery_IdQuery); ok {
		return x.IdQuery
	}
	return nil
}

type isOrgQuery_Query interface {
	isOrgQuery_Query()
}

type OrgQuery_NameQuery struct {
	NameQuery *OrgNameQuery `protobuf:"bytes,1,opt,name=name_query,json=nameQuery,proto3,oneof"`
}

type OrgQuery_DomainQuery struct {
	DomainQuery *OrgDomainQuery `protobuf:"bytes,2,opt,name=domain_query,json=domainQuery,proto3,oneof"`
}

type OrgQuery_StateQuery struct {
	StateQuery *OrgStateQuery `protobuf:"bytes,3,opt,name=state_query,json=stateQuery,proto3,oneof"`
}

type OrgQuery_IdQuery struct {
	IdQuery *OrgIDQuery `protobuf:"bytes,4,opt,name=id_query,json=idQuery,proto3,oneof"`
}

func (*OrgQuery_NameQuery) isOrgQuery_Query() {}

func (*OrgQuery_DomainQuery) isOrgQuery_Query() {}

func (*OrgQuery_StateQuery) isOrgQuery_Query() {}

func (*OrgQuery_IdQuery) isOrgQuery_Query() {}

type OrgNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Method object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *OrgNameQuery) Reset() {
	*x = OrgNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_org_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgNameQuery) ProtoMessage() {}

func (x *OrgNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_org_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgNameQuery.ProtoReflect.Descriptor instead.
func (*OrgNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_org_proto_rawDescGZIP(), []int{3}
}

func (x *OrgNameQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OrgNameQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type OrgDomainQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string                 `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Method object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *OrgDomainQuery) Reset() {
	*x = OrgDomainQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_org_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgDomainQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgDomainQuery) ProtoMessage() {}

func (x *OrgDomainQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_org_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgDomainQuery.ProtoReflect.Descriptor instead.
func (*OrgDomainQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_org_proto_rawDescGZIP(), []int{4}
}

func (x *OrgDomainQuery) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *OrgDomainQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type OrgStateQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State OrgState `protobuf:"varint,1,opt,name=state,proto3,enum=zitadel.org.v1.OrgState" json:"state,omitempty"`
}

func (x *OrgStateQuery) Reset() {
	*x = OrgStateQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_org_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgStateQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgStateQuery) ProtoMessage() {}

func (x *OrgStateQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_org_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgStateQuery.ProtoReflect.Descriptor instead.
func (*OrgStateQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_org_proto_rawDescGZIP(), []int{5}
}

func (x *OrgStateQuery) GetState() OrgState {
	if x != nil {
		return x.State
	}
	return OrgState_ORG_STATE_UNSPECIFIED
}

type OrgIDQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OrgIDQuery) Reset() {
	*x = OrgIDQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_org_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgIDQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgIDQuery) ProtoMessage() {}

func (x *OrgIDQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_org_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgIDQuery.ProtoReflect.Descriptor instead.
func (*OrgIDQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_org_proto_rawDescGZIP(), []int{6}
}

func (x *OrgIDQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DomainSearchQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*DomainSearchQuery_DomainNameQuery
	Query isDomainSearchQuery_Query `protobuf_oneof:"query"`
}

func (x *DomainSearchQuery) Reset() {
	*x = DomainSearchQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_org_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainSearchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainSearchQuery) ProtoMessage() {}

func (x *DomainSearchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_org_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainSearchQuery.ProtoReflect.Descriptor instead.
func (*DomainSearchQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_org_proto_rawDescGZIP(), []int{7}
}

func (m *DomainSearchQuery) GetQuery() isDomainSearchQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *DomainSearchQuery) GetDomainNameQuery() *DomainNameQuery {
	if x, ok := x.GetQuery().(*DomainSearchQuery_DomainNameQuery); ok {
		return x.DomainNameQuery
	}
	return nil
}

type isDomainSearchQuery_Query interface {
	isDomainSearchQuery_Query()
}

type DomainSearchQuery_DomainNameQuery struct {
	DomainNameQuery *DomainNameQuery `protobuf:"bytes,1,opt,name=domain_name_query,json=domainNameQuery,proto3,oneof"`
}

func (*DomainSearchQuery_DomainNameQuery) isDomainSearchQuery_Query() {}

type DomainNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Method object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *DomainNameQuery) Reset() {
	*x = DomainNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_org_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainNameQuery) ProtoMessage() {}

func (x *DomainNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_org_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainNameQuery.ProtoReflect.Descriptor instead.
func (*DomainNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_org_proto_rawDescGZIP(), []int{8}
}

func (x *DomainNameQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainNameQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

var File_zitadel_org_proto protoreflect.FileDescriptor

var file_zitadel_org_proto_rawDesc = []byte{
	0x0a, 0x11, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6f, 0x72, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x76, 0x31, 0x1a, 0x14, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x9d, 0x02, 0x0a, 0x03, 0x4f, 0x72, 0x67, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39,
	0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x56, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x22, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92,
	0x41, 0x11, 0x4a, 0x0f, 0x22, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x22, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x22, 0xc6, 0x03, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2f, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92,
	0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36,
	0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x4a, 0x0d, 0x22,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x52, 0x0a, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x26, 0x92,
	0x41, 0x23, 0x32, 0x21, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x4f, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x32, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x77, 0x61, 0x73, 0x20, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x52, 0x0e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x08,
	0x4f, 0x72, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x0c, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x37,
	0x0a, 0x08, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07,
	0x69, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xa8, 0x01, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x5a, 0x49, 0x54, 0x41,
	0x44, 0x45, 0x4c, 0x22, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42,
	0x37, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68,
	0x69, 0x63, 0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x4f, 0x72, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41, 0x11, 0x4a, 0x0f, 0x22, 0x63, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x22, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8,
	0x01, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x6c, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20,
	0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20,
	0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x6f, 0x0a, 0x0d, 0x4f, 0x72, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x5e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x2e, 0x92, 0x41, 0x23, 0x32, 0x21, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3e, 0x0a, 0x0a, 0x4f, 0x72, 0x67, 0x49,
	0x44, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30,
	0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0xc8, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x70, 0x0a, 0x11, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4d, 0x0a,
	0x11, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0c, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xb1, 0x01, 0x0a, 0x0f, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x30,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41,
	0x11, 0x4a, 0x0f, 0x22, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x22, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x6c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92,
	0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63,
	0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2a, 0x6a,
	0x0a, 0x08, 0x4f, 0x72, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4f,
	0x52, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x7f, 0x0a, 0x14, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4f,
	0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x44,
	0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4e, 0x53, 0x10, 0x02, 0x2a, 0x47, 0x0a, 0x0c, 0x4f,
	0x72, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4f,
	0x52, 0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4f,
	0x52, 0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x01, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6f, 0x72, 0x67, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_org_proto_rawDescOnce sync.Once
	file_zitadel_org_proto_rawDescData = file_zitadel_org_proto_rawDesc
)

func file_zitadel_org_proto_rawDescGZIP() []byte {
	file_zitadel_org_proto_rawDescOnce.Do(func() {
		file_zitadel_org_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_org_proto_rawDescData)
	})
	return file_zitadel_org_proto_rawDescData
}

var file_zitadel_org_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_zitadel_org_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_zitadel_org_proto_goTypes = []interface{}{
	(OrgState)(0),                // 0: zitadel.org.v1.OrgState
	(DomainValidationType)(0),    // 1: zitadel.org.v1.DomainValidationType
	(OrgFieldName)(0),            // 2: zitadel.org.v1.OrgFieldName
	(*Org)(nil),                  // 3: zitadel.org.v1.Org
	(*Domain)(nil),               // 4: zitadel.org.v1.Domain
	(*OrgQuery)(nil),             // 5: zitadel.org.v1.OrgQuery
	(*OrgNameQuery)(nil),         // 6: zitadel.org.v1.OrgNameQuery
	(*OrgDomainQuery)(nil),       // 7: zitadel.org.v1.OrgDomainQuery
	(*OrgStateQuery)(nil),        // 8: zitadel.org.v1.OrgStateQuery
	(*OrgIDQuery)(nil),           // 9: zitadel.org.v1.OrgIDQuery
	(*DomainSearchQuery)(nil),    // 10: zitadel.org.v1.DomainSearchQuery
	(*DomainNameQuery)(nil),      // 11: zitadel.org.v1.DomainNameQuery
	(*object.ObjectDetails)(nil), // 12: zitadel.v1.ObjectDetails
	(object.TextQueryMethod)(0),  // 13: zitadel.v1.TextQueryMethod
}
var file_zitadel_org_proto_depIdxs = []int32{
	12, // 0: zitadel.org.v1.Org.details:type_name -> zitadel.v1.ObjectDetails
	0,  // 1: zitadel.org.v1.Org.state:type_name -> zitadel.org.v1.OrgState
	12, // 2: zitadel.org.v1.Domain.details:type_name -> zitadel.v1.ObjectDetails
	1,  // 3: zitadel.org.v1.Domain.validation_type:type_name -> zitadel.org.v1.DomainValidationType
	6,  // 4: zitadel.org.v1.OrgQuery.name_query:type_name -> zitadel.org.v1.OrgNameQuery
	7,  // 5: zitadel.org.v1.OrgQuery.domain_query:type_name -> zitadel.org.v1.OrgDomainQuery
	8,  // 6: zitadel.org.v1.OrgQuery.state_query:type_name -> zitadel.org.v1.OrgStateQuery
	9,  // 7: zitadel.org.v1.OrgQuery.id_query:type_name -> zitadel.org.v1.OrgIDQuery
	13, // 8: zitadel.org.v1.OrgNameQuery.method:type_name -> zitadel.v1.TextQueryMethod
	13, // 9: zitadel.org.v1.OrgDomainQuery.method:type_name -> zitadel.v1.TextQueryMethod
	0,  // 10: zitadel.org.v1.OrgStateQuery.state:type_name -> zitadel.org.v1.OrgState
	11, // 11: zitadel.org.v1.DomainSearchQuery.domain_name_query:type_name -> zitadel.org.v1.DomainNameQuery
	13, // 12: zitadel.org.v1.DomainNameQuery.method:type_name -> zitadel.v1.TextQueryMethod
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_zitadel_org_proto_init() }
func file_zitadel_org_proto_init() {
	if File_zitadel_org_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zitadel_org_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Org); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_org_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Domain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_org_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_org_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_org_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgDomainQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_org_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgStateQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_org_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgIDQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_org_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainSearchQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_org_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_org_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*OrgQuery_NameQuery)(nil),
		(*OrgQuery_DomainQuery)(nil),
		(*OrgQuery_StateQuery)(nil),
		(*OrgQuery_IdQuery)(nil),
	}
	file_zitadel_org_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*DomainSearchQuery_DomainNameQuery)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_org_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_org_proto_goTypes,
		DependencyIndexes: file_zitadel_org_proto_depIdxs,
		EnumInfos:         file_zitadel_org_proto_enumTypes,
		MessageInfos:      file_zitadel_org_proto_msgTypes,
	}.Build()
	File_zitadel_org_proto = out.File
	file_zitadel_org_proto_rawDesc = nil
	file_zitadel_org_proto_goTypes = nil
	file_zitadel_org_proto_depIdxs = nil
}
