// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/text.proto

package text

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	object "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/object"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageCustomText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details    *object.ObjectDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Title      string                `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	PreHeader  string                `protobuf:"bytes,3,opt,name=pre_header,json=preHeader,proto3" json:"pre_header,omitempty"`
	Subject    string                `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	Greeting   string                `protobuf:"bytes,5,opt,name=greeting,proto3" json:"greeting,omitempty"`
	Text       string                `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	ButtonText string                `protobuf:"bytes,7,opt,name=button_text,json=buttonText,proto3" json:"button_text,omitempty"`
	FooterText string                `protobuf:"bytes,8,opt,name=footer_text,json=footerText,proto3" json:"footer_text,omitempty"`
	IsDefault  bool                  `protobuf:"varint,9,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
}

func (x *MessageCustomText) Reset() {
	*x = MessageCustomText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageCustomText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageCustomText) ProtoMessage() {}

func (x *MessageCustomText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageCustomText.ProtoReflect.Descriptor instead.
func (*MessageCustomText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{0}
}

func (x *MessageCustomText) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *MessageCustomText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MessageCustomText) GetPreHeader() string {
	if x != nil {
		return x.PreHeader
	}
	return ""
}

func (x *MessageCustomText) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *MessageCustomText) GetGreeting() string {
	if x != nil {
		return x.Greeting
	}
	return ""
}

func (x *MessageCustomText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *MessageCustomText) GetButtonText() string {
	if x != nil {
		return x.ButtonText
	}
	return ""
}

func (x *MessageCustomText) GetFooterText() string {
	if x != nil {
		return x.FooterText
	}
	return ""
}

func (x *MessageCustomText) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type LoginCustomText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details                              *object.ObjectDetails                       `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	SelectAccountText                    *SelectAccountScreenText                    `protobuf:"bytes,2,opt,name=select_account_text,json=selectAccountText,proto3" json:"select_account_text,omitempty"`
	LoginText                            *LoginScreenText                            `protobuf:"bytes,3,opt,name=login_text,json=loginText,proto3" json:"login_text,omitempty"`
	PasswordText                         *PasswordScreenText                         `protobuf:"bytes,4,opt,name=password_text,json=passwordText,proto3" json:"password_text,omitempty"`
	UsernameChangeText                   *UsernameChangeScreenText                   `protobuf:"bytes,5,opt,name=username_change_text,json=usernameChangeText,proto3" json:"username_change_text,omitempty"`
	UsernameChangeDoneText               *UsernameChangeDoneScreenText               `protobuf:"bytes,6,opt,name=username_change_done_text,json=usernameChangeDoneText,proto3" json:"username_change_done_text,omitempty"`
	InitPasswordText                     *InitPasswordScreenText                     `protobuf:"bytes,7,opt,name=init_password_text,json=initPasswordText,proto3" json:"init_password_text,omitempty"`
	InitPasswordDoneText                 *InitPasswordDoneScreenText                 `protobuf:"bytes,8,opt,name=init_password_done_text,json=initPasswordDoneText,proto3" json:"init_password_done_text,omitempty"`
	EmailVerificationText                *EmailVerificationScreenText                `protobuf:"bytes,9,opt,name=email_verification_text,json=emailVerificationText,proto3" json:"email_verification_text,omitempty"`
	EmailVerificationDoneText            *EmailVerificationDoneScreenText            `protobuf:"bytes,10,opt,name=email_verification_done_text,json=emailVerificationDoneText,proto3" json:"email_verification_done_text,omitempty"`
	InitializeUserText                   *InitializeUserScreenText                   `protobuf:"bytes,11,opt,name=initialize_user_text,json=initializeUserText,proto3" json:"initialize_user_text,omitempty"`
	InitializeDoneText                   *InitializeUserDoneScreenText               `protobuf:"bytes,12,opt,name=initialize_done_text,json=initializeDoneText,proto3" json:"initialize_done_text,omitempty"`
	InitMfaPromptText                    *InitMFAPromptScreenText                    `protobuf:"bytes,13,opt,name=init_mfa_prompt_text,json=initMfaPromptText,proto3" json:"init_mfa_prompt_text,omitempty"`
	InitMfaOtpText                       *InitMFAOTPScreenText                       `protobuf:"bytes,14,opt,name=init_mfa_otp_text,json=initMfaOtpText,proto3" json:"init_mfa_otp_text,omitempty"`
	InitMfaU2FText                       *InitMFAU2FScreenText                       `protobuf:"bytes,15,opt,name=init_mfa_u2f_text,json=initMfaU2fText,proto3" json:"init_mfa_u2f_text,omitempty"`
	InitMfaDoneText                      *InitMFADoneScreenText                      `protobuf:"bytes,16,opt,name=init_mfa_done_text,json=initMfaDoneText,proto3" json:"init_mfa_done_text,omitempty"`
	MfaProvidersText                     *MFAProvidersText                           `protobuf:"bytes,17,opt,name=mfa_providers_text,json=mfaProvidersText,proto3" json:"mfa_providers_text,omitempty"`
	VerifyMfaOtpText                     *VerifyMFAOTPScreenText                     `protobuf:"bytes,18,opt,name=verify_mfa_otp_text,json=verifyMfaOtpText,proto3" json:"verify_mfa_otp_text,omitempty"`
	VerifyMfaU2FText                     *VerifyMFAU2FScreenText                     `protobuf:"bytes,19,opt,name=verify_mfa_u2f_text,json=verifyMfaU2fText,proto3" json:"verify_mfa_u2f_text,omitempty"`
	PasswordlessText                     *PasswordlessScreenText                     `protobuf:"bytes,20,opt,name=passwordless_text,json=passwordlessText,proto3" json:"passwordless_text,omitempty"`
	PasswordChangeText                   *PasswordChangeScreenText                   `protobuf:"bytes,21,opt,name=password_change_text,json=passwordChangeText,proto3" json:"password_change_text,omitempty"`
	PasswordChangeDoneText               *PasswordChangeDoneScreenText               `protobuf:"bytes,22,opt,name=password_change_done_text,json=passwordChangeDoneText,proto3" json:"password_change_done_text,omitempty"`
	PasswordResetDoneText                *PasswordResetDoneScreenText                `protobuf:"bytes,23,opt,name=password_reset_done_text,json=passwordResetDoneText,proto3" json:"password_reset_done_text,omitempty"`
	RegistrationOptionText               *RegistrationOptionScreenText               `protobuf:"bytes,24,opt,name=registration_option_text,json=registrationOptionText,proto3" json:"registration_option_text,omitempty"`
	RegistrationUserText                 *RegistrationUserScreenText                 `protobuf:"bytes,25,opt,name=registration_user_text,json=registrationUserText,proto3" json:"registration_user_text,omitempty"`
	RegistrationOrgText                  *RegistrationOrgScreenText                  `protobuf:"bytes,26,opt,name=registration_org_text,json=registrationOrgText,proto3" json:"registration_org_text,omitempty"`
	LinkingUserDoneText                  *LinkingUserDoneScreenText                  `protobuf:"bytes,27,opt,name=linking_user_done_text,json=linkingUserDoneText,proto3" json:"linking_user_done_text,omitempty"`
	ExternalUserNotFoundText             *ExternalUserNotFoundScreenText             `protobuf:"bytes,28,opt,name=external_user_not_found_text,json=externalUserNotFoundText,proto3" json:"external_user_not_found_text,omitempty"`
	SuccessLoginText                     *SuccessLoginScreenText                     `protobuf:"bytes,29,opt,name=success_login_text,json=successLoginText,proto3" json:"success_login_text,omitempty"`
	LogoutText                           *LogoutDoneScreenText                       `protobuf:"bytes,30,opt,name=logout_text,json=logoutText,proto3" json:"logout_text,omitempty"`
	FooterText                           *FooterText                                 `protobuf:"bytes,31,opt,name=footer_text,json=footerText,proto3" json:"footer_text,omitempty"`
	PasswordlessPromptText               *PasswordlessPromptScreenText               `protobuf:"bytes,32,opt,name=passwordless_prompt_text,json=passwordlessPromptText,proto3" json:"passwordless_prompt_text,omitempty"`
	PasswordlessRegistrationText         *PasswordlessRegistrationScreenText         `protobuf:"bytes,33,opt,name=passwordless_registration_text,json=passwordlessRegistrationText,proto3" json:"passwordless_registration_text,omitempty"`
	PasswordlessRegistrationDoneText     *PasswordlessRegistrationDoneScreenText     `protobuf:"bytes,34,opt,name=passwordless_registration_done_text,json=passwordlessRegistrationDoneText,proto3" json:"passwordless_registration_done_text,omitempty"`
	ExternalRegistrationUserOverviewText *ExternalRegistrationUserOverviewScreenText `protobuf:"bytes,35,opt,name=external_registration_user_overview_text,json=externalRegistrationUserOverviewText,proto3" json:"external_registration_user_overview_text,omitempty"`
	IsDefault                            bool                                        `protobuf:"varint,36,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	// Deprecated: the linking user prompt screen no longer exists
	//
	// Deprecated: Marked as deprecated in zitadel/text.proto.
	LinkingUserPromptText *LinkingUserPromptScreenText `protobuf:"bytes,37,opt,name=linking_user_prompt_text,json=linkingUserPromptText,proto3" json:"linking_user_prompt_text,omitempty"`
}

func (x *LoginCustomText) Reset() {
	*x = LoginCustomText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginCustomText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginCustomText) ProtoMessage() {}

func (x *LoginCustomText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginCustomText.ProtoReflect.Descriptor instead.
func (*LoginCustomText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{1}
}

func (x *LoginCustomText) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *LoginCustomText) GetSelectAccountText() *SelectAccountScreenText {
	if x != nil {
		return x.SelectAccountText
	}
	return nil
}

func (x *LoginCustomText) GetLoginText() *LoginScreenText {
	if x != nil {
		return x.LoginText
	}
	return nil
}

func (x *LoginCustomText) GetPasswordText() *PasswordScreenText {
	if x != nil {
		return x.PasswordText
	}
	return nil
}

func (x *LoginCustomText) GetUsernameChangeText() *UsernameChangeScreenText {
	if x != nil {
		return x.UsernameChangeText
	}
	return nil
}

func (x *LoginCustomText) GetUsernameChangeDoneText() *UsernameChangeDoneScreenText {
	if x != nil {
		return x.UsernameChangeDoneText
	}
	return nil
}

func (x *LoginCustomText) GetInitPasswordText() *InitPasswordScreenText {
	if x != nil {
		return x.InitPasswordText
	}
	return nil
}

func (x *LoginCustomText) GetInitPasswordDoneText() *InitPasswordDoneScreenText {
	if x != nil {
		return x.InitPasswordDoneText
	}
	return nil
}

func (x *LoginCustomText) GetEmailVerificationText() *EmailVerificationScreenText {
	if x != nil {
		return x.EmailVerificationText
	}
	return nil
}

func (x *LoginCustomText) GetEmailVerificationDoneText() *EmailVerificationDoneScreenText {
	if x != nil {
		return x.EmailVerificationDoneText
	}
	return nil
}

func (x *LoginCustomText) GetInitializeUserText() *InitializeUserScreenText {
	if x != nil {
		return x.InitializeUserText
	}
	return nil
}

func (x *LoginCustomText) GetInitializeDoneText() *InitializeUserDoneScreenText {
	if x != nil {
		return x.InitializeDoneText
	}
	return nil
}

func (x *LoginCustomText) GetInitMfaPromptText() *InitMFAPromptScreenText {
	if x != nil {
		return x.InitMfaPromptText
	}
	return nil
}

func (x *LoginCustomText) GetInitMfaOtpText() *InitMFAOTPScreenText {
	if x != nil {
		return x.InitMfaOtpText
	}
	return nil
}

func (x *LoginCustomText) GetInitMfaU2FText() *InitMFAU2FScreenText {
	if x != nil {
		return x.InitMfaU2FText
	}
	return nil
}

func (x *LoginCustomText) GetInitMfaDoneText() *InitMFADoneScreenText {
	if x != nil {
		return x.InitMfaDoneText
	}
	return nil
}

func (x *LoginCustomText) GetMfaProvidersText() *MFAProvidersText {
	if x != nil {
		return x.MfaProvidersText
	}
	return nil
}

func (x *LoginCustomText) GetVerifyMfaOtpText() *VerifyMFAOTPScreenText {
	if x != nil {
		return x.VerifyMfaOtpText
	}
	return nil
}

func (x *LoginCustomText) GetVerifyMfaU2FText() *VerifyMFAU2FScreenText {
	if x != nil {
		return x.VerifyMfaU2FText
	}
	return nil
}

func (x *LoginCustomText) GetPasswordlessText() *PasswordlessScreenText {
	if x != nil {
		return x.PasswordlessText
	}
	return nil
}

func (x *LoginCustomText) GetPasswordChangeText() *PasswordChangeScreenText {
	if x != nil {
		return x.PasswordChangeText
	}
	return nil
}

func (x *LoginCustomText) GetPasswordChangeDoneText() *PasswordChangeDoneScreenText {
	if x != nil {
		return x.PasswordChangeDoneText
	}
	return nil
}

func (x *LoginCustomText) GetPasswordResetDoneText() *PasswordResetDoneScreenText {
	if x != nil {
		return x.PasswordResetDoneText
	}
	return nil
}

func (x *LoginCustomText) GetRegistrationOptionText() *RegistrationOptionScreenText {
	if x != nil {
		return x.RegistrationOptionText
	}
	return nil
}

func (x *LoginCustomText) GetRegistrationUserText() *RegistrationUserScreenText {
	if x != nil {
		return x.RegistrationUserText
	}
	return nil
}

func (x *LoginCustomText) GetRegistrationOrgText() *RegistrationOrgScreenText {
	if x != nil {
		return x.RegistrationOrgText
	}
	return nil
}

func (x *LoginCustomText) GetLinkingUserDoneText() *LinkingUserDoneScreenText {
	if x != nil {
		return x.LinkingUserDoneText
	}
	return nil
}

func (x *LoginCustomText) GetExternalUserNotFoundText() *ExternalUserNotFoundScreenText {
	if x != nil {
		return x.ExternalUserNotFoundText
	}
	return nil
}

func (x *LoginCustomText) GetSuccessLoginText() *SuccessLoginScreenText {
	if x != nil {
		return x.SuccessLoginText
	}
	return nil
}

func (x *LoginCustomText) GetLogoutText() *LogoutDoneScreenText {
	if x != nil {
		return x.LogoutText
	}
	return nil
}

func (x *LoginCustomText) GetFooterText() *FooterText {
	if x != nil {
		return x.FooterText
	}
	return nil
}

func (x *LoginCustomText) GetPasswordlessPromptText() *PasswordlessPromptScreenText {
	if x != nil {
		return x.PasswordlessPromptText
	}
	return nil
}

func (x *LoginCustomText) GetPasswordlessRegistrationText() *PasswordlessRegistrationScreenText {
	if x != nil {
		return x.PasswordlessRegistrationText
	}
	return nil
}

func (x *LoginCustomText) GetPasswordlessRegistrationDoneText() *PasswordlessRegistrationDoneScreenText {
	if x != nil {
		return x.PasswordlessRegistrationDoneText
	}
	return nil
}

func (x *LoginCustomText) GetExternalRegistrationUserOverviewText() *ExternalRegistrationUserOverviewScreenText {
	if x != nil {
		return x.ExternalRegistrationUserOverviewText
	}
	return nil
}

func (x *LoginCustomText) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

// Deprecated: Marked as deprecated in zitadel/text.proto.
func (x *LoginCustomText) GetLinkingUserPromptText() *LinkingUserPromptScreenText {
	if x != nil {
		return x.LinkingUserPromptText
	}
	return nil
}

type SelectAccountScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                     string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description               string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	TitleLinkingProcess       string `protobuf:"bytes,3,opt,name=title_linking_process,json=titleLinkingProcess,proto3" json:"title_linking_process,omitempty"`
	DescriptionLinkingProcess string `protobuf:"bytes,4,opt,name=description_linking_process,json=descriptionLinkingProcess,proto3" json:"description_linking_process,omitempty"`
	OtherUser                 string `protobuf:"bytes,5,opt,name=other_user,json=otherUser,proto3" json:"other_user,omitempty"`
	SessionStateActive        string `protobuf:"bytes,6,opt,name=session_state_active,json=sessionStateActive,proto3" json:"session_state_active,omitempty"`
	SessionStateInactive      string `protobuf:"bytes,7,opt,name=session_state_inactive,json=sessionStateInactive,proto3" json:"session_state_inactive,omitempty"`
	UserMustBeMemberOfOrg     string `protobuf:"bytes,8,opt,name=user_must_be_member_of_org,json=userMustBeMemberOfOrg,proto3" json:"user_must_be_member_of_org,omitempty"`
}

func (x *SelectAccountScreenText) Reset() {
	*x = SelectAccountScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectAccountScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectAccountScreenText) ProtoMessage() {}

func (x *SelectAccountScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectAccountScreenText.ProtoReflect.Descriptor instead.
func (*SelectAccountScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{2}
}

func (x *SelectAccountScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SelectAccountScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SelectAccountScreenText) GetTitleLinkingProcess() string {
	if x != nil {
		return x.TitleLinkingProcess
	}
	return ""
}

func (x *SelectAccountScreenText) GetDescriptionLinkingProcess() string {
	if x != nil {
		return x.DescriptionLinkingProcess
	}
	return ""
}

func (x *SelectAccountScreenText) GetOtherUser() string {
	if x != nil {
		return x.OtherUser
	}
	return ""
}

func (x *SelectAccountScreenText) GetSessionStateActive() string {
	if x != nil {
		return x.SessionStateActive
	}
	return ""
}

func (x *SelectAccountScreenText) GetSessionStateInactive() string {
	if x != nil {
		return x.SessionStateInactive
	}
	return ""
}

func (x *SelectAccountScreenText) GetUserMustBeMemberOfOrg() string {
	if x != nil {
		return x.UserMustBeMemberOfOrg
	}
	return ""
}

type LoginScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                     string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description               string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	TitleLinkingProcess       string `protobuf:"bytes,3,opt,name=title_linking_process,json=titleLinkingProcess,proto3" json:"title_linking_process,omitempty"`
	DescriptionLinkingProcess string `protobuf:"bytes,4,opt,name=description_linking_process,json=descriptionLinkingProcess,proto3" json:"description_linking_process,omitempty"`
	UserMustBeMemberOfOrg     string `protobuf:"bytes,5,opt,name=user_must_be_member_of_org,json=userMustBeMemberOfOrg,proto3" json:"user_must_be_member_of_org,omitempty"`
	LoginNameLabel            string `protobuf:"bytes,6,opt,name=login_name_label,json=loginNameLabel,proto3" json:"login_name_label,omitempty"`
	RegisterButtonText        string `protobuf:"bytes,7,opt,name=register_button_text,json=registerButtonText,proto3" json:"register_button_text,omitempty"`
	NextButtonText            string `protobuf:"bytes,8,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
	ExternalUserDescription   string `protobuf:"bytes,9,opt,name=external_user_description,json=externalUserDescription,proto3" json:"external_user_description,omitempty"`
	UserNamePlaceholder       string `protobuf:"bytes,10,opt,name=user_name_placeholder,json=userNamePlaceholder,proto3" json:"user_name_placeholder,omitempty"`
	LoginNamePlaceholder      string `protobuf:"bytes,11,opt,name=login_name_placeholder,json=loginNamePlaceholder,proto3" json:"login_name_placeholder,omitempty"`
}

func (x *LoginScreenText) Reset() {
	*x = LoginScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginScreenText) ProtoMessage() {}

func (x *LoginScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginScreenText.ProtoReflect.Descriptor instead.
func (*LoginScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{3}
}

func (x *LoginScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *LoginScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LoginScreenText) GetTitleLinkingProcess() string {
	if x != nil {
		return x.TitleLinkingProcess
	}
	return ""
}

func (x *LoginScreenText) GetDescriptionLinkingProcess() string {
	if x != nil {
		return x.DescriptionLinkingProcess
	}
	return ""
}

func (x *LoginScreenText) GetUserMustBeMemberOfOrg() string {
	if x != nil {
		return x.UserMustBeMemberOfOrg
	}
	return ""
}

func (x *LoginScreenText) GetLoginNameLabel() string {
	if x != nil {
		return x.LoginNameLabel
	}
	return ""
}

func (x *LoginScreenText) GetRegisterButtonText() string {
	if x != nil {
		return x.RegisterButtonText
	}
	return ""
}

func (x *LoginScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

func (x *LoginScreenText) GetExternalUserDescription() string {
	if x != nil {
		return x.ExternalUserDescription
	}
	return ""
}

func (x *LoginScreenText) GetUserNamePlaceholder() string {
	if x != nil {
		return x.UserNamePlaceholder
	}
	return ""
}

func (x *LoginScreenText) GetLoginNamePlaceholder() string {
	if x != nil {
		return x.LoginNamePlaceholder
	}
	return ""
}

type PasswordScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title          string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description    string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	PasswordLabel  string `protobuf:"bytes,3,opt,name=password_label,json=passwordLabel,proto3" json:"password_label,omitempty"`
	ResetLinkText  string `protobuf:"bytes,4,opt,name=reset_link_text,json=resetLinkText,proto3" json:"reset_link_text,omitempty"`
	BackButtonText string `protobuf:"bytes,5,opt,name=back_button_text,json=backButtonText,proto3" json:"back_button_text,omitempty"`
	NextButtonText string `protobuf:"bytes,6,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
	MinLength      string `protobuf:"bytes,7,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"`
	HasUppercase   string `protobuf:"bytes,8,opt,name=has_uppercase,json=hasUppercase,proto3" json:"has_uppercase,omitempty"`
	HasLowercase   string `protobuf:"bytes,9,opt,name=has_lowercase,json=hasLowercase,proto3" json:"has_lowercase,omitempty"`
	HasNumber      string `protobuf:"bytes,10,opt,name=has_number,json=hasNumber,proto3" json:"has_number,omitempty"`
	HasSymbol      string `protobuf:"bytes,11,opt,name=has_symbol,json=hasSymbol,proto3" json:"has_symbol,omitempty"`
	Confirmation   string `protobuf:"bytes,12,opt,name=confirmation,proto3" json:"confirmation,omitempty"`
}

func (x *PasswordScreenText) Reset() {
	*x = PasswordScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordScreenText) ProtoMessage() {}

func (x *PasswordScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordScreenText.ProtoReflect.Descriptor instead.
func (*PasswordScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{4}
}

func (x *PasswordScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PasswordScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PasswordScreenText) GetPasswordLabel() string {
	if x != nil {
		return x.PasswordLabel
	}
	return ""
}

func (x *PasswordScreenText) GetResetLinkText() string {
	if x != nil {
		return x.ResetLinkText
	}
	return ""
}

func (x *PasswordScreenText) GetBackButtonText() string {
	if x != nil {
		return x.BackButtonText
	}
	return ""
}

func (x *PasswordScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

func (x *PasswordScreenText) GetMinLength() string {
	if x != nil {
		return x.MinLength
	}
	return ""
}

func (x *PasswordScreenText) GetHasUppercase() string {
	if x != nil {
		return x.HasUppercase
	}
	return ""
}

func (x *PasswordScreenText) GetHasLowercase() string {
	if x != nil {
		return x.HasLowercase
	}
	return ""
}

func (x *PasswordScreenText) GetHasNumber() string {
	if x != nil {
		return x.HasNumber
	}
	return ""
}

func (x *PasswordScreenText) GetHasSymbol() string {
	if x != nil {
		return x.HasSymbol
	}
	return ""
}

func (x *PasswordScreenText) GetConfirmation() string {
	if x != nil {
		return x.Confirmation
	}
	return ""
}

type UsernameChangeScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title            string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description      string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	UsernameLabel    string `protobuf:"bytes,3,opt,name=username_label,json=usernameLabel,proto3" json:"username_label,omitempty"`
	CancelButtonText string `protobuf:"bytes,4,opt,name=cancel_button_text,json=cancelButtonText,proto3" json:"cancel_button_text,omitempty"`
	NextButtonText   string `protobuf:"bytes,5,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
}

func (x *UsernameChangeScreenText) Reset() {
	*x = UsernameChangeScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsernameChangeScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernameChangeScreenText) ProtoMessage() {}

func (x *UsernameChangeScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernameChangeScreenText.ProtoReflect.Descriptor instead.
func (*UsernameChangeScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{5}
}

func (x *UsernameChangeScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UsernameChangeScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UsernameChangeScreenText) GetUsernameLabel() string {
	if x != nil {
		return x.UsernameLabel
	}
	return ""
}

func (x *UsernameChangeScreenText) GetCancelButtonText() string {
	if x != nil {
		return x.CancelButtonText
	}
	return ""
}

func (x *UsernameChangeScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

type UsernameChangeDoneScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title          string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description    string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	NextButtonText string `protobuf:"bytes,3,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
}

func (x *UsernameChangeDoneScreenText) Reset() {
	*x = UsernameChangeDoneScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsernameChangeDoneScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernameChangeDoneScreenText) ProtoMessage() {}

func (x *UsernameChangeDoneScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernameChangeDoneScreenText.ProtoReflect.Descriptor instead.
func (*UsernameChangeDoneScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{6}
}

func (x *UsernameChangeDoneScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UsernameChangeDoneScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UsernameChangeDoneScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

type InitPasswordScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                   string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description             string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CodeLabel               string `protobuf:"bytes,3,opt,name=code_label,json=codeLabel,proto3" json:"code_label,omitempty"`
	NewPasswordLabel        string `protobuf:"bytes,4,opt,name=new_password_label,json=newPasswordLabel,proto3" json:"new_password_label,omitempty"`
	NewPasswordConfirmLabel string `protobuf:"bytes,5,opt,name=new_password_confirm_label,json=newPasswordConfirmLabel,proto3" json:"new_password_confirm_label,omitempty"`
	NextButtonText          string `protobuf:"bytes,6,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
	ResendButtonText        string `protobuf:"bytes,7,opt,name=resend_button_text,json=resendButtonText,proto3" json:"resend_button_text,omitempty"`
}

func (x *InitPasswordScreenText) Reset() {
	*x = InitPasswordScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitPasswordScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitPasswordScreenText) ProtoMessage() {}

func (x *InitPasswordScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitPasswordScreenText.ProtoReflect.Descriptor instead.
func (*InitPasswordScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{7}
}

func (x *InitPasswordScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *InitPasswordScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InitPasswordScreenText) GetCodeLabel() string {
	if x != nil {
		return x.CodeLabel
	}
	return ""
}

func (x *InitPasswordScreenText) GetNewPasswordLabel() string {
	if x != nil {
		return x.NewPasswordLabel
	}
	return ""
}

func (x *InitPasswordScreenText) GetNewPasswordConfirmLabel() string {
	if x != nil {
		return x.NewPasswordConfirmLabel
	}
	return ""
}

func (x *InitPasswordScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

func (x *InitPasswordScreenText) GetResendButtonText() string {
	if x != nil {
		return x.ResendButtonText
	}
	return ""
}

type InitPasswordDoneScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title            string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description      string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	NextButtonText   string `protobuf:"bytes,3,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
	CancelButtonText string `protobuf:"bytes,4,opt,name=cancel_button_text,json=cancelButtonText,proto3" json:"cancel_button_text,omitempty"`
}

func (x *InitPasswordDoneScreenText) Reset() {
	*x = InitPasswordDoneScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitPasswordDoneScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitPasswordDoneScreenText) ProtoMessage() {}

func (x *InitPasswordDoneScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitPasswordDoneScreenText.ProtoReflect.Descriptor instead.
func (*InitPasswordDoneScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{8}
}

func (x *InitPasswordDoneScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *InitPasswordDoneScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InitPasswordDoneScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

func (x *InitPasswordDoneScreenText) GetCancelButtonText() string {
	if x != nil {
		return x.CancelButtonText
	}
	return ""
}

type EmailVerificationScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title            string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description      string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CodeLabel        string `protobuf:"bytes,3,opt,name=code_label,json=codeLabel,proto3" json:"code_label,omitempty"`
	NextButtonText   string `protobuf:"bytes,4,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
	ResendButtonText string `protobuf:"bytes,5,opt,name=resend_button_text,json=resendButtonText,proto3" json:"resend_button_text,omitempty"`
}

func (x *EmailVerificationScreenText) Reset() {
	*x = EmailVerificationScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailVerificationScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailVerificationScreenText) ProtoMessage() {}

func (x *EmailVerificationScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailVerificationScreenText.ProtoReflect.Descriptor instead.
func (*EmailVerificationScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{9}
}

func (x *EmailVerificationScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *EmailVerificationScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EmailVerificationScreenText) GetCodeLabel() string {
	if x != nil {
		return x.CodeLabel
	}
	return ""
}

func (x *EmailVerificationScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

func (x *EmailVerificationScreenText) GetResendButtonText() string {
	if x != nil {
		return x.ResendButtonText
	}
	return ""
}

type EmailVerificationDoneScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title            string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description      string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	NextButtonText   string `protobuf:"bytes,3,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
	CancelButtonText string `protobuf:"bytes,4,opt,name=cancel_button_text,json=cancelButtonText,proto3" json:"cancel_button_text,omitempty"`
	LoginButtonText  string `protobuf:"bytes,5,opt,name=login_button_text,json=loginButtonText,proto3" json:"login_button_text,omitempty"`
}

func (x *EmailVerificationDoneScreenText) Reset() {
	*x = EmailVerificationDoneScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailVerificationDoneScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailVerificationDoneScreenText) ProtoMessage() {}

func (x *EmailVerificationDoneScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailVerificationDoneScreenText.ProtoReflect.Descriptor instead.
func (*EmailVerificationDoneScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{10}
}

func (x *EmailVerificationDoneScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *EmailVerificationDoneScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EmailVerificationDoneScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

func (x *EmailVerificationDoneScreenText) GetCancelButtonText() string {
	if x != nil {
		return x.CancelButtonText
	}
	return ""
}

func (x *EmailVerificationDoneScreenText) GetLoginButtonText() string {
	if x != nil {
		return x.LoginButtonText
	}
	return ""
}

type InitializeUserScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                   string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description             string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CodeLabel               string `protobuf:"bytes,3,opt,name=code_label,json=codeLabel,proto3" json:"code_label,omitempty"`
	NewPasswordLabel        string `protobuf:"bytes,4,opt,name=new_password_label,json=newPasswordLabel,proto3" json:"new_password_label,omitempty"`
	NewPasswordConfirmLabel string `protobuf:"bytes,5,opt,name=new_password_confirm_label,json=newPasswordConfirmLabel,proto3" json:"new_password_confirm_label,omitempty"`
	ResendButtonText        string `protobuf:"bytes,6,opt,name=resend_button_text,json=resendButtonText,proto3" json:"resend_button_text,omitempty"`
	NextButtonText          string `protobuf:"bytes,7,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
}

func (x *InitializeUserScreenText) Reset() {
	*x = InitializeUserScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeUserScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeUserScreenText) ProtoMessage() {}

func (x *InitializeUserScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeUserScreenText.ProtoReflect.Descriptor instead.
func (*InitializeUserScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{11}
}

func (x *InitializeUserScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *InitializeUserScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InitializeUserScreenText) GetCodeLabel() string {
	if x != nil {
		return x.CodeLabel
	}
	return ""
}

func (x *InitializeUserScreenText) GetNewPasswordLabel() string {
	if x != nil {
		return x.NewPasswordLabel
	}
	return ""
}

func (x *InitializeUserScreenText) GetNewPasswordConfirmLabel() string {
	if x != nil {
		return x.NewPasswordConfirmLabel
	}
	return ""
}

func (x *InitializeUserScreenText) GetResendButtonText() string {
	if x != nil {
		return x.ResendButtonText
	}
	return ""
}

func (x *InitializeUserScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

type InitializeUserDoneScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title            string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description      string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CancelButtonText string `protobuf:"bytes,3,opt,name=cancel_button_text,json=cancelButtonText,proto3" json:"cancel_button_text,omitempty"`
	NextButtonText   string `protobuf:"bytes,4,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
}

func (x *InitializeUserDoneScreenText) Reset() {
	*x = InitializeUserDoneScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeUserDoneScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeUserDoneScreenText) ProtoMessage() {}

func (x *InitializeUserDoneScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeUserDoneScreenText.ProtoReflect.Descriptor instead.
func (*InitializeUserDoneScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{12}
}

func (x *InitializeUserDoneScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *InitializeUserDoneScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InitializeUserDoneScreenText) GetCancelButtonText() string {
	if x != nil {
		return x.CancelButtonText
	}
	return ""
}

func (x *InitializeUserDoneScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

type InitMFAPromptScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title          string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description    string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	OtpOption      string `protobuf:"bytes,3,opt,name=otp_option,json=otpOption,proto3" json:"otp_option,omitempty"`
	U2FOption      string `protobuf:"bytes,4,opt,name=u2f_option,json=u2fOption,proto3" json:"u2f_option,omitempty"`
	SkipButtonText string `protobuf:"bytes,5,opt,name=skip_button_text,json=skipButtonText,proto3" json:"skip_button_text,omitempty"`
	NextButtonText string `protobuf:"bytes,6,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
}

func (x *InitMFAPromptScreenText) Reset() {
	*x = InitMFAPromptScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitMFAPromptScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitMFAPromptScreenText) ProtoMessage() {}

func (x *InitMFAPromptScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitMFAPromptScreenText.ProtoReflect.Descriptor instead.
func (*InitMFAPromptScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{13}
}

func (x *InitMFAPromptScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *InitMFAPromptScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InitMFAPromptScreenText) GetOtpOption() string {
	if x != nil {
		return x.OtpOption
	}
	return ""
}

func (x *InitMFAPromptScreenText) GetU2FOption() string {
	if x != nil {
		return x.U2FOption
	}
	return ""
}

func (x *InitMFAPromptScreenText) GetSkipButtonText() string {
	if x != nil {
		return x.SkipButtonText
	}
	return ""
}

func (x *InitMFAPromptScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

type InitMFAOTPScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title            string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description      string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	DescriptionOtp   string `protobuf:"bytes,3,opt,name=description_otp,json=descriptionOtp,proto3" json:"description_otp,omitempty"`
	SecretLabel      string `protobuf:"bytes,4,opt,name=secret_label,json=secretLabel,proto3" json:"secret_label,omitempty"`
	CodeLabel        string `protobuf:"bytes,5,opt,name=code_label,json=codeLabel,proto3" json:"code_label,omitempty"`
	NextButtonText   string `protobuf:"bytes,6,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
	CancelButtonText string `protobuf:"bytes,7,opt,name=cancel_button_text,json=cancelButtonText,proto3" json:"cancel_button_text,omitempty"`
}

func (x *InitMFAOTPScreenText) Reset() {
	*x = InitMFAOTPScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitMFAOTPScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitMFAOTPScreenText) ProtoMessage() {}

func (x *InitMFAOTPScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitMFAOTPScreenText.ProtoReflect.Descriptor instead.
func (*InitMFAOTPScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{14}
}

func (x *InitMFAOTPScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *InitMFAOTPScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InitMFAOTPScreenText) GetDescriptionOtp() string {
	if x != nil {
		return x.DescriptionOtp
	}
	return ""
}

func (x *InitMFAOTPScreenText) GetSecretLabel() string {
	if x != nil {
		return x.SecretLabel
	}
	return ""
}

func (x *InitMFAOTPScreenText) GetCodeLabel() string {
	if x != nil {
		return x.CodeLabel
	}
	return ""
}

func (x *InitMFAOTPScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

func (x *InitMFAOTPScreenText) GetCancelButtonText() string {
	if x != nil {
		return x.CancelButtonText
	}
	return ""
}

type InitMFAU2FScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                   string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description             string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	TokenNameLabel          string `protobuf:"bytes,3,opt,name=token_name_label,json=tokenNameLabel,proto3" json:"token_name_label,omitempty"`
	NotSupported            string `protobuf:"bytes,4,opt,name=not_supported,json=notSupported,proto3" json:"not_supported,omitempty"`
	RegisterTokenButtonText string `protobuf:"bytes,5,opt,name=register_token_button_text,json=registerTokenButtonText,proto3" json:"register_token_button_text,omitempty"`
	ErrorRetry              string `protobuf:"bytes,6,opt,name=error_retry,json=errorRetry,proto3" json:"error_retry,omitempty"`
}

func (x *InitMFAU2FScreenText) Reset() {
	*x = InitMFAU2FScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitMFAU2FScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitMFAU2FScreenText) ProtoMessage() {}

func (x *InitMFAU2FScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitMFAU2FScreenText.ProtoReflect.Descriptor instead.
func (*InitMFAU2FScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{15}
}

func (x *InitMFAU2FScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *InitMFAU2FScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InitMFAU2FScreenText) GetTokenNameLabel() string {
	if x != nil {
		return x.TokenNameLabel
	}
	return ""
}

func (x *InitMFAU2FScreenText) GetNotSupported() string {
	if x != nil {
		return x.NotSupported
	}
	return ""
}

func (x *InitMFAU2FScreenText) GetRegisterTokenButtonText() string {
	if x != nil {
		return x.RegisterTokenButtonText
	}
	return ""
}

func (x *InitMFAU2FScreenText) GetErrorRetry() string {
	if x != nil {
		return x.ErrorRetry
	}
	return ""
}

type InitMFADoneScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title            string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description      string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CancelButtonText string `protobuf:"bytes,3,opt,name=cancel_button_text,json=cancelButtonText,proto3" json:"cancel_button_text,omitempty"`
	NextButtonText   string `protobuf:"bytes,4,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
}

func (x *InitMFADoneScreenText) Reset() {
	*x = InitMFADoneScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitMFADoneScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitMFADoneScreenText) ProtoMessage() {}

func (x *InitMFADoneScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitMFADoneScreenText.ProtoReflect.Descriptor instead.
func (*InitMFADoneScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{16}
}

func (x *InitMFADoneScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *InitMFADoneScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InitMFADoneScreenText) GetCancelButtonText() string {
	if x != nil {
		return x.CancelButtonText
	}
	return ""
}

func (x *InitMFADoneScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

type MFAProvidersText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChooseOther string `protobuf:"bytes,1,opt,name=choose_other,json=chooseOther,proto3" json:"choose_other,omitempty"`
	Otp         string `protobuf:"bytes,2,opt,name=otp,proto3" json:"otp,omitempty"`
	U2F         string `protobuf:"bytes,3,opt,name=u2f,proto3" json:"u2f,omitempty"`
}

func (x *MFAProvidersText) Reset() {
	*x = MFAProvidersText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MFAProvidersText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MFAProvidersText) ProtoMessage() {}

func (x *MFAProvidersText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MFAProvidersText.ProtoReflect.Descriptor instead.
func (*MFAProvidersText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{17}
}

func (x *MFAProvidersText) GetChooseOther() string {
	if x != nil {
		return x.ChooseOther
	}
	return ""
}

func (x *MFAProvidersText) GetOtp() string {
	if x != nil {
		return x.Otp
	}
	return ""
}

func (x *MFAProvidersText) GetU2F() string {
	if x != nil {
		return x.U2F
	}
	return ""
}

type VerifyMFAOTPScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title          string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description    string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CodeLabel      string `protobuf:"bytes,3,opt,name=code_label,json=codeLabel,proto3" json:"code_label,omitempty"`
	NextButtonText string `protobuf:"bytes,4,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
}

func (x *VerifyMFAOTPScreenText) Reset() {
	*x = VerifyMFAOTPScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyMFAOTPScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyMFAOTPScreenText) ProtoMessage() {}

func (x *VerifyMFAOTPScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyMFAOTPScreenText.ProtoReflect.Descriptor instead.
func (*VerifyMFAOTPScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{18}
}

func (x *VerifyMFAOTPScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VerifyMFAOTPScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VerifyMFAOTPScreenText) GetCodeLabel() string {
	if x != nil {
		return x.CodeLabel
	}
	return ""
}

func (x *VerifyMFAOTPScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

type VerifyMFAU2FScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title             string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description       string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ValidateTokenText string `protobuf:"bytes,3,opt,name=validate_token_text,json=validateTokenText,proto3" json:"validate_token_text,omitempty"`
	NotSupported      string `protobuf:"bytes,4,opt,name=not_supported,json=notSupported,proto3" json:"not_supported,omitempty"`
	ErrorRetry        string `protobuf:"bytes,5,opt,name=error_retry,json=errorRetry,proto3" json:"error_retry,omitempty"`
}

func (x *VerifyMFAU2FScreenText) Reset() {
	*x = VerifyMFAU2FScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyMFAU2FScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyMFAU2FScreenText) ProtoMessage() {}

func (x *VerifyMFAU2FScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyMFAU2FScreenText.ProtoReflect.Descriptor instead.
func (*VerifyMFAU2FScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{19}
}

func (x *VerifyMFAU2FScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VerifyMFAU2FScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VerifyMFAU2FScreenText) GetValidateTokenText() string {
	if x != nil {
		return x.ValidateTokenText
	}
	return ""
}

func (x *VerifyMFAU2FScreenText) GetNotSupported() string {
	if x != nil {
		return x.NotSupported
	}
	return ""
}

func (x *VerifyMFAU2FScreenText) GetErrorRetry() string {
	if x != nil {
		return x.ErrorRetry
	}
	return ""
}

type PasswordlessScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                   string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description             string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	LoginWithPwButtonText   string `protobuf:"bytes,3,opt,name=login_with_pw_button_text,json=loginWithPwButtonText,proto3" json:"login_with_pw_button_text,omitempty"`
	ValidateTokenButtonText string `protobuf:"bytes,4,opt,name=validate_token_button_text,json=validateTokenButtonText,proto3" json:"validate_token_button_text,omitempty"`
	NotSupported            string `protobuf:"bytes,5,opt,name=not_supported,json=notSupported,proto3" json:"not_supported,omitempty"`
	ErrorRetry              string `protobuf:"bytes,6,opt,name=error_retry,json=errorRetry,proto3" json:"error_retry,omitempty"`
}

func (x *PasswordlessScreenText) Reset() {
	*x = PasswordlessScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordlessScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordlessScreenText) ProtoMessage() {}

func (x *PasswordlessScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordlessScreenText.ProtoReflect.Descriptor instead.
func (*PasswordlessScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{20}
}

func (x *PasswordlessScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PasswordlessScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PasswordlessScreenText) GetLoginWithPwButtonText() string {
	if x != nil {
		return x.LoginWithPwButtonText
	}
	return ""
}

func (x *PasswordlessScreenText) GetValidateTokenButtonText() string {
	if x != nil {
		return x.ValidateTokenButtonText
	}
	return ""
}

func (x *PasswordlessScreenText) GetNotSupported() string {
	if x != nil {
		return x.NotSupported
	}
	return ""
}

func (x *PasswordlessScreenText) GetErrorRetry() string {
	if x != nil {
		return x.ErrorRetry
	}
	return ""
}

type PasswordChangeScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                   string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description             string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	OldPasswordLabel        string `protobuf:"bytes,3,opt,name=old_password_label,json=oldPasswordLabel,proto3" json:"old_password_label,omitempty"`
	NewPasswordLabel        string `protobuf:"bytes,4,opt,name=new_password_label,json=newPasswordLabel,proto3" json:"new_password_label,omitempty"`
	NewPasswordConfirmLabel string `protobuf:"bytes,5,opt,name=new_password_confirm_label,json=newPasswordConfirmLabel,proto3" json:"new_password_confirm_label,omitempty"`
	CancelButtonText        string `protobuf:"bytes,6,opt,name=cancel_button_text,json=cancelButtonText,proto3" json:"cancel_button_text,omitempty"`
	NextButtonText          string `protobuf:"bytes,7,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
	ExpiredDescription      string `protobuf:"bytes,8,opt,name=expired_description,json=expiredDescription,proto3" json:"expired_description,omitempty"`
}

func (x *PasswordChangeScreenText) Reset() {
	*x = PasswordChangeScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordChangeScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordChangeScreenText) ProtoMessage() {}

func (x *PasswordChangeScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordChangeScreenText.ProtoReflect.Descriptor instead.
func (*PasswordChangeScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{21}
}

func (x *PasswordChangeScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PasswordChangeScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PasswordChangeScreenText) GetOldPasswordLabel() string {
	if x != nil {
		return x.OldPasswordLabel
	}
	return ""
}

func (x *PasswordChangeScreenText) GetNewPasswordLabel() string {
	if x != nil {
		return x.NewPasswordLabel
	}
	return ""
}

func (x *PasswordChangeScreenText) GetNewPasswordConfirmLabel() string {
	if x != nil {
		return x.NewPasswordConfirmLabel
	}
	return ""
}

func (x *PasswordChangeScreenText) GetCancelButtonText() string {
	if x != nil {
		return x.CancelButtonText
	}
	return ""
}

func (x *PasswordChangeScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

func (x *PasswordChangeScreenText) GetExpiredDescription() string {
	if x != nil {
		return x.ExpiredDescription
	}
	return ""
}

type PasswordChangeDoneScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title          string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description    string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	NextButtonText string `protobuf:"bytes,3,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
}

func (x *PasswordChangeDoneScreenText) Reset() {
	*x = PasswordChangeDoneScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordChangeDoneScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordChangeDoneScreenText) ProtoMessage() {}

func (x *PasswordChangeDoneScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordChangeDoneScreenText.ProtoReflect.Descriptor instead.
func (*PasswordChangeDoneScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{22}
}

func (x *PasswordChangeDoneScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PasswordChangeDoneScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PasswordChangeDoneScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

type PasswordResetDoneScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title          string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description    string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	NextButtonText string `protobuf:"bytes,3,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
}

func (x *PasswordResetDoneScreenText) Reset() {
	*x = PasswordResetDoneScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordResetDoneScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordResetDoneScreenText) ProtoMessage() {}

func (x *PasswordResetDoneScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordResetDoneScreenText.ProtoReflect.Descriptor instead.
func (*PasswordResetDoneScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{23}
}

func (x *PasswordResetDoneScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PasswordResetDoneScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PasswordResetDoneScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

type RegistrationOptionScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                    string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description              string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	UserNameButtonText       string `protobuf:"bytes,3,opt,name=user_name_button_text,json=userNameButtonText,proto3" json:"user_name_button_text,omitempty"`
	ExternalLoginDescription string `protobuf:"bytes,4,opt,name=external_login_description,json=externalLoginDescription,proto3" json:"external_login_description,omitempty"`
	LoginButtonText          string `protobuf:"bytes,5,opt,name=login_button_text,json=loginButtonText,proto3" json:"login_button_text,omitempty"`
}

func (x *RegistrationOptionScreenText) Reset() {
	*x = RegistrationOptionScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationOptionScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationOptionScreenText) ProtoMessage() {}

func (x *RegistrationOptionScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationOptionScreenText.ProtoReflect.Descriptor instead.
func (*RegistrationOptionScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{24}
}

func (x *RegistrationOptionScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RegistrationOptionScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RegistrationOptionScreenText) GetUserNameButtonText() string {
	if x != nil {
		return x.UserNameButtonText
	}
	return ""
}

func (x *RegistrationOptionScreenText) GetExternalLoginDescription() string {
	if x != nil {
		return x.ExternalLoginDescription
	}
	return ""
}

func (x *RegistrationOptionScreenText) GetLoginButtonText() string {
	if x != nil {
		return x.LoginButtonText
	}
	return ""
}

type RegistrationUserScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                  string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description            string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	DescriptionOrgRegister string `protobuf:"bytes,3,opt,name=description_org_register,json=descriptionOrgRegister,proto3" json:"description_org_register,omitempty"`
	FirstnameLabel         string `protobuf:"bytes,4,opt,name=firstname_label,json=firstnameLabel,proto3" json:"firstname_label,omitempty"`
	LastnameLabel          string `protobuf:"bytes,5,opt,name=lastname_label,json=lastnameLabel,proto3" json:"lastname_label,omitempty"`
	EmailLabel             string `protobuf:"bytes,6,opt,name=email_label,json=emailLabel,proto3" json:"email_label,omitempty"`
	UsernameLabel          string `protobuf:"bytes,7,opt,name=username_label,json=usernameLabel,proto3" json:"username_label,omitempty"`
	LanguageLabel          string `protobuf:"bytes,8,opt,name=language_label,json=languageLabel,proto3" json:"language_label,omitempty"`
	GenderLabel            string `protobuf:"bytes,9,opt,name=gender_label,json=genderLabel,proto3" json:"gender_label,omitempty"`
	PasswordLabel          string `protobuf:"bytes,10,opt,name=password_label,json=passwordLabel,proto3" json:"password_label,omitempty"`
	PasswordConfirmLabel   string `protobuf:"bytes,11,opt,name=password_confirm_label,json=passwordConfirmLabel,proto3" json:"password_confirm_label,omitempty"`
	TosAndPrivacyLabel     string `protobuf:"bytes,12,opt,name=tos_and_privacy_label,json=tosAndPrivacyLabel,proto3" json:"tos_and_privacy_label,omitempty"`
	TosConfirm             string `protobuf:"bytes,13,opt,name=tos_confirm,json=tosConfirm,proto3" json:"tos_confirm,omitempty"`
	TosLinkText            string `protobuf:"bytes,15,opt,name=tos_link_text,json=tosLinkText,proto3" json:"tos_link_text,omitempty"`
	PrivacyConfirm         string `protobuf:"bytes,16,opt,name=privacy_confirm,json=privacyConfirm,proto3" json:"privacy_confirm,omitempty"`
	PrivacyLinkText        string `protobuf:"bytes,18,opt,name=privacy_link_text,json=privacyLinkText,proto3" json:"privacy_link_text,omitempty"`
	NextButtonText         string `protobuf:"bytes,20,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
	BackButtonText         string `protobuf:"bytes,21,opt,name=back_button_text,json=backButtonText,proto3" json:"back_button_text,omitempty"`
}

func (x *RegistrationUserScreenText) Reset() {
	*x = RegistrationUserScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationUserScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationUserScreenText) ProtoMessage() {}

func (x *RegistrationUserScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationUserScreenText.ProtoReflect.Descriptor instead.
func (*RegistrationUserScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{25}
}

func (x *RegistrationUserScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RegistrationUserScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RegistrationUserScreenText) GetDescriptionOrgRegister() string {
	if x != nil {
		return x.DescriptionOrgRegister
	}
	return ""
}

func (x *RegistrationUserScreenText) GetFirstnameLabel() string {
	if x != nil {
		return x.FirstnameLabel
	}
	return ""
}

func (x *RegistrationUserScreenText) GetLastnameLabel() string {
	if x != nil {
		return x.LastnameLabel
	}
	return ""
}

func (x *RegistrationUserScreenText) GetEmailLabel() string {
	if x != nil {
		return x.EmailLabel
	}
	return ""
}

func (x *RegistrationUserScreenText) GetUsernameLabel() string {
	if x != nil {
		return x.UsernameLabel
	}
	return ""
}

func (x *RegistrationUserScreenText) GetLanguageLabel() string {
	if x != nil {
		return x.LanguageLabel
	}
	return ""
}

func (x *RegistrationUserScreenText) GetGenderLabel() string {
	if x != nil {
		return x.GenderLabel
	}
	return ""
}

func (x *RegistrationUserScreenText) GetPasswordLabel() string {
	if x != nil {
		return x.PasswordLabel
	}
	return ""
}

func (x *RegistrationUserScreenText) GetPasswordConfirmLabel() string {
	if x != nil {
		return x.PasswordConfirmLabel
	}
	return ""
}

func (x *RegistrationUserScreenText) GetTosAndPrivacyLabel() string {
	if x != nil {
		return x.TosAndPrivacyLabel
	}
	return ""
}

func (x *RegistrationUserScreenText) GetTosConfirm() string {
	if x != nil {
		return x.TosConfirm
	}
	return ""
}

func (x *RegistrationUserScreenText) GetTosLinkText() string {
	if x != nil {
		return x.TosLinkText
	}
	return ""
}

func (x *RegistrationUserScreenText) GetPrivacyConfirm() string {
	if x != nil {
		return x.PrivacyConfirm
	}
	return ""
}

func (x *RegistrationUserScreenText) GetPrivacyLinkText() string {
	if x != nil {
		return x.PrivacyLinkText
	}
	return ""
}

func (x *RegistrationUserScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

func (x *RegistrationUserScreenText) GetBackButtonText() string {
	if x != nil {
		return x.BackButtonText
	}
	return ""
}

type ExternalRegistrationUserOverviewScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title              string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description        string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	EmailLabel         string `protobuf:"bytes,3,opt,name=email_label,json=emailLabel,proto3" json:"email_label,omitempty"`
	UsernameLabel      string `protobuf:"bytes,4,opt,name=username_label,json=usernameLabel,proto3" json:"username_label,omitempty"`
	FirstnameLabel     string `protobuf:"bytes,5,opt,name=firstname_label,json=firstnameLabel,proto3" json:"firstname_label,omitempty"`
	LastnameLabel      string `protobuf:"bytes,6,opt,name=lastname_label,json=lastnameLabel,proto3" json:"lastname_label,omitempty"`
	NicknameLabel      string `protobuf:"bytes,7,opt,name=nickname_label,json=nicknameLabel,proto3" json:"nickname_label,omitempty"`
	LanguageLabel      string `protobuf:"bytes,8,opt,name=language_label,json=languageLabel,proto3" json:"language_label,omitempty"`
	PhoneLabel         string `protobuf:"bytes,9,opt,name=phone_label,json=phoneLabel,proto3" json:"phone_label,omitempty"`
	TosAndPrivacyLabel string `protobuf:"bytes,10,opt,name=tos_and_privacy_label,json=tosAndPrivacyLabel,proto3" json:"tos_and_privacy_label,omitempty"`
	TosConfirm         string `protobuf:"bytes,11,opt,name=tos_confirm,json=tosConfirm,proto3" json:"tos_confirm,omitempty"`
	TosLinkText        string `protobuf:"bytes,12,opt,name=tos_link_text,json=tosLinkText,proto3" json:"tos_link_text,omitempty"`
	PrivacyLinkText    string `protobuf:"bytes,14,opt,name=privacy_link_text,json=privacyLinkText,proto3" json:"privacy_link_text,omitempty"`
	BackButtonText     string `protobuf:"bytes,15,opt,name=back_button_text,json=backButtonText,proto3" json:"back_button_text,omitempty"`
	NextButtonText     string `protobuf:"bytes,16,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
	PrivacyConfirm     string `protobuf:"bytes,17,opt,name=privacy_confirm,json=privacyConfirm,proto3" json:"privacy_confirm,omitempty"`
}

func (x *ExternalRegistrationUserOverviewScreenText) Reset() {
	*x = ExternalRegistrationUserOverviewScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalRegistrationUserOverviewScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalRegistrationUserOverviewScreenText) ProtoMessage() {}

func (x *ExternalRegistrationUserOverviewScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalRegistrationUserOverviewScreenText.ProtoReflect.Descriptor instead.
func (*ExternalRegistrationUserOverviewScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{26}
}

func (x *ExternalRegistrationUserOverviewScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ExternalRegistrationUserOverviewScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExternalRegistrationUserOverviewScreenText) GetEmailLabel() string {
	if x != nil {
		return x.EmailLabel
	}
	return ""
}

func (x *ExternalRegistrationUserOverviewScreenText) GetUsernameLabel() string {
	if x != nil {
		return x.UsernameLabel
	}
	return ""
}

func (x *ExternalRegistrationUserOverviewScreenText) GetFirstnameLabel() string {
	if x != nil {
		return x.FirstnameLabel
	}
	return ""
}

func (x *ExternalRegistrationUserOverviewScreenText) GetLastnameLabel() string {
	if x != nil {
		return x.LastnameLabel
	}
	return ""
}

func (x *ExternalRegistrationUserOverviewScreenText) GetNicknameLabel() string {
	if x != nil {
		return x.NicknameLabel
	}
	return ""
}

func (x *ExternalRegistrationUserOverviewScreenText) GetLanguageLabel() string {
	if x != nil {
		return x.LanguageLabel
	}
	return ""
}

func (x *ExternalRegistrationUserOverviewScreenText) GetPhoneLabel() string {
	if x != nil {
		return x.PhoneLabel
	}
	return ""
}

func (x *ExternalRegistrationUserOverviewScreenText) GetTosAndPrivacyLabel() string {
	if x != nil {
		return x.TosAndPrivacyLabel
	}
	return ""
}

func (x *ExternalRegistrationUserOverviewScreenText) GetTosConfirm() string {
	if x != nil {
		return x.TosConfirm
	}
	return ""
}

func (x *ExternalRegistrationUserOverviewScreenText) GetTosLinkText() string {
	if x != nil {
		return x.TosLinkText
	}
	return ""
}

func (x *ExternalRegistrationUserOverviewScreenText) GetPrivacyLinkText() string {
	if x != nil {
		return x.PrivacyLinkText
	}
	return ""
}

func (x *ExternalRegistrationUserOverviewScreenText) GetBackButtonText() string {
	if x != nil {
		return x.BackButtonText
	}
	return ""
}

func (x *ExternalRegistrationUserOverviewScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

func (x *ExternalRegistrationUserOverviewScreenText) GetPrivacyConfirm() string {
	if x != nil {
		return x.PrivacyConfirm
	}
	return ""
}

type RegistrationOrgScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description          string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	OrgnameLabel         string `protobuf:"bytes,3,opt,name=orgname_label,json=orgnameLabel,proto3" json:"orgname_label,omitempty"`
	FirstnameLabel       string `protobuf:"bytes,4,opt,name=firstname_label,json=firstnameLabel,proto3" json:"firstname_label,omitempty"`
	LastnameLabel        string `protobuf:"bytes,5,opt,name=lastname_label,json=lastnameLabel,proto3" json:"lastname_label,omitempty"`
	UsernameLabel        string `protobuf:"bytes,6,opt,name=username_label,json=usernameLabel,proto3" json:"username_label,omitempty"`
	EmailLabel           string `protobuf:"bytes,7,opt,name=email_label,json=emailLabel,proto3" json:"email_label,omitempty"`
	PasswordLabel        string `protobuf:"bytes,9,opt,name=password_label,json=passwordLabel,proto3" json:"password_label,omitempty"`
	PasswordConfirmLabel string `protobuf:"bytes,10,opt,name=password_confirm_label,json=passwordConfirmLabel,proto3" json:"password_confirm_label,omitempty"`
	TosAndPrivacyLabel   string `protobuf:"bytes,11,opt,name=tos_and_privacy_label,json=tosAndPrivacyLabel,proto3" json:"tos_and_privacy_label,omitempty"`
	TosConfirm           string `protobuf:"bytes,12,opt,name=tos_confirm,json=tosConfirm,proto3" json:"tos_confirm,omitempty"`
	TosLinkText          string `protobuf:"bytes,14,opt,name=tos_link_text,json=tosLinkText,proto3" json:"tos_link_text,omitempty"`
	PrivacyConfirm       string `protobuf:"bytes,15,opt,name=privacy_confirm,json=privacyConfirm,proto3" json:"privacy_confirm,omitempty"`
	PrivacyLinkText      string `protobuf:"bytes,17,opt,name=privacy_link_text,json=privacyLinkText,proto3" json:"privacy_link_text,omitempty"`
	SaveButtonText       string `protobuf:"bytes,19,opt,name=save_button_text,json=saveButtonText,proto3" json:"save_button_text,omitempty"`
}

func (x *RegistrationOrgScreenText) Reset() {
	*x = RegistrationOrgScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationOrgScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationOrgScreenText) ProtoMessage() {}

func (x *RegistrationOrgScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationOrgScreenText.ProtoReflect.Descriptor instead.
func (*RegistrationOrgScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{27}
}

func (x *RegistrationOrgScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RegistrationOrgScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RegistrationOrgScreenText) GetOrgnameLabel() string {
	if x != nil {
		return x.OrgnameLabel
	}
	return ""
}

func (x *RegistrationOrgScreenText) GetFirstnameLabel() string {
	if x != nil {
		return x.FirstnameLabel
	}
	return ""
}

func (x *RegistrationOrgScreenText) GetLastnameLabel() string {
	if x != nil {
		return x.LastnameLabel
	}
	return ""
}

func (x *RegistrationOrgScreenText) GetUsernameLabel() string {
	if x != nil {
		return x.UsernameLabel
	}
	return ""
}

func (x *RegistrationOrgScreenText) GetEmailLabel() string {
	if x != nil {
		return x.EmailLabel
	}
	return ""
}

func (x *RegistrationOrgScreenText) GetPasswordLabel() string {
	if x != nil {
		return x.PasswordLabel
	}
	return ""
}

func (x *RegistrationOrgScreenText) GetPasswordConfirmLabel() string {
	if x != nil {
		return x.PasswordConfirmLabel
	}
	return ""
}

func (x *RegistrationOrgScreenText) GetTosAndPrivacyLabel() string {
	if x != nil {
		return x.TosAndPrivacyLabel
	}
	return ""
}

func (x *RegistrationOrgScreenText) GetTosConfirm() string {
	if x != nil {
		return x.TosConfirm
	}
	return ""
}

func (x *RegistrationOrgScreenText) GetTosLinkText() string {
	if x != nil {
		return x.TosLinkText
	}
	return ""
}

func (x *RegistrationOrgScreenText) GetPrivacyConfirm() string {
	if x != nil {
		return x.PrivacyConfirm
	}
	return ""
}

func (x *RegistrationOrgScreenText) GetPrivacyLinkText() string {
	if x != nil {
		return x.PrivacyLinkText
	}
	return ""
}

func (x *RegistrationOrgScreenText) GetSaveButtonText() string {
	if x != nil {
		return x.SaveButtonText
	}
	return ""
}

type LinkingUserPromptScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description     string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	LinkButtonText  string `protobuf:"bytes,3,opt,name=link_button_text,json=linkButtonText,proto3" json:"link_button_text,omitempty"`
	OtherButtonText string `protobuf:"bytes,4,opt,name=other_button_text,json=otherButtonText,proto3" json:"other_button_text,omitempty"`
}

func (x *LinkingUserPromptScreenText) Reset() {
	*x = LinkingUserPromptScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkingUserPromptScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkingUserPromptScreenText) ProtoMessage() {}

func (x *LinkingUserPromptScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkingUserPromptScreenText.ProtoReflect.Descriptor instead.
func (*LinkingUserPromptScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{28}
}

func (x *LinkingUserPromptScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *LinkingUserPromptScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LinkingUserPromptScreenText) GetLinkButtonText() string {
	if x != nil {
		return x.LinkButtonText
	}
	return ""
}

func (x *LinkingUserPromptScreenText) GetOtherButtonText() string {
	if x != nil {
		return x.OtherButtonText
	}
	return ""
}

type LinkingUserDoneScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title            string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description      string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CancelButtonText string `protobuf:"bytes,3,opt,name=cancel_button_text,json=cancelButtonText,proto3" json:"cancel_button_text,omitempty"`
	NextButtonText   string `protobuf:"bytes,4,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
}

func (x *LinkingUserDoneScreenText) Reset() {
	*x = LinkingUserDoneScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkingUserDoneScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkingUserDoneScreenText) ProtoMessage() {}

func (x *LinkingUserDoneScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkingUserDoneScreenText.ProtoReflect.Descriptor instead.
func (*LinkingUserDoneScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{29}
}

func (x *LinkingUserDoneScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *LinkingUserDoneScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LinkingUserDoneScreenText) GetCancelButtonText() string {
	if x != nil {
		return x.CancelButtonText
	}
	return ""
}

func (x *LinkingUserDoneScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

type ExternalUserNotFoundScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                  string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description            string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	LinkButtonText         string `protobuf:"bytes,3,opt,name=link_button_text,json=linkButtonText,proto3" json:"link_button_text,omitempty"`
	AutoRegisterButtonText string `protobuf:"bytes,4,opt,name=auto_register_button_text,json=autoRegisterButtonText,proto3" json:"auto_register_button_text,omitempty"`
	TosAndPrivacyLabel     string `protobuf:"bytes,5,opt,name=tos_and_privacy_label,json=tosAndPrivacyLabel,proto3" json:"tos_and_privacy_label,omitempty"`
	TosConfirm             string `protobuf:"bytes,6,opt,name=tos_confirm,json=tosConfirm,proto3" json:"tos_confirm,omitempty"`
	TosLinkText            string `protobuf:"bytes,7,opt,name=tos_link_text,json=tosLinkText,proto3" json:"tos_link_text,omitempty"`
	PrivacyLinkText        string `protobuf:"bytes,8,opt,name=privacy_link_text,json=privacyLinkText,proto3" json:"privacy_link_text,omitempty"`
	PrivacyConfirm         string `protobuf:"bytes,10,opt,name=privacy_confirm,json=privacyConfirm,proto3" json:"privacy_confirm,omitempty"`
}

func (x *ExternalUserNotFoundScreenText) Reset() {
	*x = ExternalUserNotFoundScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalUserNotFoundScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalUserNotFoundScreenText) ProtoMessage() {}

func (x *ExternalUserNotFoundScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalUserNotFoundScreenText.ProtoReflect.Descriptor instead.
func (*ExternalUserNotFoundScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{30}
}

func (x *ExternalUserNotFoundScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ExternalUserNotFoundScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExternalUserNotFoundScreenText) GetLinkButtonText() string {
	if x != nil {
		return x.LinkButtonText
	}
	return ""
}

func (x *ExternalUserNotFoundScreenText) GetAutoRegisterButtonText() string {
	if x != nil {
		return x.AutoRegisterButtonText
	}
	return ""
}

func (x *ExternalUserNotFoundScreenText) GetTosAndPrivacyLabel() string {
	if x != nil {
		return x.TosAndPrivacyLabel
	}
	return ""
}

func (x *ExternalUserNotFoundScreenText) GetTosConfirm() string {
	if x != nil {
		return x.TosConfirm
	}
	return ""
}

func (x *ExternalUserNotFoundScreenText) GetTosLinkText() string {
	if x != nil {
		return x.TosLinkText
	}
	return ""
}

func (x *ExternalUserNotFoundScreenText) GetPrivacyLinkText() string {
	if x != nil {
		return x.PrivacyLinkText
	}
	return ""
}

func (x *ExternalUserNotFoundScreenText) GetPrivacyConfirm() string {
	if x != nil {
		return x.PrivacyConfirm
	}
	return ""
}

type SuccessLoginScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Text to describe that auto-redirect should happen after successful login
	AutoRedirectDescription string `protobuf:"bytes,2,opt,name=auto_redirect_description,json=autoRedirectDescription,proto3" json:"auto_redirect_description,omitempty"`
	// Text to describe that the window can be closed after redirect
	RedirectedDescription string `protobuf:"bytes,3,opt,name=redirected_description,json=redirectedDescription,proto3" json:"redirected_description,omitempty"`
	NextButtonText        string `protobuf:"bytes,4,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
}

func (x *SuccessLoginScreenText) Reset() {
	*x = SuccessLoginScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuccessLoginScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuccessLoginScreenText) ProtoMessage() {}

func (x *SuccessLoginScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuccessLoginScreenText.ProtoReflect.Descriptor instead.
func (*SuccessLoginScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{31}
}

func (x *SuccessLoginScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SuccessLoginScreenText) GetAutoRedirectDescription() string {
	if x != nil {
		return x.AutoRedirectDescription
	}
	return ""
}

func (x *SuccessLoginScreenText) GetRedirectedDescription() string {
	if x != nil {
		return x.RedirectedDescription
	}
	return ""
}

func (x *SuccessLoginScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

type LogoutDoneScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description     string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	LoginButtonText string `protobuf:"bytes,3,opt,name=login_button_text,json=loginButtonText,proto3" json:"login_button_text,omitempty"`
}

func (x *LogoutDoneScreenText) Reset() {
	*x = LogoutDoneScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutDoneScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutDoneScreenText) ProtoMessage() {}

func (x *LogoutDoneScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutDoneScreenText.ProtoReflect.Descriptor instead.
func (*LogoutDoneScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{32}
}

func (x *LogoutDoneScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *LogoutDoneScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LogoutDoneScreenText) GetLoginButtonText() string {
	if x != nil {
		return x.LoginButtonText
	}
	return ""
}

type FooterText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tos           string `protobuf:"bytes,1,opt,name=tos,proto3" json:"tos,omitempty"`
	PrivacyPolicy string `protobuf:"bytes,3,opt,name=privacy_policy,json=privacyPolicy,proto3" json:"privacy_policy,omitempty"`
	Help          string `protobuf:"bytes,5,opt,name=help,proto3" json:"help,omitempty"`
	SupportEmail  string `protobuf:"bytes,7,opt,name=support_email,json=supportEmail,proto3" json:"support_email,omitempty"`
}

func (x *FooterText) Reset() {
	*x = FooterText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FooterText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FooterText) ProtoMessage() {}

func (x *FooterText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FooterText.ProtoReflect.Descriptor instead.
func (*FooterText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{33}
}

func (x *FooterText) GetTos() string {
	if x != nil {
		return x.Tos
	}
	return ""
}

func (x *FooterText) GetPrivacyPolicy() string {
	if x != nil {
		return x.PrivacyPolicy
	}
	return ""
}

func (x *FooterText) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *FooterText) GetSupportEmail() string {
	if x != nil {
		return x.SupportEmail
	}
	return ""
}

type PasswordlessPromptScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                  string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description            string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	DescriptionInit        string `protobuf:"bytes,3,opt,name=description_init,json=descriptionInit,proto3" json:"description_init,omitempty"`
	PasswordlessButtonText string `protobuf:"bytes,4,opt,name=passwordless_button_text,json=passwordlessButtonText,proto3" json:"passwordless_button_text,omitempty"`
	NextButtonText         string `protobuf:"bytes,5,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
	SkipButtonText         string `protobuf:"bytes,6,opt,name=skip_button_text,json=skipButtonText,proto3" json:"skip_button_text,omitempty"`
}

func (x *PasswordlessPromptScreenText) Reset() {
	*x = PasswordlessPromptScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordlessPromptScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordlessPromptScreenText) ProtoMessage() {}

func (x *PasswordlessPromptScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordlessPromptScreenText.ProtoReflect.Descriptor instead.
func (*PasswordlessPromptScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{34}
}

func (x *PasswordlessPromptScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PasswordlessPromptScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PasswordlessPromptScreenText) GetDescriptionInit() string {
	if x != nil {
		return x.DescriptionInit
	}
	return ""
}

func (x *PasswordlessPromptScreenText) GetPasswordlessButtonText() string {
	if x != nil {
		return x.PasswordlessButtonText
	}
	return ""
}

func (x *PasswordlessPromptScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

func (x *PasswordlessPromptScreenText) GetSkipButtonText() string {
	if x != nil {
		return x.SkipButtonText
	}
	return ""
}

type PasswordlessRegistrationScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                   string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description             string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	TokenNameLabel          string `protobuf:"bytes,3,opt,name=token_name_label,json=tokenNameLabel,proto3" json:"token_name_label,omitempty"`
	NotSupported            string `protobuf:"bytes,4,opt,name=not_supported,json=notSupported,proto3" json:"not_supported,omitempty"`
	RegisterTokenButtonText string `protobuf:"bytes,5,opt,name=register_token_button_text,json=registerTokenButtonText,proto3" json:"register_token_button_text,omitempty"`
	ErrorRetry              string `protobuf:"bytes,6,opt,name=error_retry,json=errorRetry,proto3" json:"error_retry,omitempty"`
}

func (x *PasswordlessRegistrationScreenText) Reset() {
	*x = PasswordlessRegistrationScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordlessRegistrationScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordlessRegistrationScreenText) ProtoMessage() {}

func (x *PasswordlessRegistrationScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordlessRegistrationScreenText.ProtoReflect.Descriptor instead.
func (*PasswordlessRegistrationScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{35}
}

func (x *PasswordlessRegistrationScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PasswordlessRegistrationScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PasswordlessRegistrationScreenText) GetTokenNameLabel() string {
	if x != nil {
		return x.TokenNameLabel
	}
	return ""
}

func (x *PasswordlessRegistrationScreenText) GetNotSupported() string {
	if x != nil {
		return x.NotSupported
	}
	return ""
}

func (x *PasswordlessRegistrationScreenText) GetRegisterTokenButtonText() string {
	if x != nil {
		return x.RegisterTokenButtonText
	}
	return ""
}

func (x *PasswordlessRegistrationScreenText) GetErrorRetry() string {
	if x != nil {
		return x.ErrorRetry
	}
	return ""
}

type PasswordlessRegistrationDoneScreenText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title            string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description      string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	NextButtonText   string `protobuf:"bytes,3,opt,name=next_button_text,json=nextButtonText,proto3" json:"next_button_text,omitempty"`
	CancelButtonText string `protobuf:"bytes,4,opt,name=cancel_button_text,json=cancelButtonText,proto3" json:"cancel_button_text,omitempty"`
	DescriptionClose string `protobuf:"bytes,5,opt,name=description_close,json=descriptionClose,proto3" json:"description_close,omitempty"`
}

func (x *PasswordlessRegistrationDoneScreenText) Reset() {
	*x = PasswordlessRegistrationDoneScreenText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_text_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordlessRegistrationDoneScreenText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordlessRegistrationDoneScreenText) ProtoMessage() {}

func (x *PasswordlessRegistrationDoneScreenText) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_text_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordlessRegistrationDoneScreenText.ProtoReflect.Descriptor instead.
func (*PasswordlessRegistrationDoneScreenText) Descriptor() ([]byte, []int) {
	return file_zitadel_text_proto_rawDescGZIP(), []int{36}
}

func (x *PasswordlessRegistrationDoneScreenText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PasswordlessRegistrationDoneScreenText) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PasswordlessRegistrationDoneScreenText) GetNextButtonText() string {
	if x != nil {
		return x.NextButtonText
	}
	return ""
}

func (x *PasswordlessRegistrationDoneScreenText) GetCancelButtonText() string {
	if x != nil {
		return x.CancelButtonText
	}
	return ""
}

func (x *PasswordlessRegistrationDoneScreenText) GetDescriptionClose() string {
	if x != nil {
		return x.DescriptionClose
	}
	return ""
}

var File_zitadel_text_proto protoreflect.FileDescriptor

var file_zitadel_text_proto_rawDesc = []byte{
	0x0a, 0x12, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x06, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x51, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b,
	0x92, 0x41, 0x38, 0x32, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x74, 0x65, 0x78, 0x74,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x4a, 0x19, 0x22, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x2d, 0x20, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x20, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x20, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x20, 0x70, 0x72, 0x65, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4a, 0x0e, 0x22,
	0x55, 0x73, 0x65, 0x72, 0x20, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x52, 0x09, 0x70,
	0x72, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x1d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4a, 0x11, 0x22,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x66, 0x0a, 0x08, 0x67, 0x72, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4a, 0x92, 0x41, 0x47,
	0x32, 0x1e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x4a, 0x25, 0x22, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x7b, 0x7b, 0x2e, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x7d, 0x20, 0x7b, 0x7b, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x7d, 0x7d, 0x2c, 0x22, 0x52, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0xc5, 0x01, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0xb0, 0x01, 0x92, 0x41, 0xac, 0x01, 0x32, 0x1a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20,
	0x74, 0x65, 0x78, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x74,
	0x65, 0x78, 0x74, 0x4a, 0x8d, 0x01, 0x22, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6d,
	0x79, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x20, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x20, 0x49, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x61, 0x6c, 0x73,
	0x6f, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x2c, 0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20,
	0x74, 0x79, 0x70, 0x65, 0x20, 0x49, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73,
	0x65, 0x6e, 0x64, 0x2e, 0x20, 0x7b, 0x7b, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x7d, 0x7d, 0x20, 0x7b, 0x7b, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x7d,
	0x7d, 0x2c, 0x22, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x59, 0x0a, 0x0b, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38,
	0x92, 0x41, 0x35, 0x32, 0x21, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x74, 0x65, 0x78, 0x74,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x4a, 0x10, 0x22, 0x43, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x6f,
	0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x4b, 0x0a, 0x0b, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x21,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x4a, 0x02, 0x22, 0x22, 0x52, 0x0a, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x22, 0x85, 0x1b, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x5b,
	0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x68, 0x0a, 0x19, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64,
	0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x16, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x6e,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x55, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x62, 0x0a, 0x17,
	0x69, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x6f,
	0x6e, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x44, 0x6f, 0x6e, 0x65,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x14, 0x69, 0x6e, 0x69, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x64, 0x0a, 0x17, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x15, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x71, 0x0a, 0x1c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x6e,
	0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x19,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x5b, 0x0a, 0x14, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x5f, 0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x44,
	0x6f, 0x6e, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x59, 0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x5f,
	0x6d, 0x66, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x46, 0x41, 0x50,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x11, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x66, 0x61, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x66, 0x61, 0x5f, 0x6f,
	0x74, 0x70, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x69, 0x74, 0x4d, 0x46, 0x41, 0x4f, 0x54, 0x50, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x66, 0x61, 0x4f, 0x74, 0x70,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x66, 0x61,
	0x5f, 0x75, 0x32, 0x66, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x46, 0x41, 0x55, 0x32, 0x46, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x66, 0x61, 0x55,
	0x32, 0x66, 0x54, 0x65, 0x78, 0x74, 0x12, 0x53, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6d,
	0x66, 0x61, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x46, 0x41, 0x44, 0x6f, 0x6e, 0x65,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74,
	0x4d, 0x66, 0x61, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x4f, 0x0a, 0x12, 0x6d,
	0x66, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x46, 0x41, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x54, 0x65, 0x78, 0x74, 0x52, 0x10, 0x6d, 0x66, 0x61, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x56, 0x0a, 0x13,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x6d, 0x66, 0x61, 0x5f, 0x6f, 0x74, 0x70, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x4d, 0x46, 0x41, 0x4f, 0x54, 0x50, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x66, 0x61, 0x4f, 0x74, 0x70,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x56, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x6d,
	0x66, 0x61, 0x5f, 0x75, 0x32, 0x66, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x46, 0x41, 0x55, 0x32, 0x46,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x4d, 0x66, 0x61, 0x55, 0x32, 0x66, 0x54, 0x65, 0x78, 0x74, 0x12, 0x54, 0x0a, 0x11,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x5b, 0x0a, 0x14, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x12, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x68, 0x0a, 0x19, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x16, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x65, 0x0a, 0x18, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x6e, 0x65,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x15, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x67, 0x0a, 0x18, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x16, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x61, 0x0a, 0x16, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x5e, 0x0a, 0x15,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x67,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x5f, 0x0a, 0x16,
	0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6e,
	0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x6e, 0x65, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x13, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x6f, 0x0a,
	0x1c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x52, 0x18, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x55,
	0x0a, 0x12, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x46, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a,
	0x0b, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x0a, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x67, 0x0a, 0x18, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x16, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x79, 0x0a, 0x1e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x1c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x86, 0x01, 0x0a, 0x23, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x6f,
	0x6e, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x6e, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x93, 0x01, 0x0a, 0x28, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x24, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x69, 0x0a,
	0x18, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x15, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0xd5, 0x03, 0x0a, 0x17, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x15, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x13, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x48,
	0x0a, 0x1b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x19, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0a, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3d, 0x0a, 0x16,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x43, 0x0a, 0x1a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x4d,
	0x75, 0x73, 0x74, 0x42, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x72, 0x67,
	0x22, 0x90, 0x05, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x0a, 0x15, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x13, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x48,
	0x0a, 0x1b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x19, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x75, 0x73, 0x74,
	0x42, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x72, 0x67, 0x12, 0x32, 0x0a,
	0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8,
	0x01, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x39, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x10,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52,
	0x0e, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x44, 0x0a, 0x19, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x17, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x13,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x16, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x14, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x22, 0xa9, 0x04, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x62, 0x61, 0x63,
	0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x10, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e,
	0x6e, 0x65, 0x78, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x26,
	0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x09, 0x6d, 0x69, 0x6e,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x55, 0x70, 0x70, 0x65, 0x72,
	0x63, 0x61, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x18, 0x64, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52,
	0x09, 0x68, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0a, 0x68, 0x61,
	0x73, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x09, 0x68, 0x61, 0x73, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x2b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x64, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x81, 0x02, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x12, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x10,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x31, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x64, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54,
	0x65, 0x78, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x64, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54,
	0x65, 0x78, 0x74, 0x22, 0xf6, 0x02, 0x0a, 0x16, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0a, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x45, 0x0a, 0x1a, 0x6e,
	0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x17, 0x6e, 0x65, 0x77, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x31, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x10, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x64, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0xd2, 0x01, 0x0a,
	0x1a, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x44, 0x6f, 0x6e,
	0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x12, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52,
	0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x22, 0xfc, 0x01, 0x0a, 0x1b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x0a, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x64,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x31, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x12, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x10,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x22, 0x8c, 0x02, 0x0a, 0x1f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x64, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x33, 0x0a, 0x11, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22,
	0xf8, 0x02, 0x0a, 0x18, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x36, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x45, 0x0a, 0x1a, 0x6e, 0x65, 0x77,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x17, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x35, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x10, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x1c, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x6e,
	0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x10, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x31,
	0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x64, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x22, 0x9d, 0x02, 0x0a, 0x17, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x46, 0x41, 0x50, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0a, 0x6f, 0x74, 0x70,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x6f, 0x74, 0x70, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0a, 0x75, 0x32, 0x66, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01,
	0x52, 0x09, 0x75, 0x32, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x10, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e,
	0x73, 0x6b, 0x69, 0x70, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x31,
	0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x64, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x22, 0xd5, 0x02, 0x0a, 0x14, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x46, 0x41, 0x4f, 0x54, 0x50,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x74, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x74, 0x70, 0x12, 0x2b, 0x0a, 0x0c, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x31, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x64, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x35, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0xb6, 0x02, 0x0a, 0x14, 0x49, 0x6e,
	0x69, 0x74, 0x4d, 0x46, 0x41, 0x55, 0x32, 0x46, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4,
	0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0xc8, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xf4, 0x03, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x44, 0x0a, 0x1a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x17,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x22, 0xcd, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x69, 0x74, 0x4d, 0x46, 0x41, 0x44, 0x6f,
	0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x10, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x31, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x64, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x22, 0x77, 0x0a, 0x10, 0x4d, 0x46, 0x41, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2b, 0x0a, 0x0c, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65,
	0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x03, 0x6f, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x03, 0x6f, 0x74, 0x70, 0x12,
	0x1a, 0x0a, 0x03, 0x75, 0x32, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x03, 0x75, 0x32, 0x66, 0x22, 0xc0, 0x01, 0x0a, 0x16,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x46, 0x41, 0x4f, 0x54, 0x50, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01,
	0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x31, 0x0a, 0x10, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e,
	0x6e, 0x65, 0x78, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0xf8,
	0x01, 0x0a, 0x16, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x46, 0x41, 0x55, 0x32, 0x46, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x11, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x2d, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03,
	0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x29,
	0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x72, 0x79, 0x22, 0xc8, 0x02, 0x0a, 0x16, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x41, 0x0a, 0x19, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70,
	0x77, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x15, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x77, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x45, 0x0a, 0x1a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8,
	0x01, 0x52, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x6e, 0x6f,
	0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0c, 0x6e, 0x6f, 0x74,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x22, 0xc2, 0x03, 0x0a, 0x18, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x12, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xc8, 0x01, 0x52, 0x10, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x10, 0x6e, 0x65, 0x77,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x45, 0x0a,
	0x1a, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x17, 0x6e, 0x65, 0x77,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x10, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e,
	0x6e, 0x65, 0x78, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x39,
	0x0a, 0x13, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x12, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x1c, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x1b, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0xa5, 0x02, 0x0a, 0x1c, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x12,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x46, 0x0a, 0x1a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03,
	0x52, 0x18, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x11, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52,
	0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x22, 0xff, 0x07, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x18, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x16, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x31, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0xc8, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0xc8, 0x01, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0xc8, 0x01, 0x52, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2f,
	0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01,
	0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x2f, 0x0a, 0x0e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8,
	0x01, 0x52, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x2b, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01,
	0x52, 0x0b, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2f, 0x0a,
	0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52,
	0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3e,
	0x0a, 0x16, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x14, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3b,
	0x0a, 0x15, 0x74, 0x6f, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x73, 0x41, 0x6e, 0x64, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x0b, 0x74,
	0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x2c, 0x0a, 0x0d, 0x74, 0x6f, 0x73, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x73, 0x4c, 0x69, 0x6e, 0x6b,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x34, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a,
	0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8,
	0x01, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x32, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x54, 0x65, 0x78, 0x74, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x11, 0x10,
	0x12, 0x4a, 0x04, 0x08, 0x13, 0x10, 0x14, 0x4a, 0x04, 0x08, 0x16, 0x10, 0x17, 0x52, 0x08, 0x74,
	0x6f, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x1a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x74, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x61,
	0x6e, 0x64, 0x22, 0xc3, 0x06, 0x0a, 0x2a, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0a, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x31, 0x0a, 0x0f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0e, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2f, 0x0a,
	0x0e, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52,
	0x0d, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2f,
	0x0a, 0x0e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01,
	0x52, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x29, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0a,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x15, 0x74, 0x6f,
	0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xc8, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x0b, 0x74, 0x6f, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x12, 0x2c, 0x0a, 0x0d, 0x74, 0x6f, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xc8, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x34, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x69,
	0x6e, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x10, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0e,
	0x6e, 0x65, 0x78, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x31,
	0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8,
	0x01, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x52, 0x0f, 0x74, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x5f, 0x61, 0x6e, 0x64, 0x22, 0xd7, 0x06, 0x0a, 0x19, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xc8, 0x01, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x31, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0xc8, 0x01, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xc8, 0x01, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x16, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x14, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x15, 0x74, 0x6f, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x73,
	0x41, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x29, 0x0a, 0x0b, 0x74, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0a,
	0x74, 0x6f, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x2c, 0x0a, 0x0d, 0x74, 0x6f,
	0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x73,
	0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x34, 0x0a, 0x11, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01,
	0x52, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x32, 0x0a, 0x10, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0e, 0x73, 0x61, 0x76, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x54, 0x65, 0x78, 0x74, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x4a, 0x04, 0x08, 0x10, 0x10,
	0x11, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13, 0x4a, 0x04, 0x08, 0x14, 0x10, 0x15, 0x52, 0x08, 0x74,
	0x6f, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x1a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x74, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x61,
	0x6e, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4,
	0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x64, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x33, 0x0a, 0x11, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0xf9, 0x03, 0x0a, 0x1e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x10, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x6c, 0x69,
	0x6e, 0x6b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x42, 0x0a, 0x19,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x3b, 0x0a, 0x15, 0x74, 0x6f, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x73, 0x41, 0x6e,
	0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x29, 0x0a,
	0x0b, 0x74, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0a, 0x74, 0x6f,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x2c, 0x0a, 0x0d, 0x74, 0x6f, 0x73, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x73, 0x4c, 0x69,
	0x6e, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x12, 0x34, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x0f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52,
	0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4a,
	0x04, 0x08, 0x09, 0x10, 0x0a, 0x52, 0x0f, 0x74, 0x6f, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x5f, 0x61, 0x6e, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x16, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x44, 0x0a, 0x19, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x17,
	0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x16, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64,
	0x52, 0x15, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0e, 0x6e, 0x65, 0x78,
	0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x14,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x0a, 0x46, 0x6f, 0x6f, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x03, 0x74, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x03, 0x74, 0x6f,
	0x73, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xc8, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x1c, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x70,
	0x12, 0x2d, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8,
	0x01, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4a,
	0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x06, 0x10,
	0x07, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x73, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x52, 0x13, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x09, 0x68, 0x65, 0x6c, 0x70, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x22, 0xc8, 0x02, 0x0a, 0x1c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4,
	0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0xf4, 0x03, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x18, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c,
	0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x16,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x10, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x73, 0x6b,
	0x69, 0x70, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0xc4, 0x02, 0x0a,
	0x22, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xc8, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0xf4, 0x03, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x44, 0x0a, 0x1a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52,
	0x17, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x22, 0x94, 0x02, 0x0a, 0x26, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x10, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x0e, 0x6e,
	0x65, 0x78, 0x74, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a,
	0x12, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x64, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x34, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_text_proto_rawDescOnce sync.Once
	file_zitadel_text_proto_rawDescData = file_zitadel_text_proto_rawDesc
)

func file_zitadel_text_proto_rawDescGZIP() []byte {
	file_zitadel_text_proto_rawDescOnce.Do(func() {
		file_zitadel_text_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_text_proto_rawDescData)
	})
	return file_zitadel_text_proto_rawDescData
}

var file_zitadel_text_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_zitadel_text_proto_goTypes = []interface{}{
	(*MessageCustomText)(nil),                          // 0: zitadel.text.v1.MessageCustomText
	(*LoginCustomText)(nil),                            // 1: zitadel.text.v1.LoginCustomText
	(*SelectAccountScreenText)(nil),                    // 2: zitadel.text.v1.SelectAccountScreenText
	(*LoginScreenText)(nil),                            // 3: zitadel.text.v1.LoginScreenText
	(*PasswordScreenText)(nil),                         // 4: zitadel.text.v1.PasswordScreenText
	(*UsernameChangeScreenText)(nil),                   // 5: zitadel.text.v1.UsernameChangeScreenText
	(*UsernameChangeDoneScreenText)(nil),               // 6: zitadel.text.v1.UsernameChangeDoneScreenText
	(*InitPasswordScreenText)(nil),                     // 7: zitadel.text.v1.InitPasswordScreenText
	(*InitPasswordDoneScreenText)(nil),                 // 8: zitadel.text.v1.InitPasswordDoneScreenText
	(*EmailVerificationScreenText)(nil),                // 9: zitadel.text.v1.EmailVerificationScreenText
	(*EmailVerificationDoneScreenText)(nil),            // 10: zitadel.text.v1.EmailVerificationDoneScreenText
	(*InitializeUserScreenText)(nil),                   // 11: zitadel.text.v1.InitializeUserScreenText
	(*InitializeUserDoneScreenText)(nil),               // 12: zitadel.text.v1.InitializeUserDoneScreenText
	(*InitMFAPromptScreenText)(nil),                    // 13: zitadel.text.v1.InitMFAPromptScreenText
	(*InitMFAOTPScreenText)(nil),                       // 14: zitadel.text.v1.InitMFAOTPScreenText
	(*InitMFAU2FScreenText)(nil),                       // 15: zitadel.text.v1.InitMFAU2FScreenText
	(*InitMFADoneScreenText)(nil),                      // 16: zitadel.text.v1.InitMFADoneScreenText
	(*MFAProvidersText)(nil),                           // 17: zitadel.text.v1.MFAProvidersText
	(*VerifyMFAOTPScreenText)(nil),                     // 18: zitadel.text.v1.VerifyMFAOTPScreenText
	(*VerifyMFAU2FScreenText)(nil),                     // 19: zitadel.text.v1.VerifyMFAU2FScreenText
	(*PasswordlessScreenText)(nil),                     // 20: zitadel.text.v1.PasswordlessScreenText
	(*PasswordChangeScreenText)(nil),                   // 21: zitadel.text.v1.PasswordChangeScreenText
	(*PasswordChangeDoneScreenText)(nil),               // 22: zitadel.text.v1.PasswordChangeDoneScreenText
	(*PasswordResetDoneScreenText)(nil),                // 23: zitadel.text.v1.PasswordResetDoneScreenText
	(*RegistrationOptionScreenText)(nil),               // 24: zitadel.text.v1.RegistrationOptionScreenText
	(*RegistrationUserScreenText)(nil),                 // 25: zitadel.text.v1.RegistrationUserScreenText
	(*ExternalRegistrationUserOverviewScreenText)(nil), // 26: zitadel.text.v1.ExternalRegistrationUserOverviewScreenText
	(*RegistrationOrgScreenText)(nil),                  // 27: zitadel.text.v1.RegistrationOrgScreenText
	(*LinkingUserPromptScreenText)(nil),                // 28: zitadel.text.v1.LinkingUserPromptScreenText
	(*LinkingUserDoneScreenText)(nil),                  // 29: zitadel.text.v1.LinkingUserDoneScreenText
	(*ExternalUserNotFoundScreenText)(nil),             // 30: zitadel.text.v1.ExternalUserNotFoundScreenText
	(*SuccessLoginScreenText)(nil),                     // 31: zitadel.text.v1.SuccessLoginScreenText
	(*LogoutDoneScreenText)(nil),                       // 32: zitadel.text.v1.LogoutDoneScreenText
	(*FooterText)(nil),                                 // 33: zitadel.text.v1.FooterText
	(*PasswordlessPromptScreenText)(nil),               // 34: zitadel.text.v1.PasswordlessPromptScreenText
	(*PasswordlessRegistrationScreenText)(nil),         // 35: zitadel.text.v1.PasswordlessRegistrationScreenText
	(*PasswordlessRegistrationDoneScreenText)(nil),     // 36: zitadel.text.v1.PasswordlessRegistrationDoneScreenText
	(*object.ObjectDetails)(nil),                       // 37: zitadel.v1.ObjectDetails
}
var file_zitadel_text_proto_depIdxs = []int32{
	37, // 0: zitadel.text.v1.MessageCustomText.details:type_name -> zitadel.v1.ObjectDetails
	37, // 1: zitadel.text.v1.LoginCustomText.details:type_name -> zitadel.v1.ObjectDetails
	2,  // 2: zitadel.text.v1.LoginCustomText.select_account_text:type_name -> zitadel.text.v1.SelectAccountScreenText
	3,  // 3: zitadel.text.v1.LoginCustomText.login_text:type_name -> zitadel.text.v1.LoginScreenText
	4,  // 4: zitadel.text.v1.LoginCustomText.password_text:type_name -> zitadel.text.v1.PasswordScreenText
	5,  // 5: zitadel.text.v1.LoginCustomText.username_change_text:type_name -> zitadel.text.v1.UsernameChangeScreenText
	6,  // 6: zitadel.text.v1.LoginCustomText.username_change_done_text:type_name -> zitadel.text.v1.UsernameChangeDoneScreenText
	7,  // 7: zitadel.text.v1.LoginCustomText.init_password_text:type_name -> zitadel.text.v1.InitPasswordScreenText
	8,  // 8: zitadel.text.v1.LoginCustomText.init_password_done_text:type_name -> zitadel.text.v1.InitPasswordDoneScreenText
	9,  // 9: zitadel.text.v1.LoginCustomText.email_verification_text:type_name -> zitadel.text.v1.EmailVerificationScreenText
	10, // 10: zitadel.text.v1.LoginCustomText.email_verification_done_text:type_name -> zitadel.text.v1.EmailVerificationDoneScreenText
	11, // 11: zitadel.text.v1.LoginCustomText.initialize_user_text:type_name -> zitadel.text.v1.InitializeUserScreenText
	12, // 12: zitadel.text.v1.LoginCustomText.initialize_done_text:type_name -> zitadel.text.v1.InitializeUserDoneScreenText
	13, // 13: zitadel.text.v1.LoginCustomText.init_mfa_prompt_text:type_name -> zitadel.text.v1.InitMFAPromptScreenText
	14, // 14: zitadel.text.v1.LoginCustomText.init_mfa_otp_text:type_name -> zitadel.text.v1.InitMFAOTPScreenText
	15, // 15: zitadel.text.v1.LoginCustomText.init_mfa_u2f_text:type_name -> zitadel.text.v1.InitMFAU2FScreenText
	16, // 16: zitadel.text.v1.LoginCustomText.init_mfa_done_text:type_name -> zitadel.text.v1.InitMFADoneScreenText
	17, // 17: zitadel.text.v1.LoginCustomText.mfa_providers_text:type_name -> zitadel.text.v1.MFAProvidersText
	18, // 18: zitadel.text.v1.LoginCustomText.verify_mfa_otp_text:type_name -> zitadel.text.v1.VerifyMFAOTPScreenText
	19, // 19: zitadel.text.v1.LoginCustomText.verify_mfa_u2f_text:type_name -> zitadel.text.v1.VerifyMFAU2FScreenText
	20, // 20: zitadel.text.v1.LoginCustomText.passwordless_text:type_name -> zitadel.text.v1.PasswordlessScreenText
	21, // 21: zitadel.text.v1.LoginCustomText.password_change_text:type_name -> zitadel.text.v1.PasswordChangeScreenText
	22, // 22: zitadel.text.v1.LoginCustomText.password_change_done_text:type_name -> zitadel.text.v1.PasswordChangeDoneScreenText
	23, // 23: zitadel.text.v1.LoginCustomText.password_reset_done_text:type_name -> zitadel.text.v1.PasswordResetDoneScreenText
	24, // 24: zitadel.text.v1.LoginCustomText.registration_option_text:type_name -> zitadel.text.v1.RegistrationOptionScreenText
	25, // 25: zitadel.text.v1.LoginCustomText.registration_user_text:type_name -> zitadel.text.v1.RegistrationUserScreenText
	27, // 26: zitadel.text.v1.LoginCustomText.registration_org_text:type_name -> zitadel.text.v1.RegistrationOrgScreenText
	29, // 27: zitadel.text.v1.LoginCustomText.linking_user_done_text:type_name -> zitadel.text.v1.LinkingUserDoneScreenText
	30, // 28: zitadel.text.v1.LoginCustomText.external_user_not_found_text:type_name -> zitadel.text.v1.ExternalUserNotFoundScreenText
	31, // 29: zitadel.text.v1.LoginCustomText.success_login_text:type_name -> zitadel.text.v1.SuccessLoginScreenText
	32, // 30: zitadel.text.v1.LoginCustomText.logout_text:type_name -> zitadel.text.v1.LogoutDoneScreenText
	33, // 31: zitadel.text.v1.LoginCustomText.footer_text:type_name -> zitadel.text.v1.FooterText
	34, // 32: zitadel.text.v1.LoginCustomText.passwordless_prompt_text:type_name -> zitadel.text.v1.PasswordlessPromptScreenText
	35, // 33: zitadel.text.v1.LoginCustomText.passwordless_registration_text:type_name -> zitadel.text.v1.PasswordlessRegistrationScreenText
	36, // 34: zitadel.text.v1.LoginCustomText.passwordless_registration_done_text:type_name -> zitadel.text.v1.PasswordlessRegistrationDoneScreenText
	26, // 35: zitadel.text.v1.LoginCustomText.external_registration_user_overview_text:type_name -> zitadel.text.v1.ExternalRegistrationUserOverviewScreenText
	28, // 36: zitadel.text.v1.LoginCustomText.linking_user_prompt_text:type_name -> zitadel.text.v1.LinkingUserPromptScreenText
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_zitadel_text_proto_init() }
func file_zitadel_text_proto_init() {
	if File_zitadel_text_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zitadel_text_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageCustomText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginCustomText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectAccountScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsernameChangeScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsernameChangeDoneScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitPasswordScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitPasswordDoneScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailVerificationScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailVerificationDoneScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeUserScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeUserDoneScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitMFAPromptScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitMFAOTPScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitMFAU2FScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitMFADoneScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MFAProvidersText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyMFAOTPScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyMFAU2FScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordlessScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordChangeScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordChangeDoneScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordResetDoneScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationOptionScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationUserScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalRegistrationUserOverviewScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationOrgScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkingUserPromptScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkingUserDoneScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalUserNotFoundScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuccessLoginScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutDoneScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FooterText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordlessPromptScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordlessRegistrationScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_text_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordlessRegistrationDoneScreenText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_text_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_text_proto_goTypes,
		DependencyIndexes: file_zitadel_text_proto_depIdxs,
		MessageInfos:      file_zitadel_text_proto_msgTypes,
	}.Build()
	File_zitadel_text_proto = out.File
	file_zitadel_text_proto_rawDesc = nil
	file_zitadel_text_proto_goTypes = nil
	file_zitadel_text_proto_depIdxs = nil
}
