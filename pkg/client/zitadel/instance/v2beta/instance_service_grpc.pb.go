// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: zitadel/instance/v2beta/instance_service.proto

package instance

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InstanceService_DeleteInstance_FullMethodName      = "/zitadel.instance.v2beta.InstanceService/DeleteInstance"
	InstanceService_GetInstance_FullMethodName         = "/zitadel.instance.v2beta.InstanceService/GetInstance"
	InstanceService_UpdateInstance_FullMethodName      = "/zitadel.instance.v2beta.InstanceService/UpdateInstance"
	InstanceService_ListInstances_FullMethodName       = "/zitadel.instance.v2beta.InstanceService/ListInstances"
	InstanceService_AddCustomDomain_FullMethodName     = "/zitadel.instance.v2beta.InstanceService/AddCustomDomain"
	InstanceService_RemoveCustomDomain_FullMethodName  = "/zitadel.instance.v2beta.InstanceService/RemoveCustomDomain"
	InstanceService_ListCustomDomains_FullMethodName   = "/zitadel.instance.v2beta.InstanceService/ListCustomDomains"
	InstanceService_AddTrustedDomain_FullMethodName    = "/zitadel.instance.v2beta.InstanceService/AddTrustedDomain"
	InstanceService_RemoveTrustedDomain_FullMethodName = "/zitadel.instance.v2beta.InstanceService/RemoveTrustedDomain"
	InstanceService_ListTrustedDomains_FullMethodName  = "/zitadel.instance.v2beta.InstanceService/ListTrustedDomains"
)

// InstanceServiceClient is the client API for InstanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstanceServiceClient interface {
	// Delete Instance
	//
	// Deletes an instance with the given ID.
	//
	// Required permissions:
	//   - `system.instance.delete`
	DeleteInstance(ctx context.Context, in *DeleteInstanceRequest, opts ...grpc.CallOption) (*DeleteInstanceResponse, error)
	// Get Instance
	//
	// Returns the instance in the current context.
	//
	// The instance_id in the input message will be used in the future.
	//
	// Required permissions:
	//   - `iam.read`
	GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*GetInstanceResponse, error)
	// Update Instance
	//
	// Updates instance in context with the given name.
	//
	// The instance_id in the input message will be used in the future.
	//
	// Required permissions:
	//   - `iam.write`
	UpdateInstance(ctx context.Context, in *UpdateInstanceRequest, opts ...grpc.CallOption) (*UpdateInstanceResponse, error)
	// List Instances
	//
	// Lists instances matching the given query.
	// The query can be used to filter either by instance ID or domain.
	// The request is paginated and returns 100 results by default.
	//
	// Required permissions:
	//   - `system.instance.read`
	ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error)
	// Add Custom Domain
	//
	// Adds a custom domain to the instance in context.
	//
	// The instance_id in the input message will be used in the future
	//
	// Required permissions:
	//   - `system.domain.write`
	AddCustomDomain(ctx context.Context, in *AddCustomDomainRequest, opts ...grpc.CallOption) (*AddCustomDomainResponse, error)
	// Remove Custom Domain
	//
	// Removes a custom domain from the instance.
	//
	// The instance_id in the input message will be used in the future.
	//
	// Required permissions:
	//   - `system.domain.write`
	RemoveCustomDomain(ctx context.Context, in *RemoveCustomDomainRequest, opts ...grpc.CallOption) (*RemoveCustomDomainResponse, error)
	// List Custom Domains
	//
	// Lists custom domains of the instance.
	//
	// The instance_id in the input message will be used in the future.
	//
	// Required permissions:
	//   - `iam.read`
	ListCustomDomains(ctx context.Context, in *ListCustomDomainsRequest, opts ...grpc.CallOption) (*ListCustomDomainsResponse, error)
	// Add Trusted Domain
	//
	// Adds a trusted domain to the instance.
	//
	// The instance_id in the input message will be used in the future.
	//
	// Required permissions:
	//   - `iam.write`
	AddTrustedDomain(ctx context.Context, in *AddTrustedDomainRequest, opts ...grpc.CallOption) (*AddTrustedDomainResponse, error)
	// Remove Trusted Domain
	//
	// Removes a trusted domain from the instance.
	//
	// The instance_id in the input message will be used in the future.
	//
	// Required permissions:
	//   - `iam.write`
	RemoveTrustedDomain(ctx context.Context, in *RemoveTrustedDomainRequest, opts ...grpc.CallOption) (*RemoveTrustedDomainResponse, error)
	// List Trusted Domains
	//
	// Lists trusted domains of the instance.
	//
	// The instance_id in the input message will be used in the future.
	//
	// Required permissions:
	//   - `iam.read`
	ListTrustedDomains(ctx context.Context, in *ListTrustedDomainsRequest, opts ...grpc.CallOption) (*ListTrustedDomainsResponse, error)
}

type instanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstanceServiceClient(cc grpc.ClientConnInterface) InstanceServiceClient {
	return &instanceServiceClient{cc}
}

func (c *instanceServiceClient) DeleteInstance(ctx context.Context, in *DeleteInstanceRequest, opts ...grpc.CallOption) (*DeleteInstanceResponse, error) {
	out := new(DeleteInstanceResponse)
	err := c.cc.Invoke(ctx, InstanceService_DeleteInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*GetInstanceResponse, error) {
	out := new(GetInstanceResponse)
	err := c.cc.Invoke(ctx, InstanceService_GetInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) UpdateInstance(ctx context.Context, in *UpdateInstanceRequest, opts ...grpc.CallOption) (*UpdateInstanceResponse, error) {
	out := new(UpdateInstanceResponse)
	err := c.cc.Invoke(ctx, InstanceService_UpdateInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error) {
	out := new(ListInstancesResponse)
	err := c.cc.Invoke(ctx, InstanceService_ListInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) AddCustomDomain(ctx context.Context, in *AddCustomDomainRequest, opts ...grpc.CallOption) (*AddCustomDomainResponse, error) {
	out := new(AddCustomDomainResponse)
	err := c.cc.Invoke(ctx, InstanceService_AddCustomDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) RemoveCustomDomain(ctx context.Context, in *RemoveCustomDomainRequest, opts ...grpc.CallOption) (*RemoveCustomDomainResponse, error) {
	out := new(RemoveCustomDomainResponse)
	err := c.cc.Invoke(ctx, InstanceService_RemoveCustomDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) ListCustomDomains(ctx context.Context, in *ListCustomDomainsRequest, opts ...grpc.CallOption) (*ListCustomDomainsResponse, error) {
	out := new(ListCustomDomainsResponse)
	err := c.cc.Invoke(ctx, InstanceService_ListCustomDomains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) AddTrustedDomain(ctx context.Context, in *AddTrustedDomainRequest, opts ...grpc.CallOption) (*AddTrustedDomainResponse, error) {
	out := new(AddTrustedDomainResponse)
	err := c.cc.Invoke(ctx, InstanceService_AddTrustedDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) RemoveTrustedDomain(ctx context.Context, in *RemoveTrustedDomainRequest, opts ...grpc.CallOption) (*RemoveTrustedDomainResponse, error) {
	out := new(RemoveTrustedDomainResponse)
	err := c.cc.Invoke(ctx, InstanceService_RemoveTrustedDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) ListTrustedDomains(ctx context.Context, in *ListTrustedDomainsRequest, opts ...grpc.CallOption) (*ListTrustedDomainsResponse, error) {
	out := new(ListTrustedDomainsResponse)
	err := c.cc.Invoke(ctx, InstanceService_ListTrustedDomains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstanceServiceServer is the server API for InstanceService service.
// All implementations must embed UnimplementedInstanceServiceServer
// for forward compatibility
type InstanceServiceServer interface {
	// Delete Instance
	//
	// Deletes an instance with the given ID.
	//
	// Required permissions:
	//   - `system.instance.delete`
	DeleteInstance(context.Context, *DeleteInstanceRequest) (*DeleteInstanceResponse, error)
	// Get Instance
	//
	// Returns the instance in the current context.
	//
	// The instance_id in the input message will be used in the future.
	//
	// Required permissions:
	//   - `iam.read`
	GetInstance(context.Context, *GetInstanceRequest) (*GetInstanceResponse, error)
	// Update Instance
	//
	// Updates instance in context with the given name.
	//
	// The instance_id in the input message will be used in the future.
	//
	// Required permissions:
	//   - `iam.write`
	UpdateInstance(context.Context, *UpdateInstanceRequest) (*UpdateInstanceResponse, error)
	// List Instances
	//
	// Lists instances matching the given query.
	// The query can be used to filter either by instance ID or domain.
	// The request is paginated and returns 100 results by default.
	//
	// Required permissions:
	//   - `system.instance.read`
	ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error)
	// Add Custom Domain
	//
	// Adds a custom domain to the instance in context.
	//
	// The instance_id in the input message will be used in the future
	//
	// Required permissions:
	//   - `system.domain.write`
	AddCustomDomain(context.Context, *AddCustomDomainRequest) (*AddCustomDomainResponse, error)
	// Remove Custom Domain
	//
	// Removes a custom domain from the instance.
	//
	// The instance_id in the input message will be used in the future.
	//
	// Required permissions:
	//   - `system.domain.write`
	RemoveCustomDomain(context.Context, *RemoveCustomDomainRequest) (*RemoveCustomDomainResponse, error)
	// List Custom Domains
	//
	// Lists custom domains of the instance.
	//
	// The instance_id in the input message will be used in the future.
	//
	// Required permissions:
	//   - `iam.read`
	ListCustomDomains(context.Context, *ListCustomDomainsRequest) (*ListCustomDomainsResponse, error)
	// Add Trusted Domain
	//
	// Adds a trusted domain to the instance.
	//
	// The instance_id in the input message will be used in the future.
	//
	// Required permissions:
	//   - `iam.write`
	AddTrustedDomain(context.Context, *AddTrustedDomainRequest) (*AddTrustedDomainResponse, error)
	// Remove Trusted Domain
	//
	// Removes a trusted domain from the instance.
	//
	// The instance_id in the input message will be used in the future.
	//
	// Required permissions:
	//   - `iam.write`
	RemoveTrustedDomain(context.Context, *RemoveTrustedDomainRequest) (*RemoveTrustedDomainResponse, error)
	// List Trusted Domains
	//
	// Lists trusted domains of the instance.
	//
	// The instance_id in the input message will be used in the future.
	//
	// Required permissions:
	//   - `iam.read`
	ListTrustedDomains(context.Context, *ListTrustedDomainsRequest) (*ListTrustedDomainsResponse, error)
	mustEmbedUnimplementedInstanceServiceServer()
}

// UnimplementedInstanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInstanceServiceServer struct {
}

func (UnimplementedInstanceServiceServer) DeleteInstance(context.Context, *DeleteInstanceRequest) (*DeleteInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInstance not implemented")
}
func (UnimplementedInstanceServiceServer) GetInstance(context.Context, *GetInstanceRequest) (*GetInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstance not implemented")
}
func (UnimplementedInstanceServiceServer) UpdateInstance(context.Context, *UpdateInstanceRequest) (*UpdateInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstance not implemented")
}
func (UnimplementedInstanceServiceServer) ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstances not implemented")
}
func (UnimplementedInstanceServiceServer) AddCustomDomain(context.Context, *AddCustomDomainRequest) (*AddCustomDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomDomain not implemented")
}
func (UnimplementedInstanceServiceServer) RemoveCustomDomain(context.Context, *RemoveCustomDomainRequest) (*RemoveCustomDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCustomDomain not implemented")
}
func (UnimplementedInstanceServiceServer) ListCustomDomains(context.Context, *ListCustomDomainsRequest) (*ListCustomDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomDomains not implemented")
}
func (UnimplementedInstanceServiceServer) AddTrustedDomain(context.Context, *AddTrustedDomainRequest) (*AddTrustedDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrustedDomain not implemented")
}
func (UnimplementedInstanceServiceServer) RemoveTrustedDomain(context.Context, *RemoveTrustedDomainRequest) (*RemoveTrustedDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTrustedDomain not implemented")
}
func (UnimplementedInstanceServiceServer) ListTrustedDomains(context.Context, *ListTrustedDomainsRequest) (*ListTrustedDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrustedDomains not implemented")
}
func (UnimplementedInstanceServiceServer) mustEmbedUnimplementedInstanceServiceServer() {}

// UnsafeInstanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstanceServiceServer will
// result in compilation errors.
type UnsafeInstanceServiceServer interface {
	mustEmbedUnimplementedInstanceServiceServer()
}

func RegisterInstanceServiceServer(s grpc.ServiceRegistrar, srv InstanceServiceServer) {
	s.RegisterService(&InstanceService_ServiceDesc, srv)
}

func _InstanceService_DeleteInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).DeleteInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceService_DeleteInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).DeleteInstance(ctx, req.(*DeleteInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_GetInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).GetInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceService_GetInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).GetInstance(ctx, req.(*GetInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_UpdateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).UpdateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceService_UpdateInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).UpdateInstance(ctx, req.(*UpdateInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_ListInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).ListInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceService_ListInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).ListInstances(ctx, req.(*ListInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_AddCustomDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).AddCustomDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceService_AddCustomDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).AddCustomDomain(ctx, req.(*AddCustomDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_RemoveCustomDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCustomDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).RemoveCustomDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceService_RemoveCustomDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).RemoveCustomDomain(ctx, req.(*RemoveCustomDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_ListCustomDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).ListCustomDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceService_ListCustomDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).ListCustomDomains(ctx, req.(*ListCustomDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_AddTrustedDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTrustedDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).AddTrustedDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceService_AddTrustedDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).AddTrustedDomain(ctx, req.(*AddTrustedDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_RemoveTrustedDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTrustedDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).RemoveTrustedDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceService_RemoveTrustedDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).RemoveTrustedDomain(ctx, req.(*RemoveTrustedDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_ListTrustedDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrustedDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).ListTrustedDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceService_ListTrustedDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).ListTrustedDomains(ctx, req.(*ListTrustedDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstanceService_ServiceDesc is the grpc.ServiceDesc for InstanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zitadel.instance.v2beta.InstanceService",
	HandlerType: (*InstanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteInstance",
			Handler:    _InstanceService_DeleteInstance_Handler,
		},
		{
			MethodName: "GetInstance",
			Handler:    _InstanceService_GetInstance_Handler,
		},
		{
			MethodName: "UpdateInstance",
			Handler:    _InstanceService_UpdateInstance_Handler,
		},
		{
			MethodName: "ListInstances",
			Handler:    _InstanceService_ListInstances_Handler,
		},
		{
			MethodName: "AddCustomDomain",
			Handler:    _InstanceService_AddCustomDomain_Handler,
		},
		{
			MethodName: "RemoveCustomDomain",
			Handler:    _InstanceService_RemoveCustomDomain_Handler,
		},
		{
			MethodName: "ListCustomDomains",
			Handler:    _InstanceService_ListCustomDomains_Handler,
		},
		{
			MethodName: "AddTrustedDomain",
			Handler:    _InstanceService_AddTrustedDomain_Handler,
		},
		{
			MethodName: "RemoveTrustedDomain",
			Handler:    _InstanceService_RemoveTrustedDomain_Handler,
		},
		{
			MethodName: "ListTrustedDomains",
			Handler:    _InstanceService_ListTrustedDomains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zitadel/instance/v2beta/instance_service.proto",
}
