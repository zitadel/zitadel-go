// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/internal_permission/v2beta/query.proto

package internal_permission

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	v2beta "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/filter/v2beta"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AdministratorFieldName int32

const (
	AdministratorFieldName_ADMINISTRATOR_FIELD_NAME_UNSPECIFIED   AdministratorFieldName = 0
	AdministratorFieldName_ADMINISTRATOR_FIELD_NAME_USER_ID       AdministratorFieldName = 1
	AdministratorFieldName_ADMINISTRATOR_FIELD_NAME_CREATION_DATE AdministratorFieldName = 2
	AdministratorFieldName_ADMINISTRATOR_FIELD_NAME_CHANGE_DATE   AdministratorFieldName = 3
)

// Enum value maps for AdministratorFieldName.
var (
	AdministratorFieldName_name = map[int32]string{
		0: "ADMINISTRATOR_FIELD_NAME_UNSPECIFIED",
		1: "ADMINISTRATOR_FIELD_NAME_USER_ID",
		2: "ADMINISTRATOR_FIELD_NAME_CREATION_DATE",
		3: "ADMINISTRATOR_FIELD_NAME_CHANGE_DATE",
	}
	AdministratorFieldName_value = map[string]int32{
		"ADMINISTRATOR_FIELD_NAME_UNSPECIFIED":   0,
		"ADMINISTRATOR_FIELD_NAME_USER_ID":       1,
		"ADMINISTRATOR_FIELD_NAME_CREATION_DATE": 2,
		"ADMINISTRATOR_FIELD_NAME_CHANGE_DATE":   3,
	}
)

func (x AdministratorFieldName) Enum() *AdministratorFieldName {
	p := new(AdministratorFieldName)
	*p = x
	return p
}

func (x AdministratorFieldName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdministratorFieldName) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_internal_permission_v2beta_query_proto_enumTypes[0].Descriptor()
}

func (AdministratorFieldName) Type() protoreflect.EnumType {
	return &file_zitadel_internal_permission_v2beta_query_proto_enumTypes[0]
}

func (x AdministratorFieldName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdministratorFieldName.Descriptor instead.
func (AdministratorFieldName) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_internal_permission_v2beta_query_proto_rawDescGZIP(), []int{0}
}

type Administrator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CreationDate is the timestamp when the administrator role was granted.
	CreationDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	// ChangeDate is the timestamp when the administrator role was last updated.
	// In case the administrator role was not updated, this field is equal to the creation date.
	ChangeDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=change_date,json=changeDate,proto3" json:"change_date,omitempty"`
	// User is the user who was granted the administrator role.
	User *User `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// Resource is the type of the resource the administrator roles were granted for.
	//
	// Types that are assignable to Resource:
	//
	//	*Administrator_Instance
	//	*Administrator_Organization
	//	*Administrator_Project
	//	*Administrator_ProjectGrant
	Resource isAdministrator_Resource `protobuf_oneof:"resource"`
	// Roles are the roles that were granted to the user for the specified resource.
	Roles []string `protobuf:"bytes,8,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *Administrator) Reset() {
	*x = Administrator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Administrator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Administrator) ProtoMessage() {}

func (x *Administrator) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Administrator.ProtoReflect.Descriptor instead.
func (*Administrator) Descriptor() ([]byte, []int) {
	return file_zitadel_internal_permission_v2beta_query_proto_rawDescGZIP(), []int{0}
}

func (x *Administrator) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *Administrator) GetChangeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeDate
	}
	return nil
}

func (x *Administrator) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (m *Administrator) GetResource() isAdministrator_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *Administrator) GetInstance() bool {
	if x, ok := x.GetResource().(*Administrator_Instance); ok {
		return x.Instance
	}
	return false
}

func (x *Administrator) GetOrganization() *Organization {
	if x, ok := x.GetResource().(*Administrator_Organization); ok {
		return x.Organization
	}
	return nil
}

func (x *Administrator) GetProject() *Project {
	if x, ok := x.GetResource().(*Administrator_Project); ok {
		return x.Project
	}
	return nil
}

func (x *Administrator) GetProjectGrant() *ProjectGrant {
	if x, ok := x.GetResource().(*Administrator_ProjectGrant); ok {
		return x.ProjectGrant
	}
	return nil
}

func (x *Administrator) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type isAdministrator_Resource interface {
	isAdministrator_Resource()
}

type Administrator_Instance struct {
	// Instance is returned if the administrator roles were granted on the instance level.
	Instance bool `protobuf:"varint,4,opt,name=instance,proto3,oneof"`
}

type Administrator_Organization struct {
	// Organization provides information about the organization the administrator roles were granted for.
	Organization *Organization `protobuf:"bytes,5,opt,name=organization,proto3,oneof"`
}

type Administrator_Project struct {
	// Project provides information about the project the administrator roles were granted for.
	Project *Project `protobuf:"bytes,6,opt,name=project,proto3,oneof"`
}

type Administrator_ProjectGrant struct {
	// ProjectGrant provides information about the project grant the administrator roles were granted for.
	ProjectGrant *ProjectGrant `protobuf:"bytes,7,opt,name=project_grant,json=projectGrant,proto3,oneof"`
}

func (*Administrator_Instance) isAdministrator_Resource() {}

func (*Administrator_Organization) isAdministrator_Resource() {}

func (*Administrator_Project) isAdministrator_Resource() {}

func (*Administrator_ProjectGrant) isAdministrator_Resource() {}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of the user.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// PreferredLoginName is the preferred login name of the user. This value is unique across the whole instance.
	PreferredLoginName string `protobuf:"bytes,2,opt,name=preferred_login_name,json=preferredLoginName,proto3" json:"preferred_login_name,omitempty"`
	// DisplayName is the public display name of the user.
	// By default it's the user's given name and family name, their username or their email address.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The organization the user belong to.
	OrganizationId string `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_zitadel_internal_permission_v2beta_query_proto_rawDescGZIP(), []int{1}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetPreferredLoginName() string {
	if x != nil {
		return x.PreferredLoginName
	}
	return ""
}

func (x *User) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *User) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of the organization the user was granted the administrator role for.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is the name of the organization the user was granted the administrator role for.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_zitadel_internal_permission_v2beta_query_proto_rawDescGZIP(), []int{2}
}

func (x *Organization) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Organization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of the project the user was granted the administrator role for.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name is the name of the project the user was granted the administrator role for.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// OrganizationID is the ID of the organization the project belongs to.
	OrganizationId string `protobuf:"bytes,3,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_zitadel_internal_permission_v2beta_query_proto_rawDescGZIP(), []int{3}
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type ProjectGrant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the unique identifier of the project grant the user was granted the administrator role for.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ProjectID is the ID of the project the project grant belongs to.
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// ProjectName is the name of the project the project grant belongs to.
	ProjectName string `protobuf:"bytes,3,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	// OrganizationID is the ID of the organization the project grant belongs to.
	OrganizationId string `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// OrganizationID is the ID of the organization the project grant belongs to.
	GrantedOrganizationId string `protobuf:"bytes,5,opt,name=granted_organization_id,json=grantedOrganizationId,proto3" json:"granted_organization_id,omitempty"`
}

func (x *ProjectGrant) Reset() {
	*x = ProjectGrant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectGrant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectGrant) ProtoMessage() {}

func (x *ProjectGrant) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectGrant.ProtoReflect.Descriptor instead.
func (*ProjectGrant) Descriptor() ([]byte, []int) {
	return file_zitadel_internal_permission_v2beta_query_proto_rawDescGZIP(), []int{4}
}

func (x *ProjectGrant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProjectGrant) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ProjectGrant) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ProjectGrant) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *ProjectGrant) GetGrantedOrganizationId() string {
	if x != nil {
		return x.GrantedOrganizationId
	}
	return ""
}

type AdministratorSearchFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*AdministratorSearchFilter_CreationDate
	//	*AdministratorSearchFilter_ChangeDate
	//	*AdministratorSearchFilter_InUserIdsFilter
	//	*AdministratorSearchFilter_UserOrganizationId
	//	*AdministratorSearchFilter_UserPreferredLoginName
	//	*AdministratorSearchFilter_UserDisplayName
	//	*AdministratorSearchFilter_Resource
	//	*AdministratorSearchFilter_Role
	//	*AdministratorSearchFilter_And
	//	*AdministratorSearchFilter_Or
	//	*AdministratorSearchFilter_Not
	Filter isAdministratorSearchFilter_Filter `protobuf_oneof:"filter"`
}

func (x *AdministratorSearchFilter) Reset() {
	*x = AdministratorSearchFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdministratorSearchFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdministratorSearchFilter) ProtoMessage() {}

func (x *AdministratorSearchFilter) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdministratorSearchFilter.ProtoReflect.Descriptor instead.
func (*AdministratorSearchFilter) Descriptor() ([]byte, []int) {
	return file_zitadel_internal_permission_v2beta_query_proto_rawDescGZIP(), []int{5}
}

func (m *AdministratorSearchFilter) GetFilter() isAdministratorSearchFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *AdministratorSearchFilter) GetCreationDate() *v2beta.TimestampFilter {
	if x, ok := x.GetFilter().(*AdministratorSearchFilter_CreationDate); ok {
		return x.CreationDate
	}
	return nil
}

func (x *AdministratorSearchFilter) GetChangeDate() *v2beta.TimestampFilter {
	if x, ok := x.GetFilter().(*AdministratorSearchFilter_ChangeDate); ok {
		return x.ChangeDate
	}
	return nil
}

func (x *AdministratorSearchFilter) GetInUserIdsFilter() *v2beta.InIDsFilter {
	if x, ok := x.GetFilter().(*AdministratorSearchFilter_InUserIdsFilter); ok {
		return x.InUserIdsFilter
	}
	return nil
}

func (x *AdministratorSearchFilter) GetUserOrganizationId() *v2beta.IDFilter {
	if x, ok := x.GetFilter().(*AdministratorSearchFilter_UserOrganizationId); ok {
		return x.UserOrganizationId
	}
	return nil
}

func (x *AdministratorSearchFilter) GetUserPreferredLoginName() *UserPreferredLoginNameFilter {
	if x, ok := x.GetFilter().(*AdministratorSearchFilter_UserPreferredLoginName); ok {
		return x.UserPreferredLoginName
	}
	return nil
}

func (x *AdministratorSearchFilter) GetUserDisplayName() *UserDisplayNameFilter {
	if x, ok := x.GetFilter().(*AdministratorSearchFilter_UserDisplayName); ok {
		return x.UserDisplayName
	}
	return nil
}

func (x *AdministratorSearchFilter) GetResource() *ResourceFilter {
	if x, ok := x.GetFilter().(*AdministratorSearchFilter_Resource); ok {
		return x.Resource
	}
	return nil
}

func (x *AdministratorSearchFilter) GetRole() *RoleFilter {
	if x, ok := x.GetFilter().(*AdministratorSearchFilter_Role); ok {
		return x.Role
	}
	return nil
}

func (x *AdministratorSearchFilter) GetAnd() *AndFilter {
	if x, ok := x.GetFilter().(*AdministratorSearchFilter_And); ok {
		return x.And
	}
	return nil
}

func (x *AdministratorSearchFilter) GetOr() *OrFilter {
	if x, ok := x.GetFilter().(*AdministratorSearchFilter_Or); ok {
		return x.Or
	}
	return nil
}

func (x *AdministratorSearchFilter) GetNot() *NotFilter {
	if x, ok := x.GetFilter().(*AdministratorSearchFilter_Not); ok {
		return x.Not
	}
	return nil
}

type isAdministratorSearchFilter_Filter interface {
	isAdministratorSearchFilter_Filter()
}

type AdministratorSearchFilter_CreationDate struct {
	// Search for administrator roles by their creation date.
	CreationDate *v2beta.TimestampFilter `protobuf:"bytes,1,opt,name=creation_date,json=creationDate,proto3,oneof"`
}

type AdministratorSearchFilter_ChangeDate struct {
	// Search for administrator roles by their change date.
	ChangeDate *v2beta.TimestampFilter `protobuf:"bytes,2,opt,name=change_date,json=changeDate,proto3,oneof"`
}

type AdministratorSearchFilter_InUserIdsFilter struct {
	// Search for administrators roles by the IDs of the users who was granted the administrator role.
	InUserIdsFilter *v2beta.InIDsFilter `protobuf:"bytes,3,opt,name=in_user_ids_filter,json=inUserIdsFilter,proto3,oneof"`
}

type AdministratorSearchFilter_UserOrganizationId struct {
	// Search for administrators roles by the ID of the organization the user is part of.
	UserOrganizationId *v2beta.IDFilter `protobuf:"bytes,4,opt,name=user_organization_id,json=userOrganizationId,proto3,oneof"`
}

type AdministratorSearchFilter_UserPreferredLoginName struct {
	// Search for administrators roles by the preferred login name of the user.
	UserPreferredLoginName *UserPreferredLoginNameFilter `protobuf:"bytes,5,opt,name=user_preferred_login_name,json=userPreferredLoginName,proto3,oneof"`
}

type AdministratorSearchFilter_UserDisplayName struct {
	// Search for administrators roles by the display name of the user.
	UserDisplayName *UserDisplayNameFilter `protobuf:"bytes,6,opt,name=user_display_name,json=userDisplayName,proto3,oneof"`
}

type AdministratorSearchFilter_Resource struct {
	// Search for administrators roles granted for a specific resource.
	Resource *ResourceFilter `protobuf:"bytes,7,opt,name=resource,proto3,oneof"`
}

type AdministratorSearchFilter_Role struct {
	// Search for administrators roles granted with a specific role.
	Role *RoleFilter `protobuf:"bytes,8,opt,name=role,proto3,oneof"`
}

type AdministratorSearchFilter_And struct {
	// Combine multiple authorization queries with an AND operation.
	And *AndFilter `protobuf:"bytes,9,opt,name=and,proto3,oneof"`
}

type AdministratorSearchFilter_Or struct {
	// Combine multiple authorization queries with an OR operation.
	// For example, to search for authorizations of multiple OrganizationIDs.
	Or *OrFilter `protobuf:"bytes,10,opt,name=or,proto3,oneof"`
}

type AdministratorSearchFilter_Not struct {
	// Negate an authorization query.
	Not *NotFilter `protobuf:"bytes,11,opt,name=not,proto3,oneof"`
}

func (*AdministratorSearchFilter_CreationDate) isAdministratorSearchFilter_Filter() {}

func (*AdministratorSearchFilter_ChangeDate) isAdministratorSearchFilter_Filter() {}

func (*AdministratorSearchFilter_InUserIdsFilter) isAdministratorSearchFilter_Filter() {}

func (*AdministratorSearchFilter_UserOrganizationId) isAdministratorSearchFilter_Filter() {}

func (*AdministratorSearchFilter_UserPreferredLoginName) isAdministratorSearchFilter_Filter() {}

func (*AdministratorSearchFilter_UserDisplayName) isAdministratorSearchFilter_Filter() {}

func (*AdministratorSearchFilter_Resource) isAdministratorSearchFilter_Filter() {}

func (*AdministratorSearchFilter_Role) isAdministratorSearchFilter_Filter() {}

func (*AdministratorSearchFilter_And) isAdministratorSearchFilter_Filter() {}

func (*AdministratorSearchFilter_Or) isAdministratorSearchFilter_Filter() {}

func (*AdministratorSearchFilter_Not) isAdministratorSearchFilter_Filter() {}

type UserPreferredLoginNameFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Search for administrators by the preferred login name of the user.
	PreferredLoginName string `protobuf:"bytes,1,opt,name=preferred_login_name,json=preferredLoginName,proto3" json:"preferred_login_name,omitempty"`
	// Specify the method to search for the preferred login name. Default is EQUAL.
	// For example, to search for all administrator roles of a user with a preferred login name
	// containing a specific string, use CONTAINS or CONTAINS_IGNORE_CASE.
	Method v2beta.TextFilterMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.filter.v2beta.TextFilterMethod" json:"method,omitempty"`
}

func (x *UserPreferredLoginNameFilter) Reset() {
	*x = UserPreferredLoginNameFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPreferredLoginNameFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPreferredLoginNameFilter) ProtoMessage() {}

func (x *UserPreferredLoginNameFilter) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPreferredLoginNameFilter.ProtoReflect.Descriptor instead.
func (*UserPreferredLoginNameFilter) Descriptor() ([]byte, []int) {
	return file_zitadel_internal_permission_v2beta_query_proto_rawDescGZIP(), []int{6}
}

func (x *UserPreferredLoginNameFilter) GetPreferredLoginName() string {
	if x != nil {
		return x.PreferredLoginName
	}
	return ""
}

func (x *UserPreferredLoginNameFilter) GetMethod() v2beta.TextFilterMethod {
	if x != nil {
		return x.Method
	}
	return v2beta.TextFilterMethod(0)
}

type UserDisplayNameFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Search for administrators by the display name of the user.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Specify the method to search for the display name. Default is EQUAL.
	// For example, to search for all administrator roles of a user with a display name
	// containing a specific string, use CONTAINS or CONTAINS_IGNORE_CASE.
	Method v2beta.TextFilterMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.filter.v2beta.TextFilterMethod" json:"method,omitempty"`
}

func (x *UserDisplayNameFilter) Reset() {
	*x = UserDisplayNameFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDisplayNameFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDisplayNameFilter) ProtoMessage() {}

func (x *UserDisplayNameFilter) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDisplayNameFilter.ProtoReflect.Descriptor instead.
func (*UserDisplayNameFilter) Descriptor() ([]byte, []int) {
	return file_zitadel_internal_permission_v2beta_query_proto_rawDescGZIP(), []int{7}
}

func (x *UserDisplayNameFilter) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UserDisplayNameFilter) GetMethod() v2beta.TextFilterMethod {
	if x != nil {
		return x.Method
	}
	return v2beta.TextFilterMethod(0)
}

type ResourceFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Search for administrators by the granted resource.
	//
	// Types that are assignable to Resource:
	//
	//	*ResourceFilter_Instance
	//	*ResourceFilter_OrganizationId
	//	*ResourceFilter_ProjectId
	//	*ResourceFilter_ProjectGrantId
	Resource isResourceFilter_Resource `protobuf_oneof:"resource"`
}

func (x *ResourceFilter) Reset() {
	*x = ResourceFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceFilter) ProtoMessage() {}

func (x *ResourceFilter) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceFilter.ProtoReflect.Descriptor instead.
func (*ResourceFilter) Descriptor() ([]byte, []int) {
	return file_zitadel_internal_permission_v2beta_query_proto_rawDescGZIP(), []int{8}
}

func (m *ResourceFilter) GetResource() isResourceFilter_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *ResourceFilter) GetInstance() bool {
	if x, ok := x.GetResource().(*ResourceFilter_Instance); ok {
		return x.Instance
	}
	return false
}

func (x *ResourceFilter) GetOrganizationId() string {
	if x, ok := x.GetResource().(*ResourceFilter_OrganizationId); ok {
		return x.OrganizationId
	}
	return ""
}

func (x *ResourceFilter) GetProjectId() string {
	if x, ok := x.GetResource().(*ResourceFilter_ProjectId); ok {
		return x.ProjectId
	}
	return ""
}

func (x *ResourceFilter) GetProjectGrantId() string {
	if x, ok := x.GetResource().(*ResourceFilter_ProjectGrantId); ok {
		return x.ProjectGrantId
	}
	return ""
}

type isResourceFilter_Resource interface {
	isResourceFilter_Resource()
}

type ResourceFilter_Instance struct {
	// Search for administrators granted on the instance level.
	Instance bool `protobuf:"varint,1,opt,name=instance,proto3,oneof"`
}

type ResourceFilter_OrganizationId struct {
	// Search for administrators granted on a specific organization.
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3,oneof"`
}

type ResourceFilter_ProjectId struct {
	// Search for administrators granted on a specific project.
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3,oneof"`
}

type ResourceFilter_ProjectGrantId struct {
	// Search for administrators granted on a specific project grant.
	ProjectGrantId string `protobuf:"bytes,4,opt,name=project_grant_id,json=projectGrantId,proto3,oneof"`
}

func (*ResourceFilter_Instance) isResourceFilter_Resource() {}

func (*ResourceFilter_OrganizationId) isResourceFilter_Resource() {}

func (*ResourceFilter_ProjectId) isResourceFilter_Resource() {}

func (*ResourceFilter_ProjectGrantId) isResourceFilter_Resource() {}

type RoleFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Search for administrators by the granted role.
	RoleKey string `protobuf:"bytes,1,opt,name=role_key,json=roleKey,proto3" json:"role_key,omitempty"`
}

func (x *RoleFilter) Reset() {
	*x = RoleFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleFilter) ProtoMessage() {}

func (x *RoleFilter) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleFilter.ProtoReflect.Descriptor instead.
func (*RoleFilter) Descriptor() ([]byte, []int) {
	return file_zitadel_internal_permission_v2beta_query_proto_rawDescGZIP(), []int{9}
}

func (x *RoleFilter) GetRoleKey() string {
	if x != nil {
		return x.RoleKey
	}
	return ""
}

type AndFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*AdministratorSearchFilter `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *AndFilter) Reset() {
	*x = AndFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndFilter) ProtoMessage() {}

func (x *AndFilter) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndFilter.ProtoReflect.Descriptor instead.
func (*AndFilter) Descriptor() ([]byte, []int) {
	return file_zitadel_internal_permission_v2beta_query_proto_rawDescGZIP(), []int{10}
}

func (x *AndFilter) GetQueries() []*AdministratorSearchFilter {
	if x != nil {
		return x.Queries
	}
	return nil
}

type OrFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*AdministratorSearchFilter `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *OrFilter) Reset() {
	*x = OrFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrFilter) ProtoMessage() {}

func (x *OrFilter) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrFilter.ProtoReflect.Descriptor instead.
func (*OrFilter) Descriptor() ([]byte, []int) {
	return file_zitadel_internal_permission_v2beta_query_proto_rawDescGZIP(), []int{11}
}

func (x *OrFilter) GetQueries() []*AdministratorSearchFilter {
	if x != nil {
		return x.Queries
	}
	return nil
}

type NotFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *AdministratorSearchFilter `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *NotFilter) Reset() {
	*x = NotFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotFilter) ProtoMessage() {}

func (x *NotFilter) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_internal_permission_v2beta_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotFilter.ProtoReflect.Descriptor instead.
func (*NotFilter) Descriptor() ([]byte, []int) {
	return file_zitadel_internal_permission_v2beta_query_proto_rawDescGZIP(), []int{12}
}

func (x *NotFilter) GetQuery() *AdministratorSearchFilter {
	if x != nil {
		return x.Query
	}
	return nil
}

var File_zitadel_internal_permission_v2beta_query_proto protoreflect.FileDescriptor

var file_zitadel_internal_permission_v2beta_query_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x22, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2f, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x85, 0x04, 0x0a, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x56,
	0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x57, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x32, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc1, 0x01,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0xb2, 0x07, 0x0a, 0x19, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x4d, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x49,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x69, 0x6e, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x6e,
	0x49, 0x44, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x14,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x49, 0x44, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12, 0x75,
	0x73, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x7d, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x67, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x41, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x03, 0x61, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x02, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4e, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x42, 0x0d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xa7, 0x01, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8,
	0x01, 0x52, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x22, 0x91, 0x01, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x33, 0x0a, 0x0a, 0x52, 0x6f, 0x6c,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x64,
	0x0a, 0x09, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x07, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x08, 0x4f, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x57, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x09, 0x4e, 0x6f, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2a, 0xbe, 0x01, 0x0a, 0x16,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49,
	0x53, 0x54, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x24, 0x0a, 0x20, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49,
	0x53, 0x54, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x42, 0x54, 0x5a, 0x52,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x3b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_internal_permission_v2beta_query_proto_rawDescOnce sync.Once
	file_zitadel_internal_permission_v2beta_query_proto_rawDescData = file_zitadel_internal_permission_v2beta_query_proto_rawDesc
)

func file_zitadel_internal_permission_v2beta_query_proto_rawDescGZIP() []byte {
	file_zitadel_internal_permission_v2beta_query_proto_rawDescOnce.Do(func() {
		file_zitadel_internal_permission_v2beta_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_internal_permission_v2beta_query_proto_rawDescData)
	})
	return file_zitadel_internal_permission_v2beta_query_proto_rawDescData
}

var file_zitadel_internal_permission_v2beta_query_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zitadel_internal_permission_v2beta_query_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_zitadel_internal_permission_v2beta_query_proto_goTypes = []interface{}{
	(AdministratorFieldName)(0),          // 0: zitadel.internal_permission.v2beta.AdministratorFieldName
	(*Administrator)(nil),                // 1: zitadel.internal_permission.v2beta.Administrator
	(*User)(nil),                         // 2: zitadel.internal_permission.v2beta.User
	(*Organization)(nil),                 // 3: zitadel.internal_permission.v2beta.Organization
	(*Project)(nil),                      // 4: zitadel.internal_permission.v2beta.Project
	(*ProjectGrant)(nil),                 // 5: zitadel.internal_permission.v2beta.ProjectGrant
	(*AdministratorSearchFilter)(nil),    // 6: zitadel.internal_permission.v2beta.AdministratorSearchFilter
	(*UserPreferredLoginNameFilter)(nil), // 7: zitadel.internal_permission.v2beta.UserPreferredLoginNameFilter
	(*UserDisplayNameFilter)(nil),        // 8: zitadel.internal_permission.v2beta.UserDisplayNameFilter
	(*ResourceFilter)(nil),               // 9: zitadel.internal_permission.v2beta.ResourceFilter
	(*RoleFilter)(nil),                   // 10: zitadel.internal_permission.v2beta.RoleFilter
	(*AndFilter)(nil),                    // 11: zitadel.internal_permission.v2beta.AndFilter
	(*OrFilter)(nil),                     // 12: zitadel.internal_permission.v2beta.OrFilter
	(*NotFilter)(nil),                    // 13: zitadel.internal_permission.v2beta.NotFilter
	(*timestamppb.Timestamp)(nil),        // 14: google.protobuf.Timestamp
	(*v2beta.TimestampFilter)(nil),       // 15: zitadel.filter.v2beta.TimestampFilter
	(*v2beta.InIDsFilter)(nil),           // 16: zitadel.filter.v2beta.InIDsFilter
	(*v2beta.IDFilter)(nil),              // 17: zitadel.filter.v2beta.IDFilter
	(v2beta.TextFilterMethod)(0),         // 18: zitadel.filter.v2beta.TextFilterMethod
}
var file_zitadel_internal_permission_v2beta_query_proto_depIdxs = []int32{
	14, // 0: zitadel.internal_permission.v2beta.Administrator.creation_date:type_name -> google.protobuf.Timestamp
	14, // 1: zitadel.internal_permission.v2beta.Administrator.change_date:type_name -> google.protobuf.Timestamp
	2,  // 2: zitadel.internal_permission.v2beta.Administrator.user:type_name -> zitadel.internal_permission.v2beta.User
	3,  // 3: zitadel.internal_permission.v2beta.Administrator.organization:type_name -> zitadel.internal_permission.v2beta.Organization
	4,  // 4: zitadel.internal_permission.v2beta.Administrator.project:type_name -> zitadel.internal_permission.v2beta.Project
	5,  // 5: zitadel.internal_permission.v2beta.Administrator.project_grant:type_name -> zitadel.internal_permission.v2beta.ProjectGrant
	15, // 6: zitadel.internal_permission.v2beta.AdministratorSearchFilter.creation_date:type_name -> zitadel.filter.v2beta.TimestampFilter
	15, // 7: zitadel.internal_permission.v2beta.AdministratorSearchFilter.change_date:type_name -> zitadel.filter.v2beta.TimestampFilter
	16, // 8: zitadel.internal_permission.v2beta.AdministratorSearchFilter.in_user_ids_filter:type_name -> zitadel.filter.v2beta.InIDsFilter
	17, // 9: zitadel.internal_permission.v2beta.AdministratorSearchFilter.user_organization_id:type_name -> zitadel.filter.v2beta.IDFilter
	7,  // 10: zitadel.internal_permission.v2beta.AdministratorSearchFilter.user_preferred_login_name:type_name -> zitadel.internal_permission.v2beta.UserPreferredLoginNameFilter
	8,  // 11: zitadel.internal_permission.v2beta.AdministratorSearchFilter.user_display_name:type_name -> zitadel.internal_permission.v2beta.UserDisplayNameFilter
	9,  // 12: zitadel.internal_permission.v2beta.AdministratorSearchFilter.resource:type_name -> zitadel.internal_permission.v2beta.ResourceFilter
	10, // 13: zitadel.internal_permission.v2beta.AdministratorSearchFilter.role:type_name -> zitadel.internal_permission.v2beta.RoleFilter
	11, // 14: zitadel.internal_permission.v2beta.AdministratorSearchFilter.and:type_name -> zitadel.internal_permission.v2beta.AndFilter
	12, // 15: zitadel.internal_permission.v2beta.AdministratorSearchFilter.or:type_name -> zitadel.internal_permission.v2beta.OrFilter
	13, // 16: zitadel.internal_permission.v2beta.AdministratorSearchFilter.not:type_name -> zitadel.internal_permission.v2beta.NotFilter
	18, // 17: zitadel.internal_permission.v2beta.UserPreferredLoginNameFilter.method:type_name -> zitadel.filter.v2beta.TextFilterMethod
	18, // 18: zitadel.internal_permission.v2beta.UserDisplayNameFilter.method:type_name -> zitadel.filter.v2beta.TextFilterMethod
	6,  // 19: zitadel.internal_permission.v2beta.AndFilter.queries:type_name -> zitadel.internal_permission.v2beta.AdministratorSearchFilter
	6,  // 20: zitadel.internal_permission.v2beta.OrFilter.queries:type_name -> zitadel.internal_permission.v2beta.AdministratorSearchFilter
	6,  // 21: zitadel.internal_permission.v2beta.NotFilter.query:type_name -> zitadel.internal_permission.v2beta.AdministratorSearchFilter
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_zitadel_internal_permission_v2beta_query_proto_init() }
func file_zitadel_internal_permission_v2beta_query_proto_init() {
	if File_zitadel_internal_permission_v2beta_query_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zitadel_internal_permission_v2beta_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Administrator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_internal_permission_v2beta_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_internal_permission_v2beta_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_internal_permission_v2beta_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_internal_permission_v2beta_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectGrant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_internal_permission_v2beta_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdministratorSearchFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_internal_permission_v2beta_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPreferredLoginNameFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_internal_permission_v2beta_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDisplayNameFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_internal_permission_v2beta_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_internal_permission_v2beta_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_internal_permission_v2beta_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_internal_permission_v2beta_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_internal_permission_v2beta_query_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_internal_permission_v2beta_query_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Administrator_Instance)(nil),
		(*Administrator_Organization)(nil),
		(*Administrator_Project)(nil),
		(*Administrator_ProjectGrant)(nil),
	}
	file_zitadel_internal_permission_v2beta_query_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*AdministratorSearchFilter_CreationDate)(nil),
		(*AdministratorSearchFilter_ChangeDate)(nil),
		(*AdministratorSearchFilter_InUserIdsFilter)(nil),
		(*AdministratorSearchFilter_UserOrganizationId)(nil),
		(*AdministratorSearchFilter_UserPreferredLoginName)(nil),
		(*AdministratorSearchFilter_UserDisplayName)(nil),
		(*AdministratorSearchFilter_Resource)(nil),
		(*AdministratorSearchFilter_Role)(nil),
		(*AdministratorSearchFilter_And)(nil),
		(*AdministratorSearchFilter_Or)(nil),
		(*AdministratorSearchFilter_Not)(nil),
	}
	file_zitadel_internal_permission_v2beta_query_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ResourceFilter_Instance)(nil),
		(*ResourceFilter_OrganizationId)(nil),
		(*ResourceFilter_ProjectId)(nil),
		(*ResourceFilter_ProjectGrantId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_internal_permission_v2beta_query_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_internal_permission_v2beta_query_proto_goTypes,
		DependencyIndexes: file_zitadel_internal_permission_v2beta_query_proto_depIdxs,
		EnumInfos:         file_zitadel_internal_permission_v2beta_query_proto_enumTypes,
		MessageInfos:      file_zitadel_internal_permission_v2beta_query_proto_msgTypes,
	}.Build()
	File_zitadel_internal_permission_v2beta_query_proto = out.File
	file_zitadel_internal_permission_v2beta_query_proto_rawDesc = nil
	file_zitadel_internal_permission_v2beta_query_proto_goTypes = nil
	file_zitadel_internal_permission_v2beta_query_proto_depIdxs = nil
}
