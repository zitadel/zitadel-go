// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: zitadel/internal_permission/v2beta/internal_permission_service.proto

package internal_permission

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InternalPermissionService_ListAdministrators_FullMethodName  = "/zitadel.internal_permission.v2beta.InternalPermissionService/ListAdministrators"
	InternalPermissionService_CreateAdministrator_FullMethodName = "/zitadel.internal_permission.v2beta.InternalPermissionService/CreateAdministrator"
	InternalPermissionService_UpdateAdministrator_FullMethodName = "/zitadel.internal_permission.v2beta.InternalPermissionService/UpdateAdministrator"
	InternalPermissionService_DeleteAdministrator_FullMethodName = "/zitadel.internal_permission.v2beta.InternalPermissionService/DeleteAdministrator"
)

// InternalPermissionServiceClient is the client API for InternalPermissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalPermissionServiceClient interface {
	// ListAdministrators returns all administrators and its roles matching the request and necessary permissions.
	//
	// Required permissions depend on the resource type:
	//   - "iam.member.read" for instance administrators
	//   - "org.member.read" for organization administrators
	//   - "project.member.read" for project administrators
	//   - "project.grant.member.read" for project grant administrators
	//   - no permissions required for listing own administrator roles
	ListAdministrators(ctx context.Context, in *ListAdministratorsRequest, opts ...grpc.CallOption) (*ListAdministratorsResponse, error)
	// CreateAdministrator grants a administrator role to a user for a specific resource.
	//
	// Note that the roles are specific to the resource type.
	// This means that if you want to grant a user the administrator role for an organization and a project,
	// you need to create two administrator roles.
	//
	// Required permissions depend on the resource type:
	//   - "iam.member.write" for instance administrators
	//   - "org.member.write" for organization administrators
	//   - "project.member.write" for project administrators
	//   - "project.grant.member.write" for project grant administrators
	CreateAdministrator(ctx context.Context, in *CreateAdministratorRequest, opts ...grpc.CallOption) (*CreateAdministratorResponse, error)
	// UpdateAdministrator updates the specific administrator role.
	//
	// Note that any role previously granted to the user and not present in the request will be revoked.
	//
	// Required permissions depend on the resource type:
	//   - "iam.member.write" for instance administrators
	//   - "org.member.write" for organization administrators
	//   - "project.member.write" for project administrators
	//   - "project.grant.member.write" for project grant administrators
	UpdateAdministrator(ctx context.Context, in *UpdateAdministratorRequest, opts ...grpc.CallOption) (*UpdateAdministratorResponse, error)
	// DeleteAdministrator revokes a administrator role from a user.
	//
	// In case the administrator role is not found, the request will return a successful response as
	// the desired state is already achieved.
	// You can check the deletion date in the response to verify if the administrator role was deleted during the request.
	//
	// Required permissions depend on the resource type:
	//   - "iam.member.delete" for instance administrators
	//   - "org.member.delete" for organization administrators
	//   - "project.member.delete" for project administrators
	//   - "project.grant.member.delete" for project grant administrators
	DeleteAdministrator(ctx context.Context, in *DeleteAdministratorRequest, opts ...grpc.CallOption) (*DeleteAdministratorResponse, error)
}

type internalPermissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalPermissionServiceClient(cc grpc.ClientConnInterface) InternalPermissionServiceClient {
	return &internalPermissionServiceClient{cc}
}

func (c *internalPermissionServiceClient) ListAdministrators(ctx context.Context, in *ListAdministratorsRequest, opts ...grpc.CallOption) (*ListAdministratorsResponse, error) {
	out := new(ListAdministratorsResponse)
	err := c.cc.Invoke(ctx, InternalPermissionService_ListAdministrators_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalPermissionServiceClient) CreateAdministrator(ctx context.Context, in *CreateAdministratorRequest, opts ...grpc.CallOption) (*CreateAdministratorResponse, error) {
	out := new(CreateAdministratorResponse)
	err := c.cc.Invoke(ctx, InternalPermissionService_CreateAdministrator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalPermissionServiceClient) UpdateAdministrator(ctx context.Context, in *UpdateAdministratorRequest, opts ...grpc.CallOption) (*UpdateAdministratorResponse, error) {
	out := new(UpdateAdministratorResponse)
	err := c.cc.Invoke(ctx, InternalPermissionService_UpdateAdministrator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalPermissionServiceClient) DeleteAdministrator(ctx context.Context, in *DeleteAdministratorRequest, opts ...grpc.CallOption) (*DeleteAdministratorResponse, error) {
	out := new(DeleteAdministratorResponse)
	err := c.cc.Invoke(ctx, InternalPermissionService_DeleteAdministrator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalPermissionServiceServer is the server API for InternalPermissionService service.
// All implementations must embed UnimplementedInternalPermissionServiceServer
// for forward compatibility
type InternalPermissionServiceServer interface {
	// ListAdministrators returns all administrators and its roles matching the request and necessary permissions.
	//
	// Required permissions depend on the resource type:
	//   - "iam.member.read" for instance administrators
	//   - "org.member.read" for organization administrators
	//   - "project.member.read" for project administrators
	//   - "project.grant.member.read" for project grant administrators
	//   - no permissions required for listing own administrator roles
	ListAdministrators(context.Context, *ListAdministratorsRequest) (*ListAdministratorsResponse, error)
	// CreateAdministrator grants a administrator role to a user for a specific resource.
	//
	// Note that the roles are specific to the resource type.
	// This means that if you want to grant a user the administrator role for an organization and a project,
	// you need to create two administrator roles.
	//
	// Required permissions depend on the resource type:
	//   - "iam.member.write" for instance administrators
	//   - "org.member.write" for organization administrators
	//   - "project.member.write" for project administrators
	//   - "project.grant.member.write" for project grant administrators
	CreateAdministrator(context.Context, *CreateAdministratorRequest) (*CreateAdministratorResponse, error)
	// UpdateAdministrator updates the specific administrator role.
	//
	// Note that any role previously granted to the user and not present in the request will be revoked.
	//
	// Required permissions depend on the resource type:
	//   - "iam.member.write" for instance administrators
	//   - "org.member.write" for organization administrators
	//   - "project.member.write" for project administrators
	//   - "project.grant.member.write" for project grant administrators
	UpdateAdministrator(context.Context, *UpdateAdministratorRequest) (*UpdateAdministratorResponse, error)
	// DeleteAdministrator revokes a administrator role from a user.
	//
	// In case the administrator role is not found, the request will return a successful response as
	// the desired state is already achieved.
	// You can check the deletion date in the response to verify if the administrator role was deleted during the request.
	//
	// Required permissions depend on the resource type:
	//   - "iam.member.delete" for instance administrators
	//   - "org.member.delete" for organization administrators
	//   - "project.member.delete" for project administrators
	//   - "project.grant.member.delete" for project grant administrators
	DeleteAdministrator(context.Context, *DeleteAdministratorRequest) (*DeleteAdministratorResponse, error)
	mustEmbedUnimplementedInternalPermissionServiceServer()
}

// UnimplementedInternalPermissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInternalPermissionServiceServer struct {
}

func (UnimplementedInternalPermissionServiceServer) ListAdministrators(context.Context, *ListAdministratorsRequest) (*ListAdministratorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdministrators not implemented")
}
func (UnimplementedInternalPermissionServiceServer) CreateAdministrator(context.Context, *CreateAdministratorRequest) (*CreateAdministratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdministrator not implemented")
}
func (UnimplementedInternalPermissionServiceServer) UpdateAdministrator(context.Context, *UpdateAdministratorRequest) (*UpdateAdministratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdministrator not implemented")
}
func (UnimplementedInternalPermissionServiceServer) DeleteAdministrator(context.Context, *DeleteAdministratorRequest) (*DeleteAdministratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdministrator not implemented")
}
func (UnimplementedInternalPermissionServiceServer) mustEmbedUnimplementedInternalPermissionServiceServer() {
}

// UnsafeInternalPermissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalPermissionServiceServer will
// result in compilation errors.
type UnsafeInternalPermissionServiceServer interface {
	mustEmbedUnimplementedInternalPermissionServiceServer()
}

func RegisterInternalPermissionServiceServer(s grpc.ServiceRegistrar, srv InternalPermissionServiceServer) {
	s.RegisterService(&InternalPermissionService_ServiceDesc, srv)
}

func _InternalPermissionService_ListAdministrators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdministratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalPermissionServiceServer).ListAdministrators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalPermissionService_ListAdministrators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalPermissionServiceServer).ListAdministrators(ctx, req.(*ListAdministratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalPermissionService_CreateAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalPermissionServiceServer).CreateAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalPermissionService_CreateAdministrator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalPermissionServiceServer).CreateAdministrator(ctx, req.(*CreateAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalPermissionService_UpdateAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalPermissionServiceServer).UpdateAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalPermissionService_UpdateAdministrator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalPermissionServiceServer).UpdateAdministrator(ctx, req.(*UpdateAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalPermissionService_DeleteAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdministratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalPermissionServiceServer).DeleteAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalPermissionService_DeleteAdministrator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalPermissionServiceServer).DeleteAdministrator(ctx, req.(*DeleteAdministratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalPermissionService_ServiceDesc is the grpc.ServiceDesc for InternalPermissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalPermissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zitadel.internal_permission.v2beta.InternalPermissionService",
	HandlerType: (*InternalPermissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAdministrators",
			Handler:    _InternalPermissionService_ListAdministrators_Handler,
		},
		{
			MethodName: "CreateAdministrator",
			Handler:    _InternalPermissionService_CreateAdministrator_Handler,
		},
		{
			MethodName: "UpdateAdministrator",
			Handler:    _InternalPermissionService_UpdateAdministrator_Handler,
		},
		{
			MethodName: "DeleteAdministrator",
			Handler:    _InternalPermissionService_DeleteAdministrator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zitadel/internal_permission/v2beta/internal_permission_service.proto",
}
