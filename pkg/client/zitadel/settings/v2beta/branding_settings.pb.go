// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/settings/v2beta/branding_settings.proto

package settings

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ThemeMode int32

const (
	ThemeMode_THEME_MODE_UNSPECIFIED ThemeMode = 0
	ThemeMode_THEME_MODE_AUTO        ThemeMode = 1
	ThemeMode_THEME_MODE_LIGHT       ThemeMode = 2
	ThemeMode_THEME_MODE_DARK        ThemeMode = 3
)

// Enum value maps for ThemeMode.
var (
	ThemeMode_name = map[int32]string{
		0: "THEME_MODE_UNSPECIFIED",
		1: "THEME_MODE_AUTO",
		2: "THEME_MODE_LIGHT",
		3: "THEME_MODE_DARK",
	}
	ThemeMode_value = map[string]int32{
		"THEME_MODE_UNSPECIFIED": 0,
		"THEME_MODE_AUTO":        1,
		"THEME_MODE_LIGHT":       2,
		"THEME_MODE_DARK":        3,
	}
)

func (x ThemeMode) Enum() *ThemeMode {
	p := new(ThemeMode)
	*p = x
	return p
}

func (x ThemeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThemeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_settings_v2beta_branding_settings_proto_enumTypes[0].Descriptor()
}

func (ThemeMode) Type() protoreflect.EnumType {
	return &file_zitadel_settings_v2beta_branding_settings_proto_enumTypes[0]
}

func (x ThemeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThemeMode.Descriptor instead.
func (ThemeMode) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_settings_v2beta_branding_settings_proto_rawDescGZIP(), []int{0}
}

type BrandingSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LightTheme *Theme `protobuf:"bytes,1,opt,name=light_theme,json=lightTheme,proto3" json:"light_theme,omitempty"`
	DarkTheme  *Theme `protobuf:"bytes,2,opt,name=dark_theme,json=darkTheme,proto3" json:"dark_theme,omitempty"`
	FontUrl    string `protobuf:"bytes,3,opt,name=font_url,json=fontUrl,proto3" json:"font_url,omitempty"`
	// hides the org suffix on the login form if the scope \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set
	HideLoginNameSuffix bool `protobuf:"varint,4,opt,name=hide_login_name_suffix,json=hideLoginNameSuffix,proto3" json:"hide_login_name_suffix,omitempty"`
	DisableWatermark    bool `protobuf:"varint,5,opt,name=disable_watermark,json=disableWatermark,proto3" json:"disable_watermark,omitempty"`
	// resource_owner_type returns if the setting is managed on the organization or on the instance
	ResourceOwnerType ResourceOwnerType `protobuf:"varint,6,opt,name=resource_owner_type,json=resourceOwnerType,proto3,enum=zitadel.settings.v2beta.ResourceOwnerType" json:"resource_owner_type,omitempty"`
	ThemeMode         ThemeMode         `protobuf:"varint,7,opt,name=theme_mode,json=themeMode,proto3,enum=zitadel.settings.v2beta.ThemeMode" json:"theme_mode,omitempty"`
}

func (x *BrandingSettings) Reset() {
	*x = BrandingSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_settings_v2beta_branding_settings_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrandingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandingSettings) ProtoMessage() {}

func (x *BrandingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_settings_v2beta_branding_settings_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandingSettings.ProtoReflect.Descriptor instead.
func (*BrandingSettings) Descriptor() ([]byte, []int) {
	return file_zitadel_settings_v2beta_branding_settings_proto_rawDescGZIP(), []int{0}
}

func (x *BrandingSettings) GetLightTheme() *Theme {
	if x != nil {
		return x.LightTheme
	}
	return nil
}

func (x *BrandingSettings) GetDarkTheme() *Theme {
	if x != nil {
		return x.DarkTheme
	}
	return nil
}

func (x *BrandingSettings) GetFontUrl() string {
	if x != nil {
		return x.FontUrl
	}
	return ""
}

func (x *BrandingSettings) GetHideLoginNameSuffix() bool {
	if x != nil {
		return x.HideLoginNameSuffix
	}
	return false
}

func (x *BrandingSettings) GetDisableWatermark() bool {
	if x != nil {
		return x.DisableWatermark
	}
	return false
}

func (x *BrandingSettings) GetResourceOwnerType() ResourceOwnerType {
	if x != nil {
		return x.ResourceOwnerType
	}
	return ResourceOwnerType_RESOURCE_OWNER_TYPE_UNSPECIFIED
}

func (x *BrandingSettings) GetThemeMode() ThemeMode {
	if x != nil {
		return x.ThemeMode
	}
	return ThemeMode_THEME_MODE_UNSPECIFIED
}

type Theme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// hex value for primary color
	PrimaryColor string `protobuf:"bytes,1,opt,name=primary_color,json=primaryColor,proto3" json:"primary_color,omitempty"`
	// hex value for background color
	BackgroundColor string `protobuf:"bytes,2,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"`
	// hex value for warning color
	WarnColor string `protobuf:"bytes,3,opt,name=warn_color,json=warnColor,proto3" json:"warn_color,omitempty"`
	// hex value for font color
	FontColor string `protobuf:"bytes,4,opt,name=font_color,json=fontColor,proto3" json:"font_color,omitempty"`
	// url where the logo is served
	LogoUrl string `protobuf:"bytes,5,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	// url where the icon is served
	IconUrl string `protobuf:"bytes,6,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
}

func (x *Theme) Reset() {
	*x = Theme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_settings_v2beta_branding_settings_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Theme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Theme) ProtoMessage() {}

func (x *Theme) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_settings_v2beta_branding_settings_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Theme.ProtoReflect.Descriptor instead.
func (*Theme) Descriptor() ([]byte, []int) {
	return file_zitadel_settings_v2beta_branding_settings_proto_rawDescGZIP(), []int{1}
}

func (x *Theme) GetPrimaryColor() string {
	if x != nil {
		return x.PrimaryColor
	}
	return ""
}

func (x *Theme) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

func (x *Theme) GetWarnColor() string {
	if x != nil {
		return x.WarnColor
	}
	return ""
}

func (x *Theme) GetFontColor() string {
	if x != nil {
		return x.FontColor
	}
	return ""
}

func (x *Theme) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *Theme) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

var File_zitadel_settings_v2beta_branding_settings_proto protoreflect.FileDescriptor

var file_zitadel_settings_v2beta_branding_settings_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x17, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe3, 0x06, 0x0a, 0x10, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x0a, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x64, 0x61, 0x72, 0x6b,
	0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x09, 0x64, 0x61,
	0x72, 0x6b, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6f, 0x92, 0x41, 0x6c, 0x32,
	0x14, 0x75, 0x72, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6e, 0x74,
	0x20, 0x75, 0x73, 0x65, 0x64, 0x4a, 0x54, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x61, 0x63, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x31, 0x36, 0x35, 0x36, 0x31, 0x37, 0x38, 0x35, 0x30, 0x36, 0x39, 0x32, 0x36,
	0x35, 0x34, 0x36, 0x30, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x2f, 0x66, 0x6f, 0x6e, 0x74, 0x2d, 0x31, 0x38, 0x30, 0x39, 0x35, 0x30, 0x32, 0x34,
	0x33, 0x32, 0x33, 0x37, 0x34, 0x30, 0x35, 0x34, 0x34, 0x31, 0x22, 0x52, 0x07, 0x66, 0x6f, 0x6e,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0xa6, 0x01, 0x0a, 0x16, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x71, 0x92, 0x41, 0x6e, 0x32, 0x6c, 0x68, 0x69, 0x64, 0x65,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x66, 0x6f,
	0x72, 0x6d, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20,
	0x22, 0x75, 0x72, 0x6e, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69, 0x61, 0x6d,
	0x3a, 0x6f, 0x72, 0x67, 0x3a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3a, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x3a, 0x7b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x22, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x52, 0x13, 0x68, 0x69, 0x64, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x52, 0x0a,
	0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x62,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x52,
	0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0xbd, 0x01, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x61, 0x92, 0x41, 0x5e,
	0x32, 0x5c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x69, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x6f,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x11,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x84, 0x01, 0x0a, 0x0a, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32,
	0x3c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20,
	0x62, 0x6f, 0x74, 0x68, 0x20, 0x6f, 0x72, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x64, 0x61, 0x72,
	0x6b, 0x20, 0x6f, 0x72, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x52, 0x09, 0x74,
	0x68, 0x65, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xd6, 0x04, 0x0a, 0x05, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x1b,
	0x68, 0x65, 0x78, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4a, 0x09, 0x22, 0x23, 0x35,
	0x34, 0x36, 0x39, 0x64, 0x34, 0x22, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x59, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e,
	0x92, 0x41, 0x2b, 0x32, 0x1e, 0x68, 0x65, 0x78, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x4a, 0x09, 0x22, 0x23, 0x46, 0x41, 0x46, 0x41, 0x46, 0x41, 0x22, 0x52, 0x0f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x47, 0x0a, 0x0a, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x18, 0x68, 0x65, 0x78, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x77, 0x61, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x4a, 0x09, 0x22, 0x23, 0x43, 0x44, 0x33, 0x44, 0x35, 0x36, 0x22, 0x52, 0x09, 0x77,
	0x61, 0x72, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x0a, 0x66, 0x6f, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41,
	0x25, 0x32, 0x18, 0x68, 0x65, 0x78, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x66, 0x6f, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x4a, 0x09, 0x22, 0x23, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x22, 0x52, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x85, 0x01, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x6a, 0x92, 0x41, 0x67, 0x32, 0x0f, 0x75, 0x72, 0x6c, 0x20, 0x74,
	0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x6f, 0x4a, 0x54, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x31, 0x36, 0x35, 0x36, 0x31, 0x37, 0x38, 0x35,
	0x30, 0x36, 0x39, 0x32, 0x36, 0x35, 0x34, 0x36, 0x30, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x2d, 0x31, 0x38, 0x30,
	0x39, 0x35, 0x30, 0x34, 0x31, 0x36, 0x33, 0x32, 0x31, 0x34, 0x39, 0x34, 0x36, 0x35, 0x37, 0x22,
	0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x85, 0x01, 0x0a, 0x08, 0x69, 0x63,
	0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6a, 0x92, 0x41,
	0x67, 0x32, 0x0f, 0x75, 0x72, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x63,
	0x6f, 0x6e, 0x4a, 0x54, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x6d,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x31, 0x36, 0x35, 0x36, 0x31, 0x37, 0x38, 0x35, 0x30, 0x36, 0x39, 0x32, 0x36, 0x35, 0x34, 0x36,
	0x30, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2f,
	0x69, 0x63, 0x6f, 0x6e, 0x2d, 0x31, 0x38, 0x30, 0x39, 0x35, 0x30, 0x34, 0x39, 0x38, 0x38, 0x37,
	0x34, 0x31, 0x37, 0x38, 0x38, 0x31, 0x37, 0x22, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72,
	0x6c, 0x2a, 0x67, 0x0a, 0x09, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x48,
	0x45, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49,
	0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x10, 0x03, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x3b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_zitadel_settings_v2beta_branding_settings_proto_rawDescOnce sync.Once
	file_zitadel_settings_v2beta_branding_settings_proto_rawDescData = file_zitadel_settings_v2beta_branding_settings_proto_rawDesc
)

func file_zitadel_settings_v2beta_branding_settings_proto_rawDescGZIP() []byte {
	file_zitadel_settings_v2beta_branding_settings_proto_rawDescOnce.Do(func() {
		file_zitadel_settings_v2beta_branding_settings_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_settings_v2beta_branding_settings_proto_rawDescData)
	})
	return file_zitadel_settings_v2beta_branding_settings_proto_rawDescData
}

var file_zitadel_settings_v2beta_branding_settings_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zitadel_settings_v2beta_branding_settings_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_zitadel_settings_v2beta_branding_settings_proto_goTypes = []interface{}{
	(ThemeMode)(0),           // 0: zitadel.settings.v2beta.ThemeMode
	(*BrandingSettings)(nil), // 1: zitadel.settings.v2beta.BrandingSettings
	(*Theme)(nil),            // 2: zitadel.settings.v2beta.Theme
	(ResourceOwnerType)(0),   // 3: zitadel.settings.v2beta.ResourceOwnerType
}
var file_zitadel_settings_v2beta_branding_settings_proto_depIdxs = []int32{
	2, // 0: zitadel.settings.v2beta.BrandingSettings.light_theme:type_name -> zitadel.settings.v2beta.Theme
	2, // 1: zitadel.settings.v2beta.BrandingSettings.dark_theme:type_name -> zitadel.settings.v2beta.Theme
	3, // 2: zitadel.settings.v2beta.BrandingSettings.resource_owner_type:type_name -> zitadel.settings.v2beta.ResourceOwnerType
	0, // 3: zitadel.settings.v2beta.BrandingSettings.theme_mode:type_name -> zitadel.settings.v2beta.ThemeMode
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_zitadel_settings_v2beta_branding_settings_proto_init() }
func file_zitadel_settings_v2beta_branding_settings_proto_init() {
	if File_zitadel_settings_v2beta_branding_settings_proto != nil {
		return
	}
	file_zitadel_settings_v2beta_settings_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zitadel_settings_v2beta_branding_settings_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrandingSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_settings_v2beta_branding_settings_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Theme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_settings_v2beta_branding_settings_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_settings_v2beta_branding_settings_proto_goTypes,
		DependencyIndexes: file_zitadel_settings_v2beta_branding_settings_proto_depIdxs,
		EnumInfos:         file_zitadel_settings_v2beta_branding_settings_proto_enumTypes,
		MessageInfos:      file_zitadel_settings_v2beta_branding_settings_proto_msgTypes,
	}.Build()
	File_zitadel_settings_v2beta_branding_settings_proto = out.File
	file_zitadel_settings_v2beta_branding_settings_proto_rawDesc = nil
	file_zitadel_settings_v2beta_branding_settings_proto_goTypes = nil
	file_zitadel_settings_v2beta_branding_settings_proto_depIdxs = nil
}
