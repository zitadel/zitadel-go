// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/settings/v2/login_settings.proto

package settings

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SecondFactorType int32

const (
	SecondFactorType_SECOND_FACTOR_TYPE_UNSPECIFIED SecondFactorType = 0
	// This is the type for TOTP
	SecondFactorType_SECOND_FACTOR_TYPE_OTP       SecondFactorType = 1
	SecondFactorType_SECOND_FACTOR_TYPE_U2F       SecondFactorType = 2
	SecondFactorType_SECOND_FACTOR_TYPE_OTP_EMAIL SecondFactorType = 3
	SecondFactorType_SECOND_FACTOR_TYPE_OTP_SMS   SecondFactorType = 4
)

// Enum value maps for SecondFactorType.
var (
	SecondFactorType_name = map[int32]string{
		0: "SECOND_FACTOR_TYPE_UNSPECIFIED",
		1: "SECOND_FACTOR_TYPE_OTP",
		2: "SECOND_FACTOR_TYPE_U2F",
		3: "SECOND_FACTOR_TYPE_OTP_EMAIL",
		4: "SECOND_FACTOR_TYPE_OTP_SMS",
	}
	SecondFactorType_value = map[string]int32{
		"SECOND_FACTOR_TYPE_UNSPECIFIED": 0,
		"SECOND_FACTOR_TYPE_OTP":         1,
		"SECOND_FACTOR_TYPE_U2F":         2,
		"SECOND_FACTOR_TYPE_OTP_EMAIL":   3,
		"SECOND_FACTOR_TYPE_OTP_SMS":     4,
	}
)

func (x SecondFactorType) Enum() *SecondFactorType {
	p := new(SecondFactorType)
	*p = x
	return p
}

func (x SecondFactorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecondFactorType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_settings_v2_login_settings_proto_enumTypes[0].Descriptor()
}

func (SecondFactorType) Type() protoreflect.EnumType {
	return &file_zitadel_settings_v2_login_settings_proto_enumTypes[0]
}

func (x SecondFactorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecondFactorType.Descriptor instead.
func (SecondFactorType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_settings_v2_login_settings_proto_rawDescGZIP(), []int{0}
}

type MultiFactorType int32

const (
	MultiFactorType_MULTI_FACTOR_TYPE_UNSPECIFIED           MultiFactorType = 0
	MultiFactorType_MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION MultiFactorType = 1
)

// Enum value maps for MultiFactorType.
var (
	MultiFactorType_name = map[int32]string{
		0: "MULTI_FACTOR_TYPE_UNSPECIFIED",
		1: "MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION",
	}
	MultiFactorType_value = map[string]int32{
		"MULTI_FACTOR_TYPE_UNSPECIFIED":           0,
		"MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION": 1,
	}
)

func (x MultiFactorType) Enum() *MultiFactorType {
	p := new(MultiFactorType)
	*p = x
	return p
}

func (x MultiFactorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultiFactorType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_settings_v2_login_settings_proto_enumTypes[1].Descriptor()
}

func (MultiFactorType) Type() protoreflect.EnumType {
	return &file_zitadel_settings_v2_login_settings_proto_enumTypes[1]
}

func (x MultiFactorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultiFactorType.Descriptor instead.
func (MultiFactorType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_settings_v2_login_settings_proto_rawDescGZIP(), []int{1}
}

type PasskeysType int32

const (
	PasskeysType_PASSKEYS_TYPE_NOT_ALLOWED PasskeysType = 0
	PasskeysType_PASSKEYS_TYPE_ALLOWED     PasskeysType = 1
)

// Enum value maps for PasskeysType.
var (
	PasskeysType_name = map[int32]string{
		0: "PASSKEYS_TYPE_NOT_ALLOWED",
		1: "PASSKEYS_TYPE_ALLOWED",
	}
	PasskeysType_value = map[string]int32{
		"PASSKEYS_TYPE_NOT_ALLOWED": 0,
		"PASSKEYS_TYPE_ALLOWED":     1,
	}
)

func (x PasskeysType) Enum() *PasskeysType {
	p := new(PasskeysType)
	*p = x
	return p
}

func (x PasskeysType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PasskeysType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_settings_v2_login_settings_proto_enumTypes[2].Descriptor()
}

func (PasskeysType) Type() protoreflect.EnumType {
	return &file_zitadel_settings_v2_login_settings_proto_enumTypes[2]
}

func (x PasskeysType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PasskeysType.Descriptor instead.
func (PasskeysType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_settings_v2_login_settings_proto_rawDescGZIP(), []int{2}
}

type IdentityProviderType int32

const (
	IdentityProviderType_IDENTITY_PROVIDER_TYPE_UNSPECIFIED        IdentityProviderType = 0
	IdentityProviderType_IDENTITY_PROVIDER_TYPE_OIDC               IdentityProviderType = 1
	IdentityProviderType_IDENTITY_PROVIDER_TYPE_JWT                IdentityProviderType = 2
	IdentityProviderType_IDENTITY_PROVIDER_TYPE_LDAP               IdentityProviderType = 3
	IdentityProviderType_IDENTITY_PROVIDER_TYPE_OAUTH              IdentityProviderType = 4
	IdentityProviderType_IDENTITY_PROVIDER_TYPE_AZURE_AD           IdentityProviderType = 5
	IdentityProviderType_IDENTITY_PROVIDER_TYPE_GITHUB             IdentityProviderType = 6
	IdentityProviderType_IDENTITY_PROVIDER_TYPE_GITHUB_ES          IdentityProviderType = 7
	IdentityProviderType_IDENTITY_PROVIDER_TYPE_GITLAB             IdentityProviderType = 8
	IdentityProviderType_IDENTITY_PROVIDER_TYPE_GITLAB_SELF_HOSTED IdentityProviderType = 9
	IdentityProviderType_IDENTITY_PROVIDER_TYPE_GOOGLE             IdentityProviderType = 10
	IdentityProviderType_IDENTITY_PROVIDER_TYPE_SAML               IdentityProviderType = 11
	IdentityProviderType_IDENTITY_PROVIDER_TYPE_APPLE              IdentityProviderType = 12
)

// Enum value maps for IdentityProviderType.
var (
	IdentityProviderType_name = map[int32]string{
		0:  "IDENTITY_PROVIDER_TYPE_UNSPECIFIED",
		1:  "IDENTITY_PROVIDER_TYPE_OIDC",
		2:  "IDENTITY_PROVIDER_TYPE_JWT",
		3:  "IDENTITY_PROVIDER_TYPE_LDAP",
		4:  "IDENTITY_PROVIDER_TYPE_OAUTH",
		5:  "IDENTITY_PROVIDER_TYPE_AZURE_AD",
		6:  "IDENTITY_PROVIDER_TYPE_GITHUB",
		7:  "IDENTITY_PROVIDER_TYPE_GITHUB_ES",
		8:  "IDENTITY_PROVIDER_TYPE_GITLAB",
		9:  "IDENTITY_PROVIDER_TYPE_GITLAB_SELF_HOSTED",
		10: "IDENTITY_PROVIDER_TYPE_GOOGLE",
		11: "IDENTITY_PROVIDER_TYPE_SAML",
		12: "IDENTITY_PROVIDER_TYPE_APPLE",
	}
	IdentityProviderType_value = map[string]int32{
		"IDENTITY_PROVIDER_TYPE_UNSPECIFIED":        0,
		"IDENTITY_PROVIDER_TYPE_OIDC":               1,
		"IDENTITY_PROVIDER_TYPE_JWT":                2,
		"IDENTITY_PROVIDER_TYPE_LDAP":               3,
		"IDENTITY_PROVIDER_TYPE_OAUTH":              4,
		"IDENTITY_PROVIDER_TYPE_AZURE_AD":           5,
		"IDENTITY_PROVIDER_TYPE_GITHUB":             6,
		"IDENTITY_PROVIDER_TYPE_GITHUB_ES":          7,
		"IDENTITY_PROVIDER_TYPE_GITLAB":             8,
		"IDENTITY_PROVIDER_TYPE_GITLAB_SELF_HOSTED": 9,
		"IDENTITY_PROVIDER_TYPE_GOOGLE":             10,
		"IDENTITY_PROVIDER_TYPE_SAML":               11,
		"IDENTITY_PROVIDER_TYPE_APPLE":              12,
	}
)

func (x IdentityProviderType) Enum() *IdentityProviderType {
	p := new(IdentityProviderType)
	*p = x
	return p
}

func (x IdentityProviderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentityProviderType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_settings_v2_login_settings_proto_enumTypes[3].Descriptor()
}

func (IdentityProviderType) Type() protoreflect.EnumType {
	return &file_zitadel_settings_v2_login_settings_proto_enumTypes[3]
}

func (x IdentityProviderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentityProviderType.Descriptor instead.
func (IdentityProviderType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_settings_v2_login_settings_proto_rawDescGZIP(), []int{3}
}

type LoginSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowUsernamePassword      bool                 `protobuf:"varint,1,opt,name=allow_username_password,json=allowUsernamePassword,proto3" json:"allow_username_password,omitempty"`
	AllowRegister              bool                 `protobuf:"varint,2,opt,name=allow_register,json=allowRegister,proto3" json:"allow_register,omitempty"`
	AllowExternalIdp           bool                 `protobuf:"varint,3,opt,name=allow_external_idp,json=allowExternalIdp,proto3" json:"allow_external_idp,omitempty"`
	ForceMfa                   bool                 `protobuf:"varint,4,opt,name=force_mfa,json=forceMfa,proto3" json:"force_mfa,omitempty"`
	PasskeysType               PasskeysType         `protobuf:"varint,5,opt,name=passkeys_type,json=passkeysType,proto3,enum=zitadel.settings.v2.PasskeysType" json:"passkeys_type,omitempty"`
	HidePasswordReset          bool                 `protobuf:"varint,6,opt,name=hide_password_reset,json=hidePasswordReset,proto3" json:"hide_password_reset,omitempty"`
	IgnoreUnknownUsernames     bool                 `protobuf:"varint,7,opt,name=ignore_unknown_usernames,json=ignoreUnknownUsernames,proto3" json:"ignore_unknown_usernames,omitempty"`
	DefaultRedirectUri         string               `protobuf:"bytes,8,opt,name=default_redirect_uri,json=defaultRedirectUri,proto3" json:"default_redirect_uri,omitempty"`
	PasswordCheckLifetime      *durationpb.Duration `protobuf:"bytes,9,opt,name=password_check_lifetime,json=passwordCheckLifetime,proto3" json:"password_check_lifetime,omitempty"`
	ExternalLoginCheckLifetime *durationpb.Duration `protobuf:"bytes,10,opt,name=external_login_check_lifetime,json=externalLoginCheckLifetime,proto3" json:"external_login_check_lifetime,omitempty"`
	MfaInitSkipLifetime        *durationpb.Duration `protobuf:"bytes,11,opt,name=mfa_init_skip_lifetime,json=mfaInitSkipLifetime,proto3" json:"mfa_init_skip_lifetime,omitempty"`
	SecondFactorCheckLifetime  *durationpb.Duration `protobuf:"bytes,12,opt,name=second_factor_check_lifetime,json=secondFactorCheckLifetime,proto3" json:"second_factor_check_lifetime,omitempty"`
	MultiFactorCheckLifetime   *durationpb.Duration `protobuf:"bytes,13,opt,name=multi_factor_check_lifetime,json=multiFactorCheckLifetime,proto3" json:"multi_factor_check_lifetime,omitempty"`
	SecondFactors              []SecondFactorType   `protobuf:"varint,14,rep,packed,name=second_factors,json=secondFactors,proto3,enum=zitadel.settings.v2.SecondFactorType" json:"second_factors,omitempty"`
	MultiFactors               []MultiFactorType    `protobuf:"varint,15,rep,packed,name=multi_factors,json=multiFactors,proto3,enum=zitadel.settings.v2.MultiFactorType" json:"multi_factors,omitempty"`
	// If set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organization on success.
	AllowDomainDiscovery  bool `protobuf:"varint,16,opt,name=allow_domain_discovery,json=allowDomainDiscovery,proto3" json:"allow_domain_discovery,omitempty"`
	DisableLoginWithEmail bool `protobuf:"varint,17,opt,name=disable_login_with_email,json=disableLoginWithEmail,proto3" json:"disable_login_with_email,omitempty"`
	DisableLoginWithPhone bool `protobuf:"varint,18,opt,name=disable_login_with_phone,json=disableLoginWithPhone,proto3" json:"disable_login_with_phone,omitempty"`
	// resource_owner_type returns if the settings is managed on the organization or on the instance
	ResourceOwnerType ResourceOwnerType `protobuf:"varint,19,opt,name=resource_owner_type,json=resourceOwnerType,proto3,enum=zitadel.settings.v2.ResourceOwnerType" json:"resource_owner_type,omitempty"`
	ForceMfaLocalOnly bool              `protobuf:"varint,22,opt,name=force_mfa_local_only,json=forceMfaLocalOnly,proto3" json:"force_mfa_local_only,omitempty"`
}

func (x *LoginSettings) Reset() {
	*x = LoginSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_settings_v2_login_settings_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginSettings) ProtoMessage() {}

func (x *LoginSettings) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_settings_v2_login_settings_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginSettings.ProtoReflect.Descriptor instead.
func (*LoginSettings) Descriptor() ([]byte, []int) {
	return file_zitadel_settings_v2_login_settings_proto_rawDescGZIP(), []int{0}
}

func (x *LoginSettings) GetAllowUsernamePassword() bool {
	if x != nil {
		return x.AllowUsernamePassword
	}
	return false
}

func (x *LoginSettings) GetAllowRegister() bool {
	if x != nil {
		return x.AllowRegister
	}
	return false
}

func (x *LoginSettings) GetAllowExternalIdp() bool {
	if x != nil {
		return x.AllowExternalIdp
	}
	return false
}

func (x *LoginSettings) GetForceMfa() bool {
	if x != nil {
		return x.ForceMfa
	}
	return false
}

func (x *LoginSettings) GetPasskeysType() PasskeysType {
	if x != nil {
		return x.PasskeysType
	}
	return PasskeysType_PASSKEYS_TYPE_NOT_ALLOWED
}

func (x *LoginSettings) GetHidePasswordReset() bool {
	if x != nil {
		return x.HidePasswordReset
	}
	return false
}

func (x *LoginSettings) GetIgnoreUnknownUsernames() bool {
	if x != nil {
		return x.IgnoreUnknownUsernames
	}
	return false
}

func (x *LoginSettings) GetDefaultRedirectUri() string {
	if x != nil {
		return x.DefaultRedirectUri
	}
	return ""
}

func (x *LoginSettings) GetPasswordCheckLifetime() *durationpb.Duration {
	if x != nil {
		return x.PasswordCheckLifetime
	}
	return nil
}

func (x *LoginSettings) GetExternalLoginCheckLifetime() *durationpb.Duration {
	if x != nil {
		return x.ExternalLoginCheckLifetime
	}
	return nil
}

func (x *LoginSettings) GetMfaInitSkipLifetime() *durationpb.Duration {
	if x != nil {
		return x.MfaInitSkipLifetime
	}
	return nil
}

func (x *LoginSettings) GetSecondFactorCheckLifetime() *durationpb.Duration {
	if x != nil {
		return x.SecondFactorCheckLifetime
	}
	return nil
}

func (x *LoginSettings) GetMultiFactorCheckLifetime() *durationpb.Duration {
	if x != nil {
		return x.MultiFactorCheckLifetime
	}
	return nil
}

func (x *LoginSettings) GetSecondFactors() []SecondFactorType {
	if x != nil {
		return x.SecondFactors
	}
	return nil
}

func (x *LoginSettings) GetMultiFactors() []MultiFactorType {
	if x != nil {
		return x.MultiFactors
	}
	return nil
}

func (x *LoginSettings) GetAllowDomainDiscovery() bool {
	if x != nil {
		return x.AllowDomainDiscovery
	}
	return false
}

func (x *LoginSettings) GetDisableLoginWithEmail() bool {
	if x != nil {
		return x.DisableLoginWithEmail
	}
	return false
}

func (x *LoginSettings) GetDisableLoginWithPhone() bool {
	if x != nil {
		return x.DisableLoginWithPhone
	}
	return false
}

func (x *LoginSettings) GetResourceOwnerType() ResourceOwnerType {
	if x != nil {
		return x.ResourceOwnerType
	}
	return ResourceOwnerType_RESOURCE_OWNER_TYPE_UNSPECIFIED
}

func (x *LoginSettings) GetForceMfaLocalOnly() bool {
	if x != nil {
		return x.ForceMfaLocalOnly
	}
	return false
}

type IdentityProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type IdentityProviderType `protobuf:"varint,3,opt,name=type,proto3,enum=zitadel.settings.v2.IdentityProviderType" json:"type,omitempty"`
}

func (x *IdentityProvider) Reset() {
	*x = IdentityProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_settings_v2_login_settings_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityProvider) ProtoMessage() {}

func (x *IdentityProvider) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_settings_v2_login_settings_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityProvider.ProtoReflect.Descriptor instead.
func (*IdentityProvider) Descriptor() ([]byte, []int) {
	return file_zitadel_settings_v2_login_settings_proto_rawDescGZIP(), []int{1}
}

func (x *IdentityProvider) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdentityProvider) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IdentityProvider) GetType() IdentityProviderType {
	if x != nil {
		return x.Type
	}
	return IdentityProviderType_IDENTITY_PROVIDER_TYPE_UNSPECIFIED
}

var File_zitadel_settings_v2_login_settings_proto protoreflect.FileDescriptor

var file_zitadel_settings_v2_login_settings_proto_rawDesc = []byte{
	0x0a, 0x28, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x22, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x92, 0x18, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x7e, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x46, 0x92, 0x41, 0x43, 0x32, 0x41, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69,
	0x73, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x6f, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x15,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x72, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x4b, 0x92,
	0x41, 0x48, 0x32, 0x46, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x61,
	0x20, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x20, 0x61,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x12, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x56, 0x92, 0x41, 0x53, 0x32, 0x51, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69,
	0x73, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64,
	0x20, 0x61, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x20, 0x45, 0x2e,
	0x67, 0x2e, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x52, 0x10,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x70,
	0x12, 0x55, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x66, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x38, 0x92, 0x41, 0x35, 0x32, 0x33, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x73, 0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x4d, 0x55, 0x53, 0x54,
	0x20, 0x75, 0x73, 0x65, 0x20, 0x61, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x2d, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x6f, 0x67, 0x20, 0x69, 0x6e, 0x52, 0x08, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x4d, 0x66, 0x61, 0x12, 0x76, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x6b,
	0x65, 0x79, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x29, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20,
	0x69, 0x66, 0x20, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x77, 0x0a, 0x13, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x47, 0x92, 0x41,
	0x44, 0x32, 0x42, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x6e,
	0x6b, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x77,
	0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x11, 0x68, 0x69, 0x64, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0xab, 0x01, 0x0a, 0x18, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x71, 0x92, 0x41, 0x6e,
	0x32, 0x6c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x6e,
	0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61,
	0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x77, 0x61, 0x79,
	0x73, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x16,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x8e, 0x01, 0x92, 0x41, 0x8a, 0x01, 0x32, 0x69, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x70, 0x70, 0x20, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x6d, 0x61, 0x69, 0x6c, 0x29, 0x4a, 0x1d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x69, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x22, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0xb1, 0x01, 0x0a, 0x17, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x5e, 0x92, 0x41, 0x5b, 0x32, 0x4e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x68, 0x6f, 0x77, 0x20,
	0x6d, 0x75, 0x63, 0x68, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x2d, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2e, 0x4a, 0x09, 0x22, 0x38,
	0x36, 0x34, 0x30, 0x30, 0x30, 0x73, 0x22, 0x52, 0x15, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0xc4,
	0x01, 0x0a, 0x1d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x66, 0x92, 0x41, 0x63, 0x32, 0x56, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x68, 0x6f, 0x77, 0x20, 0x6d, 0x75, 0x63, 0x68, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x68, 0x61, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4a, 0x09,
	0x22, 0x38, 0x36, 0x34, 0x30, 0x30, 0x30, 0x73, 0x22, 0x52, 0x1a, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x16, 0x6d, 0x66, 0x61, 0x5f, 0x69, 0x6e,
	0x69, 0x74, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x50, 0x92, 0x41, 0x4d, 0x32, 0x3f, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x68, 0x6f, 0x77, 0x20, 0x6d, 0x75, 0x63, 0x68, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x66, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x6e,
	0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x2e, 0x4a, 0x0a, 0x22, 0x32, 0x35, 0x39, 0x32, 0x30, 0x30,
	0x30, 0x73, 0x22, 0x52, 0x13, 0x6d, 0x66, 0x61, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x70,
	0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x1c, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x47, 0x92, 0x41, 0x44, 0x32,
	0x38, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x68,
	0x6f, 0x77, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20,
	0x69, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x4a, 0x08, 0x22, 0x36, 0x34, 0x38, 0x30,
	0x30, 0x73, 0x22, 0x52, 0x19, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x9a,
	0x01, 0x0a, 0x1b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x40, 0x92, 0x41, 0x3d, 0x32, 0x31, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x68, 0x6f,
	0x77, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x2d, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x69, 0x73,
	0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x4a, 0x08, 0x22, 0x34, 0x33, 0x32, 0x30, 0x30, 0x73,
	0x22, 0x52, 0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x86, 0x02, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x42, 0xcf, 0x01, 0x92, 0x41, 0xcb, 0x01, 0x32, 0xc8, 0x01, 0x49,
	0x66, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x20, 0x28, 0x40, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x20, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65,
	0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0xa4, 0x01,
	0x0a, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x6b, 0x92, 0x41, 0x68, 0x32, 0x66, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x28, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20,
	0x62, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79,
	0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x15, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0xa3, 0x01, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x42, 0x6a, 0x92, 0x41, 0x67, 0x32, 0x65, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x6c, 0x79, 0x20, 0x28, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x62, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0xba, 0x01, 0x0a, 0x13, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x62, 0x92, 0x41, 0x5f, 0x32, 0x5d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x20, 0x6f, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x72, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xbe, 0x01, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x6d, 0x66, 0x61, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x42, 0x8c, 0x01, 0x92, 0x41, 0x88, 0x01, 0x32, 0x85, 0x01,
	0x69, 0x66, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x6f, 0x6e,
	0x6c, 0x79, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x61, 0x72, 0x65,
	0x20, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x4d,
	0x46, 0x41, 0x2e, 0x20, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x49, 0x44, 0x50, 0x73, 0x20,
	0x77, 0x6f, 0x6e, 0x27, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x20, 0x61, 0x20, 0x4d,
	0x46, 0x41, 0x20, 0x73, 0x74, 0x65, 0x70, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x66, 0x61, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x75, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a,
	0xb0, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x46,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x54, 0x50, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x46,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x32, 0x46, 0x10, 0x02,
	0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x50, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x50, 0x5f, 0x53, 0x4d, 0x53,
	0x10, 0x04, 0x2a, 0x61, 0x0a, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x46,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x32,
	0x46, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0x48, 0x0a, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x53, 0x53, 0x4b, 0x45, 0x59,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x53, 0x53, 0x4b, 0x45, 0x59, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x2a,
	0xe8, 0x03, 0x0a, 0x14, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x49, 0x44, 0x43, 0x10,
	0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x57, 0x54, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x44, 0x41, 0x50,
	0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x41, 0x55,
	0x54, 0x48, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x5a, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x44, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x45, 0x53,
	0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x54,
	0x4c, 0x41, 0x42, 0x10, 0x08, 0x12, 0x2d, 0x0a, 0x29, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x48, 0x4f, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x41, 0x4d, 0x4c, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x10, 0x0c, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x76, 0x32, 0x3b, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_settings_v2_login_settings_proto_rawDescOnce sync.Once
	file_zitadel_settings_v2_login_settings_proto_rawDescData = file_zitadel_settings_v2_login_settings_proto_rawDesc
)

func file_zitadel_settings_v2_login_settings_proto_rawDescGZIP() []byte {
	file_zitadel_settings_v2_login_settings_proto_rawDescOnce.Do(func() {
		file_zitadel_settings_v2_login_settings_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_settings_v2_login_settings_proto_rawDescData)
	})
	return file_zitadel_settings_v2_login_settings_proto_rawDescData
}

var file_zitadel_settings_v2_login_settings_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_zitadel_settings_v2_login_settings_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_zitadel_settings_v2_login_settings_proto_goTypes = []interface{}{
	(SecondFactorType)(0),       // 0: zitadel.settings.v2.SecondFactorType
	(MultiFactorType)(0),        // 1: zitadel.settings.v2.MultiFactorType
	(PasskeysType)(0),           // 2: zitadel.settings.v2.PasskeysType
	(IdentityProviderType)(0),   // 3: zitadel.settings.v2.IdentityProviderType
	(*LoginSettings)(nil),       // 4: zitadel.settings.v2.LoginSettings
	(*IdentityProvider)(nil),    // 5: zitadel.settings.v2.IdentityProvider
	(*durationpb.Duration)(nil), // 6: google.protobuf.Duration
	(ResourceOwnerType)(0),      // 7: zitadel.settings.v2.ResourceOwnerType
}
var file_zitadel_settings_v2_login_settings_proto_depIdxs = []int32{
	2,  // 0: zitadel.settings.v2.LoginSettings.passkeys_type:type_name -> zitadel.settings.v2.PasskeysType
	6,  // 1: zitadel.settings.v2.LoginSettings.password_check_lifetime:type_name -> google.protobuf.Duration
	6,  // 2: zitadel.settings.v2.LoginSettings.external_login_check_lifetime:type_name -> google.protobuf.Duration
	6,  // 3: zitadel.settings.v2.LoginSettings.mfa_init_skip_lifetime:type_name -> google.protobuf.Duration
	6,  // 4: zitadel.settings.v2.LoginSettings.second_factor_check_lifetime:type_name -> google.protobuf.Duration
	6,  // 5: zitadel.settings.v2.LoginSettings.multi_factor_check_lifetime:type_name -> google.protobuf.Duration
	0,  // 6: zitadel.settings.v2.LoginSettings.second_factors:type_name -> zitadel.settings.v2.SecondFactorType
	1,  // 7: zitadel.settings.v2.LoginSettings.multi_factors:type_name -> zitadel.settings.v2.MultiFactorType
	7,  // 8: zitadel.settings.v2.LoginSettings.resource_owner_type:type_name -> zitadel.settings.v2.ResourceOwnerType
	3,  // 9: zitadel.settings.v2.IdentityProvider.type:type_name -> zitadel.settings.v2.IdentityProviderType
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_zitadel_settings_v2_login_settings_proto_init() }
func file_zitadel_settings_v2_login_settings_proto_init() {
	if File_zitadel_settings_v2_login_settings_proto != nil {
		return
	}
	file_zitadel_settings_v2_settings_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zitadel_settings_v2_login_settings_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_settings_v2_login_settings_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_settings_v2_login_settings_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_settings_v2_login_settings_proto_goTypes,
		DependencyIndexes: file_zitadel_settings_v2_login_settings_proto_depIdxs,
		EnumInfos:         file_zitadel_settings_v2_login_settings_proto_enumTypes,
		MessageInfos:      file_zitadel_settings_v2_login_settings_proto_msgTypes,
	}.Build()
	File_zitadel_settings_v2_login_settings_proto = out.File
	file_zitadel_settings_v2_login_settings_proto_rawDesc = nil
	file_zitadel_settings_v2_login_settings_proto_goTypes = nil
	file_zitadel_settings_v2_login_settings_proto_depIdxs = nil
}
