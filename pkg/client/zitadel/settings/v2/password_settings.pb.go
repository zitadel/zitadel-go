// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/settings/v2/password_settings.proto

package settings

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PasswordComplexitySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinLength         uint64 `protobuf:"varint,1,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"`
	RequiresUppercase bool   `protobuf:"varint,2,opt,name=requires_uppercase,json=requiresUppercase,proto3" json:"requires_uppercase,omitempty"`
	RequiresLowercase bool   `protobuf:"varint,3,opt,name=requires_lowercase,json=requiresLowercase,proto3" json:"requires_lowercase,omitempty"`
	RequiresNumber    bool   `protobuf:"varint,4,opt,name=requires_number,json=requiresNumber,proto3" json:"requires_number,omitempty"`
	RequiresSymbol    bool   `protobuf:"varint,5,opt,name=requires_symbol,json=requiresSymbol,proto3" json:"requires_symbol,omitempty"`
	// resource_owner_type returns if the settings is managed on the organization or on the instance
	ResourceOwnerType ResourceOwnerType `protobuf:"varint,6,opt,name=resource_owner_type,json=resourceOwnerType,proto3,enum=zitadel.settings.v2.ResourceOwnerType" json:"resource_owner_type,omitempty"`
}

func (x *PasswordComplexitySettings) Reset() {
	*x = PasswordComplexitySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_settings_v2_password_settings_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordComplexitySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordComplexitySettings) ProtoMessage() {}

func (x *PasswordComplexitySettings) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_settings_v2_password_settings_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordComplexitySettings.ProtoReflect.Descriptor instead.
func (*PasswordComplexitySettings) Descriptor() ([]byte, []int) {
	return file_zitadel_settings_v2_password_settings_proto_rawDescGZIP(), []int{0}
}

func (x *PasswordComplexitySettings) GetMinLength() uint64 {
	if x != nil {
		return x.MinLength
	}
	return 0
}

func (x *PasswordComplexitySettings) GetRequiresUppercase() bool {
	if x != nil {
		return x.RequiresUppercase
	}
	return false
}

func (x *PasswordComplexitySettings) GetRequiresLowercase() bool {
	if x != nil {
		return x.RequiresLowercase
	}
	return false
}

func (x *PasswordComplexitySettings) GetRequiresNumber() bool {
	if x != nil {
		return x.RequiresNumber
	}
	return false
}

func (x *PasswordComplexitySettings) GetRequiresSymbol() bool {
	if x != nil {
		return x.RequiresSymbol
	}
	return false
}

func (x *PasswordComplexitySettings) GetResourceOwnerType() ResourceOwnerType {
	if x != nil {
		return x.ResourceOwnerType
	}
	return ResourceOwnerType_RESOURCE_OWNER_TYPE_UNSPECIFIED
}

type PasswordExpirySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of days after which a password will expire. The user will be forced to change the password on the following authentication.
	MaxAgeDays uint64 `protobuf:"varint,1,opt,name=max_age_days,json=maxAgeDays,proto3" json:"max_age_days,omitempty"`
	// Amount of days after which the user should be notified of the upcoming expiry. ZITADEL will not notify the user.
	ExpireWarnDays uint64 `protobuf:"varint,2,opt,name=expire_warn_days,json=expireWarnDays,proto3" json:"expire_warn_days,omitempty"`
	// resource_owner_type returns if the settings is managed on the organization or on the instance
	ResourceOwnerType ResourceOwnerType `protobuf:"varint,3,opt,name=resource_owner_type,json=resourceOwnerType,proto3,enum=zitadel.settings.v2.ResourceOwnerType" json:"resource_owner_type,omitempty"`
}

func (x *PasswordExpirySettings) Reset() {
	*x = PasswordExpirySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_settings_v2_password_settings_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordExpirySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordExpirySettings) ProtoMessage() {}

func (x *PasswordExpirySettings) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_settings_v2_password_settings_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordExpirySettings.ProtoReflect.Descriptor instead.
func (*PasswordExpirySettings) Descriptor() ([]byte, []int) {
	return file_zitadel_settings_v2_password_settings_proto_rawDescGZIP(), []int{1}
}

func (x *PasswordExpirySettings) GetMaxAgeDays() uint64 {
	if x != nil {
		return x.MaxAgeDays
	}
	return 0
}

func (x *PasswordExpirySettings) GetExpireWarnDays() uint64 {
	if x != nil {
		return x.ExpireWarnDays
	}
	return 0
}

func (x *PasswordExpirySettings) GetResourceOwnerType() ResourceOwnerType {
	if x != nil {
		return x.ResourceOwnerType
	}
	return ResourceOwnerType_RESOURCE_OWNER_TYPE_UNSPECIFIED
}

var File_zitadel_settings_v2_password_settings_proto protoreflect.FileDescriptor

var file_zitadel_settings_v2_password_settings_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x76, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x22, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x05, 0x0a, 0x1a, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x29,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2e, 0x4a, 0x03, 0x22, 0x38, 0x22, 0x52, 0x09,
	0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x6d, 0x0a, 0x12, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x20, 0x4d, 0x55, 0x53, 0x54, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x20, 0x61, 0x6e, 0x20, 0x75, 0x70, 0x70, 0x65, 0x72, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x55,
	0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x73, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x32, 0x37, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x20, 0x4d, 0x55, 0x53, 0x54, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20,
	0x61, 0x20, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4c, 0x6f, 0x77, 0x65,
	0x72, 0x63, 0x61, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x32,
	0x92, 0x41, 0x2f, 0x32, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x4d, 0x55, 0x53,
	0x54, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x65, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3c, 0x92, 0x41, 0x39,
	0x32, 0x37, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x4d, 0x55, 0x53, 0x54, 0x20, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2e,
	0x20, 0x45, 0x2e, 0x67, 0x2e, 0x20, 0x22, 0x24, 0x22, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x73, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0xba, 0x01, 0x0a, 0x13, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x62, 0x92, 0x41, 0x5f, 0x32, 0x5d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x73, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x72, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x2c, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x79,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x4a, 0x05, 0x22, 0x33,
	0x36, 0x35, 0x22, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x44, 0x61, 0x79, 0x73, 0x12,
	0x33, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0x92, 0x41, 0x06, 0x4a, 0x04,
	0x22, 0x31, 0x30, 0x22, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x57, 0x61, 0x72, 0x6e,
	0x44, 0x61, 0x79, 0x73, 0x12, 0x56, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3a, 0x5a, 0x38,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x76, 0x32, 0x3b,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_settings_v2_password_settings_proto_rawDescOnce sync.Once
	file_zitadel_settings_v2_password_settings_proto_rawDescData = file_zitadel_settings_v2_password_settings_proto_rawDesc
)

func file_zitadel_settings_v2_password_settings_proto_rawDescGZIP() []byte {
	file_zitadel_settings_v2_password_settings_proto_rawDescOnce.Do(func() {
		file_zitadel_settings_v2_password_settings_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_settings_v2_password_settings_proto_rawDescData)
	})
	return file_zitadel_settings_v2_password_settings_proto_rawDescData
}

var file_zitadel_settings_v2_password_settings_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_zitadel_settings_v2_password_settings_proto_goTypes = []interface{}{
	(*PasswordComplexitySettings)(nil), // 0: zitadel.settings.v2.PasswordComplexitySettings
	(*PasswordExpirySettings)(nil),     // 1: zitadel.settings.v2.PasswordExpirySettings
	(ResourceOwnerType)(0),             // 2: zitadel.settings.v2.ResourceOwnerType
}
var file_zitadel_settings_v2_password_settings_proto_depIdxs = []int32{
	2, // 0: zitadel.settings.v2.PasswordComplexitySettings.resource_owner_type:type_name -> zitadel.settings.v2.ResourceOwnerType
	2, // 1: zitadel.settings.v2.PasswordExpirySettings.resource_owner_type:type_name -> zitadel.settings.v2.ResourceOwnerType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_zitadel_settings_v2_password_settings_proto_init() }
func file_zitadel_settings_v2_password_settings_proto_init() {
	if File_zitadel_settings_v2_password_settings_proto != nil {
		return
	}
	file_zitadel_settings_v2_settings_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zitadel_settings_v2_password_settings_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordComplexitySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_settings_v2_password_settings_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordExpirySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_settings_v2_password_settings_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_settings_v2_password_settings_proto_goTypes,
		DependencyIndexes: file_zitadel_settings_v2_password_settings_proto_depIdxs,
		MessageInfos:      file_zitadel_settings_v2_password_settings_proto_msgTypes,
	}.Build()
	File_zitadel_settings_v2_password_settings_proto = out.File
	file_zitadel_settings_v2_password_settings_proto_rawDesc = nil
	file_zitadel_settings_v2_password_settings_proto_goTypes = nil
	file_zitadel_settings_v2_password_settings_proto_depIdxs = nil
}
