// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: zitadel/saml/v2/saml_service.proto

package saml

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SAMLService_GetSAMLRequest_FullMethodName = "/zitadel.saml.v2.SAMLService/GetSAMLRequest"
	SAMLService_CreateResponse_FullMethodName = "/zitadel.saml.v2.SAMLService/CreateResponse"
)

// SAMLServiceClient is the client API for SAMLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SAMLServiceClient interface {
	GetSAMLRequest(ctx context.Context, in *GetSAMLRequestRequest, opts ...grpc.CallOption) (*GetSAMLRequestResponse, error)
	CreateResponse(ctx context.Context, in *CreateResponseRequest, opts ...grpc.CallOption) (*CreateResponseResponse, error)
}

type sAMLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSAMLServiceClient(cc grpc.ClientConnInterface) SAMLServiceClient {
	return &sAMLServiceClient{cc}
}

func (c *sAMLServiceClient) GetSAMLRequest(ctx context.Context, in *GetSAMLRequestRequest, opts ...grpc.CallOption) (*GetSAMLRequestResponse, error) {
	out := new(GetSAMLRequestResponse)
	err := c.cc.Invoke(ctx, SAMLService_GetSAMLRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAMLServiceClient) CreateResponse(ctx context.Context, in *CreateResponseRequest, opts ...grpc.CallOption) (*CreateResponseResponse, error) {
	out := new(CreateResponseResponse)
	err := c.cc.Invoke(ctx, SAMLService_CreateResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SAMLServiceServer is the server API for SAMLService service.
// All implementations must embed UnimplementedSAMLServiceServer
// for forward compatibility
type SAMLServiceServer interface {
	GetSAMLRequest(context.Context, *GetSAMLRequestRequest) (*GetSAMLRequestResponse, error)
	CreateResponse(context.Context, *CreateResponseRequest) (*CreateResponseResponse, error)
	mustEmbedUnimplementedSAMLServiceServer()
}

// UnimplementedSAMLServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSAMLServiceServer struct {
}

func (UnimplementedSAMLServiceServer) GetSAMLRequest(context.Context, *GetSAMLRequestRequest) (*GetSAMLRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSAMLRequest not implemented")
}
func (UnimplementedSAMLServiceServer) CreateResponse(context.Context, *CreateResponseRequest) (*CreateResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResponse not implemented")
}
func (UnimplementedSAMLServiceServer) mustEmbedUnimplementedSAMLServiceServer() {}

// UnsafeSAMLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SAMLServiceServer will
// result in compilation errors.
type UnsafeSAMLServiceServer interface {
	mustEmbedUnimplementedSAMLServiceServer()
}

func RegisterSAMLServiceServer(s grpc.ServiceRegistrar, srv SAMLServiceServer) {
	s.RegisterService(&SAMLService_ServiceDesc, srv)
}

func _SAMLService_GetSAMLRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSAMLRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAMLServiceServer).GetSAMLRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SAMLService_GetSAMLRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAMLServiceServer).GetSAMLRequest(ctx, req.(*GetSAMLRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SAMLService_CreateResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAMLServiceServer).CreateResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SAMLService_CreateResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAMLServiceServer).CreateResponse(ctx, req.(*CreateResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SAMLService_ServiceDesc is the grpc.ServiceDesc for SAMLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SAMLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zitadel.saml.v2.SAMLService",
	HandlerType: (*SAMLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSAMLRequest",
			Handler:    _SAMLService_GetSAMLRequest_Handler,
		},
		{
			MethodName: "CreateResponse",
			Handler:    _SAMLService_CreateResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zitadel/saml/v2/saml_service.proto",
}
