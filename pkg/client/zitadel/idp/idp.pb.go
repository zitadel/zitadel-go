// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/idp.proto

package idp

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	object "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/object"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IDPState int32

const (
	IDPState_IDP_STATE_UNSPECIFIED IDPState = 0
	IDPState_IDP_STATE_ACTIVE      IDPState = 1
	IDPState_IDP_STATE_INACTIVE    IDPState = 2
)

// Enum value maps for IDPState.
var (
	IDPState_name = map[int32]string{
		0: "IDP_STATE_UNSPECIFIED",
		1: "IDP_STATE_ACTIVE",
		2: "IDP_STATE_INACTIVE",
	}
	IDPState_value = map[string]int32{
		"IDP_STATE_UNSPECIFIED": 0,
		"IDP_STATE_ACTIVE":      1,
		"IDP_STATE_INACTIVE":    2,
	}
)

func (x IDPState) Enum() *IDPState {
	p := new(IDPState)
	*p = x
	return p
}

func (x IDPState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDPState) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_idp_proto_enumTypes[0].Descriptor()
}

func (IDPState) Type() protoreflect.EnumType {
	return &file_zitadel_idp_proto_enumTypes[0]
}

func (x IDPState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IDPState.Descriptor instead.
func (IDPState) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{0}
}

type IDPStylingType int32

const (
	IDPStylingType_STYLING_TYPE_UNSPECIFIED IDPStylingType = 0
	IDPStylingType_STYLING_TYPE_GOOGLE      IDPStylingType = 1
)

// Enum value maps for IDPStylingType.
var (
	IDPStylingType_name = map[int32]string{
		0: "STYLING_TYPE_UNSPECIFIED",
		1: "STYLING_TYPE_GOOGLE",
	}
	IDPStylingType_value = map[string]int32{
		"STYLING_TYPE_UNSPECIFIED": 0,
		"STYLING_TYPE_GOOGLE":      1,
	}
)

func (x IDPStylingType) Enum() *IDPStylingType {
	p := new(IDPStylingType)
	*p = x
	return p
}

func (x IDPStylingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDPStylingType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_idp_proto_enumTypes[1].Descriptor()
}

func (IDPStylingType) Type() protoreflect.EnumType {
	return &file_zitadel_idp_proto_enumTypes[1]
}

func (x IDPStylingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IDPStylingType.Descriptor instead.
func (IDPStylingType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{1}
}

// authorization framework of the identity provider
type IDPType int32

const (
	IDPType_IDP_TYPE_UNSPECIFIED IDPType = 0
	IDPType_IDP_TYPE_OIDC        IDPType = 1
	IDPType_IDP_TYPE_JWT         IDPType = 3
)

// Enum value maps for IDPType.
var (
	IDPType_name = map[int32]string{
		0: "IDP_TYPE_UNSPECIFIED",
		1: "IDP_TYPE_OIDC",
		3: "IDP_TYPE_JWT",
	}
	IDPType_value = map[string]int32{
		"IDP_TYPE_UNSPECIFIED": 0,
		"IDP_TYPE_OIDC":        1,
		"IDP_TYPE_JWT":         3,
	}
)

func (x IDPType) Enum() *IDPType {
	p := new(IDPType)
	*p = x
	return p
}

func (x IDPType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDPType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_idp_proto_enumTypes[2].Descriptor()
}

func (IDPType) Type() protoreflect.EnumType {
	return &file_zitadel_idp_proto_enumTypes[2]
}

func (x IDPType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IDPType.Descriptor instead.
func (IDPType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{2}
}

// the owner of the identity provider.
type IDPOwnerType int32

const (
	IDPOwnerType_IDP_OWNER_TYPE_UNSPECIFIED IDPOwnerType = 0
	// system is managed by the ZITADEL administrators
	IDPOwnerType_IDP_OWNER_TYPE_SYSTEM IDPOwnerType = 1
	// org is managed by de organization administrators
	IDPOwnerType_IDP_OWNER_TYPE_ORG IDPOwnerType = 2
)

// Enum value maps for IDPOwnerType.
var (
	IDPOwnerType_name = map[int32]string{
		0: "IDP_OWNER_TYPE_UNSPECIFIED",
		1: "IDP_OWNER_TYPE_SYSTEM",
		2: "IDP_OWNER_TYPE_ORG",
	}
	IDPOwnerType_value = map[string]int32{
		"IDP_OWNER_TYPE_UNSPECIFIED": 0,
		"IDP_OWNER_TYPE_SYSTEM":      1,
		"IDP_OWNER_TYPE_ORG":         2,
	}
)

func (x IDPOwnerType) Enum() *IDPOwnerType {
	p := new(IDPOwnerType)
	*p = x
	return p
}

func (x IDPOwnerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDPOwnerType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_idp_proto_enumTypes[3].Descriptor()
}

func (IDPOwnerType) Type() protoreflect.EnumType {
	return &file_zitadel_idp_proto_enumTypes[3]
}

func (x IDPOwnerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IDPOwnerType.Descriptor instead.
func (IDPOwnerType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{3}
}

type OIDCMappingField int32

const (
	OIDCMappingField_OIDC_MAPPING_FIELD_UNSPECIFIED        OIDCMappingField = 0
	OIDCMappingField_OIDC_MAPPING_FIELD_PREFERRED_USERNAME OIDCMappingField = 1
	OIDCMappingField_OIDC_MAPPING_FIELD_EMAIL              OIDCMappingField = 2
)

// Enum value maps for OIDCMappingField.
var (
	OIDCMappingField_name = map[int32]string{
		0: "OIDC_MAPPING_FIELD_UNSPECIFIED",
		1: "OIDC_MAPPING_FIELD_PREFERRED_USERNAME",
		2: "OIDC_MAPPING_FIELD_EMAIL",
	}
	OIDCMappingField_value = map[string]int32{
		"OIDC_MAPPING_FIELD_UNSPECIFIED":        0,
		"OIDC_MAPPING_FIELD_PREFERRED_USERNAME": 1,
		"OIDC_MAPPING_FIELD_EMAIL":              2,
	}
)

func (x OIDCMappingField) Enum() *OIDCMappingField {
	p := new(OIDCMappingField)
	*p = x
	return p
}

func (x OIDCMappingField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OIDCMappingField) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_idp_proto_enumTypes[4].Descriptor()
}

func (OIDCMappingField) Type() protoreflect.EnumType {
	return &file_zitadel_idp_proto_enumTypes[4]
}

func (x OIDCMappingField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OIDCMappingField.Descriptor instead.
func (OIDCMappingField) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{4}
}

type IDPFieldName int32

const (
	IDPFieldName_IDP_FIELD_NAME_UNSPECIFIED IDPFieldName = 0
	IDPFieldName_IDP_FIELD_NAME_NAME        IDPFieldName = 1
)

// Enum value maps for IDPFieldName.
var (
	IDPFieldName_name = map[int32]string{
		0: "IDP_FIELD_NAME_UNSPECIFIED",
		1: "IDP_FIELD_NAME_NAME",
	}
	IDPFieldName_value = map[string]int32{
		"IDP_FIELD_NAME_UNSPECIFIED": 0,
		"IDP_FIELD_NAME_NAME":        1,
	}
)

func (x IDPFieldName) Enum() *IDPFieldName {
	p := new(IDPFieldName)
	*p = x
	return p
}

func (x IDPFieldName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDPFieldName) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_idp_proto_enumTypes[5].Descriptor()
}

func (IDPFieldName) Type() protoreflect.EnumType {
	return &file_zitadel_idp_proto_enumTypes[5]
}

func (x IDPFieldName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IDPFieldName.Descriptor instead.
func (IDPFieldName) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{5}
}

type ProviderType int32

const (
	ProviderType_PROVIDER_TYPE_UNSPECIFIED        ProviderType = 0
	ProviderType_PROVIDER_TYPE_OIDC               ProviderType = 1
	ProviderType_PROVIDER_TYPE_JWT                ProviderType = 2
	ProviderType_PROVIDER_TYPE_LDAP               ProviderType = 3
	ProviderType_PROVIDER_TYPE_OAUTH              ProviderType = 4
	ProviderType_PROVIDER_TYPE_AZURE_AD           ProviderType = 5
	ProviderType_PROVIDER_TYPE_GITHUB             ProviderType = 6
	ProviderType_PROVIDER_TYPE_GITHUB_ES          ProviderType = 7
	ProviderType_PROVIDER_TYPE_GITLAB             ProviderType = 8
	ProviderType_PROVIDER_TYPE_GITLAB_SELF_HOSTED ProviderType = 9
	ProviderType_PROVIDER_TYPE_GOOGLE             ProviderType = 10
	ProviderType_PROVIDER_TYPE_APPLE              ProviderType = 11
	ProviderType_PROVIDER_TYPE_SAML               ProviderType = 12
)

// Enum value maps for ProviderType.
var (
	ProviderType_name = map[int32]string{
		0:  "PROVIDER_TYPE_UNSPECIFIED",
		1:  "PROVIDER_TYPE_OIDC",
		2:  "PROVIDER_TYPE_JWT",
		3:  "PROVIDER_TYPE_LDAP",
		4:  "PROVIDER_TYPE_OAUTH",
		5:  "PROVIDER_TYPE_AZURE_AD",
		6:  "PROVIDER_TYPE_GITHUB",
		7:  "PROVIDER_TYPE_GITHUB_ES",
		8:  "PROVIDER_TYPE_GITLAB",
		9:  "PROVIDER_TYPE_GITLAB_SELF_HOSTED",
		10: "PROVIDER_TYPE_GOOGLE",
		11: "PROVIDER_TYPE_APPLE",
		12: "PROVIDER_TYPE_SAML",
	}
	ProviderType_value = map[string]int32{
		"PROVIDER_TYPE_UNSPECIFIED":        0,
		"PROVIDER_TYPE_OIDC":               1,
		"PROVIDER_TYPE_JWT":                2,
		"PROVIDER_TYPE_LDAP":               3,
		"PROVIDER_TYPE_OAUTH":              4,
		"PROVIDER_TYPE_AZURE_AD":           5,
		"PROVIDER_TYPE_GITHUB":             6,
		"PROVIDER_TYPE_GITHUB_ES":          7,
		"PROVIDER_TYPE_GITLAB":             8,
		"PROVIDER_TYPE_GITLAB_SELF_HOSTED": 9,
		"PROVIDER_TYPE_GOOGLE":             10,
		"PROVIDER_TYPE_APPLE":              11,
		"PROVIDER_TYPE_SAML":               12,
	}
)

func (x ProviderType) Enum() *ProviderType {
	p := new(ProviderType)
	*p = x
	return p
}

func (x ProviderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProviderType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_idp_proto_enumTypes[6].Descriptor()
}

func (ProviderType) Type() protoreflect.EnumType {
	return &file_zitadel_idp_proto_enumTypes[6]
}

func (x ProviderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProviderType.Descriptor instead.
func (ProviderType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{6}
}

type SAMLBinding int32

const (
	SAMLBinding_SAML_BINDING_UNSPECIFIED SAMLBinding = 0
	SAMLBinding_SAML_BINDING_POST        SAMLBinding = 1
	SAMLBinding_SAML_BINDING_REDIRECT    SAMLBinding = 2
	SAMLBinding_SAML_BINDING_ARTIFACT    SAMLBinding = 3
)

// Enum value maps for SAMLBinding.
var (
	SAMLBinding_name = map[int32]string{
		0: "SAML_BINDING_UNSPECIFIED",
		1: "SAML_BINDING_POST",
		2: "SAML_BINDING_REDIRECT",
		3: "SAML_BINDING_ARTIFACT",
	}
	SAMLBinding_value = map[string]int32{
		"SAML_BINDING_UNSPECIFIED": 0,
		"SAML_BINDING_POST":        1,
		"SAML_BINDING_REDIRECT":    2,
		"SAML_BINDING_ARTIFACT":    3,
	}
)

func (x SAMLBinding) Enum() *SAMLBinding {
	p := new(SAMLBinding)
	*p = x
	return p
}

func (x SAMLBinding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SAMLBinding) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_idp_proto_enumTypes[7].Descriptor()
}

func (SAMLBinding) Type() protoreflect.EnumType {
	return &file_zitadel_idp_proto_enumTypes[7]
}

func (x SAMLBinding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SAMLBinding.Descriptor instead.
func (SAMLBinding) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{7}
}

type SAMLNameIDFormat int32

const (
	SAMLNameIDFormat_SAML_NAME_ID_FORMAT_UNSPECIFIED   SAMLNameIDFormat = 0
	SAMLNameIDFormat_SAML_NAME_ID_FORMAT_EMAIL_ADDRESS SAMLNameIDFormat = 1
	SAMLNameIDFormat_SAML_NAME_ID_FORMAT_PERSISTENT    SAMLNameIDFormat = 2
	SAMLNameIDFormat_SAML_NAME_ID_FORMAT_TRANSIENT     SAMLNameIDFormat = 3
)

// Enum value maps for SAMLNameIDFormat.
var (
	SAMLNameIDFormat_name = map[int32]string{
		0: "SAML_NAME_ID_FORMAT_UNSPECIFIED",
		1: "SAML_NAME_ID_FORMAT_EMAIL_ADDRESS",
		2: "SAML_NAME_ID_FORMAT_PERSISTENT",
		3: "SAML_NAME_ID_FORMAT_TRANSIENT",
	}
	SAMLNameIDFormat_value = map[string]int32{
		"SAML_NAME_ID_FORMAT_UNSPECIFIED":   0,
		"SAML_NAME_ID_FORMAT_EMAIL_ADDRESS": 1,
		"SAML_NAME_ID_FORMAT_PERSISTENT":    2,
		"SAML_NAME_ID_FORMAT_TRANSIENT":     3,
	}
)

func (x SAMLNameIDFormat) Enum() *SAMLNameIDFormat {
	p := new(SAMLNameIDFormat)
	*p = x
	return p
}

func (x SAMLNameIDFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SAMLNameIDFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_idp_proto_enumTypes[8].Descriptor()
}

func (SAMLNameIDFormat) Type() protoreflect.EnumType {
	return &file_zitadel_idp_proto_enumTypes[8]
}

func (x SAMLNameIDFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SAMLNameIDFormat.Descriptor instead.
func (SAMLNameIDFormat) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{8}
}

type AutoLinkingOption int32

const (
	// AUTO_LINKING_OPTION_UNSPECIFIED disables the auto linking prompt.
	AutoLinkingOption_AUTO_LINKING_OPTION_UNSPECIFIED AutoLinkingOption = 0
	// AUTO_LINKING_OPTION_USERNAME will use the username of the external user to check for a corresponding ZITADEL user.
	AutoLinkingOption_AUTO_LINKING_OPTION_USERNAME AutoLinkingOption = 1
	// AUTO_LINKING_OPTION_EMAIL  will use the email of the external user to check for a corresponding ZITADEL user with the same verified email
	// Note that in case multiple users match, no prompt will be shown.
	AutoLinkingOption_AUTO_LINKING_OPTION_EMAIL AutoLinkingOption = 2
)

// Enum value maps for AutoLinkingOption.
var (
	AutoLinkingOption_name = map[int32]string{
		0: "AUTO_LINKING_OPTION_UNSPECIFIED",
		1: "AUTO_LINKING_OPTION_USERNAME",
		2: "AUTO_LINKING_OPTION_EMAIL",
	}
	AutoLinkingOption_value = map[string]int32{
		"AUTO_LINKING_OPTION_UNSPECIFIED": 0,
		"AUTO_LINKING_OPTION_USERNAME":    1,
		"AUTO_LINKING_OPTION_EMAIL":       2,
	}
)

func (x AutoLinkingOption) Enum() *AutoLinkingOption {
	p := new(AutoLinkingOption)
	*p = x
	return p
}

func (x AutoLinkingOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AutoLinkingOption) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_idp_proto_enumTypes[9].Descriptor()
}

func (AutoLinkingOption) Type() protoreflect.EnumType {
	return &file_zitadel_idp_proto_enumTypes[9]
}

func (x AutoLinkingOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AutoLinkingOption.Descriptor instead.
func (AutoLinkingOption) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{9}
}

type AzureADTenantType int32

const (
	AzureADTenantType_AZURE_AD_TENANT_TYPE_COMMON        AzureADTenantType = 0
	AzureADTenantType_AZURE_AD_TENANT_TYPE_ORGANISATIONS AzureADTenantType = 1
	AzureADTenantType_AZURE_AD_TENANT_TYPE_CONSUMERS     AzureADTenantType = 2
)

// Enum value maps for AzureADTenantType.
var (
	AzureADTenantType_name = map[int32]string{
		0: "AZURE_AD_TENANT_TYPE_COMMON",
		1: "AZURE_AD_TENANT_TYPE_ORGANISATIONS",
		2: "AZURE_AD_TENANT_TYPE_CONSUMERS",
	}
	AzureADTenantType_value = map[string]int32{
		"AZURE_AD_TENANT_TYPE_COMMON":        0,
		"AZURE_AD_TENANT_TYPE_ORGANISATIONS": 1,
		"AZURE_AD_TENANT_TYPE_CONSUMERS":     2,
	}
)

func (x AzureADTenantType) Enum() *AzureADTenantType {
	p := new(AzureADTenantType)
	*p = x
	return p
}

func (x AzureADTenantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AzureADTenantType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_idp_proto_enumTypes[10].Descriptor()
}

func (AzureADTenantType) Type() protoreflect.EnumType {
	return &file_zitadel_idp_proto_enumTypes[10]
}

func (x AzureADTenantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AzureADTenantType.Descriptor instead.
func (AzureADTenantType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{10}
}

type IDP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Details     *object.ObjectDetails `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	State       IDPState              `protobuf:"varint,3,opt,name=state,proto3,enum=zitadel.idp.v1.IDPState" json:"state,omitempty"`
	Name        string                `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	StylingType IDPStylingType        `protobuf:"varint,5,opt,name=styling_type,json=stylingType,proto3,enum=zitadel.idp.v1.IDPStylingType" json:"styling_type,omitempty"`
	Owner       IDPOwnerType          `protobuf:"varint,6,opt,name=owner,proto3,enum=zitadel.idp.v1.IDPOwnerType" json:"owner,omitempty"`
	// Types that are assignable to Config:
	//
	//	*IDP_OidcConfig
	//	*IDP_JwtConfig
	Config       isIDP_Config `protobuf_oneof:"config"`
	AutoRegister bool         `protobuf:"varint,8,opt,name=auto_register,json=autoRegister,proto3" json:"auto_register,omitempty"`
}

func (x *IDP) Reset() {
	*x = IDP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDP) ProtoMessage() {}

func (x *IDP) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDP.ProtoReflect.Descriptor instead.
func (*IDP) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{0}
}

func (x *IDP) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IDP) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *IDP) GetState() IDPState {
	if x != nil {
		return x.State
	}
	return IDPState_IDP_STATE_UNSPECIFIED
}

func (x *IDP) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IDP) GetStylingType() IDPStylingType {
	if x != nil {
		return x.StylingType
	}
	return IDPStylingType_STYLING_TYPE_UNSPECIFIED
}

func (x *IDP) GetOwner() IDPOwnerType {
	if x != nil {
		return x.Owner
	}
	return IDPOwnerType_IDP_OWNER_TYPE_UNSPECIFIED
}

func (m *IDP) GetConfig() isIDP_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *IDP) GetOidcConfig() *OIDCConfig {
	if x, ok := x.GetConfig().(*IDP_OidcConfig); ok {
		return x.OidcConfig
	}
	return nil
}

func (x *IDP) GetJwtConfig() *JWTConfig {
	if x, ok := x.GetConfig().(*IDP_JwtConfig); ok {
		return x.JwtConfig
	}
	return nil
}

func (x *IDP) GetAutoRegister() bool {
	if x != nil {
		return x.AutoRegister
	}
	return false
}

type isIDP_Config interface {
	isIDP_Config()
}

type IDP_OidcConfig struct {
	OidcConfig *OIDCConfig `protobuf:"bytes,7,opt,name=oidc_config,json=oidcConfig,proto3,oneof"`
}

type IDP_JwtConfig struct {
	JwtConfig *JWTConfig `protobuf:"bytes,9,opt,name=jwt_config,json=jwtConfig,proto3,oneof"`
}

func (*IDP_OidcConfig) isIDP_Config() {}

func (*IDP_JwtConfig) isIDP_Config() {}

type IDPUserLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           string  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IdpId            string  `protobuf:"bytes,2,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
	IdpName          string  `protobuf:"bytes,3,opt,name=idp_name,json=idpName,proto3" json:"idp_name,omitempty"`
	ProvidedUserId   string  `protobuf:"bytes,4,opt,name=provided_user_id,json=providedUserId,proto3" json:"provided_user_id,omitempty"`
	ProvidedUserName string  `protobuf:"bytes,5,opt,name=provided_user_name,json=providedUserName,proto3" json:"provided_user_name,omitempty"`
	IdpType          IDPType `protobuf:"varint,6,opt,name=idp_type,json=idpType,proto3,enum=zitadel.idp.v1.IDPType" json:"idp_type,omitempty"`
}

func (x *IDPUserLink) Reset() {
	*x = IDPUserLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDPUserLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDPUserLink) ProtoMessage() {}

func (x *IDPUserLink) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDPUserLink.ProtoReflect.Descriptor instead.
func (*IDPUserLink) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{1}
}

func (x *IDPUserLink) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *IDPUserLink) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

func (x *IDPUserLink) GetIdpName() string {
	if x != nil {
		return x.IdpName
	}
	return ""
}

func (x *IDPUserLink) GetProvidedUserId() string {
	if x != nil {
		return x.ProvidedUserId
	}
	return ""
}

func (x *IDPUserLink) GetProvidedUserName() string {
	if x != nil {
		return x.ProvidedUserName
	}
	return ""
}

func (x *IDPUserLink) GetIdpType() IDPType {
	if x != nil {
		return x.IdpType
	}
	return IDPType_IDP_TYPE_UNSPECIFIED
}

type IDPLoginPolicyLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpId   string  `protobuf:"bytes,1,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
	IdpName string  `protobuf:"bytes,2,opt,name=idp_name,json=idpName,proto3" json:"idp_name,omitempty"`
	IdpType IDPType `protobuf:"varint,3,opt,name=idp_type,json=idpType,proto3,enum=zitadel.idp.v1.IDPType" json:"idp_type,omitempty"`
}

func (x *IDPLoginPolicyLink) Reset() {
	*x = IDPLoginPolicyLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDPLoginPolicyLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDPLoginPolicyLink) ProtoMessage() {}

func (x *IDPLoginPolicyLink) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDPLoginPolicyLink.ProtoReflect.Descriptor instead.
func (*IDPLoginPolicyLink) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{2}
}

func (x *IDPLoginPolicyLink) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

func (x *IDPLoginPolicyLink) GetIdpName() string {
	if x != nil {
		return x.IdpName
	}
	return ""
}

func (x *IDPLoginPolicyLink) GetIdpType() IDPType {
	if x != nil {
		return x.IdpType
	}
	return IDPType_IDP_TYPE_UNSPECIFIED
}

type OIDCConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId           string           `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Issuer             string           `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Scopes             []string         `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
	DisplayNameMapping OIDCMappingField `protobuf:"varint,4,opt,name=display_name_mapping,json=displayNameMapping,proto3,enum=zitadel.idp.v1.OIDCMappingField" json:"display_name_mapping,omitempty"`
	UsernameMapping    OIDCMappingField `protobuf:"varint,5,opt,name=username_mapping,json=usernameMapping,proto3,enum=zitadel.idp.v1.OIDCMappingField" json:"username_mapping,omitempty"`
}

func (x *OIDCConfig) Reset() {
	*x = OIDCConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OIDCConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OIDCConfig) ProtoMessage() {}

func (x *OIDCConfig) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OIDCConfig.ProtoReflect.Descriptor instead.
func (*OIDCConfig) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{3}
}

func (x *OIDCConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OIDCConfig) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *OIDCConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *OIDCConfig) GetDisplayNameMapping() OIDCMappingField {
	if x != nil {
		return x.DisplayNameMapping
	}
	return OIDCMappingField_OIDC_MAPPING_FIELD_UNSPECIFIED
}

func (x *OIDCConfig) GetUsernameMapping() OIDCMappingField {
	if x != nil {
		return x.UsernameMapping
	}
	return OIDCMappingField_OIDC_MAPPING_FIELD_UNSPECIFIED
}

type JWTConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JwtEndpoint  string `protobuf:"bytes,1,opt,name=jwt_endpoint,json=jwtEndpoint,proto3" json:"jwt_endpoint,omitempty"`
	Issuer       string `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	KeysEndpoint string `protobuf:"bytes,3,opt,name=keys_endpoint,json=keysEndpoint,proto3" json:"keys_endpoint,omitempty"`
	HeaderName   string `protobuf:"bytes,4,opt,name=header_name,json=headerName,proto3" json:"header_name,omitempty"`
}

func (x *JWTConfig) Reset() {
	*x = JWTConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTConfig) ProtoMessage() {}

func (x *JWTConfig) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTConfig.ProtoReflect.Descriptor instead.
func (*JWTConfig) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{4}
}

func (x *JWTConfig) GetJwtEndpoint() string {
	if x != nil {
		return x.JwtEndpoint
	}
	return ""
}

func (x *JWTConfig) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *JWTConfig) GetKeysEndpoint() string {
	if x != nil {
		return x.KeysEndpoint
	}
	return ""
}

func (x *JWTConfig) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

type IDPIDQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IDPIDQuery) Reset() {
	*x = IDPIDQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDPIDQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDPIDQuery) ProtoMessage() {}

func (x *IDPIDQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDPIDQuery.ProtoReflect.Descriptor instead.
func (*IDPIDQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{5}
}

func (x *IDPIDQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type IDPNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Method object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *IDPNameQuery) Reset() {
	*x = IDPNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDPNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDPNameQuery) ProtoMessage() {}

func (x *IDPNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDPNameQuery.ProtoReflect.Descriptor instead.
func (*IDPNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{6}
}

func (x *IDPNameQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IDPNameQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type IDPOwnerTypeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerType IDPOwnerType `protobuf:"varint,1,opt,name=owner_type,json=ownerType,proto3,enum=zitadel.idp.v1.IDPOwnerType" json:"owner_type,omitempty"`
}

func (x *IDPOwnerTypeQuery) Reset() {
	*x = IDPOwnerTypeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDPOwnerTypeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDPOwnerTypeQuery) ProtoMessage() {}

func (x *IDPOwnerTypeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDPOwnerTypeQuery.ProtoReflect.Descriptor instead.
func (*IDPOwnerTypeQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{7}
}

func (x *IDPOwnerTypeQuery) GetOwnerType() IDPOwnerType {
	if x != nil {
		return x.OwnerType
	}
	return IDPOwnerType_IDP_OWNER_TYPE_UNSPECIFIED
}

type Provider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Details *object.ObjectDetails `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	State   IDPState              `protobuf:"varint,3,opt,name=state,proto3,enum=zitadel.idp.v1.IDPState" json:"state,omitempty"`
	Name    string                `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Owner   IDPOwnerType          `protobuf:"varint,5,opt,name=owner,proto3,enum=zitadel.idp.v1.IDPOwnerType" json:"owner,omitempty"`
	Type    ProviderType          `protobuf:"varint,6,opt,name=type,proto3,enum=zitadel.idp.v1.ProviderType" json:"type,omitempty"`
	Config  *ProviderConfig       `protobuf:"bytes,7,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *Provider) Reset() {
	*x = Provider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provider) ProtoMessage() {}

func (x *Provider) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provider.ProtoReflect.Descriptor instead.
func (*Provider) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{8}
}

func (x *Provider) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Provider) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Provider) GetState() IDPState {
	if x != nil {
		return x.State
	}
	return IDPState_IDP_STATE_UNSPECIFIED
}

func (x *Provider) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Provider) GetOwner() IDPOwnerType {
	if x != nil {
		return x.Owner
	}
	return IDPOwnerType_IDP_OWNER_TYPE_UNSPECIFIED
}

func (x *Provider) GetType() ProviderType {
	if x != nil {
		return x.Type
	}
	return ProviderType_PROVIDER_TYPE_UNSPECIFIED
}

func (x *Provider) GetConfig() *ProviderConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type ProviderConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options *Options `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	// Types that are assignable to Config:
	//
	//	*ProviderConfig_Ldap
	//	*ProviderConfig_Google
	//	*ProviderConfig_Oauth
	//	*ProviderConfig_Oidc
	//	*ProviderConfig_Jwt
	//	*ProviderConfig_Github
	//	*ProviderConfig_GithubEs
	//	*ProviderConfig_Gitlab
	//	*ProviderConfig_GitlabSelfHosted
	//	*ProviderConfig_AzureAd
	//	*ProviderConfig_Apple
	//	*ProviderConfig_Saml
	Config isProviderConfig_Config `protobuf_oneof:"config"`
}

func (x *ProviderConfig) Reset() {
	*x = ProviderConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderConfig) ProtoMessage() {}

func (x *ProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderConfig.ProtoReflect.Descriptor instead.
func (*ProviderConfig) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{9}
}

func (x *ProviderConfig) GetOptions() *Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (m *ProviderConfig) GetConfig() isProviderConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *ProviderConfig) GetLdap() *LDAPConfig {
	if x, ok := x.GetConfig().(*ProviderConfig_Ldap); ok {
		return x.Ldap
	}
	return nil
}

func (x *ProviderConfig) GetGoogle() *GoogleConfig {
	if x, ok := x.GetConfig().(*ProviderConfig_Google); ok {
		return x.Google
	}
	return nil
}

func (x *ProviderConfig) GetOauth() *OAuthConfig {
	if x, ok := x.GetConfig().(*ProviderConfig_Oauth); ok {
		return x.Oauth
	}
	return nil
}

func (x *ProviderConfig) GetOidc() *GenericOIDCConfig {
	if x, ok := x.GetConfig().(*ProviderConfig_Oidc); ok {
		return x.Oidc
	}
	return nil
}

func (x *ProviderConfig) GetJwt() *JWTConfig {
	if x, ok := x.GetConfig().(*ProviderConfig_Jwt); ok {
		return x.Jwt
	}
	return nil
}

func (x *ProviderConfig) GetGithub() *GitHubConfig {
	if x, ok := x.GetConfig().(*ProviderConfig_Github); ok {
		return x.Github
	}
	return nil
}

func (x *ProviderConfig) GetGithubEs() *GitHubEnterpriseServerConfig {
	if x, ok := x.GetConfig().(*ProviderConfig_GithubEs); ok {
		return x.GithubEs
	}
	return nil
}

func (x *ProviderConfig) GetGitlab() *GitLabConfig {
	if x, ok := x.GetConfig().(*ProviderConfig_Gitlab); ok {
		return x.Gitlab
	}
	return nil
}

func (x *ProviderConfig) GetGitlabSelfHosted() *GitLabSelfHostedConfig {
	if x, ok := x.GetConfig().(*ProviderConfig_GitlabSelfHosted); ok {
		return x.GitlabSelfHosted
	}
	return nil
}

func (x *ProviderConfig) GetAzureAd() *AzureADConfig {
	if x, ok := x.GetConfig().(*ProviderConfig_AzureAd); ok {
		return x.AzureAd
	}
	return nil
}

func (x *ProviderConfig) GetApple() *AppleConfig {
	if x, ok := x.GetConfig().(*ProviderConfig_Apple); ok {
		return x.Apple
	}
	return nil
}

func (x *ProviderConfig) GetSaml() *SAMLConfig {
	if x, ok := x.GetConfig().(*ProviderConfig_Saml); ok {
		return x.Saml
	}
	return nil
}

type isProviderConfig_Config interface {
	isProviderConfig_Config()
}

type ProviderConfig_Ldap struct {
	Ldap *LDAPConfig `protobuf:"bytes,2,opt,name=ldap,proto3,oneof"`
}

type ProviderConfig_Google struct {
	Google *GoogleConfig `protobuf:"bytes,3,opt,name=google,proto3,oneof"`
}

type ProviderConfig_Oauth struct {
	Oauth *OAuthConfig `protobuf:"bytes,4,opt,name=oauth,proto3,oneof"`
}

type ProviderConfig_Oidc struct {
	Oidc *GenericOIDCConfig `protobuf:"bytes,5,opt,name=oidc,proto3,oneof"`
}

type ProviderConfig_Jwt struct {
	Jwt *JWTConfig `protobuf:"bytes,6,opt,name=jwt,proto3,oneof"`
}

type ProviderConfig_Github struct {
	Github *GitHubConfig `protobuf:"bytes,7,opt,name=github,proto3,oneof"`
}

type ProviderConfig_GithubEs struct {
	GithubEs *GitHubEnterpriseServerConfig `protobuf:"bytes,8,opt,name=github_es,json=githubEs,proto3,oneof"`
}

type ProviderConfig_Gitlab struct {
	Gitlab *GitLabConfig `protobuf:"bytes,9,opt,name=gitlab,proto3,oneof"`
}

type ProviderConfig_GitlabSelfHosted struct {
	GitlabSelfHosted *GitLabSelfHostedConfig `protobuf:"bytes,10,opt,name=gitlab_self_hosted,json=gitlabSelfHosted,proto3,oneof"`
}

type ProviderConfig_AzureAd struct {
	AzureAd *AzureADConfig `protobuf:"bytes,11,opt,name=azure_ad,json=azureAd,proto3,oneof"`
}

type ProviderConfig_Apple struct {
	Apple *AppleConfig `protobuf:"bytes,12,opt,name=apple,proto3,oneof"`
}

type ProviderConfig_Saml struct {
	Saml *SAMLConfig `protobuf:"bytes,13,opt,name=saml,proto3,oneof"`
}

func (*ProviderConfig_Ldap) isProviderConfig_Config() {}

func (*ProviderConfig_Google) isProviderConfig_Config() {}

func (*ProviderConfig_Oauth) isProviderConfig_Config() {}

func (*ProviderConfig_Oidc) isProviderConfig_Config() {}

func (*ProviderConfig_Jwt) isProviderConfig_Config() {}

func (*ProviderConfig_Github) isProviderConfig_Config() {}

func (*ProviderConfig_GithubEs) isProviderConfig_Config() {}

func (*ProviderConfig_Gitlab) isProviderConfig_Config() {}

func (*ProviderConfig_GitlabSelfHosted) isProviderConfig_Config() {}

func (*ProviderConfig_AzureAd) isProviderConfig_Config() {}

func (*ProviderConfig_Apple) isProviderConfig_Config() {}

func (*ProviderConfig_Saml) isProviderConfig_Config() {}

type OAuthConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId              string   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	AuthorizationEndpoint string   `protobuf:"bytes,2,opt,name=authorization_endpoint,json=authorizationEndpoint,proto3" json:"authorization_endpoint,omitempty"`
	TokenEndpoint         string   `protobuf:"bytes,3,opt,name=token_endpoint,json=tokenEndpoint,proto3" json:"token_endpoint,omitempty"`
	UserEndpoint          string   `protobuf:"bytes,4,opt,name=user_endpoint,json=userEndpoint,proto3" json:"user_endpoint,omitempty"`
	Scopes                []string `protobuf:"bytes,5,rep,name=scopes,proto3" json:"scopes,omitempty"`
	IdAttribute           string   `protobuf:"bytes,6,opt,name=id_attribute,json=idAttribute,proto3" json:"id_attribute,omitempty"`
}

func (x *OAuthConfig) Reset() {
	*x = OAuthConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuthConfig) ProtoMessage() {}

func (x *OAuthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuthConfig.ProtoReflect.Descriptor instead.
func (*OAuthConfig) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{10}
}

func (x *OAuthConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OAuthConfig) GetAuthorizationEndpoint() string {
	if x != nil {
		return x.AuthorizationEndpoint
	}
	return ""
}

func (x *OAuthConfig) GetTokenEndpoint() string {
	if x != nil {
		return x.TokenEndpoint
	}
	return ""
}

func (x *OAuthConfig) GetUserEndpoint() string {
	if x != nil {
		return x.UserEndpoint
	}
	return ""
}

func (x *OAuthConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *OAuthConfig) GetIdAttribute() string {
	if x != nil {
		return x.IdAttribute
	}
	return ""
}

type GenericOIDCConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuer           string   `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	ClientId         string   `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Scopes           []string `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
	IsIdTokenMapping bool     `protobuf:"varint,4,opt,name=is_id_token_mapping,json=isIdTokenMapping,proto3" json:"is_id_token_mapping,omitempty"`
}

func (x *GenericOIDCConfig) Reset() {
	*x = GenericOIDCConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericOIDCConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericOIDCConfig) ProtoMessage() {}

func (x *GenericOIDCConfig) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericOIDCConfig.ProtoReflect.Descriptor instead.
func (*GenericOIDCConfig) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{11}
}

func (x *GenericOIDCConfig) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *GenericOIDCConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GenericOIDCConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *GenericOIDCConfig) GetIsIdTokenMapping() bool {
	if x != nil {
		return x.IsIdTokenMapping
	}
	return false
}

type GitHubConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Scopes   []string `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *GitHubConfig) Reset() {
	*x = GitHubConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitHubConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHubConfig) ProtoMessage() {}

func (x *GitHubConfig) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHubConfig.ProtoReflect.Descriptor instead.
func (*GitHubConfig) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{12}
}

func (x *GitHubConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GitHubConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type GitHubEnterpriseServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId              string   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	AuthorizationEndpoint string   `protobuf:"bytes,2,opt,name=authorization_endpoint,json=authorizationEndpoint,proto3" json:"authorization_endpoint,omitempty"`
	TokenEndpoint         string   `protobuf:"bytes,3,opt,name=token_endpoint,json=tokenEndpoint,proto3" json:"token_endpoint,omitempty"`
	UserEndpoint          string   `protobuf:"bytes,4,opt,name=user_endpoint,json=userEndpoint,proto3" json:"user_endpoint,omitempty"`
	Scopes                []string `protobuf:"bytes,5,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *GitHubEnterpriseServerConfig) Reset() {
	*x = GitHubEnterpriseServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitHubEnterpriseServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHubEnterpriseServerConfig) ProtoMessage() {}

func (x *GitHubEnterpriseServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHubEnterpriseServerConfig.ProtoReflect.Descriptor instead.
func (*GitHubEnterpriseServerConfig) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{13}
}

func (x *GitHubEnterpriseServerConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GitHubEnterpriseServerConfig) GetAuthorizationEndpoint() string {
	if x != nil {
		return x.AuthorizationEndpoint
	}
	return ""
}

func (x *GitHubEnterpriseServerConfig) GetTokenEndpoint() string {
	if x != nil {
		return x.TokenEndpoint
	}
	return ""
}

func (x *GitHubEnterpriseServerConfig) GetUserEndpoint() string {
	if x != nil {
		return x.UserEndpoint
	}
	return ""
}

func (x *GitHubEnterpriseServerConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type GoogleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Scopes   []string `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *GoogleConfig) Reset() {
	*x = GoogleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleConfig) ProtoMessage() {}

func (x *GoogleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleConfig.ProtoReflect.Descriptor instead.
func (*GoogleConfig) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{14}
}

func (x *GoogleConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GoogleConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type GitLabConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Scopes   []string `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *GitLabConfig) Reset() {
	*x = GitLabConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitLabConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitLabConfig) ProtoMessage() {}

func (x *GitLabConfig) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitLabConfig.ProtoReflect.Descriptor instead.
func (*GitLabConfig) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{15}
}

func (x *GitLabConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GitLabConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type GitLabSelfHostedConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuer   string   `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	ClientId string   `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Scopes   []string `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *GitLabSelfHostedConfig) Reset() {
	*x = GitLabSelfHostedConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitLabSelfHostedConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitLabSelfHostedConfig) ProtoMessage() {}

func (x *GitLabSelfHostedConfig) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitLabSelfHostedConfig.ProtoReflect.Descriptor instead.
func (*GitLabSelfHostedConfig) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{16}
}

func (x *GitLabSelfHostedConfig) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *GitLabSelfHostedConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GitLabSelfHostedConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type LDAPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers           []string             `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
	StartTls          bool                 `protobuf:"varint,2,opt,name=start_tls,json=startTls,proto3" json:"start_tls,omitempty"`
	BaseDn            string               `protobuf:"bytes,3,opt,name=base_dn,json=baseDn,proto3" json:"base_dn,omitempty"`
	BindDn            string               `protobuf:"bytes,4,opt,name=bind_dn,json=bindDn,proto3" json:"bind_dn,omitempty"`
	UserBase          string               `protobuf:"bytes,5,opt,name=user_base,json=userBase,proto3" json:"user_base,omitempty"`
	UserObjectClasses []string             `protobuf:"bytes,6,rep,name=user_object_classes,json=userObjectClasses,proto3" json:"user_object_classes,omitempty"`
	UserFilters       []string             `protobuf:"bytes,7,rep,name=user_filters,json=userFilters,proto3" json:"user_filters,omitempty"`
	Timeout           *durationpb.Duration `protobuf:"bytes,8,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Attributes        *LDAPAttributes      `protobuf:"bytes,9,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *LDAPConfig) Reset() {
	*x = LDAPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LDAPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDAPConfig) ProtoMessage() {}

func (x *LDAPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDAPConfig.ProtoReflect.Descriptor instead.
func (*LDAPConfig) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{17}
}

func (x *LDAPConfig) GetServers() []string {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *LDAPConfig) GetStartTls() bool {
	if x != nil {
		return x.StartTls
	}
	return false
}

func (x *LDAPConfig) GetBaseDn() string {
	if x != nil {
		return x.BaseDn
	}
	return ""
}

func (x *LDAPConfig) GetBindDn() string {
	if x != nil {
		return x.BindDn
	}
	return ""
}

func (x *LDAPConfig) GetUserBase() string {
	if x != nil {
		return x.UserBase
	}
	return ""
}

func (x *LDAPConfig) GetUserObjectClasses() []string {
	if x != nil {
		return x.UserObjectClasses
	}
	return nil
}

func (x *LDAPConfig) GetUserFilters() []string {
	if x != nil {
		return x.UserFilters
	}
	return nil
}

func (x *LDAPConfig) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *LDAPConfig) GetAttributes() *LDAPAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type SAMLConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata of the SAML identity provider.
	MetadataXml []byte `protobuf:"bytes,1,opt,name=metadata_xml,json=metadataXml,proto3" json:"metadata_xml,omitempty"`
	// Binding which defines the type of communication with the identity provider.
	Binding SAMLBinding `protobuf:"varint,2,opt,name=binding,proto3,enum=zitadel.idp.v1.SAMLBinding" json:"binding,omitempty"`
	// Boolean which defines if the authentication requests are signed.
	WithSignedRequest bool `protobuf:"varint,3,opt,name=with_signed_request,json=withSignedRequest,proto3" json:"with_signed_request,omitempty"`
	// `nameid-format` for the SAML Request.
	NameIdFormat SAMLNameIDFormat `protobuf:"varint,4,opt,name=name_id_format,json=nameIdFormat,proto3,enum=zitadel.idp.v1.SAMLNameIDFormat" json:"name_id_format,omitempty"`
	// Optional name of the attribute, which will be used to map the user
	// in case the nameid-format returned is `urn:oasis:names:tc:SAML:2.0:nameid-format:transient`.
	TransientMappingAttributeName *string `protobuf:"bytes,5,opt,name=transient_mapping_attribute_name,json=transientMappingAttributeName,proto3,oneof" json:"transient_mapping_attribute_name,omitempty"`
}

func (x *SAMLConfig) Reset() {
	*x = SAMLConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SAMLConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SAMLConfig) ProtoMessage() {}

func (x *SAMLConfig) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SAMLConfig.ProtoReflect.Descriptor instead.
func (*SAMLConfig) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{18}
}

func (x *SAMLConfig) GetMetadataXml() []byte {
	if x != nil {
		return x.MetadataXml
	}
	return nil
}

func (x *SAMLConfig) GetBinding() SAMLBinding {
	if x != nil {
		return x.Binding
	}
	return SAMLBinding_SAML_BINDING_UNSPECIFIED
}

func (x *SAMLConfig) GetWithSignedRequest() bool {
	if x != nil {
		return x.WithSignedRequest
	}
	return false
}

func (x *SAMLConfig) GetNameIdFormat() SAMLNameIDFormat {
	if x != nil {
		return x.NameIdFormat
	}
	return SAMLNameIDFormat_SAML_NAME_ID_FORMAT_UNSPECIFIED
}

func (x *SAMLConfig) GetTransientMappingAttributeName() string {
	if x != nil && x.TransientMappingAttributeName != nil {
		return *x.TransientMappingAttributeName
	}
	return ""
}

type AzureADConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId      string         `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Tenant        *AzureADTenant `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	EmailVerified bool           `protobuf:"varint,3,opt,name=email_verified,json=emailVerified,proto3" json:"email_verified,omitempty"`
	Scopes        []string       `protobuf:"bytes,4,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *AzureADConfig) Reset() {
	*x = AzureADConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureADConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureADConfig) ProtoMessage() {}

func (x *AzureADConfig) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureADConfig.ProtoReflect.Descriptor instead.
func (*AzureADConfig) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{19}
}

func (x *AzureADConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *AzureADConfig) GetTenant() *AzureADTenant {
	if x != nil {
		return x.Tenant
	}
	return nil
}

func (x *AzureADConfig) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *AzureADConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLinkingAllowed  bool              `protobuf:"varint,1,opt,name=is_linking_allowed,json=isLinkingAllowed,proto3" json:"is_linking_allowed,omitempty"`
	IsCreationAllowed bool              `protobuf:"varint,2,opt,name=is_creation_allowed,json=isCreationAllowed,proto3" json:"is_creation_allowed,omitempty"`
	IsAutoCreation    bool              `protobuf:"varint,3,opt,name=is_auto_creation,json=isAutoCreation,proto3" json:"is_auto_creation,omitempty"`
	IsAutoUpdate      bool              `protobuf:"varint,4,opt,name=is_auto_update,json=isAutoUpdate,proto3" json:"is_auto_update,omitempty"`
	AutoLinking       AutoLinkingOption `protobuf:"varint,5,opt,name=auto_linking,json=autoLinking,proto3,enum=zitadel.idp.v1.AutoLinkingOption" json:"auto_linking,omitempty"`
}

func (x *Options) Reset() {
	*x = Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options) ProtoMessage() {}

func (x *Options) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options.ProtoReflect.Descriptor instead.
func (*Options) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{20}
}

func (x *Options) GetIsLinkingAllowed() bool {
	if x != nil {
		return x.IsLinkingAllowed
	}
	return false
}

func (x *Options) GetIsCreationAllowed() bool {
	if x != nil {
		return x.IsCreationAllowed
	}
	return false
}

func (x *Options) GetIsAutoCreation() bool {
	if x != nil {
		return x.IsAutoCreation
	}
	return false
}

func (x *Options) GetIsAutoUpdate() bool {
	if x != nil {
		return x.IsAutoUpdate
	}
	return false
}

func (x *Options) GetAutoLinking() AutoLinkingOption {
	if x != nil {
		return x.AutoLinking
	}
	return AutoLinkingOption_AUTO_LINKING_OPTION_UNSPECIFIED
}

type LDAPAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdAttribute                string `protobuf:"bytes,1,opt,name=id_attribute,json=idAttribute,proto3" json:"id_attribute,omitempty"`
	FirstNameAttribute         string `protobuf:"bytes,2,opt,name=first_name_attribute,json=firstNameAttribute,proto3" json:"first_name_attribute,omitempty"`
	LastNameAttribute          string `protobuf:"bytes,3,opt,name=last_name_attribute,json=lastNameAttribute,proto3" json:"last_name_attribute,omitempty"`
	DisplayNameAttribute       string `protobuf:"bytes,4,opt,name=display_name_attribute,json=displayNameAttribute,proto3" json:"display_name_attribute,omitempty"`
	NickNameAttribute          string `protobuf:"bytes,5,opt,name=nick_name_attribute,json=nickNameAttribute,proto3" json:"nick_name_attribute,omitempty"`
	PreferredUsernameAttribute string `protobuf:"bytes,6,opt,name=preferred_username_attribute,json=preferredUsernameAttribute,proto3" json:"preferred_username_attribute,omitempty"`
	EmailAttribute             string `protobuf:"bytes,7,opt,name=email_attribute,json=emailAttribute,proto3" json:"email_attribute,omitempty"`
	EmailVerifiedAttribute     string `protobuf:"bytes,8,opt,name=email_verified_attribute,json=emailVerifiedAttribute,proto3" json:"email_verified_attribute,omitempty"`
	PhoneAttribute             string `protobuf:"bytes,9,opt,name=phone_attribute,json=phoneAttribute,proto3" json:"phone_attribute,omitempty"`
	PhoneVerifiedAttribute     string `protobuf:"bytes,10,opt,name=phone_verified_attribute,json=phoneVerifiedAttribute,proto3" json:"phone_verified_attribute,omitempty"`
	PreferredLanguageAttribute string `protobuf:"bytes,11,opt,name=preferred_language_attribute,json=preferredLanguageAttribute,proto3" json:"preferred_language_attribute,omitempty"`
	AvatarUrlAttribute         string `protobuf:"bytes,12,opt,name=avatar_url_attribute,json=avatarUrlAttribute,proto3" json:"avatar_url_attribute,omitempty"`
	ProfileAttribute           string `protobuf:"bytes,13,opt,name=profile_attribute,json=profileAttribute,proto3" json:"profile_attribute,omitempty"`
}

func (x *LDAPAttributes) Reset() {
	*x = LDAPAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LDAPAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LDAPAttributes) ProtoMessage() {}

func (x *LDAPAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LDAPAttributes.ProtoReflect.Descriptor instead.
func (*LDAPAttributes) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{21}
}

func (x *LDAPAttributes) GetIdAttribute() string {
	if x != nil {
		return x.IdAttribute
	}
	return ""
}

func (x *LDAPAttributes) GetFirstNameAttribute() string {
	if x != nil {
		return x.FirstNameAttribute
	}
	return ""
}

func (x *LDAPAttributes) GetLastNameAttribute() string {
	if x != nil {
		return x.LastNameAttribute
	}
	return ""
}

func (x *LDAPAttributes) GetDisplayNameAttribute() string {
	if x != nil {
		return x.DisplayNameAttribute
	}
	return ""
}

func (x *LDAPAttributes) GetNickNameAttribute() string {
	if x != nil {
		return x.NickNameAttribute
	}
	return ""
}

func (x *LDAPAttributes) GetPreferredUsernameAttribute() string {
	if x != nil {
		return x.PreferredUsernameAttribute
	}
	return ""
}

func (x *LDAPAttributes) GetEmailAttribute() string {
	if x != nil {
		return x.EmailAttribute
	}
	return ""
}

func (x *LDAPAttributes) GetEmailVerifiedAttribute() string {
	if x != nil {
		return x.EmailVerifiedAttribute
	}
	return ""
}

func (x *LDAPAttributes) GetPhoneAttribute() string {
	if x != nil {
		return x.PhoneAttribute
	}
	return ""
}

func (x *LDAPAttributes) GetPhoneVerifiedAttribute() string {
	if x != nil {
		return x.PhoneVerifiedAttribute
	}
	return ""
}

func (x *LDAPAttributes) GetPreferredLanguageAttribute() string {
	if x != nil {
		return x.PreferredLanguageAttribute
	}
	return ""
}

func (x *LDAPAttributes) GetAvatarUrlAttribute() string {
	if x != nil {
		return x.AvatarUrlAttribute
	}
	return ""
}

func (x *LDAPAttributes) GetProfileAttribute() string {
	if x != nil {
		return x.ProfileAttribute
	}
	return ""
}

type AzureADTenant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*AzureADTenant_TenantType
	//	*AzureADTenant_TenantId
	Type isAzureADTenant_Type `protobuf_oneof:"type"`
}

func (x *AzureADTenant) Reset() {
	*x = AzureADTenant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureADTenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureADTenant) ProtoMessage() {}

func (x *AzureADTenant) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureADTenant.ProtoReflect.Descriptor instead.
func (*AzureADTenant) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{22}
}

func (m *AzureADTenant) GetType() isAzureADTenant_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *AzureADTenant) GetTenantType() AzureADTenantType {
	if x, ok := x.GetType().(*AzureADTenant_TenantType); ok {
		return x.TenantType
	}
	return AzureADTenantType_AZURE_AD_TENANT_TYPE_COMMON
}

func (x *AzureADTenant) GetTenantId() string {
	if x, ok := x.GetType().(*AzureADTenant_TenantId); ok {
		return x.TenantId
	}
	return ""
}

type isAzureADTenant_Type interface {
	isAzureADTenant_Type()
}

type AzureADTenant_TenantType struct {
	TenantType AzureADTenantType `protobuf:"varint,1,opt,name=tenant_type,json=tenantType,proto3,enum=zitadel.idp.v1.AzureADTenantType,oneof"`
}

type AzureADTenant_TenantId struct {
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3,oneof"`
}

func (*AzureADTenant_TenantType) isAzureADTenant_Type() {}

func (*AzureADTenant_TenantId) isAzureADTenant_Type() {}

type AppleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	TeamId   string   `protobuf:"bytes,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	KeyId    string   `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Scopes   []string `protobuf:"bytes,4,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *AppleConfig) Reset() {
	*x = AppleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_idp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppleConfig) ProtoMessage() {}

func (x *AppleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_idp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppleConfig.ProtoReflect.Descriptor instead.
func (*AppleConfig) Descriptor() ([]byte, []int) {
	return file_zitadel_idp_proto_rawDescGZIP(), []int{23}
}

func (x *AppleConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *AppleConfig) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *AppleConfig) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *AppleConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

var File_zitadel_idp_proto protoreflect.FileDescriptor

var file_zitadel_idp_proto_rawDesc = []byte{
	0x0a, 0x11, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x69, 0x64, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70,
	0x2e, 0x76, 0x31, 0x1a, 0x14, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x83, 0x05, 0x0a, 0x03, 0x49, 0x44, 0x50, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39,
	0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x57, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0d, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x22, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x0c, 0x73, 0x74, 0x79, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44,
	0x50, 0x53, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x4d, 0x92, 0x41,
	0x4a, 0x32, 0x48, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x0b, 0x73, 0x74, 0x79,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x64, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x2b, 0x74, 0x68, 0x65, 0x20,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3d,
	0x0a, 0x0b, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x0a, 0x6f, 0x69, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a,
	0x0a, 0x6a, 0x77, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4a, 0x57, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x09,
	0x6a, 0x77, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xc6, 0x04, 0x0a, 0x0b, 0x49, 0x44, 0x50,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x45, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x12,
	0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36,
	0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x50, 0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x39, 0x92, 0x41, 0x36, 0x32, 0x1f, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33,
	0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x05, 0x69, 0x64, 0x70, 0x49,
	0x64, 0x12, 0x4b, 0x0a, 0x08, 0x69, 0x64, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41, 0x2d, 0x32, 0x21, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x08, 0x22, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x22, 0x52, 0x07, 0x69, 0x64, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x72,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48, 0x92, 0x41, 0x45, 0x32, 0x34, 0x74,
	0x68, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4a, 0x0d, 0x22, 0x61, 0x73, 0x2d, 0x31, 0x32, 0x2d, 0x64, 0x66, 0x2d, 0x38,
	0x39, 0x22, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x6e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40,
	0x92, 0x41, 0x3d, 0x32, 0x1f, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4a, 0x1a, 0x22, 0x67, 0x69, 0x67, 0x69, 0x2e, 0x6c, 0x6f, 0x6e, 0x67,
	0x2d, 0x6e, 0x65, 0x63, 0x6b, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22,
	0x52, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x08, 0x69, 0x64, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69,
	0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x54, 0x79, 0x70, 0x65, 0x42, 0x39, 0x92,
	0x41, 0x36, 0x32, 0x34, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x07, 0x69, 0x64, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xb6, 0x02, 0x0a, 0x12, 0x49, 0x44, 0x50, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x50, 0x0a, 0x06, 0x69, 0x64, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x1f, 0x74,
	0x68, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x13,
	0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33,
	0x33, 0x34, 0x22, 0x52, 0x05, 0x69, 0x64, 0x70, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x08, 0x69, 0x64,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92, 0x41,
	0x2d, 0x32, 0x21, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4a, 0x08, 0x22, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x22, 0x52, 0x07,
	0x69, 0x64, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x08, 0x69, 0x64, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x32, 0x34, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x11,
	0x5b, 0x22, 0x49, 0x44, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x49, 0x44, 0x43, 0x22,
	0x5d, 0x52, 0x07, 0x69, 0x64, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf7, 0x04, 0x0a, 0x0a, 0x4f,
	0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41,
	0x2e, 0x32, 0x2c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x20, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0x92, 0x41, 0x49, 0x32, 0x28,
	0x74, 0x68, 0x65, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x1d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12,
	0x88, 0x01, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x70, 0x92, 0x41, 0x6d, 0x32, 0x4b, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x5a,
	0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4a, 0x1e, 0x5b, 0x22, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0x2c, 0x20, 0x22,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x2c, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x22, 0x5d, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x14, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x45, 0x92, 0x41, 0x42,
	0x32, 0x40, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x69,
	0x63, 0x68, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x8b, 0x01, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x22, 0x9e, 0x04, 0x0a, 0x09, 0x4a, 0x57, 0x54, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x7c, 0x0a, 0x0c, 0x6a, 0x77, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x59, 0x92, 0x41, 0x4c, 0x32, 0x2b, 0x74,
	0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4a, 0x57, 0x54, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65,
	0x20, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x4a, 0x1d, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xc8, 0x01, 0x52, 0x0b, 0x6a, 0x77, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x6c, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x54, 0x92, 0x41, 0x47, 0x32, 0x26, 0x74, 0x68, 0x65, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4a, 0x57, 0x54, 0x20, 0x28, 0x66, 0x6f,
	0x72, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x4a, 0x1d, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x98,
	0x01, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x73, 0x92, 0x41, 0x66, 0x32, 0x40, 0x74, 0x68, 0x65,
	0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6b, 0x65, 0x79, 0x20, 0x28, 0x4a, 0x57, 0x4b, 0x29, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
	0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x69, 0x67, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x4a, 0x57, 0x54, 0x20, 0x77, 0x69, 0x74, 0x68, 0x4a, 0x22, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x79, 0x73,
	0x22, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x0c, 0x6b, 0x65, 0x79,
	0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x0b, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x68, 0x92, 0x41, 0x5b, 0x32, 0x49, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x77, 0x68, 0x65,
	0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4a, 0x57, 0x54, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65,
	0x6e, 0x74, 0x20, 0x69, 0x6e, 0x2c, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x69,
	0x73, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x0e, 0x22, 0x78, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x0a, 0x49, 0x44, 0x50, 0x49, 0x44, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39,
	0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x0c, 0x49, 0x44, 0x50, 0x4e, 0x61, 0x6d,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x0a, 0x4a, 0x08, 0x22, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x22, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x6c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37,
	0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69,
	0x63, 0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22,
	0x8d, 0x01, 0x0a, 0x11, 0x49, 0x44, 0x50, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x78, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3b, 0x92, 0x41, 0x30, 0x32, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20,
	0x6f, 0x72, 0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0xfa, 0x42, 0x05, 0x82,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xda, 0x02, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22,
	0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33,
	0x34, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x50, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x4a, 0x08,
	0x22, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x44, 0x50, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69,
	0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x8c, 0x06, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x31, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x64, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x44, 0x41, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x04,
	0x6c, 0x64, 0x61, 0x70, 0x12, 0x36, 0x0a, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69,
	0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x05,
	0x6f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x12, 0x37, 0x0a, 0x04, 0x6f, 0x69, 0x64, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x69, 0x64, 0x63, 0x12, 0x2d, 0x0a, 0x03, 0x6a, 0x77,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x57, 0x54, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x03, 0x6a, 0x77, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x75,
	0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x12, 0x4b, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69,
	0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x08, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x45, 0x73, 0x12, 0x36,
	0x0a, 0x06, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x12, 0x56, 0x0a, 0x12, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x53, 0x65, 0x6c, 0x66, 0x48, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x10, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x53, 0x65, 0x6c, 0x66, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x12, 0x3a,
	0x0a, 0x08, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x41, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x07, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x41, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x12,
	0x30, 0x0a, 0x04, 0x73, 0x61, 0x6d, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x04, 0x73, 0x61, 0x6d,
	0x6c, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xb6, 0x06, 0x0a, 0x0b,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e,
	0x92, 0x41, 0x3b, 0x32, 0x2c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x20, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4a, 0x0b, 0x22, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x64, 0x22, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0xa4, 0x01, 0x0a, 0x16, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6d, 0x92, 0x41, 0x6a, 0x32, 0x38,
	0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x77, 0x68, 0x65,
	0x72, 0x65, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4a, 0x2e, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x22, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x7f, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0x92, 0x41, 0x55, 0x32, 0x2c, 0x74, 0x68,
	0x65, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x67, 0x65, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4a, 0x25, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x95, 0x01, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x70, 0x92, 0x41, 0x6d, 0x32, 0x37, 0x74,
	0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x67, 0x65,
	0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x32, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x70, 0x92, 0x41, 0x6d, 0x32, 0x4b,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20,
	0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x1e, 0x5b, 0x22, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0x2c, 0x20, 0x22, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x22, 0x2c, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x5d, 0x52, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x0c, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5c, 0x92, 0x41, 0x59, 0x32, 0x4c,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x68, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x73, 0x20, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45,
	0x4c, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x67, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x09, 0x22, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x0b, 0x69, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x22, 0xf9, 0x03, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x4f, 0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x65, 0x0a, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4d, 0x92, 0x41, 0x4a, 0x32,
	0x28, 0x74, 0x68, 0x65, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x1e, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x22, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x12, 0x5b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x2c, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x20, 0x69, 0x64, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62,
	0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4a, 0x0b, 0x22, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2d, 0x69, 0x64, 0x22, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x88,
	0x01, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x70, 0x92, 0x41, 0x6d, 0x32, 0x4b, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x5a, 0x49,
	0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4a, 0x1e, 0x5b, 0x22, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0x2c, 0x20, 0x22, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x2c, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22,
	0x5d, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x13, 0x69, 0x73,
	0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x65, 0x92, 0x41, 0x62, 0x32, 0x5a, 0x69, 0x66,
	0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x67, 0x65, 0x74, 0x20,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x69, 0x64, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x72,
	0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x20,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x10,
	0x69, 0x73, 0x49, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x22, 0xd9, 0x01, 0x0a, 0x0c, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x4e, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x1f, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x20, 0x41, 0x70, 0x70, 0x4a, 0x0b, 0x22, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2d, 0x69, 0x64, 0x22, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x79, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x61, 0x92, 0x41, 0x5e, 0x32, 0x3c, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20,
	0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x47, 0x69,
	0x74, 0x48, 0x75, 0x62, 0x4a, 0x1e, 0x5b, 0x22, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0x2c,
	0x20, 0x22, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x2c, 0x20, 0x22, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x22, 0x5d, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xec, 0x02, 0x0a,
	0x1c, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x1f, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x69, 0x74, 0x48,
	0x75, 0x62, 0x20, 0x41, 0x70, 0x70, 0x4a, 0x0b, 0x22, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d,
	0x69, 0x64, 0x22, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x79, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x61, 0x92, 0x41, 0x5e, 0x32, 0x3c, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x5a,
	0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x47, 0x69, 0x74,
	0x48, 0x75, 0x62, 0x4a, 0x1e, 0x5b, 0x22, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0x2c, 0x20,
	0x22, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x2c, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0x5d, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x0c,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x35, 0x92, 0x41, 0x32, 0x32, 0x23, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x0b, 0x22, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2d, 0x69, 0x64, 0x22, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x79, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x61, 0x92, 0x41, 0x5e, 0x32, 0x3c, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x5a,
	0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x4a, 0x1e, 0x5b, 0x22, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0x2c, 0x20,
	0x22, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x2c, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0x5d, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x0c,
	0x47, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x35, 0x92, 0x41, 0x32, 0x32, 0x23, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x20, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x0b, 0x22, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2d, 0x69, 0x64, 0x22, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x79, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x61, 0x92, 0x41, 0x5e, 0x32, 0x3c, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x5a,
	0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x47, 0x69, 0x74,
	0x4c, 0x61, 0x62, 0x4a, 0x1e, 0x5b, 0x22, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0x2c, 0x20,
	0x22, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x2c, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0x5d, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x16,
	0x47, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x53, 0x65, 0x6c, 0x66, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x52,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x23, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x69,
	0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x20,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x0b, 0x22, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x64, 0x22, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x79, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x61, 0x92, 0x41, 0x5e, 0x32, 0x3c, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79,
	0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x47,
	0x69, 0x74, 0x4c, 0x61, 0x62, 0x4a, 0x1e, 0x5b, 0x22, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22,
	0x2c, 0x20, 0x22, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x2c, 0x20, 0x22, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x22, 0x5d, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xda, 0x02,
	0x0a, 0x0a, 0x4c, 0x44, 0x41, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x44, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x62, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x69, 0x6e, 0x64, 0x44, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x44, 0x41, 0x50, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xd1, 0x02, 0x0a, 0x0a, 0x53,
	0x41, 0x4d, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x78, 0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x58, 0x6d, 0x6c, 0x12, 0x35, 0x0a, 0x07,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x41, 0x4d, 0x4c, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x41, 0x4d,
	0x4c, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c, 0x6e,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4c, 0x0a, 0x20, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd7,
	0x04, 0x0a, 0x0d, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x41, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x54, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x25, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x20, 0x41, 0x44, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a,
	0x0b, 0x22, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x64, 0x22, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x8e, 0x01, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x41, 0x44,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x42, 0x57, 0x92, 0x41, 0x54, 0x32, 0x52, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x61, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62,
	0x65, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20,
	0x28, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x2c, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2c, 0x20, 0x41, 0x6c, 0x6c, 0x29, 0x52,
	0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0xd3, 0x01, 0x0a, 0x0e, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0xab, 0x01, 0x92, 0x41, 0xa7, 0x01, 0x32, 0xa4, 0x01, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x20,
	0x41, 0x44, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x6e, 0x27, 0x74, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20,
	0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x68, 0x61, 0x73,
	0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0x20,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x62, 0x65, 0x20, 0x61,
	0x64, 0x64, 0x65, 0x64, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x28, 0x6e, 0x6f, 0x20, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73,
	0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x29, 0x52, 0x0d,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x88, 0x01,
	0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x70,
	0x92, 0x41, 0x6d, 0x32, 0x3e, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x5a, 0x49, 0x54,
	0x41, 0x44, 0x45, 0x4c, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x20, 0x41, 0x44, 0x4a, 0x2b, 0x5b, 0x22, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0x2c, 0x20,
	0x22, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x2c, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0x2c, 0x20, 0x22, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x22, 0x5d,
	0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xf7, 0x07, 0x0a, 0x07, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0xfd, 0x01, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x42, 0xce, 0x01, 0x92, 0x41, 0xca, 0x01, 0x32, 0xc7, 0x01, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x69, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x20, 0x62, 0x65, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x20, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x10, 0x69, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x12, 0x81, 0x02, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x42, 0xd0, 0x01, 0x92, 0x41, 0xcc, 0x01, 0x32, 0xc9, 0x01, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x69, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x73, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20,
	0x6e, 0x65, 0x77, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x5a,
	0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x20, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x69,
	0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x64,
	0x69, 0x74, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x2e, 0x52, 0x11, 0x69, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x96, 0x01, 0x0a, 0x10, 0x69, 0x73, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x6c, 0x92, 0x41, 0x69, 0x32, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x20, 0x69, 0x6e, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x77, 0x68, 0x65,
	0x6e, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x20,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x52, 0x0e, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x80, 0x01, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x5a, 0x92, 0x41, 0x57, 0x32,
	0x55, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x66, 0x20, 0x61, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62,
	0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x84,
	0x01, 0x92, 0x41, 0x80, 0x01, 0x32, 0x7e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x66,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x67, 0x65,
	0x74, 0x20, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69,
	0x6e, 0x6b, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x5a,
	0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x61,
	0x6e, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x2e, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x22, 0xa6, 0x06, 0x0a, 0x0e, 0x4c, 0x44, 0x41, 0x50, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0c, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0b, 0x69, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x3a, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x12, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x38,
	0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0xc8, 0x01, 0x52, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x13, 0x6e, 0x69, 0x63, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52,
	0x11, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x4a, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0xc8, 0x01, 0x52, 0x1a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x31,
	0x0a, 0x0f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8,
	0x01, 0x52, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x42, 0x0a, 0x18, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x16, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x0f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0e, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x18, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0xc8, 0x01, 0x52, 0x16, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x1c,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x1a, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01,
	0x52, 0x12, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x7c, 0x0a, 0x0d, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x41, 0x44, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0b,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x69, 0x64, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x41, 0x44, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfb, 0x02, 0x0a, 0x0b, 0x41, 0x70,
	0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x65, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48, 0x92, 0x41,
	0x45, 0x32, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x20, 0x28, 0x41, 0x70,
	0x70, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x72, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20,
	0x49, 0x44, 0x29, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20,
	0x41, 0x70, 0x70, 0x6c, 0x65, 0x4a, 0x0f, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x69, 0x64, 0x22, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x45, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x19, 0x54, 0x65, 0x61, 0x6d, 0x20, 0x49, 0x44, 0x20,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x41, 0x70, 0x70, 0x6c,
	0x65, 0x4a, 0x0c, 0x22, 0x41, 0x4c, 0x54, 0x30, 0x33, 0x4a, 0x56, 0x33, 0x4f, 0x53, 0x22, 0x52,
	0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x32, 0x28, 0x49, 0x44,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20,
	0x6b, 0x65, 0x79, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79,
	0x20, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x4a, 0x0b, 0x22, 0x4f, 0x47, 0x4b, 0x44, 0x4b, 0x32, 0x35,
	0x4b, 0x44, 0x22, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x53, 0x92, 0x41, 0x50, 0x32,
	0x3b, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c,
	0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x4a, 0x11, 0x5b, 0x22,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2c, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x5d, 0x52,
	0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x2a, 0x53, 0x0a, 0x08, 0x49, 0x44, 0x50, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x44, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x49, 0x44, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x44, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a, 0x47, 0x0a, 0x0e,
	0x49, 0x44, 0x50, 0x53, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x54, 0x59, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x54, 0x59, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x4f,
	0x47, 0x4c, 0x45, 0x10, 0x01, 0x2a, 0x48, 0x0a, 0x07, 0x49, 0x44, 0x50, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x49, 0x44, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x44,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x49, 0x44, 0x43, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x49, 0x44, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x57, 0x54, 0x10, 0x03, 0x2a,
	0x61, 0x0a, 0x0c, 0x49, 0x44, 0x50, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x1a, 0x49, 0x44, 0x50, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x44, 0x50, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x44,
	0x50, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x47,
	0x10, 0x02, 0x2a, 0x7f, 0x0a, 0x10, 0x4f, 0x49, 0x44, 0x43, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x49, 0x44, 0x43, 0x5f, 0x4d,
	0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x49,
	0x44, 0x43, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x49, 0x44, 0x43, 0x5f, 0x4d, 0x41,
	0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x10, 0x02, 0x2a, 0x47, 0x0a, 0x0c, 0x49, 0x44, 0x50, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x44, 0x50, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x50, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x2a, 0xeb, 0x02, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x19, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x49,
	0x44, 0x43, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x57, 0x54, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x44, 0x41,
	0x50, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x5a,
	0x55, 0x52, 0x45, 0x5f, 0x41, 0x44, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42,
	0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x45, 0x53, 0x10, 0x07, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41,
	0x42, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45,
	0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x4d, 0x4c, 0x10, 0x0c, 0x2a, 0x78, 0x0a, 0x0b, 0x53, 0x41,
	0x4d, 0x4c, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x41, 0x4d,
	0x4c, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x41, 0x4d, 0x4c, 0x5f,
	0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x41, 0x4d, 0x4c, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52,
	0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x41, 0x4d,
	0x4c, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41,
	0x43, 0x54, 0x10, 0x03, 0x2a, 0xa5, 0x01, 0x0a, 0x10, 0x53, 0x41, 0x4d, 0x4c, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x44, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x41, 0x4d,
	0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25,
	0x0a, 0x21, 0x53, 0x41, 0x4d, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x41, 0x4d, 0x4c, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x50, 0x45, 0x52,
	0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x41, 0x4d,
	0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x2a, 0x79, 0x0a, 0x11,
	0x41, 0x75, 0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x55, 0x54, 0x4f,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x2a, 0x80, 0x01, 0x0a, 0x11, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x41, 0x44, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x1b, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x44, 0x5f, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x26,
	0x0a, 0x22, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x44, 0x5f, 0x54, 0x45, 0x4e, 0x41, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x53, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f,
	0x41, 0x44, 0x5f, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x53, 0x10, 0x02, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x69, 0x64, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_idp_proto_rawDescOnce sync.Once
	file_zitadel_idp_proto_rawDescData = file_zitadel_idp_proto_rawDesc
)

func file_zitadel_idp_proto_rawDescGZIP() []byte {
	file_zitadel_idp_proto_rawDescOnce.Do(func() {
		file_zitadel_idp_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_idp_proto_rawDescData)
	})
	return file_zitadel_idp_proto_rawDescData
}

var file_zitadel_idp_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_zitadel_idp_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_zitadel_idp_proto_goTypes = []interface{}{
	(IDPState)(0),                        // 0: zitadel.idp.v1.IDPState
	(IDPStylingType)(0),                  // 1: zitadel.idp.v1.IDPStylingType
	(IDPType)(0),                         // 2: zitadel.idp.v1.IDPType
	(IDPOwnerType)(0),                    // 3: zitadel.idp.v1.IDPOwnerType
	(OIDCMappingField)(0),                // 4: zitadel.idp.v1.OIDCMappingField
	(IDPFieldName)(0),                    // 5: zitadel.idp.v1.IDPFieldName
	(ProviderType)(0),                    // 6: zitadel.idp.v1.ProviderType
	(SAMLBinding)(0),                     // 7: zitadel.idp.v1.SAMLBinding
	(SAMLNameIDFormat)(0),                // 8: zitadel.idp.v1.SAMLNameIDFormat
	(AutoLinkingOption)(0),               // 9: zitadel.idp.v1.AutoLinkingOption
	(AzureADTenantType)(0),               // 10: zitadel.idp.v1.AzureADTenantType
	(*IDP)(nil),                          // 11: zitadel.idp.v1.IDP
	(*IDPUserLink)(nil),                  // 12: zitadel.idp.v1.IDPUserLink
	(*IDPLoginPolicyLink)(nil),           // 13: zitadel.idp.v1.IDPLoginPolicyLink
	(*OIDCConfig)(nil),                   // 14: zitadel.idp.v1.OIDCConfig
	(*JWTConfig)(nil),                    // 15: zitadel.idp.v1.JWTConfig
	(*IDPIDQuery)(nil),                   // 16: zitadel.idp.v1.IDPIDQuery
	(*IDPNameQuery)(nil),                 // 17: zitadel.idp.v1.IDPNameQuery
	(*IDPOwnerTypeQuery)(nil),            // 18: zitadel.idp.v1.IDPOwnerTypeQuery
	(*Provider)(nil),                     // 19: zitadel.idp.v1.Provider
	(*ProviderConfig)(nil),               // 20: zitadel.idp.v1.ProviderConfig
	(*OAuthConfig)(nil),                  // 21: zitadel.idp.v1.OAuthConfig
	(*GenericOIDCConfig)(nil),            // 22: zitadel.idp.v1.GenericOIDCConfig
	(*GitHubConfig)(nil),                 // 23: zitadel.idp.v1.GitHubConfig
	(*GitHubEnterpriseServerConfig)(nil), // 24: zitadel.idp.v1.GitHubEnterpriseServerConfig
	(*GoogleConfig)(nil),                 // 25: zitadel.idp.v1.GoogleConfig
	(*GitLabConfig)(nil),                 // 26: zitadel.idp.v1.GitLabConfig
	(*GitLabSelfHostedConfig)(nil),       // 27: zitadel.idp.v1.GitLabSelfHostedConfig
	(*LDAPConfig)(nil),                   // 28: zitadel.idp.v1.LDAPConfig
	(*SAMLConfig)(nil),                   // 29: zitadel.idp.v1.SAMLConfig
	(*AzureADConfig)(nil),                // 30: zitadel.idp.v1.AzureADConfig
	(*Options)(nil),                      // 31: zitadel.idp.v1.Options
	(*LDAPAttributes)(nil),               // 32: zitadel.idp.v1.LDAPAttributes
	(*AzureADTenant)(nil),                // 33: zitadel.idp.v1.AzureADTenant
	(*AppleConfig)(nil),                  // 34: zitadel.idp.v1.AppleConfig
	(*object.ObjectDetails)(nil),         // 35: zitadel.v1.ObjectDetails
	(object.TextQueryMethod)(0),          // 36: zitadel.v1.TextQueryMethod
	(*durationpb.Duration)(nil),          // 37: google.protobuf.Duration
}
var file_zitadel_idp_proto_depIdxs = []int32{
	35, // 0: zitadel.idp.v1.IDP.details:type_name -> zitadel.v1.ObjectDetails
	0,  // 1: zitadel.idp.v1.IDP.state:type_name -> zitadel.idp.v1.IDPState
	1,  // 2: zitadel.idp.v1.IDP.styling_type:type_name -> zitadel.idp.v1.IDPStylingType
	3,  // 3: zitadel.idp.v1.IDP.owner:type_name -> zitadel.idp.v1.IDPOwnerType
	14, // 4: zitadel.idp.v1.IDP.oidc_config:type_name -> zitadel.idp.v1.OIDCConfig
	15, // 5: zitadel.idp.v1.IDP.jwt_config:type_name -> zitadel.idp.v1.JWTConfig
	2,  // 6: zitadel.idp.v1.IDPUserLink.idp_type:type_name -> zitadel.idp.v1.IDPType
	2,  // 7: zitadel.idp.v1.IDPLoginPolicyLink.idp_type:type_name -> zitadel.idp.v1.IDPType
	4,  // 8: zitadel.idp.v1.OIDCConfig.display_name_mapping:type_name -> zitadel.idp.v1.OIDCMappingField
	4,  // 9: zitadel.idp.v1.OIDCConfig.username_mapping:type_name -> zitadel.idp.v1.OIDCMappingField
	36, // 10: zitadel.idp.v1.IDPNameQuery.method:type_name -> zitadel.v1.TextQueryMethod
	3,  // 11: zitadel.idp.v1.IDPOwnerTypeQuery.owner_type:type_name -> zitadel.idp.v1.IDPOwnerType
	35, // 12: zitadel.idp.v1.Provider.details:type_name -> zitadel.v1.ObjectDetails
	0,  // 13: zitadel.idp.v1.Provider.state:type_name -> zitadel.idp.v1.IDPState
	3,  // 14: zitadel.idp.v1.Provider.owner:type_name -> zitadel.idp.v1.IDPOwnerType
	6,  // 15: zitadel.idp.v1.Provider.type:type_name -> zitadel.idp.v1.ProviderType
	20, // 16: zitadel.idp.v1.Provider.config:type_name -> zitadel.idp.v1.ProviderConfig
	31, // 17: zitadel.idp.v1.ProviderConfig.options:type_name -> zitadel.idp.v1.Options
	28, // 18: zitadel.idp.v1.ProviderConfig.ldap:type_name -> zitadel.idp.v1.LDAPConfig
	25, // 19: zitadel.idp.v1.ProviderConfig.google:type_name -> zitadel.idp.v1.GoogleConfig
	21, // 20: zitadel.idp.v1.ProviderConfig.oauth:type_name -> zitadel.idp.v1.OAuthConfig
	22, // 21: zitadel.idp.v1.ProviderConfig.oidc:type_name -> zitadel.idp.v1.GenericOIDCConfig
	15, // 22: zitadel.idp.v1.ProviderConfig.jwt:type_name -> zitadel.idp.v1.JWTConfig
	23, // 23: zitadel.idp.v1.ProviderConfig.github:type_name -> zitadel.idp.v1.GitHubConfig
	24, // 24: zitadel.idp.v1.ProviderConfig.github_es:type_name -> zitadel.idp.v1.GitHubEnterpriseServerConfig
	26, // 25: zitadel.idp.v1.ProviderConfig.gitlab:type_name -> zitadel.idp.v1.GitLabConfig
	27, // 26: zitadel.idp.v1.ProviderConfig.gitlab_self_hosted:type_name -> zitadel.idp.v1.GitLabSelfHostedConfig
	30, // 27: zitadel.idp.v1.ProviderConfig.azure_ad:type_name -> zitadel.idp.v1.AzureADConfig
	34, // 28: zitadel.idp.v1.ProviderConfig.apple:type_name -> zitadel.idp.v1.AppleConfig
	29, // 29: zitadel.idp.v1.ProviderConfig.saml:type_name -> zitadel.idp.v1.SAMLConfig
	37, // 30: zitadel.idp.v1.LDAPConfig.timeout:type_name -> google.protobuf.Duration
	32, // 31: zitadel.idp.v1.LDAPConfig.attributes:type_name -> zitadel.idp.v1.LDAPAttributes
	7,  // 32: zitadel.idp.v1.SAMLConfig.binding:type_name -> zitadel.idp.v1.SAMLBinding
	8,  // 33: zitadel.idp.v1.SAMLConfig.name_id_format:type_name -> zitadel.idp.v1.SAMLNameIDFormat
	33, // 34: zitadel.idp.v1.AzureADConfig.tenant:type_name -> zitadel.idp.v1.AzureADTenant
	9,  // 35: zitadel.idp.v1.Options.auto_linking:type_name -> zitadel.idp.v1.AutoLinkingOption
	10, // 36: zitadel.idp.v1.AzureADTenant.tenant_type:type_name -> zitadel.idp.v1.AzureADTenantType
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_zitadel_idp_proto_init() }
func file_zitadel_idp_proto_init() {
	if File_zitadel_idp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zitadel_idp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDPUserLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDPLoginPolicyLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OIDCConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDPIDQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDPNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDPOwnerTypeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuthConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericOIDCConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitHubConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitHubEnterpriseServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitLabConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitLabSelfHostedConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LDAPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SAMLConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureADConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LDAPAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureADTenant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_idp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_idp_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*IDP_OidcConfig)(nil),
		(*IDP_JwtConfig)(nil),
	}
	file_zitadel_idp_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ProviderConfig_Ldap)(nil),
		(*ProviderConfig_Google)(nil),
		(*ProviderConfig_Oauth)(nil),
		(*ProviderConfig_Oidc)(nil),
		(*ProviderConfig_Jwt)(nil),
		(*ProviderConfig_Github)(nil),
		(*ProviderConfig_GithubEs)(nil),
		(*ProviderConfig_Gitlab)(nil),
		(*ProviderConfig_GitlabSelfHosted)(nil),
		(*ProviderConfig_AzureAd)(nil),
		(*ProviderConfig_Apple)(nil),
		(*ProviderConfig_Saml)(nil),
	}
	file_zitadel_idp_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_zitadel_idp_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*AzureADTenant_TenantType)(nil),
		(*AzureADTenant_TenantId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_idp_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_idp_proto_goTypes,
		DependencyIndexes: file_zitadel_idp_proto_depIdxs,
		EnumInfos:         file_zitadel_idp_proto_enumTypes,
		MessageInfos:      file_zitadel_idp_proto_msgTypes,
	}.Build()
	File_zitadel_idp_proto = out.File
	file_zitadel_idp_proto_rawDesc = nil
	file_zitadel_idp_proto_goTypes = nil
	file_zitadel_idp_proto_depIdxs = nil
}
