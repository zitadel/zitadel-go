// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/app/v2beta/app_service.proto

package app

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	v2 "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/filter/v2"
	_ "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/protoc/v2"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to CreationRequestType:
	//
	//	*CreateApplicationRequest_OidcRequest
	//	*CreateApplicationRequest_SamlRequest
	//	*CreateApplicationRequest_ApiRequest
	CreationRequestType isCreateApplicationRequest_CreationRequestType `protobuf_oneof:"creation_request_type"`
}

func (x *CreateApplicationRequest) Reset() {
	*x = CreateApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationRequest) ProtoMessage() {}

func (x *CreateApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationRequest.ProtoReflect.Descriptor instead.
func (*CreateApplicationRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateApplicationRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateApplicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateApplicationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *CreateApplicationRequest) GetCreationRequestType() isCreateApplicationRequest_CreationRequestType {
	if m != nil {
		return m.CreationRequestType
	}
	return nil
}

func (x *CreateApplicationRequest) GetOidcRequest() *CreateOIDCApplicationRequest {
	if x, ok := x.GetCreationRequestType().(*CreateApplicationRequest_OidcRequest); ok {
		return x.OidcRequest
	}
	return nil
}

func (x *CreateApplicationRequest) GetSamlRequest() *CreateSAMLApplicationRequest {
	if x, ok := x.GetCreationRequestType().(*CreateApplicationRequest_SamlRequest); ok {
		return x.SamlRequest
	}
	return nil
}

func (x *CreateApplicationRequest) GetApiRequest() *CreateAPIApplicationRequest {
	if x, ok := x.GetCreationRequestType().(*CreateApplicationRequest_ApiRequest); ok {
		return x.ApiRequest
	}
	return nil
}

type isCreateApplicationRequest_CreationRequestType interface {
	isCreateApplicationRequest_CreationRequestType()
}

type CreateApplicationRequest_OidcRequest struct {
	OidcRequest *CreateOIDCApplicationRequest `protobuf:"bytes,4,opt,name=oidc_request,json=oidcRequest,proto3,oneof"`
}

type CreateApplicationRequest_SamlRequest struct {
	SamlRequest *CreateSAMLApplicationRequest `protobuf:"bytes,5,opt,name=saml_request,json=samlRequest,proto3,oneof"`
}

type CreateApplicationRequest_ApiRequest struct {
	ApiRequest *CreateAPIApplicationRequest `protobuf:"bytes,6,opt,name=api_request,json=apiRequest,proto3,oneof"`
}

func (*CreateApplicationRequest_OidcRequest) isCreateApplicationRequest_CreationRequestType() {}

func (*CreateApplicationRequest_SamlRequest) isCreateApplicationRequest_CreationRequestType() {}

func (*CreateApplicationRequest_ApiRequest) isCreateApplicationRequest_CreationRequestType() {}

type CreateApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// The timestamp of the app creation.
	CreationDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	// Types that are assignable to CreationResponseType:
	//
	//	*CreateApplicationResponse_OidcResponse
	//	*CreateApplicationResponse_SamlResponse
	//	*CreateApplicationResponse_ApiResponse
	CreationResponseType isCreateApplicationResponse_CreationResponseType `protobuf_oneof:"creation_response_type"`
}

func (x *CreateApplicationResponse) Reset() {
	*x = CreateApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationResponse) ProtoMessage() {}

func (x *CreateApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationResponse.ProtoReflect.Descriptor instead.
func (*CreateApplicationResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateApplicationResponse) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *CreateApplicationResponse) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (m *CreateApplicationResponse) GetCreationResponseType() isCreateApplicationResponse_CreationResponseType {
	if m != nil {
		return m.CreationResponseType
	}
	return nil
}

func (x *CreateApplicationResponse) GetOidcResponse() *CreateOIDCApplicationResponse {
	if x, ok := x.GetCreationResponseType().(*CreateApplicationResponse_OidcResponse); ok {
		return x.OidcResponse
	}
	return nil
}

func (x *CreateApplicationResponse) GetSamlResponse() *CreateSAMLApplicationResponse {
	if x, ok := x.GetCreationResponseType().(*CreateApplicationResponse_SamlResponse); ok {
		return x.SamlResponse
	}
	return nil
}

func (x *CreateApplicationResponse) GetApiResponse() *CreateAPIApplicationResponse {
	if x, ok := x.GetCreationResponseType().(*CreateApplicationResponse_ApiResponse); ok {
		return x.ApiResponse
	}
	return nil
}

type isCreateApplicationResponse_CreationResponseType interface {
	isCreateApplicationResponse_CreationResponseType()
}

type CreateApplicationResponse_OidcResponse struct {
	OidcResponse *CreateOIDCApplicationResponse `protobuf:"bytes,3,opt,name=oidc_response,json=oidcResponse,proto3,oneof"`
}

type CreateApplicationResponse_SamlResponse struct {
	SamlResponse *CreateSAMLApplicationResponse `protobuf:"bytes,4,opt,name=saml_response,json=samlResponse,proto3,oneof"`
}

type CreateApplicationResponse_ApiResponse struct {
	ApiResponse *CreateAPIApplicationResponse `protobuf:"bytes,5,opt,name=api_response,json=apiResponse,proto3,oneof"`
}

func (*CreateApplicationResponse_OidcResponse) isCreateApplicationResponse_CreationResponseType() {}

func (*CreateApplicationResponse_SamlResponse) isCreateApplicationResponse_CreationResponseType() {}

func (*CreateApplicationResponse_ApiResponse) isCreateApplicationResponse_CreationResponseType() {}

type CreateOIDCApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Callback URI of the authorization request where the code or tokens will be sent to
	RedirectUris   []string           `protobuf:"bytes,1,rep,name=redirect_uris,json=redirectUris,proto3" json:"redirect_uris,omitempty"`
	ResponseTypes  []OIDCResponseType `protobuf:"varint,2,rep,packed,name=response_types,json=responseTypes,proto3,enum=zitadel.app.v2beta.OIDCResponseType" json:"response_types,omitempty"`
	GrantTypes     []OIDCGrantType    `protobuf:"varint,3,rep,packed,name=grant_types,json=grantTypes,proto3,enum=zitadel.app.v2beta.OIDCGrantType" json:"grant_types,omitempty"`
	AppType        OIDCAppType        `protobuf:"varint,4,opt,name=app_type,json=appType,proto3,enum=zitadel.app.v2beta.OIDCAppType" json:"app_type,omitempty"`
	AuthMethodType OIDCAuthMethodType `protobuf:"varint,5,opt,name=auth_method_type,json=authMethodType,proto3,enum=zitadel.app.v2beta.OIDCAuthMethodType" json:"auth_method_type,omitempty"`
	// ZITADEL will redirect to this link after a successful logout
	PostLogoutRedirectUris   []string             `protobuf:"bytes,6,rep,name=post_logout_redirect_uris,json=postLogoutRedirectUris,proto3" json:"post_logout_redirect_uris,omitempty"`
	Version                  OIDCVersion          `protobuf:"varint,7,opt,name=version,proto3,enum=zitadel.app.v2beta.OIDCVersion" json:"version,omitempty"`
	DevMode                  bool                 `protobuf:"varint,8,opt,name=dev_mode,json=devMode,proto3" json:"dev_mode,omitempty"`
	AccessTokenType          OIDCTokenType        `protobuf:"varint,9,opt,name=access_token_type,json=accessTokenType,proto3,enum=zitadel.app.v2beta.OIDCTokenType" json:"access_token_type,omitempty"`
	AccessTokenRoleAssertion bool                 `protobuf:"varint,10,opt,name=access_token_role_assertion,json=accessTokenRoleAssertion,proto3" json:"access_token_role_assertion,omitempty"`
	IdTokenRoleAssertion     bool                 `protobuf:"varint,11,opt,name=id_token_role_assertion,json=idTokenRoleAssertion,proto3" json:"id_token_role_assertion,omitempty"`
	IdTokenUserinfoAssertion bool                 `protobuf:"varint,12,opt,name=id_token_userinfo_assertion,json=idTokenUserinfoAssertion,proto3" json:"id_token_userinfo_assertion,omitempty"`
	ClockSkew                *durationpb.Duration `protobuf:"bytes,13,opt,name=clock_skew,json=clockSkew,proto3" json:"clock_skew,omitempty"`
	AdditionalOrigins        []string             `protobuf:"bytes,14,rep,name=additional_origins,json=additionalOrigins,proto3" json:"additional_origins,omitempty"`
	SkipNativeAppSuccessPage bool                 `protobuf:"varint,15,opt,name=skip_native_app_success_page,json=skipNativeAppSuccessPage,proto3" json:"skip_native_app_success_page,omitempty"`
	BackChannelLogoutUri     string               `protobuf:"bytes,16,opt,name=back_channel_logout_uri,json=backChannelLogoutUri,proto3" json:"back_channel_logout_uri,omitempty"`
	LoginVersion             *LoginVersion        `protobuf:"bytes,17,opt,name=login_version,json=loginVersion,proto3" json:"login_version,omitempty"`
}

func (x *CreateOIDCApplicationRequest) Reset() {
	*x = CreateOIDCApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOIDCApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOIDCApplicationRequest) ProtoMessage() {}

func (x *CreateOIDCApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOIDCApplicationRequest.ProtoReflect.Descriptor instead.
func (*CreateOIDCApplicationRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateOIDCApplicationRequest) GetRedirectUris() []string {
	if x != nil {
		return x.RedirectUris
	}
	return nil
}

func (x *CreateOIDCApplicationRequest) GetResponseTypes() []OIDCResponseType {
	if x != nil {
		return x.ResponseTypes
	}
	return nil
}

func (x *CreateOIDCApplicationRequest) GetGrantTypes() []OIDCGrantType {
	if x != nil {
		return x.GrantTypes
	}
	return nil
}

func (x *CreateOIDCApplicationRequest) GetAppType() OIDCAppType {
	if x != nil {
		return x.AppType
	}
	return OIDCAppType_OIDC_APP_TYPE_WEB
}

func (x *CreateOIDCApplicationRequest) GetAuthMethodType() OIDCAuthMethodType {
	if x != nil {
		return x.AuthMethodType
	}
	return OIDCAuthMethodType_OIDC_AUTH_METHOD_TYPE_BASIC
}

func (x *CreateOIDCApplicationRequest) GetPostLogoutRedirectUris() []string {
	if x != nil {
		return x.PostLogoutRedirectUris
	}
	return nil
}

func (x *CreateOIDCApplicationRequest) GetVersion() OIDCVersion {
	if x != nil {
		return x.Version
	}
	return OIDCVersion_OIDC_VERSION_1_0
}

func (x *CreateOIDCApplicationRequest) GetDevMode() bool {
	if x != nil {
		return x.DevMode
	}
	return false
}

func (x *CreateOIDCApplicationRequest) GetAccessTokenType() OIDCTokenType {
	if x != nil {
		return x.AccessTokenType
	}
	return OIDCTokenType_OIDC_TOKEN_TYPE_BEARER
}

func (x *CreateOIDCApplicationRequest) GetAccessTokenRoleAssertion() bool {
	if x != nil {
		return x.AccessTokenRoleAssertion
	}
	return false
}

func (x *CreateOIDCApplicationRequest) GetIdTokenRoleAssertion() bool {
	if x != nil {
		return x.IdTokenRoleAssertion
	}
	return false
}

func (x *CreateOIDCApplicationRequest) GetIdTokenUserinfoAssertion() bool {
	if x != nil {
		return x.IdTokenUserinfoAssertion
	}
	return false
}

func (x *CreateOIDCApplicationRequest) GetClockSkew() *durationpb.Duration {
	if x != nil {
		return x.ClockSkew
	}
	return nil
}

func (x *CreateOIDCApplicationRequest) GetAdditionalOrigins() []string {
	if x != nil {
		return x.AdditionalOrigins
	}
	return nil
}

func (x *CreateOIDCApplicationRequest) GetSkipNativeAppSuccessPage() bool {
	if x != nil {
		return x.SkipNativeAppSuccessPage
	}
	return false
}

func (x *CreateOIDCApplicationRequest) GetBackChannelLogoutUri() string {
	if x != nil {
		return x.BackChannelLogoutUri
	}
	return ""
}

func (x *CreateOIDCApplicationRequest) GetLoginVersion() *LoginVersion {
	if x != nil {
		return x.LoginVersion
	}
	return nil
}

type CreateOIDCApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId           string                  `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret       string                  `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	NoneCompliant      bool                    `protobuf:"varint,3,opt,name=none_compliant,json=noneCompliant,proto3" json:"none_compliant,omitempty"`
	ComplianceProblems []*OIDCLocalizedMessage `protobuf:"bytes,4,rep,name=compliance_problems,json=complianceProblems,proto3" json:"compliance_problems,omitempty"`
}

func (x *CreateOIDCApplicationResponse) Reset() {
	*x = CreateOIDCApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOIDCApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOIDCApplicationResponse) ProtoMessage() {}

func (x *CreateOIDCApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOIDCApplicationResponse.ProtoReflect.Descriptor instead.
func (*CreateOIDCApplicationResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateOIDCApplicationResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CreateOIDCApplicationResponse) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *CreateOIDCApplicationResponse) GetNoneCompliant() bool {
	if x != nil {
		return x.NoneCompliant
	}
	return false
}

func (x *CreateOIDCApplicationResponse) GetComplianceProblems() []*OIDCLocalizedMessage {
	if x != nil {
		return x.ComplianceProblems
	}
	return nil
}

type CreateSAMLApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Metadata:
	//
	//	*CreateSAMLApplicationRequest_MetadataXml
	//	*CreateSAMLApplicationRequest_MetadataUrl
	Metadata     isCreateSAMLApplicationRequest_Metadata `protobuf_oneof:"metadata"`
	LoginVersion *LoginVersion                           `protobuf:"bytes,3,opt,name=login_version,json=loginVersion,proto3" json:"login_version,omitempty"`
}

func (x *CreateSAMLApplicationRequest) Reset() {
	*x = CreateSAMLApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSAMLApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSAMLApplicationRequest) ProtoMessage() {}

func (x *CreateSAMLApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSAMLApplicationRequest.ProtoReflect.Descriptor instead.
func (*CreateSAMLApplicationRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{4}
}

func (m *CreateSAMLApplicationRequest) GetMetadata() isCreateSAMLApplicationRequest_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (x *CreateSAMLApplicationRequest) GetMetadataXml() []byte {
	if x, ok := x.GetMetadata().(*CreateSAMLApplicationRequest_MetadataXml); ok {
		return x.MetadataXml
	}
	return nil
}

func (x *CreateSAMLApplicationRequest) GetMetadataUrl() string {
	if x, ok := x.GetMetadata().(*CreateSAMLApplicationRequest_MetadataUrl); ok {
		return x.MetadataUrl
	}
	return ""
}

func (x *CreateSAMLApplicationRequest) GetLoginVersion() *LoginVersion {
	if x != nil {
		return x.LoginVersion
	}
	return nil
}

type isCreateSAMLApplicationRequest_Metadata interface {
	isCreateSAMLApplicationRequest_Metadata()
}

type CreateSAMLApplicationRequest_MetadataXml struct {
	MetadataXml []byte `protobuf:"bytes,1,opt,name=metadata_xml,json=metadataXml,proto3,oneof"`
}

type CreateSAMLApplicationRequest_MetadataUrl struct {
	MetadataUrl string `protobuf:"bytes,2,opt,name=metadata_url,json=metadataUrl,proto3,oneof"`
}

func (*CreateSAMLApplicationRequest_MetadataXml) isCreateSAMLApplicationRequest_Metadata() {}

func (*CreateSAMLApplicationRequest_MetadataUrl) isCreateSAMLApplicationRequest_Metadata() {}

type CreateSAMLApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateSAMLApplicationResponse) Reset() {
	*x = CreateSAMLApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSAMLApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSAMLApplicationResponse) ProtoMessage() {}

func (x *CreateSAMLApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSAMLApplicationResponse.ProtoReflect.Descriptor instead.
func (*CreateSAMLApplicationResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{5}
}

type CreateAPIApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthMethodType APIAuthMethodType `protobuf:"varint,1,opt,name=auth_method_type,json=authMethodType,proto3,enum=zitadel.app.v2beta.APIAuthMethodType" json:"auth_method_type,omitempty"`
}

func (x *CreateAPIApplicationRequest) Reset() {
	*x = CreateAPIApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAPIApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAPIApplicationRequest) ProtoMessage() {}

func (x *CreateAPIApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAPIApplicationRequest.ProtoReflect.Descriptor instead.
func (*CreateAPIApplicationRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{6}
}

func (x *CreateAPIApplicationRequest) GetAuthMethodType() APIAuthMethodType {
	if x != nil {
		return x.AuthMethodType
	}
	return APIAuthMethodType_API_AUTH_METHOD_TYPE_BASIC
}

type CreateAPIApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
}

func (x *CreateAPIApplicationResponse) Reset() {
	*x = CreateAPIApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAPIApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAPIApplicationResponse) ProtoMessage() {}

func (x *CreateAPIApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAPIApplicationResponse.ProtoReflect.Descriptor instead.
func (*CreateAPIApplicationResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{7}
}

func (x *CreateAPIApplicationResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CreateAPIApplicationResponse) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

type UpdateApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to UpdateRequestType:
	//
	//	*UpdateApplicationRequest_SamlConfigurationRequest
	//	*UpdateApplicationRequest_OidcConfigurationRequest
	//	*UpdateApplicationRequest_ApiConfigurationRequest
	UpdateRequestType isUpdateApplicationRequest_UpdateRequestType `protobuf_oneof:"update_request_type"`
}

func (x *UpdateApplicationRequest) Reset() {
	*x = UpdateApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationRequest) ProtoMessage() {}

func (x *UpdateApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationRequest.ProtoReflect.Descriptor instead.
func (*UpdateApplicationRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateApplicationRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateApplicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateApplicationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *UpdateApplicationRequest) GetUpdateRequestType() isUpdateApplicationRequest_UpdateRequestType {
	if m != nil {
		return m.UpdateRequestType
	}
	return nil
}

func (x *UpdateApplicationRequest) GetSamlConfigurationRequest() *UpdateSAMLApplicationConfigurationRequest {
	if x, ok := x.GetUpdateRequestType().(*UpdateApplicationRequest_SamlConfigurationRequest); ok {
		return x.SamlConfigurationRequest
	}
	return nil
}

func (x *UpdateApplicationRequest) GetOidcConfigurationRequest() *UpdateOIDCApplicationConfigurationRequest {
	if x, ok := x.GetUpdateRequestType().(*UpdateApplicationRequest_OidcConfigurationRequest); ok {
		return x.OidcConfigurationRequest
	}
	return nil
}

func (x *UpdateApplicationRequest) GetApiConfigurationRequest() *UpdateAPIApplicationConfigurationRequest {
	if x, ok := x.GetUpdateRequestType().(*UpdateApplicationRequest_ApiConfigurationRequest); ok {
		return x.ApiConfigurationRequest
	}
	return nil
}

type isUpdateApplicationRequest_UpdateRequestType interface {
	isUpdateApplicationRequest_UpdateRequestType()
}

type UpdateApplicationRequest_SamlConfigurationRequest struct {
	SamlConfigurationRequest *UpdateSAMLApplicationConfigurationRequest `protobuf:"bytes,4,opt,name=saml_configuration_request,json=samlConfigurationRequest,proto3,oneof"`
}

type UpdateApplicationRequest_OidcConfigurationRequest struct {
	OidcConfigurationRequest *UpdateOIDCApplicationConfigurationRequest `protobuf:"bytes,5,opt,name=oidc_configuration_request,json=oidcConfigurationRequest,proto3,oneof"`
}

type UpdateApplicationRequest_ApiConfigurationRequest struct {
	ApiConfigurationRequest *UpdateAPIApplicationConfigurationRequest `protobuf:"bytes,6,opt,name=api_configuration_request,json=apiConfigurationRequest,proto3,oneof"`
}

func (*UpdateApplicationRequest_SamlConfigurationRequest) isUpdateApplicationRequest_UpdateRequestType() {
}

func (*UpdateApplicationRequest_OidcConfigurationRequest) isUpdateApplicationRequest_UpdateRequestType() {
}

func (*UpdateApplicationRequest_ApiConfigurationRequest) isUpdateApplicationRequest_UpdateRequestType() {
}

type UpdateApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp of the app update.
	ChangeDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=change_date,json=changeDate,proto3" json:"change_date,omitempty"`
}

func (x *UpdateApplicationResponse) Reset() {
	*x = UpdateApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationResponse) ProtoMessage() {}

func (x *UpdateApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationResponse.ProtoReflect.Descriptor instead.
func (*UpdateApplicationResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateApplicationResponse) GetChangeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeDate
	}
	return nil
}

type UpdateSAMLApplicationConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Metadata:
	//
	//	*UpdateSAMLApplicationConfigurationRequest_MetadataXml
	//	*UpdateSAMLApplicationConfigurationRequest_MetadataUrl
	Metadata     isUpdateSAMLApplicationConfigurationRequest_Metadata `protobuf_oneof:"metadata"`
	LoginVersion *LoginVersion                                        `protobuf:"bytes,3,opt,name=login_version,json=loginVersion,proto3,oneof" json:"login_version,omitempty"`
}

func (x *UpdateSAMLApplicationConfigurationRequest) Reset() {
	*x = UpdateSAMLApplicationConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSAMLApplicationConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSAMLApplicationConfigurationRequest) ProtoMessage() {}

func (x *UpdateSAMLApplicationConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSAMLApplicationConfigurationRequest.ProtoReflect.Descriptor instead.
func (*UpdateSAMLApplicationConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{10}
}

func (m *UpdateSAMLApplicationConfigurationRequest) GetMetadata() isUpdateSAMLApplicationConfigurationRequest_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (x *UpdateSAMLApplicationConfigurationRequest) GetMetadataXml() []byte {
	if x, ok := x.GetMetadata().(*UpdateSAMLApplicationConfigurationRequest_MetadataXml); ok {
		return x.MetadataXml
	}
	return nil
}

func (x *UpdateSAMLApplicationConfigurationRequest) GetMetadataUrl() string {
	if x, ok := x.GetMetadata().(*UpdateSAMLApplicationConfigurationRequest_MetadataUrl); ok {
		return x.MetadataUrl
	}
	return ""
}

func (x *UpdateSAMLApplicationConfigurationRequest) GetLoginVersion() *LoginVersion {
	if x != nil {
		return x.LoginVersion
	}
	return nil
}

type isUpdateSAMLApplicationConfigurationRequest_Metadata interface {
	isUpdateSAMLApplicationConfigurationRequest_Metadata()
}

type UpdateSAMLApplicationConfigurationRequest_MetadataXml struct {
	MetadataXml []byte `protobuf:"bytes,1,opt,name=metadata_xml,json=metadataXml,proto3,oneof"`
}

type UpdateSAMLApplicationConfigurationRequest_MetadataUrl struct {
	MetadataUrl string `protobuf:"bytes,2,opt,name=metadata_url,json=metadataUrl,proto3,oneof"`
}

func (*UpdateSAMLApplicationConfigurationRequest_MetadataXml) isUpdateSAMLApplicationConfigurationRequest_Metadata() {
}

func (*UpdateSAMLApplicationConfigurationRequest_MetadataUrl) isUpdateSAMLApplicationConfigurationRequest_Metadata() {
}

type UpdateOIDCApplicationConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedirectUris             []string             `protobuf:"bytes,1,rep,name=redirect_uris,json=redirectUris,proto3" json:"redirect_uris,omitempty"`
	ResponseTypes            []OIDCResponseType   `protobuf:"varint,2,rep,packed,name=response_types,json=responseTypes,proto3,enum=zitadel.app.v2beta.OIDCResponseType" json:"response_types,omitempty"`
	GrantTypes               []OIDCGrantType      `protobuf:"varint,3,rep,packed,name=grant_types,json=grantTypes,proto3,enum=zitadel.app.v2beta.OIDCGrantType" json:"grant_types,omitempty"`
	AppType                  *OIDCAppType         `protobuf:"varint,4,opt,name=app_type,json=appType,proto3,enum=zitadel.app.v2beta.OIDCAppType,oneof" json:"app_type,omitempty"`
	AuthMethodType           *OIDCAuthMethodType  `protobuf:"varint,5,opt,name=auth_method_type,json=authMethodType,proto3,enum=zitadel.app.v2beta.OIDCAuthMethodType,oneof" json:"auth_method_type,omitempty"`
	PostLogoutRedirectUris   []string             `protobuf:"bytes,6,rep,name=post_logout_redirect_uris,json=postLogoutRedirectUris,proto3" json:"post_logout_redirect_uris,omitempty"`
	Version                  *OIDCVersion         `protobuf:"varint,7,opt,name=version,proto3,enum=zitadel.app.v2beta.OIDCVersion,oneof" json:"version,omitempty"`
	DevMode                  *bool                `protobuf:"varint,8,opt,name=dev_mode,json=devMode,proto3,oneof" json:"dev_mode,omitempty"`
	AccessTokenType          *OIDCTokenType       `protobuf:"varint,9,opt,name=access_token_type,json=accessTokenType,proto3,enum=zitadel.app.v2beta.OIDCTokenType,oneof" json:"access_token_type,omitempty"`
	AccessTokenRoleAssertion *bool                `protobuf:"varint,10,opt,name=access_token_role_assertion,json=accessTokenRoleAssertion,proto3,oneof" json:"access_token_role_assertion,omitempty"`
	IdTokenRoleAssertion     *bool                `protobuf:"varint,11,opt,name=id_token_role_assertion,json=idTokenRoleAssertion,proto3,oneof" json:"id_token_role_assertion,omitempty"`
	IdTokenUserinfoAssertion *bool                `protobuf:"varint,12,opt,name=id_token_userinfo_assertion,json=idTokenUserinfoAssertion,proto3,oneof" json:"id_token_userinfo_assertion,omitempty"`
	ClockSkew                *durationpb.Duration `protobuf:"bytes,13,opt,name=clock_skew,json=clockSkew,proto3,oneof" json:"clock_skew,omitempty"`
	AdditionalOrigins        []string             `protobuf:"bytes,14,rep,name=additional_origins,json=additionalOrigins,proto3" json:"additional_origins,omitempty"`
	SkipNativeAppSuccessPage *bool                `protobuf:"varint,15,opt,name=skip_native_app_success_page,json=skipNativeAppSuccessPage,proto3,oneof" json:"skip_native_app_success_page,omitempty"`
	BackChannelLogoutUri     *string              `protobuf:"bytes,16,opt,name=back_channel_logout_uri,json=backChannelLogoutUri,proto3,oneof" json:"back_channel_logout_uri,omitempty"`
	LoginVersion             *LoginVersion        `protobuf:"bytes,17,opt,name=login_version,json=loginVersion,proto3,oneof" json:"login_version,omitempty"`
}

func (x *UpdateOIDCApplicationConfigurationRequest) Reset() {
	*x = UpdateOIDCApplicationConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOIDCApplicationConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOIDCApplicationConfigurationRequest) ProtoMessage() {}

func (x *UpdateOIDCApplicationConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOIDCApplicationConfigurationRequest.ProtoReflect.Descriptor instead.
func (*UpdateOIDCApplicationConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateOIDCApplicationConfigurationRequest) GetRedirectUris() []string {
	if x != nil {
		return x.RedirectUris
	}
	return nil
}

func (x *UpdateOIDCApplicationConfigurationRequest) GetResponseTypes() []OIDCResponseType {
	if x != nil {
		return x.ResponseTypes
	}
	return nil
}

func (x *UpdateOIDCApplicationConfigurationRequest) GetGrantTypes() []OIDCGrantType {
	if x != nil {
		return x.GrantTypes
	}
	return nil
}

func (x *UpdateOIDCApplicationConfigurationRequest) GetAppType() OIDCAppType {
	if x != nil && x.AppType != nil {
		return *x.AppType
	}
	return OIDCAppType_OIDC_APP_TYPE_WEB
}

func (x *UpdateOIDCApplicationConfigurationRequest) GetAuthMethodType() OIDCAuthMethodType {
	if x != nil && x.AuthMethodType != nil {
		return *x.AuthMethodType
	}
	return OIDCAuthMethodType_OIDC_AUTH_METHOD_TYPE_BASIC
}

func (x *UpdateOIDCApplicationConfigurationRequest) GetPostLogoutRedirectUris() []string {
	if x != nil {
		return x.PostLogoutRedirectUris
	}
	return nil
}

func (x *UpdateOIDCApplicationConfigurationRequest) GetVersion() OIDCVersion {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return OIDCVersion_OIDC_VERSION_1_0
}

func (x *UpdateOIDCApplicationConfigurationRequest) GetDevMode() bool {
	if x != nil && x.DevMode != nil {
		return *x.DevMode
	}
	return false
}

func (x *UpdateOIDCApplicationConfigurationRequest) GetAccessTokenType() OIDCTokenType {
	if x != nil && x.AccessTokenType != nil {
		return *x.AccessTokenType
	}
	return OIDCTokenType_OIDC_TOKEN_TYPE_BEARER
}

func (x *UpdateOIDCApplicationConfigurationRequest) GetAccessTokenRoleAssertion() bool {
	if x != nil && x.AccessTokenRoleAssertion != nil {
		return *x.AccessTokenRoleAssertion
	}
	return false
}

func (x *UpdateOIDCApplicationConfigurationRequest) GetIdTokenRoleAssertion() bool {
	if x != nil && x.IdTokenRoleAssertion != nil {
		return *x.IdTokenRoleAssertion
	}
	return false
}

func (x *UpdateOIDCApplicationConfigurationRequest) GetIdTokenUserinfoAssertion() bool {
	if x != nil && x.IdTokenUserinfoAssertion != nil {
		return *x.IdTokenUserinfoAssertion
	}
	return false
}

func (x *UpdateOIDCApplicationConfigurationRequest) GetClockSkew() *durationpb.Duration {
	if x != nil {
		return x.ClockSkew
	}
	return nil
}

func (x *UpdateOIDCApplicationConfigurationRequest) GetAdditionalOrigins() []string {
	if x != nil {
		return x.AdditionalOrigins
	}
	return nil
}

func (x *UpdateOIDCApplicationConfigurationRequest) GetSkipNativeAppSuccessPage() bool {
	if x != nil && x.SkipNativeAppSuccessPage != nil {
		return *x.SkipNativeAppSuccessPage
	}
	return false
}

func (x *UpdateOIDCApplicationConfigurationRequest) GetBackChannelLogoutUri() string {
	if x != nil && x.BackChannelLogoutUri != nil {
		return *x.BackChannelLogoutUri
	}
	return ""
}

func (x *UpdateOIDCApplicationConfigurationRequest) GetLoginVersion() *LoginVersion {
	if x != nil {
		return x.LoginVersion
	}
	return nil
}

type UpdateAPIApplicationConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthMethodType APIAuthMethodType `protobuf:"varint,1,opt,name=auth_method_type,json=authMethodType,proto3,enum=zitadel.app.v2beta.APIAuthMethodType" json:"auth_method_type,omitempty"`
}

func (x *UpdateAPIApplicationConfigurationRequest) Reset() {
	*x = UpdateAPIApplicationConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAPIApplicationConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAPIApplicationConfigurationRequest) ProtoMessage() {}

func (x *UpdateAPIApplicationConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAPIApplicationConfigurationRequest.ProtoReflect.Descriptor instead.
func (*UpdateAPIApplicationConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateAPIApplicationConfigurationRequest) GetAuthMethodType() APIAuthMethodType {
	if x != nil {
		return x.AuthMethodType
	}
	return APIAuthMethodType_API_AUTH_METHOD_TYPE_BASIC
}

type GetApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetApplicationRequest) Reset() {
	*x = GetApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApplicationRequest) ProtoMessage() {}

func (x *GetApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApplicationRequest.ProtoReflect.Descriptor instead.
func (*GetApplicationRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetApplicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App *Application `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *GetApplicationResponse) Reset() {
	*x = GetApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApplicationResponse) ProtoMessage() {}

func (x *GetApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApplicationResponse.ProtoReflect.Descriptor instead.
func (*GetApplicationResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetApplicationResponse) GetApp() *Application {
	if x != nil {
		return x.App
	}
	return nil
}

type DeleteApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteApplicationRequest) Reset() {
	*x = DeleteApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationRequest) ProtoMessage() {}

func (x *DeleteApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationRequest.ProtoReflect.Descriptor instead.
func (*DeleteApplicationRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteApplicationRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteApplicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletionDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=deletion_date,json=deletionDate,proto3" json:"deletion_date,omitempty"`
}

func (x *DeleteApplicationResponse) Reset() {
	*x = DeleteApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationResponse) ProtoMessage() {}

func (x *DeleteApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationResponse.ProtoReflect.Descriptor instead.
func (*DeleteApplicationResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteApplicationResponse) GetDeletionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletionDate
	}
	return nil
}

type DeactivateApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeactivateApplicationRequest) Reset() {
	*x = DeactivateApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateApplicationRequest) ProtoMessage() {}

func (x *DeactivateApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateApplicationRequest.ProtoReflect.Descriptor instead.
func (*DeactivateApplicationRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{17}
}

func (x *DeactivateApplicationRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeactivateApplicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeactivateApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeactivationDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=deactivation_date,json=deactivationDate,proto3" json:"deactivation_date,omitempty"`
}

func (x *DeactivateApplicationResponse) Reset() {
	*x = DeactivateApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateApplicationResponse) ProtoMessage() {}

func (x *DeactivateApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateApplicationResponse.ProtoReflect.Descriptor instead.
func (*DeactivateApplicationResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{18}
}

func (x *DeactivateApplicationResponse) GetDeactivationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DeactivationDate
	}
	return nil
}

type ReactivateApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReactivateApplicationRequest) Reset() {
	*x = ReactivateApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactivateApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactivateApplicationRequest) ProtoMessage() {}

func (x *ReactivateApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactivateApplicationRequest.ProtoReflect.Descriptor instead.
func (*ReactivateApplicationRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{19}
}

func (x *ReactivateApplicationRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ReactivateApplicationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReactivateApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReactivationDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=reactivation_date,json=reactivationDate,proto3" json:"reactivation_date,omitempty"`
}

func (x *ReactivateApplicationResponse) Reset() {
	*x = ReactivateApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactivateApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactivateApplicationResponse) ProtoMessage() {}

func (x *ReactivateApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactivateApplicationResponse.ProtoReflect.Descriptor instead.
func (*ReactivateApplicationResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{20}
}

func (x *ReactivateApplicationResponse) GetReactivationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReactivationDate
	}
	return nil
}

type RegenerateClientSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId     string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ApplicationId string `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	// Types that are assignable to AppType:
	//
	//	*RegenerateClientSecretRequest_IsOidc
	//	*RegenerateClientSecretRequest_IsApi
	AppType isRegenerateClientSecretRequest_AppType `protobuf_oneof:"app_type"`
}

func (x *RegenerateClientSecretRequest) Reset() {
	*x = RegenerateClientSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegenerateClientSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegenerateClientSecretRequest) ProtoMessage() {}

func (x *RegenerateClientSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegenerateClientSecretRequest.ProtoReflect.Descriptor instead.
func (*RegenerateClientSecretRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{21}
}

func (x *RegenerateClientSecretRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *RegenerateClientSecretRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (m *RegenerateClientSecretRequest) GetAppType() isRegenerateClientSecretRequest_AppType {
	if m != nil {
		return m.AppType
	}
	return nil
}

func (x *RegenerateClientSecretRequest) GetIsOidc() bool {
	if x, ok := x.GetAppType().(*RegenerateClientSecretRequest_IsOidc); ok {
		return x.IsOidc
	}
	return false
}

func (x *RegenerateClientSecretRequest) GetIsApi() bool {
	if x, ok := x.GetAppType().(*RegenerateClientSecretRequest_IsApi); ok {
		return x.IsApi
	}
	return false
}

type isRegenerateClientSecretRequest_AppType interface {
	isRegenerateClientSecretRequest_AppType()
}

type RegenerateClientSecretRequest_IsOidc struct {
	IsOidc bool `protobuf:"varint,3,opt,name=is_oidc,json=isOidc,proto3,oneof"`
}

type RegenerateClientSecretRequest_IsApi struct {
	IsApi bool `protobuf:"varint,4,opt,name=is_api,json=isApi,proto3,oneof"`
}

func (*RegenerateClientSecretRequest_IsOidc) isRegenerateClientSecretRequest_AppType() {}

func (*RegenerateClientSecretRequest_IsApi) isRegenerateClientSecretRequest_AppType() {}

type RegenerateClientSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientSecret string `protobuf:"bytes,1,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// The timestamp of the creation of the new client secret
	CreationDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
}

func (x *RegenerateClientSecretResponse) Reset() {
	*x = RegenerateClientSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegenerateClientSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegenerateClientSecretResponse) ProtoMessage() {}

func (x *RegenerateClientSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegenerateClientSecretResponse.ProtoReflect.Descriptor instead.
func (*RegenerateClientSecretResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{22}
}

func (x *RegenerateClientSecretResponse) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *RegenerateClientSecretResponse) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

type ListApplicationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Pagination and sorting.
	Pagination *v2.PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// criteria the client is looking for
	Filters       []*ApplicationSearchFilter `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	SortingColumn AppSorting                 `protobuf:"varint,4,opt,name=sorting_column,json=sortingColumn,proto3,enum=zitadel.app.v2beta.AppSorting" json:"sorting_column,omitempty"`
}

func (x *ListApplicationsRequest) Reset() {
	*x = ListApplicationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplicationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationsRequest) ProtoMessage() {}

func (x *ListApplicationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationsRequest.ProtoReflect.Descriptor instead.
func (*ListApplicationsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{23}
}

func (x *ListApplicationsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListApplicationsRequest) GetPagination() *v2.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListApplicationsRequest) GetFilters() []*ApplicationSearchFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListApplicationsRequest) GetSortingColumn() AppSorting {
	if x != nil {
		return x.SortingColumn
	}
	return AppSorting_APP_SORT_BY_ID
}

type ListApplicationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Applications []*Application `protobuf:"bytes,1,rep,name=applications,proto3" json:"applications,omitempty"`
	// Contains the total number of apps matching the query and the applied limit.
	Pagination *v2.PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListApplicationsResponse) Reset() {
	*x = ListApplicationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplicationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationsResponse) ProtoMessage() {}

func (x *ListApplicationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationsResponse.ProtoReflect.Descriptor instead.
func (*ListApplicationsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{24}
}

func (x *ListApplicationsResponse) GetApplications() []*Application {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *ListApplicationsResponse) GetPagination() *v2.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type CreateApplicationKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The date the key will expire
	ExpirationDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
}

func (x *CreateApplicationKeyRequest) Reset() {
	*x = CreateApplicationKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApplicationKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationKeyRequest) ProtoMessage() {}

func (x *CreateApplicationKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateApplicationKeyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{25}
}

func (x *CreateApplicationKeyRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *CreateApplicationKeyRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateApplicationKeyRequest) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

type CreateApplicationKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The timestamp of the app creation.
	CreationDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	KeyDetails   []byte                 `protobuf:"bytes,3,opt,name=key_details,json=keyDetails,proto3" json:"key_details,omitempty"`
}

func (x *CreateApplicationKeyResponse) Reset() {
	*x = CreateApplicationKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApplicationKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationKeyResponse) ProtoMessage() {}

func (x *CreateApplicationKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationKeyResponse.ProtoReflect.Descriptor instead.
func (*CreateApplicationKeyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{26}
}

func (x *CreateApplicationKeyResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateApplicationKeyResponse) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *CreateApplicationKeyResponse) GetKeyDetails() []byte {
	if x != nil {
		return x.KeyDetails
	}
	return nil
}

type DeleteApplicationKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId      string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ApplicationId  string `protobuf:"bytes,3,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	OrganizationId string `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *DeleteApplicationKeyRequest) Reset() {
	*x = DeleteApplicationKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteApplicationKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationKeyRequest) ProtoMessage() {}

func (x *DeleteApplicationKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteApplicationKeyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteApplicationKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteApplicationKeyRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteApplicationKeyRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *DeleteApplicationKeyRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type DeleteApplicationKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletionDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=deletion_date,json=deletionDate,proto3" json:"deletion_date,omitempty"`
}

func (x *DeleteApplicationKeyResponse) Reset() {
	*x = DeleteApplicationKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteApplicationKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApplicationKeyResponse) ProtoMessage() {}

func (x *DeleteApplicationKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApplicationKeyResponse.ProtoReflect.Descriptor instead.
func (*DeleteApplicationKeyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteApplicationKeyResponse) GetDeletionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletionDate
	}
	return nil
}

type GetApplicationKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId      string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ApplicationId  string `protobuf:"bytes,3,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	OrganizationId string `protobuf:"bytes,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *GetApplicationKeyRequest) Reset() {
	*x = GetApplicationKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApplicationKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApplicationKeyRequest) ProtoMessage() {}

func (x *GetApplicationKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApplicationKeyRequest.ProtoReflect.Descriptor instead.
func (*GetApplicationKeyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{29}
}

func (x *GetApplicationKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetApplicationKeyRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetApplicationKeyRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *GetApplicationKeyRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

type GetApplicationKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreationDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	// the date a key will expire
	ExpirationDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
}

func (x *GetApplicationKeyResponse) Reset() {
	*x = GetApplicationKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApplicationKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApplicationKeyResponse) ProtoMessage() {}

func (x *GetApplicationKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApplicationKeyResponse.ProtoReflect.Descriptor instead.
func (*GetApplicationKeyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{30}
}

func (x *GetApplicationKeyResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetApplicationKeyResponse) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *GetApplicationKeyResponse) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

type ListApplicationKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pagination and sorting.
	Pagination    *v2.PaginationRequest  `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	SortingColumn ApplicationKeysSorting `protobuf:"varint,2,opt,name=sorting_column,json=sortingColumn,proto3,enum=zitadel.app.v2beta.ApplicationKeysSorting" json:"sorting_column,omitempty"`
	// Types that are assignable to ResourceId:
	//
	//	*ListApplicationKeysRequest_ApplicationId
	//	*ListApplicationKeysRequest_ProjectId
	//	*ListApplicationKeysRequest_OrganizationId
	ResourceId isListApplicationKeysRequest_ResourceId `protobuf_oneof:"resource_id"`
}

func (x *ListApplicationKeysRequest) Reset() {
	*x = ListApplicationKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplicationKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationKeysRequest) ProtoMessage() {}

func (x *ListApplicationKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationKeysRequest.ProtoReflect.Descriptor instead.
func (*ListApplicationKeysRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{31}
}

func (x *ListApplicationKeysRequest) GetPagination() *v2.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListApplicationKeysRequest) GetSortingColumn() ApplicationKeysSorting {
	if x != nil {
		return x.SortingColumn
	}
	return ApplicationKeysSorting_APPLICATION_KEYS_SORT_BY_ID
}

func (m *ListApplicationKeysRequest) GetResourceId() isListApplicationKeysRequest_ResourceId {
	if m != nil {
		return m.ResourceId
	}
	return nil
}

func (x *ListApplicationKeysRequest) GetApplicationId() string {
	if x, ok := x.GetResourceId().(*ListApplicationKeysRequest_ApplicationId); ok {
		return x.ApplicationId
	}
	return ""
}

func (x *ListApplicationKeysRequest) GetProjectId() string {
	if x, ok := x.GetResourceId().(*ListApplicationKeysRequest_ProjectId); ok {
		return x.ProjectId
	}
	return ""
}

func (x *ListApplicationKeysRequest) GetOrganizationId() string {
	if x, ok := x.GetResourceId().(*ListApplicationKeysRequest_OrganizationId); ok {
		return x.OrganizationId
	}
	return ""
}

type isListApplicationKeysRequest_ResourceId interface {
	isListApplicationKeysRequest_ResourceId()
}

type ListApplicationKeysRequest_ApplicationId struct {
	ApplicationId string `protobuf:"bytes,3,opt,name=application_id,json=applicationId,proto3,oneof"`
}

type ListApplicationKeysRequest_ProjectId struct {
	ProjectId string `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3,oneof"`
}

type ListApplicationKeysRequest_OrganizationId struct {
	OrganizationId string `protobuf:"bytes,5,opt,name=organization_id,json=organizationId,proto3,oneof"`
}

func (*ListApplicationKeysRequest_ApplicationId) isListApplicationKeysRequest_ResourceId() {}

func (*ListApplicationKeysRequest_ProjectId) isListApplicationKeysRequest_ResourceId() {}

func (*ListApplicationKeysRequest_OrganizationId) isListApplicationKeysRequest_ResourceId() {}

type ListApplicationKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*ApplicationKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// Contains the total number of app keys matching the query and the applied limit.
	Pagination *v2.PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListApplicationKeysResponse) Reset() {
	*x = ListApplicationKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplicationKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationKeysResponse) ProtoMessage() {}

func (x *ListApplicationKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_app_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationKeysResponse.ProtoReflect.Descriptor instead.
func (*ListApplicationKeysResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_app_service_proto_rawDescGZIP(), []int{32}
}

func (x *ListApplicationKeysResponse) GetKeys() []*ApplicationKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *ListApplicationKeysResponse) GetPagination() *v2.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

var File_zitadel_app_v2beta_app_service_proto protoreflect.FileDescriptor

var file_zitadel_app_v2beta_app_service_proto_rawDesc = []byte{
	0x0a, 0x24, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2f, 0x6f, 0x69, 0x64, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2f, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x5f, 0x67, 0x65, 0x6e,
	0x5f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x03, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x0f, 0x4a, 0x07,
	0x22, 0x4d, 0x79, 0x41, 0x70, 0x70, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x55, 0x0a, 0x0c, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x69, 0x64, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x6c, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52,
	0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x50, 0x49, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x1c, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01,
	0x22, 0xb9, 0x03, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22,
	0x32, 0x30, 0x32, 0x34, 0x2d, 0x31, 0x32, 0x2d, 0x31, 0x38, 0x54, 0x30, 0x37, 0x3a, 0x35, 0x30,
	0x3a, 0x34, 0x37, 0x2e, 0x34, 0x39, 0x32, 0x5a, 0x22, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x6f, 0x69, 0x64, 0x63, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x69, 0x64, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73,
	0x61, 0x6d, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x61,
	0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8b, 0x17, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xa6, 0x01,
	0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x80, 0x01, 0x92, 0x41, 0x7d, 0x32, 0x52, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x55, 0x52, 0x49, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x20,
	0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x4a,
	0x27, 0x5b, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68,
	0x6f, 0x73, 0x74, 0x3a, 0x34, 0x32, 0x30, 0x30, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x5d, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x55, 0x72, 0x69, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x50, 0x92, 0x41, 0x4d, 0x32, 0x4b, 0x44, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x61,
	0x20, 0x63, 0x6f, 0x64, 0x65, 0x2c, 0x20, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x6a, 0x75, 0x73, 0x74, 0x20, 0x69, 0x64,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x7a, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x4f, 0x49, 0x44, 0x43, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x36,
	0x92, 0x41, 0x33, 0x32, 0x31, 0x54, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x79,
	0x70, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x61, 0x69, 0x6e, 0x20,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x73, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x70,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x37, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x44, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x61, 0x64,
	0x69, 0x67, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x75, 0x74, 0x68,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x41, 0x92, 0x41, 0x36, 0x32,
	0x34, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x68, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x61,
	0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0xa1, 0x01,
	0x0a, 0x19, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x66, 0x92, 0x41, 0x63, 0x32, 0x3c, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20,
	0x77, 0x69, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x20, 0x61, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20, 0x6c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x4a, 0x23, 0x5b, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x34, 0x32, 0x30, 0x30, 0x2f, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x6f, 0x75, 0x74, 0x22, 0x5d, 0x52, 0x16, 0x70, 0x6f, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69,
	0x73, 0x12, 0x43, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x55, 0x92, 0x41, 0x52, 0x32, 0x50, 0x55,
	0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x2c, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x2e, 0x52,
	0x07, 0x64, 0x65, 0x76, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x11, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3b, 0x92, 0x41, 0x30, 0x32, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0xfa, 0x42, 0x05, 0x82,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x1b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x70, 0x92, 0x41, 0x6d,
	0x32, 0x6b, 0x41, 0x64, 0x64, 0x73, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x28,
	0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x3d, 0x20,
	0x4a, 0x57, 0x54, 0x29, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x79, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x18, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8d, 0x01, 0x0a, 0x17, 0x69, 0x64, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x56, 0x92, 0x41, 0x53, 0x32, 0x51,
	0x41, 0x64, 0x64, 0x73, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x69, 0x64, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x52, 0x14, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xe5, 0x01, 0x0a, 0x1b, 0x69, 0x64, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0xa5, 0x01,
	0x92, 0x41, 0xa1, 0x01, 0x32, 0x9e, 0x01, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x20, 0x6f, 0x66,
	0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2c, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2c,
	0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x64,
	0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x64, 0x2e, 0x20, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0xdc, 0x01, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6b, 0x65, 0x77, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0xa1, 0x01, 0x92, 0x41, 0x91, 0x01, 0x32, 0x88, 0x01, 0x55, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65,
	0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x20, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x64, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x22, 0x65,
	0x78, 0x70, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x75,
	0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x22, 0x69,
	0x61, 0x74, 0x22, 0x2c, 0x20, 0x22, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x22, 0x6e, 0x62, 0x66, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x73, 0x4a, 0x04, 0x22, 0x31, 0x73, 0x22, 0xfa, 0x42, 0x09, 0xaa, 0x01, 0x06, 0x22, 0x02, 0x08,
	0x05, 0x32, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6b, 0x65, 0x77, 0x12, 0x84,
	0x02, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x42, 0xd4, 0x01, 0x92, 0x41,
	0xd0, 0x01, 0x32, 0xb0, 0x01, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x20, 0x28, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74,
	0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x5f, 0x75, 0x72, 0x69, 0x73, 0x29, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x50, 0x49, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x64, 0x2c, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x68, 0x61, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
	0x20, 0x61, 0x6e, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x20, 0x28, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x3a, 0x2f, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5b, 0x3a, 0x70,
	0x6f, 0x72, 0x74, 0x5d, 0x29, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x70, 0x61,
	0x74, 0x68, 0x2c, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x6f, 0x72, 0x20, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x1b, 0x5b, 0x22, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x3a,
	0x2f, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x38, 0x30, 0x38, 0x30,
	0x22, 0x5d, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x1c, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x62, 0x92, 0x41,
	0x5f, 0x32, 0x5d, 0x53, 0x6b, 0x69, 0x70, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x61, 0x67,
	0x65, 0x20, 0x6f, 0x6e, 0x20, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x61, 0x70, 0x70, 0x73,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x20, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e,
	0x52, 0x18, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x67, 0x65, 0x12, 0x9e, 0x02, 0x0a, 0x17, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0xe6, 0x01, 0x92,
	0x41, 0xe2, 0x01, 0x32, 0xb5, 0x01, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x77, 0x69,
	0x6c, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x55, 0x52, 0x49, 0x20,
	0x74, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x20, 0x42, 0x61, 0x63, 0x6b, 0x2d, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x20, 0x28, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x2e, 0x6e, 0x65, 0x74,
	0x2f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x2d, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2d, 0x31, 0x5f, 0x30, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x29, 0x4a, 0x28, 0x5b, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x22, 0x5d, 0x52, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x55, 0x72, 0x69, 0x12, 0xdc, 0x01, 0x0a, 0x0d,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x94, 0x01, 0x92, 0x41, 0x90, 0x01, 0x32, 0x8d, 0x01, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x55, 0x49, 0x2c, 0x20, 0x77,
	0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x73,
	0x20, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x55, 0x49, 0x20, 0x69, 0x73, 0x20, 0x63, 0x68, 0x6f,
	0x73, 0x65, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x0c, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xda, 0x02, 0x0a, 0x1d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3c, 0x92, 0x41, 0x39, 0x32, 0x23, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x12, 0x22, 0x31, 0x30, 0x33, 0x35,
	0x34, 0x39, 0x36, 0x35, 0x33, 0x34, 0x30, 0x33, 0x33, 0x34, 0x34, 0x39, 0x22, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37,
	0x92, 0x41, 0x34, 0x32, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x10, 0x22, 0x67, 0x6a, 0x6f, 0x71, 0x33, 0x34, 0x35, 0x38,
	0x39, 0x75, 0x61, 0x73, 0x67, 0x68, 0x22, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e,
	0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f,
	0x49, 0x44, 0x43, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x22, 0xed, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x78, 0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x7a, 0x04, 0x18, 0xa0, 0xc2, 0x1e, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x58, 0x6d, 0x6c, 0x12, 0x2d, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x12, 0xdc, 0x01, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x94, 0x01, 0x92, 0x41, 0x90, 0x01, 0x32, 0x8d, 0x01, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x55, 0x49, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x49,
	0x66, 0x20, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x20, 0x55, 0x49, 0x20, 0x69, 0x73, 0x20, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x20,
	0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x41, 0x4d, 0x4c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x50, 0x49, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x50, 0x49, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x20, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x12, 0x22,
	0x33, 0x39, 0x35, 0x30, 0x37, 0x32, 0x33, 0x34, 0x30, 0x39, 0x30, 0x32, 0x39, 0x33, 0x37, 0x34,
	0x22, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x34, 0x32, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x10, 0x22, 0x67, 0x6a, 0x6f, 0x71,
	0x33, 0x34, 0x35, 0x38, 0x39, 0x75, 0x61, 0x73, 0x67, 0x68, 0x22, 0x52, 0x0c, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xc9, 0x04, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92,
	0x41, 0x15, 0x4a, 0x0d, 0x22, 0x34, 0x35, 0x39, 0x38, 0x34, 0x33, 0x35, 0x32, 0x34, 0x33, 0x31,
	0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0xc8, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x4d, 0x79,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7d, 0x0a, 0x1a, 0x73, 0x61, 0x6d, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x18, 0x73, 0x61, 0x6d, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x7d, 0x0a, 0x1a, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x18, 0x6f, 0x69, 0x64, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x7a, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x50, 0x49, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x15,
	0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x79, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x34, 0x2d,
	0x31, 0x32, 0x2d, 0x31, 0x38, 0x54, 0x30, 0x37, 0x3a, 0x35, 0x30, 0x3a, 0x34, 0x37, 0x2e, 0x34,
	0x39, 0x32, 0x5a, 0x22, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x22, 0x91, 0x03, 0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x41, 0x4d, 0x4c, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x78, 0x6d, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x7a, 0x04, 0x18, 0xa0, 0xc2, 0x1e, 0x48,
	0x00, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x58, 0x6d, 0x6c, 0x12, 0x2d,
	0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x48, 0x00,
	0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x6c, 0x12, 0xe1, 0x01,
	0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x94, 0x01, 0x92, 0x41, 0x90, 0x01, 0x32, 0x8d,
	0x01, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x55, 0x49, 0x2c,
	0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x69, 0x73, 0x20, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x55, 0x49, 0x20, 0x69, 0x73, 0x20, 0x63,
	0x68, 0x6f, 0x73, 0x65, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x48, 0x01,
	0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x0f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x03, 0xf8,
	0x42, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xdf, 0x19, 0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x49, 0x44, 0x43, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0xa6, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x75, 0x72, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x80, 0x01, 0x92, 0x41, 0x7d,
	0x32, 0x52, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x55, 0x52, 0x49, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x6e,
	0x74, 0x20, 0x74, 0x6f, 0x4a, 0x27, 0x5b, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x34, 0x32, 0x30, 0x30, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x5d, 0x52, 0x0c, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x50, 0x92, 0x41, 0x4d, 0x32,
	0x4b, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x2c, 0x20, 0x69, 0x64, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x6a, 0x75,
	0x73, 0x74, 0x20, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x77, 0x69, 0x6c, 0x6c,
	0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x0d, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x7a, 0x0a, 0x0b, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x31, 0x54, 0x68, 0x65, 0x20, 0x66, 0x6c,
	0x6f, 0x77, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x67, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x78, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f,
	0x49, 0x44, 0x43, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x37, 0x92, 0x41, 0x2c, 0x32,
	0x2a, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x70, 0x61, 0x72, 0x61, 0x64, 0x69, 0x67, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xfa, 0x42, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x98, 0x01, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x41, 0x92, 0x41, 0x36, 0x32, 0x34, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x73, 0x20, 0x68, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x20, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x01, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0xa1, 0x01, 0x0a,
	0x19, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x66, 0x92, 0x41, 0x63, 0x32, 0x3c, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x77,
	0x69, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20,
	0x61, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20, 0x6c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x4a, 0x23, 0x5b, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x34, 0x32, 0x30, 0x30, 0x2f, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x6f, 0x75, 0x74, 0x22, 0x5d, 0x52, 0x16, 0x70, 0x6f, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x73,
	0x12, 0x48, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x02, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x75, 0x0a, 0x08, 0x64, 0x65,
	0x76, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x55, 0x92, 0x41,
	0x52, 0x32, 0x50, 0x55, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4f, 0x49, 0x44, 0x43,
	0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77,
	0x69, 0x6c, 0x6c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x64, 0x2e, 0x48, 0x03, 0x52, 0x07, 0x64, 0x65, 0x76, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x8f, 0x01, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x3b, 0x92, 0x41, 0x30, 0x32, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5a, 0x49,
	0x54, 0x41, 0x44, 0x45, 0x4c, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x48, 0x04, 0x52,
	0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0xb4, 0x01, 0x0a, 0x1b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x70, 0x92, 0x41, 0x6d, 0x32, 0x6b,
	0x41, 0x64, 0x64, 0x73, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x28, 0x6f, 0x6e,
	0x6c, 0x79, 0x20, 0x69, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x3d, 0x20, 0x4a, 0x57,
	0x54, 0x29, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20,
	0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x48, 0x05, 0x52, 0x18, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x92, 0x01, 0x0a, 0x17, 0x69,
	0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x56, 0x92, 0x41,
	0x53, 0x32, 0x51, 0x41, 0x64, 0x64, 0x73, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x65, 0x76, 0x65, 0x6e,
	0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x48, 0x06, 0x52, 0x14, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0xea, 0x01, 0x0a, 0x1b, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0xa5, 0x01, 0x92, 0x41, 0xa1, 0x01, 0x32, 0x9e, 0x01, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2c, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2c, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x65, 0x76, 0x65, 0x6e,
	0x20, 0x69, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x2e, 0x20, 0x41,
	0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x76, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x07, 0x52,
	0x18, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0xe1, 0x01, 0x0a,
	0x0a, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6b, 0x65, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xa1, 0x01, 0x92,
	0x41, 0x91, 0x01, 0x32, 0x88, 0x01, 0x55, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x64, 0x69,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x2e, 0x20, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x64,
	0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x22, 0x65, 0x78, 0x70, 0x22,
	0x20, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x75, 0x62, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x22, 0x69, 0x61, 0x74, 0x22,
	0x2c, 0x20, 0x22, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x22, 0x6e, 0x62, 0x66, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x4a, 0x04,
	0x22, 0x31, 0x73, 0x22, 0xfa, 0x42, 0x09, 0xaa, 0x01, 0x06, 0x22, 0x02, 0x08, 0x05, 0x32, 0x00,
	0x48, 0x08, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6b, 0x65, 0x77, 0x88, 0x01, 0x01,
	0x12, 0x84, 0x02, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x42, 0xd4, 0x01,
	0x92, 0x41, 0xd0, 0x01, 0x32, 0xb0, 0x01, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x20, 0x28, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x29, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x50, 0x49, 0x20, 0x63, 0x61, 0x6e, 0x20,
	0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x2c, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x64, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x68, 0x61, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x62, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x20, 0x28, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x3a, 0x2f, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5b,
	0x3a, 0x70, 0x6f, 0x72, 0x74, 0x5d, 0x29, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20,
	0x70, 0x61, 0x74, 0x68, 0x2c, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x6f, 0x72, 0x20, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x1b, 0x5b, 0x22, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x38, 0x30,
	0x38, 0x30, 0x22, 0x5d, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x1c, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x62,
	0x92, 0x41, 0x5f, 0x32, 0x5d, 0x53, 0x6b, 0x69, 0x70, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70,
	0x61, 0x67, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x61, 0x70,
	0x70, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x20,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x2e, 0x48, 0x09, 0x52, 0x18, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x70, 0x70, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0xa3, 0x02, 0x0a, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x42, 0xe6, 0x01, 0x92, 0x41, 0xe2, 0x01, 0x32, 0xb5, 0x01, 0x5a, 0x49, 0x54,
	0x41, 0x44, 0x45, 0x4c, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x55, 0x52, 0x49, 0x20, 0x74, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x20,
	0x42, 0x61, 0x63, 0x6b, 0x2d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x20, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x64, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2d, 0x62, 0x61, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x31, 0x5f, 0x30, 0x2e, 0x68, 0x74, 0x6d,
	0x6c, 0x29, 0x4a, 0x28, 0x5b, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x62,
	0x61, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x5d, 0x48, 0x0a, 0x52, 0x14,
	0x62, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x55, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0xe1, 0x01, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x94, 0x01, 0x92, 0x41, 0x90, 0x01, 0x32, 0x8d, 0x01, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x55, 0x49, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x49,
	0x66, 0x20, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x20, 0x55, 0x49, 0x20, 0x69, 0x73, 0x20, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x20,
	0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x48, 0x0b, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x65,
	0x76, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x1e, 0x0a, 0x1c,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0x0a, 0x18,
	0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x69, 0x64, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x73, 0x6b, 0x65, 0x77, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x5f, 0x75, 0x72, 0x69, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x50, 0x49, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x41, 0x50, 0x49, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0e,
	0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4e,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x15, 0x4a, 0x0d, 0x22, 0x34, 0x35, 0x39, 0x38, 0x34,
	0x33, 0x35, 0x32, 0x34, 0x33, 0x31, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4b,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x61, 0x70, 0x70, 0x22, 0x61, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7d,
	0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f,
	0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x35, 0x2d, 0x30, 0x31, 0x2d, 0x32, 0x33,
	0x54, 0x31, 0x30, 0x3a, 0x33, 0x34, 0x3a, 0x31, 0x38, 0x2e, 0x30, 0x35, 0x31, 0x5a, 0x22, 0x52,
	0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x65, 0x0a,
	0x1c, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x11, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92,
	0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x35, 0x2d, 0x30, 0x31, 0x2d, 0x32, 0x33, 0x54,
	0x31, 0x30, 0x3a, 0x33, 0x34, 0x3a, 0x31, 0x38, 0x2e, 0x30, 0x35, 0x31, 0x5a, 0x22, 0x52, 0x10,
	0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x22, 0x65, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xc8, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x11, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x35, 0x2d, 0x30, 0x31, 0x2d,
	0x32, 0x33, 0x54, 0x31, 0x30, 0x3a, 0x33, 0x34, 0x3a, 0x31, 0x38, 0x2e, 0x30, 0x35, 0x31, 0x5a,
	0x22, 0x52, 0x10, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0xc8, 0x01, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x69, 0x64, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x69, 0x64, 0x63, 0x12, 0x17,
	0x0a, 0x06, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x05, 0x69, 0x73, 0x41, 0x70, 0x69, 0x42, 0x0f, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xdf, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x1f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4a, 0x10, 0x22, 0x67, 0x6a, 0x6f, 0x71, 0x33,
	0x34, 0x35, 0x38, 0x39, 0x75, 0x61, 0x73, 0x67, 0x68, 0x22, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x60, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c,
	0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x35, 0x2d, 0x30, 0x31, 0x2d, 0x32, 0x33, 0x54, 0x31, 0x30,
	0x3a, 0x33, 0x34, 0x3a, 0x31, 0x38, 0x2e, 0x30, 0x35, 0x31, 0x5a, 0x22, 0x52, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x45,
	0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x70, 0x70, 0x53,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf3,
	0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8,
	0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x85, 0x01, 0x0a,
	0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x1c, 0x54, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x4a, 0x1d, 0x22, 0x32, 0x35, 0x31, 0x39, 0x2d, 0x30, 0x34, 0x2d,
	0x30, 0x31, 0x54, 0x30, 0x38, 0x3a, 0x34, 0x35, 0x3a, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x5a, 0x22, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x22, 0xec, 0x14, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x32, 0x38, 0x37, 0x34, 0x36, 0x30, 0x32,
	0x38, 0x39, 0x30, 0x39, 0x35, 0x39, 0x33, 0x39, 0x38, 0x37, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x60, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x31,
	0x32, 0x2d, 0x31, 0x38, 0x54, 0x30, 0x37, 0x3a, 0x35, 0x30, 0x3a, 0x34, 0x37, 0x2e, 0x34, 0x39,
	0x32, 0x5a, 0x22, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0xbf, 0x13, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x9d, 0x13, 0x92, 0x41, 0x99, 0x13, 0x4a, 0x96,
	0x13, 0x22, 0x65, 0x79, 0x4a, 0x30, 0x65, 0x58, 0x42, 0x6c, 0x49, 0x6a, 0x6f, 0x69, 0x59, 0x58,
	0x42, 0x77, 0x62, 0x47, 0x6c, 0x6a, 0x59, 0x58, 0x52, 0x70, 0x62, 0x32, 0x34, 0x69, 0x4c, 0x43,
	0x4a, 0x72, 0x5a, 0x58, 0x6c, 0x4a, 0x5a, 0x43, 0x49, 0x36, 0x49, 0x6a, 0x49, 0x77, 0x4d, 0x6a,
	0x63, 0x78, 0x4d, 0x44, 0x45, 0x34, 0x4e, 0x6a, 0x59, 0x79, 0x4d, 0x6a, 0x63, 0x78, 0x4e, 0x44,
	0x45, 0x78, 0x4d, 0x79, 0x49, 0x73, 0x49, 0x6d, 0x74, 0x6c, 0x65, 0x53, 0x49, 0x36, 0x49, 0x69,
	0x30, 0x74, 0x4c, 0x53, 0x30, 0x74, 0x51, 0x6b, 0x56, 0x48, 0x53, 0x55, 0x34, 0x67, 0x55, 0x6c,
	0x4e, 0x42, 0x49, 0x46, 0x42, 0x53, 0x53, 0x56, 0x5a, 0x42, 0x56, 0x45, 0x55, 0x67, 0x53, 0x30,
	0x56, 0x5a, 0x4c, 0x53, 0x30, 0x74, 0x4c, 0x53, 0x31, 0x63, 0x62, 0x6b, 0x31, 0x4a, 0x53, 0x55,
	0x56, 0x76, 0x64, 0x30, 0x6c, 0x43, 0x51, 0x55, 0x46, 0x4c, 0x51, 0x30, 0x46, 0x52, 0x52, 0x55,
	0x46, 0x75, 0x4d, 0x55, 0x78, 0x79, 0x4e, 0x53, 0x74, 0x54, 0x56, 0x30, 0x70, 0x47, 0x52, 0x6c,
	0x6c, 0x55, 0x52, 0x55, 0x31, 0x6b, 0x61, 0x58, 0x51, 0x32, 0x55, 0x30, 0x64, 0x4e, 0x59, 0x30,
	0x45, 0x32, 0x59, 0x6b, 0x73, 0x35, 0x64, 0x47, 0x30, 0x78, 0x4d, 0x6d, 0x68, 0x6c, 0x63, 0x6d,
	0x35, 0x35, 0x56, 0x30, 0x77, 0x72, 0x5a, 0x6d, 0x39, 0x50, 0x57, 0x6e, 0x41, 0x33, 0x65, 0x45,
	0x56, 0x63, 0x62, 0x6b, 0x39, 0x77, 0x63, 0x6d, 0x73, 0x76, 0x57, 0x45, 0x38, 0x31, 0x51, 0x56,
	0x70, 0x6c, 0x53, 0x55, 0x35, 0x4e, 0x59, 0x30, 0x78, 0x30, 0x5a, 0x56, 0x68, 0x78, 0x63, 0x6b,
	0x4a, 0x6c, 0x4b, 0x31, 0x4e, 0x50, 0x64, 0x56, 0x56, 0x4e, 0x4d, 0x46, 0x70, 0x4c, 0x55, 0x32,
	0x78, 0x43, 0x4d, 0x48, 0x46, 0x54, 0x4e, 0x7a, 0x4e, 0x6a, 0x56, 0x53, 0x74, 0x44, 0x56, 0x54,
	0x56, 0x4d, 0x54, 0x47, 0x6f, 0x79, 0x63, 0x56, 0x42, 0x30, 0x55, 0x7a, 0x68, 0x4e, 0x4f, 0x46,
	0x49, 0x30, 0x4e, 0x33, 0x42, 0x47, 0x64, 0x46, 0x68, 0x63, 0x62, 0x6a, 0x4a, 0x58, 0x52, 0x54,
	0x46, 0x4a, 0x4e, 0x6a, 0x4e, 0x68, 0x5a, 0x48, 0x42, 0x31, 0x4e, 0x30, 0x31, 0x54, 0x65, 0x6a,
	0x41, 0x32, 0x53, 0x58, 0x64, 0x75, 0x51, 0x32, 0x6c, 0x79, 0x4e, 0x6e, 0x4a, 0x59, 0x4f, 0x54,
	0x56, 0x50, 0x51, 0x32, 0x5a, 0x6e, 0x65, 0x48, 0x41, 0x33, 0x56, 0x55, 0x31, 0x44, 0x64, 0x30,
	0x70, 0x53, 0x54, 0x55, 0x5a, 0x6d, 0x59, 0x58, 0x4a, 0x71, 0x64, 0x6a, 0x56, 0x42, 0x52, 0x58,
	0x59, 0x33, 0x4e, 0x58, 0x70, 0x73, 0x53, 0x53, 0x39, 0x6c, 0x59, 0x55, 0x56, 0x36, 0x62, 0x55,
	0x4a, 0x63, 0x62, 0x6b, 0x78, 0x4b, 0x57, 0x55, 0x31, 0x78, 0x61, 0x6e, 0x5a, 0x46, 0x52, 0x6d,
	0x5a, 0x6f, 0x4e, 0x32, 0x78, 0x33, 0x4d, 0x32, 0x6c, 0x50, 0x54, 0x33, 0x56, 0x73, 0x57, 0x57,
	0x39, 0x6b, 0x4e, 0x6a, 0x4e, 0x70, 0x4e, 0x33, 0x52, 0x44, 0x4e, 0x57, 0x6c, 0x35, 0x63, 0x7a,
	0x4e, 0x6c, 0x59, 0x6a, 0x4e, 0x4c, 0x5a, 0x57, 0x34, 0x79, 0x57, 0x55, 0x30, 0x72, 0x4e, 0x31,
	0x46, 0x53, 0x62, 0x58, 0x42, 0x32, 0x64, 0x45, 0x35, 0x71, 0x63, 0x54, 0x4a, 0x4d, 0x56, 0x6d,
	0x6c, 0x49, 0x4d, 0x6e, 0x6b, 0x72, 0x55, 0x47, 0x4a, 0x63, 0x62, 0x6b, 0x39, 0x45, 0x53, 0x6c,
	0x49, 0x33, 0x4d, 0x55, 0x39, 0x69, 0x62, 0x30, 0x35, 0x54, 0x59, 0x56, 0x4a, 0x44, 0x4e, 0x54,
	0x5a, 0x44, 0x55, 0x46, 0x70, 0x57, 0x56, 0x79, 0x74, 0x6f, 0x57, 0x44, 0x42, 0x79, 0x59, 0x58,
	0x49, 0x33, 0x56, 0x7a, 0x4d, 0x77, 0x55, 0x6a, 0x49, 0x32, 0x65, 0x47, 0x74, 0x49, 0x51, 0x30,
	0x39, 0x6f, 0x53, 0x79, 0x74, 0x51, 0x62, 0x55, 0x70, 0x53, 0x65, 0x47, 0x74, 0x4f, 0x59, 0x30,
	0x67, 0x31, 0x56, 0x54, 0x64, 0x6a, 0x61, 0x30, 0x78, 0x58, 0x4d, 0x45, 0x77, 0x30, 0x57, 0x45,
	0x56, 0x63, 0x62, 0x6e, 0x4e, 0x4e, 0x5a, 0x6b, 0x56, 0x55, 0x53, 0x6d, 0x73, 0x7a, 0x65, 0x44,
	0x52, 0x33, 0x51, 0x30, 0x70, 0x73, 0x62, 0x69, 0x73, 0x78, 0x62, 0x45, 0x6c, 0x58, 0x55, 0x7a,
	0x6b, 0x72, 0x4e, 0x6d, 0x77, 0x30, 0x52, 0x31, 0x45, 0x32, 0x54, 0x57, 0x52, 0x7a, 0x57, 0x55,
	0x52, 0x79, 0x4f, 0x55, 0x35, 0x52, 0x53, 0x55, 0x52, 0x42, 0x55, 0x55, 0x46, 0x43, 0x51, 0x57,
	0x39, 0x4a, 0x51, 0x6b, 0x46, 0x43, 0x53, 0x6b, 0x78, 0x36, 0x57, 0x47, 0x51, 0x78, 0x4d, 0x48,
	0x46, 0x42, 0x5a, 0x45, 0x51, 0x77, 0x65, 0x6b, 0x4e, 0x63, 0x62, 0x6e, 0x4e, 0x47, 0x55, 0x46,
	0x46, 0x4f, 0x4d, 0x6e, 0x4a, 0x4e, 0x4c, 0x7a, 0x56, 0x6d, 0x56, 0x33, 0x68, 0x4f, 0x4e, 0x54,
	0x68, 0x4f, 0x4e, 0x44, 0x52, 0x30, 0x59, 0x57, 0x46, 0x36, 0x51, 0x58, 0x67, 0x30, 0x56, 0x48,
	0x70, 0x35, 0x4b, 0x30, 0x35, 0x30, 0x55, 0x6c, 0x5a, 0x44, 0x54, 0x6d, 0x78, 0x53, 0x63, 0x47,
	0x51, 0x76, 0x59, 0x6b, 0x78, 0x75, 0x52, 0x32, 0x56, 0x6a, 0x62, 0x48, 0x4a, 0x49, 0x65, 0x56,
	0x70, 0x44, 0x53, 0x6d, 0x59, 0x79, 0x63, 0x57, 0x63, 0x78, 0x63, 0x48, 0x4e, 0x45, 0x4d, 0x48,
	0x4a, 0x63, 0x62, 0x6b, 0x6f, 0x77, 0x52, 0x47, 0x52, 0x6c, 0x52, 0x32, 0x64, 0x30, 0x56, 0x58,
	0x42, 0x46, 0x59, 0x57, 0x78, 0x73, 0x59, 0x6b, 0x39, 0x73, 0x63, 0x6a, 0x4e, 0x45, 0x5a, 0x56,
	0x42, 0x73, 0x55, 0x47, 0x6b, 0x72, 0x59, 0x6e, 0x4e, 0x73, 0x4b, 0x30, 0x52, 0x4b, 0x4f, 0x55,
	0x6b, 0x32, 0x63, 0x30, 0x56, 0x53, 0x55, 0x57, 0x77, 0x78, 0x54, 0x6a, 0x5a, 0x74, 0x51, 0x6a,
	0x56, 0x7a, 0x5a, 0x30, 0x5a, 0x4a, 0x5a, 0x6c, 0x6c, 0x42, 0x52, 0x33, 0x55, 0x77, 0x5a, 0x6a,
	0x6c, 0x46, 0x53, 0x58, 0x64, 0x49, 0x65, 0x6d, 0x39, 0x63, 0x62, 0x6c, 0x6f, 0x7a, 0x52, 0x32,
	0x35, 0x79, 0x4e, 0x6e, 0x42, 0x52, 0x61, 0x45, 0x56, 0x6d, 0x4d, 0x30, 0x4a, 0x50, 0x55, 0x56,
	0x64, 0x73, 0x54, 0x56, 0x68, 0x56, 0x54, 0x6c, 0x4a, 0x4e, 0x53, 0x6b, 0x73, 0x79, 0x4f, 0x48,
	0x70, 0x33, 0x4d, 0x32, 0x45, 0x31, 0x4c, 0x30, 0x31, 0x6e, 0x52, 0x6d, 0x74, 0x4b, 0x56, 0x55,
	0x5a, 0x55, 0x53, 0x54, 0x55, 0x7a, 0x65, 0x58, 0x46, 0x77, 0x62, 0x47, 0x52, 0x74, 0x5a, 0x32,
	0x68, 0x4c, 0x61, 0x6a, 0x52, 0x5a, 0x52, 0x31, 0x68, 0x4c, 0x52, 0x6b, 0x31, 0x4c, 0x55, 0x47,
	0x68, 0x63, 0x62, 0x6b, 0x56, 0x33, 0x52, 0x6b, 0x78, 0x72, 0x52, 0x6e, 0x63, 0x77, 0x4b, 0x32,
	0x73, 0x33, 0x4b, 0x30, 0x78, 0x75, 0x53, 0x6a, 0x46, 0x51, 0x4e, 0x47, 0x70, 0x31, 0x5a, 0x56,
	0x64, 0x31, 0x52, 0x58, 0x6f, 0x33, 0x57, 0x6c, 0x41, 0x79, 0x61, 0x46, 0x70, 0x76, 0x55, 0x57,
	0x78, 0x43, 0x63, 0x58, 0x64, 0x53, 0x61, 0x6a, 0x56, 0x79, 0x54, 0x47, 0x39, 0x51, 0x5a, 0x30,
	0x35, 0x52, 0x62, 0x55, 0x55, 0x34, 0x55, 0x79, 0x74, 0x46, 0x56, 0x44, 0x52, 0x75, 0x63, 0x7a,
	0x6c, 0x55, 0x59, 0x7a, 0x42, 0x79, 0x4f, 0x46, 0x46, 0x63, 0x62, 0x6e, 0x46, 0x79, 0x61, 0x48,
	0x6c, 0x61, 0x63, 0x44, 0x5a, 0x42, 0x63, 0x7a, 0x4a, 0x72, 0x54, 0x44, 0x68, 0x47, 0x54, 0x79,
	0x74, 0x43, 0x5a, 0x6e, 0x46, 0x33, 0x53, 0x56, 0x70, 0x44, 0x5a, 0x6e, 0x70, 0x6e, 0x57, 0x48,
	0x4e, 0x32, 0x63, 0x43, 0x39, 0x50, 0x4c, 0x7a, 0x52, 0x61, 0x53, 0x48, 0x49, 0x7a, 0x56, 0x54,
	0x42, 0x32, 0x59, 0x6d, 0x70, 0x33, 0x55, 0x57, 0x31, 0x73, 0x53, 0x7a, 0x64, 0x56, 0x53, 0x6d,
	0x34, 0x32, 0x55, 0x30, 0x4a, 0x36, 0x54, 0x32, 0x68, 0x70, 0x57, 0x46, 0x70, 0x4e, 0x55, 0x30,
	0x6c, 0x63, 0x62, 0x6b, 0x35, 0x57, 0x63, 0x30, 0x56, 0x35, 0x56, 0x55, 0x56, 0x44, 0x5a, 0x31,
	0x6c, 0x46, 0x51, 0x54, 0x46, 0x45, 0x61, 0x6b, 0x74, 0x6b, 0x52, 0x47, 0x6f, 0x33, 0x4e, 0x54,
	0x4d, 0x31, 0x4d, 0x57, 0x51, 0x7a, 0x64, 0x6c, 0x52, 0x4e, 0x51, 0x6c, 0x52, 0x46, 0x64, 0x32,
	0x4a, 0x53, 0x51, 0x33, 0x68, 0x6f, 0x55, 0x56, 0x5a, 0x4f, 0x64, 0x45, 0x4e, 0x46, 0x4d, 0x6e,
	0x4d, 0x77, 0x56, 0x55, 0x77, 0x34, 0x63, 0x6b, 0x4a, 0x51, 0x5a, 0x31, 0x49, 0x30, 0x4b, 0x31,
	0x64, 0x6c, 0x62, 0x6c, 0x4e, 0x55, 0x57, 0x6d, 0x46, 0x63, 0x62, 0x6e, 0x70, 0x72, 0x57, 0x55,
	0x70, 0x72, 0x63, 0x45, 0x56, 0x30, 0x62, 0x45, 0x35, 0x34, 0x56, 0x47, 0x78, 0x7a, 0x59, 0x6e,
	0x4e, 0x31, 0x59, 0x30, 0x52, 0x54, 0x55, 0x58, 0x5a, 0x71, 0x65, 0x57, 0x52, 0x59, 0x59, 0x6b,
	0x35, 0x6e, 0x53, 0x48, 0x46, 0x42, 0x65, 0x44, 0x59, 0x7a, 0x4d, 0x6d, 0x31, 0x76, 0x64, 0x54,
	0x56, 0x6b, 0x61, 0x6b, 0x39, 0x6c, 0x52, 0x30, 0x56, 0x54, 0x55, 0x44, 0x46, 0x57, 0x56, 0x47,
	0x74, 0x55, 0x64, 0x45, 0x6c, 0x73, 0x5a, 0x46, 0x5a, 0x51, 0x5a, 0x57, 0x73, 0x7a, 0x51, 0x57,
	0x78, 0x63, 0x62, 0x6a, 0x56, 0x59, 0x62, 0x6b, 0x70, 0x51, 0x61, 0x31, 0x64, 0x71, 0x57, 0x47,
	0x56, 0x79, 0x56, 0x56, 0x4a, 0x5a, 0x4e, 0x6d, 0x35, 0x4b, 0x65, 0x55, 0x51, 0x35, 0x55, 0x57,
	0x68, 0x6c, 0x52, 0x45, 0x78, 0x33, 0x4d, 0x56, 0x70, 0x34, 0x4e, 0x45, 0x46, 0x59, 0x56, 0x7a,
	0x4e, 0x48, 0x57, 0x55, 0x52, 0x69, 0x54, 0x46, 0x6b, 0x72, 0x54, 0x30, 0x35, 0x58, 0x56, 0x30,
	0x56, 0x4b, 0x55, 0x6c, 0x4a, 0x61, 0x51, 0x55, 0x6c, 0x6f, 0x4e, 0x6a, 0x42, 0x44, 0x5a, 0x31,
	0x6c, 0x46, 0x51, 0x58, 0x64, 0x45, 0x51, 0x32, 0x78, 0x63, 0x62, 0x6e, 0x63, 0x31, 0x4d, 0x48,
	0x63, 0x34, 0x64, 0x6b, 0x63, 0x76, 0x62, 0x45, 0x4a, 0x34, 0x52, 0x7a, 0x4e, 0x53, 0x59, 0x57,
	0x39, 0x46, 0x61, 0x48, 0x64, 0x4c, 0x4f, 0x57, 0x4e, 0x6e, 0x61, 0x31, 0x56, 0x58, 0x4f, 0x48,
	0x6b, 0x32, 0x54, 0x32, 0x35, 0x44, 0x65, 0x6b, 0x4e, 0x77, 0x63, 0x45, 0x74, 0x6a, 0x4f, 0x45,
	0x5a, 0x55, 0x55, 0x6d, 0x59, 0x31, 0x56, 0x45, 0x35, 0x69, 0x57, 0x6a, 0x6c, 0x35, 0x54, 0x7a,
	0x4e, 0x58, 0x55, 0x6d, 0x64, 0x59, 0x61, 0x6a, 0x68, 0x6b, 0x65, 0x48, 0x52, 0x43, 0x61, 0x6b,
	0x46, 0x63, 0x62, 0x6b, 0x6c, 0x35, 0x56, 0x47, 0x6c, 0x7a, 0x59, 0x6b, 0x39, 0x4e, 0x51, 0x6b,
	0x31, 0x56, 0x61, 0x46, 0x5a, 0x4b, 0x55, 0x55, 0x74, 0x47, 0x5a, 0x48, 0x52, 0x51, 0x61, 0x44,
	0x68, 0x6f, 0x56, 0x44, 0x42, 0x77, 0x52, 0x6b, 0x52, 0x6a, 0x65, 0x45, 0x39, 0x6e, 0x64, 0x7a,
	0x59, 0x30, 0x61, 0x48, 0x42, 0x74, 0x59, 0x7a, 0x68, 0x79, 0x59, 0x32, 0x52, 0x54, 0x62, 0x58,
	0x56, 0x4b, 0x4e, 0x7a, 0x6c, 0x59, 0x53, 0x56, 0x52, 0x54, 0x61, 0x48, 0x55, 0x79, 0x53, 0x6a,
	0x41, 0x30, 0x4e, 0x30, 0x55, 0x76, 0x4e, 0x46, 0x5a, 0x63, 0x62, 0x6e, 0x4a, 0x4f, 0x54, 0x54,
	0x68, 0x70, 0x57, 0x56, 0x6b, 0x35, 0x5a, 0x47, 0x52, 0x33, 0x56, 0x47, 0x64, 0x47, 0x55, 0x55,
	0x6c, 0x73, 0x64, 0x46, 0x4e, 0x5a, 0x4c, 0x30, 0x6c, 0x30, 0x52, 0x6e, 0x46, 0x78, 0x57, 0x45,
	0x52, 0x6d, 0x64, 0x6a, 0x68, 0x71, 0x4b, 0x31, 0x64, 0x56, 0x59, 0x32, 0x35, 0x4c, 0x61, 0x30,
	0x4e, 0x6e, 0x57, 0x55, 0x56, 0x42, 0x61, 0x45, 0x4e, 0x4f, 0x55, 0x55, 0x38, 0x30, 0x62, 0x44,
	0x4e, 0x75, 0x4e, 0x6a, 0x52, 0x75, 0x63, 0x57, 0x52, 0x32, 0x57, 0x6e, 0x42, 0x54, 0x61, 0x48,
	0x42, 0x63, 0x62, 0x6c, 0x56, 0x72, 0x63, 0x6c, 0x4a, 0x42, 0x54, 0x6b, 0x4a, 0x72, 0x57, 0x46,
	0x4a, 0x79, 0x4f, 0x47, 0x5a, 0x6b, 0x5a, 0x31, 0x42, 0x61, 0x4e, 0x6e, 0x46, 0x53, 0x53, 0x53,
	0x39, 0x4b, 0x57, 0x53, 0x74, 0x4e, 0x53, 0x45, 0x68, 0x6a, 0x56, 0x6d, 0x67, 0x34, 0x64, 0x47,
	0x4d, 0x33, 0x4e, 0x6b, 0x4e, 0x30, 0x4e, 0x6b, 0x64, 0x54, 0x55, 0x6d, 0x5a, 0x6c, 0x62, 0x6b,
	0x4a, 0x56, 0x52, 0x55, 0x35, 0x4c, 0x65, 0x56, 0x46, 0x32, 0x63, 0x7a, 0x5a, 0x50, 0x4b, 0x31,
	0x46, 0x44, 0x5a, 0x43, 0x74, 0x42, 0x4f, 0x55, 0x39, 0x63, 0x62, 0x6e, 0x5a, 0x42, 0x57, 0x47,
	0x5a, 0x6b, 0x52, 0x6a, 0x64, 0x75, 0x5a, 0x6c, 0x64, 0x6c, 0x63, 0x56, 0x64, 0x74, 0x57, 0x47,
	0x31, 0x52, 0x54, 0x32, 0x67, 0x30, 0x64, 0x44, 0x4e, 0x4e, 0x4d, 0x57, 0x6b, 0x31, 0x57, 0x6b,
	0x78, 0x46, 0x5a, 0x6c, 0x70, 0x56, 0x55, 0x57, 0x74, 0x32, 0x55, 0x55, 0x39, 0x42, 0x64, 0x6c,
	0x6c, 0x4c, 0x63, 0x46, 0x46, 0x68, 0x4d, 0x44, 0x5a, 0x34, 0x4f, 0x43, 0x73, 0x79, 0x62, 0x31,
	0x70, 0x43, 0x64, 0x48, 0x5a, 0x76, 0x4c, 0x30, 0x70, 0x56, 0x54, 0x6d, 0x59, 0x32, 0x51, 0x30,
	0x78, 0x63, 0x62, 0x6a, 0x5a, 0x76, 0x4e, 0x46, 0x4e, 0x4b, 0x55, 0x56, 0x5a, 0x72, 0x4c, 0x7a,
	0x5a, 0x4f, 0x5a, 0x47, 0x74, 0x6b, 0x63, 0x6b, 0x70, 0x44, 0x4f, 0x44, 0x42, 0x6e, 0x4e, 0x47,
	0x39, 0x72, 0x51, 0x32, 0x64, 0x5a, 0x51, 0x6b, 0x5a, 0x73, 0x4e, 0x57, 0x59, 0x72, 0x62, 0x6b,
	0x56, 0x59, 0x61, 0x31, 0x46, 0x30, 0x64, 0x57, 0x5a, 0x56, 0x65, 0x47, 0x35, 0x77, 0x4e, 0x58,
	0x52, 0x47, 0x57, 0x45, 0x35, 0x58, 0x57, 0x6c, 0x64, 0x73, 0x4d, 0x30, 0x5a, 0x75, 0x54, 0x6a,
	0x4d, 0x76, 0x56, 0x58, 0x70, 0x52, 0x61, 0x57, 0x35, 0x63, 0x62, 0x6d, 0x6b, 0x78, 0x5a, 0x6d,
	0x35, 0x4f, 0x63, 0x6e, 0x42, 0x34, 0x63, 0x6e, 0x68, 0x50, 0x63, 0x6a, 0x4a, 0x72, 0x55, 0x7a,
	0x41, 0x34, 0x4b, 0x7a, 0x64, 0x77, 0x55, 0x31, 0x46, 0x7a, 0x53, 0x45, 0x64, 0x70, 0x4e, 0x44,
	0x4e, 0x44, 0x4e, 0x58, 0x52, 0x51, 0x57, 0x47, 0x39, 0x55, 0x61, 0x6a, 0x4a, 0x6c, 0x54, 0x55,
	0x4e, 0x31, 0x65, 0x58, 0x4e, 0x57, 0x61, 0x55, 0x56, 0x48, 0x59, 0x58, 0x42, 0x75, 0x4e, 0x55,
	0x63, 0x32, 0x59, 0x57, 0x68, 0x4a, 0x62, 0x30, 0x4e, 0x6a, 0x64, 0x6c, 0x68, 0x57, 0x56, 0x57,
	0x6c, 0x63, 0x62, 0x6c, 0x70, 0x72, 0x55, 0x6e, 0x70, 0x46, 0x51, 0x55, 0x52, 0x30, 0x4e, 0x45,
	0x52, 0x5a, 0x64, 0x55, 0x35, 0x5a, 0x53, 0x33, 0x70, 0x59, 0x64, 0x58, 0x42, 0x55, 0x54, 0x6b,
	0x68, 0x50, 0x61, 0x55, 0x4e, 0x6d, 0x59, 0x6d, 0x74, 0x6f, 0x4d, 0x6c, 0x68, 0x79, 0x4d, 0x32,
	0x52, 0x58, 0x56, 0x7a, 0x5a, 0x30, 0x51, 0x55, 0x6c, 0x6f, 0x53, 0x47, 0x52, 0x6d, 0x55, 0x31,
	0x6b, 0x32, 0x54, 0x33, 0x41, 0x77, 0x4e, 0x7a, 0x5a, 0x68, 0x4e, 0x6d, 0x59, 0x76, 0x57, 0x57,
	0x56, 0x55, 0x53, 0x47, 0x4e, 0x4d, 0x57, 0x47, 0x70, 0x63, 0x62, 0x6b, 0x56, 0x6b, 0x56, 0x48,
	0x42, 0x6c, 0x55, 0x55, 0x74, 0x43, 0x5a, 0x30, 0x46, 0x50, 0x64, 0x6e, 0x42, 0x71, 0x63, 0x44,
	0x51, 0x34, 0x54, 0x7a, 0x52, 0x55, 0x57, 0x45, 0x5a, 0x6b, 0x55, 0x30, 0x4a, 0x4c, 0x53, 0x6e,
	0x59, 0x79, 0x61, 0x30, 0x30, 0x35, 0x4f, 0x48, 0x56, 0x68, 0x55, 0x6a, 0x6c, 0x53, 0x51, 0x55,
	0x52, 0x74, 0x64, 0x47, 0x78, 0x54, 0x57, 0x48, 0x64, 0x32, 0x63, 0x54, 0x6c, 0x79, 0x51, 0x6b,
	0x68, 0x54, 0x56, 0x30, 0x38, 0x34, 0x4e, 0x46, 0x6b, 0x34, 0x62, 0x7a, 0x45, 0x30, 0x4c, 0x31,
	0x42, 0x63, 0x62, 0x6b, 0x6c, 0x31, 0x55, 0x6d, 0x78, 0x55, 0x4f, 0x48, 0x68, 0x52, 0x4f, 0x47,
	0x52, 0x59, 0x4b, 0x7a, 0x68, 0x4d, 0x52, 0x32, 0x31, 0x55, 0x55, 0x43, 0x74, 0x6a, 0x63, 0x55,
	0x74, 0x69, 0x4f, 0x46, 0x46, 0x52, 0x51, 0x31, 0x67, 0x72, 0x51, 0x6b, 0x31, 0x59, 0x55, 0x57,
	0x78, 0x4d, 0x53, 0x45, 0x56, 0x74, 0x57, 0x6e, 0x70, 0x6e, 0x62, 0x30, 0x78, 0x46, 0x61, 0x30,
	0x70, 0x47, 0x4d, 0x55, 0x56, 0x49, 0x4d, 0x6d, 0x34, 0x76, 0x5a, 0x45, 0x5a, 0x35, 0x62, 0x6e,
	0x67, 0x78, 0x53, 0x33, 0x70, 0x72, 0x64, 0x46, 0x4e, 0x63, 0x62, 0x6d, 0x39, 0x55, 0x5a, 0x55,
	0x64, 0x73, 0x52, 0x7a, 0x5a, 0x68, 0x62, 0x58, 0x68, 0x56, 0x4f, 0x56, 0x68, 0x34, 0x65, 0x57,
	0x39, 0x52, 0x56, 0x46, 0x6c, 0x45, 0x56, 0x47, 0x4a, 0x43, 0x62, 0x45, 0x52, 0x77, 0x63, 0x32,
	0x46, 0x5a, 0x55, 0x6c, 0x46, 0x42, 0x5a, 0x32, 0x46, 0x55, 0x51, 0x7a, 0x4d, 0x33, 0x55, 0x56,
	0x5a, 0x52, 0x55, 0x6a, 0x68, 0x6d, 0x4b, 0x31, 0x5a, 0x6f, 0x52, 0x7a, 0x46, 0x48, 0x53, 0x46,
	0x46, 0x63, 0x62, 0x69, 0x30, 0x74, 0x4c, 0x53, 0x30, 0x74, 0x52, 0x55, 0x35, 0x45, 0x49, 0x46,
	0x4a, 0x54, 0x51, 0x53, 0x42, 0x51, 0x55, 0x6b, 0x6c, 0x57, 0x51, 0x56, 0x52, 0x46, 0x49, 0x45,
	0x74, 0x46, 0x57, 0x53, 0x30, 0x74, 0x4c, 0x53, 0x30, 0x74, 0x58, 0x47, 0x34, 0x69, 0x4c, 0x43,
	0x4a, 0x68, 0x63, 0x48, 0x42, 0x4a, 0x5a, 0x43, 0x49, 0x36, 0x49, 0x6a, 0x49, 0x77, 0x4d, 0x6a,
	0x63, 0x77, 0x4e, 0x6a, 0x4d, 0x35, 0x4f, 0x44, 0x67, 0x78, 0x4d, 0x7a, 0x67, 0x34, 0x4d, 0x44,
	0x55, 0x33, 0x4e, 0x79, 0x49, 0x73, 0x49, 0x6d, 0x4e, 0x73, 0x61, 0x57, 0x56, 0x75, 0x64, 0x45,
	0x6c, 0x6b, 0x49, 0x6a, 0x6f, 0x69, 0x4d, 0x6a, 0x41, 0x79, 0x4e, 0x7a, 0x41, 0x32, 0x4d, 0x7a,
	0x6b, 0x34, 0x4f, 0x44, 0x45, 0x7a, 0x4f, 0x54, 0x51, 0x32, 0x4d, 0x54, 0x45, 0x7a, 0x51, 0x47,
	0x31, 0x35, 0x64, 0x47, 0x56, 0x7a, 0x64, 0x48, 0x42, 0x79, 0x62, 0x32, 0x70, 0x6c, 0x59, 0x33,
	0x51, 0x69, 0x66, 0x51, 0x3d, 0x3d, 0x22, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x80, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x60, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x35,
	0x2d, 0x30, 0x31, 0x2d, 0x32, 0x33, 0x54, 0x31, 0x30, 0x3a, 0x33, 0x34, 0x3a, 0x31, 0x38, 0x2e,
	0x30, 0x35, 0x31, 0x5a, 0x22, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xad, 0x02, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39,
	0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x60, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x4a, 0x1a, 0x22, 0x32, 0x30, 0x32, 0x35,
	0x2d, 0x30, 0x31, 0x2d, 0x32, 0x33, 0x54, 0x31, 0x30, 0x3a, 0x33, 0x34, 0x3a, 0x31, 0x38, 0x2e,
	0x30, 0x35, 0x31, 0x5a, 0x22, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x1a,
	0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x77,
	0x69, 0x6c, 0x6c, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4a, 0x1d, 0x22, 0x33, 0x30, 0x31,
	0x39, 0x2d, 0x30, 0x34, 0x2d, 0x30, 0x31, 0x54, 0x30, 0x38, 0x3a, 0x34, 0x35, 0x3a, 0x30, 0x30,
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0xdd, 0x02, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51,
	0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x33, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0xc8, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xd9, 0x14, 0x0a, 0x0a, 0x41, 0x70, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x92, 0x41, 0x22, 0x4a,
	0x20, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x19, 0x0a, 0x17, 0x54, 0x68, 0x65, 0x20, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22,
	0x14, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xc9, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x92, 0x41, 0x1b, 0x4a, 0x19, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x12, 0x0a, 0x10, 0x54, 0x68, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x61, 0x70, 0x70, 0x2e, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x32, 0x19, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0xbd, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x92, 0x41, 0x1b,
	0x4a, 0x19, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x12, 0x0a, 0x10, 0x54, 0x68, 0x65, 0x20, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x20, 0x61, 0x70, 0x70, 0x2e, 0x8a, 0xb5, 0x18, 0x11, 0x0a,
	0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0xcb, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x92, 0x41, 0x20, 0x4a, 0x1e, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x17, 0x0a, 0x15, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0xe9, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b,
	0x92, 0x41, 0x24, 0x4a, 0x22, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x19, 0x54, 0x68,
	0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0xe9, 0x01, 0x0a, 0x15,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x92, 0x41, 0x24, 0x4a,
	0x22, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x19, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69,
	0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01,
	0x2a, 0x22, 0x24, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x8a, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x31, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x92, 0x41, 0x29, 0x4a,
	0x27, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x20, 0x0a, 0x1e, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x20, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x41, 0x3a, 0x01, 0x2a, 0x22, 0x3c, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0xd1, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x92, 0x41, 0x24, 0x4a, 0x22, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x1b, 0x0a, 0x19, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x8a, 0xb5, 0x18,
	0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0xdc, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x92, 0x41, 0x26, 0x4a, 0x24, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x1d, 0x0a, 0x1b, 0x54, 0x68, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6b, 0x65, 0x79, 0x8a,
	0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x12, 0xd8, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5d, 0x92, 0x41, 0x20, 0x4a, 0x1e, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x17, 0x0a, 0x15, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x2a, 0x1d, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0xce, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x92, 0x41, 0x1f, 0x4a, 0x1d, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x16, 0x0a, 0x14, 0x54, 0x68, 0x65, 0x20, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x20, 0x61, 0x70, 0x70, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0xde, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2e, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x92, 0x41,
	0x24, 0x4a, 0x22, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x1b, 0x0a, 0x19, 0x54, 0x68, 0x65, 0x20,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24,
	0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x42, 0xa8, 0x08, 0x92, 0x41, 0xf0, 0x07, 0x12, 0xce, 0x02, 0x0a, 0x13,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xb3, 0x01, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x69,
	0x73, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x20, 0x61, 0x70, 0x70, 0x73, 0x20, 0x28, 0x53, 0x41, 0x4d, 0x4c, 0x2c,
	0x20, 0x4f, 0x49, 0x44, 0x43, 0x2c, 0x20, 0x65, 0x74, 0x63, 0x2e, 0x2e, 0x29, 0x20, 0x69, 0x6e,
	0x20, 0x61, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x62, 0x65, 0x74, 0x61, 0x20, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x77,
	0x69, 0x6c, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x20, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x20, 0x61, 0x20, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x2e, 0x22, 0x2e, 0x0a, 0x07, 0x5a, 0x49, 0x54,
	0x41, 0x44, 0x45, 0x4c, 0x12, 0x13, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x1a, 0x0e, 0x68, 0x69, 0x40, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x47, 0x0a, 0x0a, 0x41, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x20, 0x32, 0x2e, 0x30, 0x12, 0x39, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x62, 0x6c, 0x6f, 0x62,
	0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x49, 0x4e, 0x47, 0x2e,
	0x6d, 0x64, 0x32, 0x08, 0x32, 0x2e, 0x30, 0x2d, 0x62, 0x65, 0x74, 0x61, 0x1a, 0x0e, 0x24, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x2d, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x22, 0x01, 0x2f, 0x2a,
	0x02, 0x02, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x32, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x77, 0x65, 0x62, 0x2b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x3a, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x77, 0x65, 0x62, 0x2b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x6d, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x66, 0x0a, 0x47, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61,
	0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f,
	0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x50, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x49, 0x0a, 0x2a, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5a, 0xc2, 0x01, 0x0a, 0xbf, 0x01, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x12, 0xb4, 0x01, 0x08, 0x03, 0x28, 0x04, 0x32, 0x21, 0x24, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x2d, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x3a, 0x1d, 0x24, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x2d, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x2f, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x6c, 0x0a, 0x10, 0x0a,
	0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x0a,
	0x58, 0x0a, 0x2a, 0x75, 0x72, 0x6e, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69,
	0x61, 0x6d, 0x3a, 0x6f, 0x72, 0x67, 0x3a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x69,
	0x64, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x61, 0x75, 0x64, 0x12, 0x2a, 0x75,
	0x72, 0x6e, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69, 0x61, 0x6d, 0x3a, 0x6f,
	0x72, 0x67, 0x3a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x69, 0x64, 0x3a, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x61, 0x75, 0x64, 0x62, 0x40, 0x0a, 0x3e, 0x0a, 0x06, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x0a,
	0x2a, 0x75, 0x72, 0x6e, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69, 0x61, 0x6d,
	0x3a, 0x6f, 0x72, 0x67, 0x3a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x69, 0x64, 0x3a,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x61, 0x75, 0x64, 0x72, 0x3e, 0x0a, 0x22, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45,
	0x4c, 0x12, 0x18, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x5a, 0x32, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x3b, 0x61, 0x70, 0x70, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_app_v2beta_app_service_proto_rawDescOnce sync.Once
	file_zitadel_app_v2beta_app_service_proto_rawDescData = file_zitadel_app_v2beta_app_service_proto_rawDesc
)

func file_zitadel_app_v2beta_app_service_proto_rawDescGZIP() []byte {
	file_zitadel_app_v2beta_app_service_proto_rawDescOnce.Do(func() {
		file_zitadel_app_v2beta_app_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_app_v2beta_app_service_proto_rawDescData)
	})
	return file_zitadel_app_v2beta_app_service_proto_rawDescData
}

var file_zitadel_app_v2beta_app_service_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_zitadel_app_v2beta_app_service_proto_goTypes = []interface{}{
	(*CreateApplicationRequest)(nil),                  // 0: zitadel.app.v2beta.CreateApplicationRequest
	(*CreateApplicationResponse)(nil),                 // 1: zitadel.app.v2beta.CreateApplicationResponse
	(*CreateOIDCApplicationRequest)(nil),              // 2: zitadel.app.v2beta.CreateOIDCApplicationRequest
	(*CreateOIDCApplicationResponse)(nil),             // 3: zitadel.app.v2beta.CreateOIDCApplicationResponse
	(*CreateSAMLApplicationRequest)(nil),              // 4: zitadel.app.v2beta.CreateSAMLApplicationRequest
	(*CreateSAMLApplicationResponse)(nil),             // 5: zitadel.app.v2beta.CreateSAMLApplicationResponse
	(*CreateAPIApplicationRequest)(nil),               // 6: zitadel.app.v2beta.CreateAPIApplicationRequest
	(*CreateAPIApplicationResponse)(nil),              // 7: zitadel.app.v2beta.CreateAPIApplicationResponse
	(*UpdateApplicationRequest)(nil),                  // 8: zitadel.app.v2beta.UpdateApplicationRequest
	(*UpdateApplicationResponse)(nil),                 // 9: zitadel.app.v2beta.UpdateApplicationResponse
	(*UpdateSAMLApplicationConfigurationRequest)(nil), // 10: zitadel.app.v2beta.UpdateSAMLApplicationConfigurationRequest
	(*UpdateOIDCApplicationConfigurationRequest)(nil), // 11: zitadel.app.v2beta.UpdateOIDCApplicationConfigurationRequest
	(*UpdateAPIApplicationConfigurationRequest)(nil),  // 12: zitadel.app.v2beta.UpdateAPIApplicationConfigurationRequest
	(*GetApplicationRequest)(nil),                     // 13: zitadel.app.v2beta.GetApplicationRequest
	(*GetApplicationResponse)(nil),                    // 14: zitadel.app.v2beta.GetApplicationResponse
	(*DeleteApplicationRequest)(nil),                  // 15: zitadel.app.v2beta.DeleteApplicationRequest
	(*DeleteApplicationResponse)(nil),                 // 16: zitadel.app.v2beta.DeleteApplicationResponse
	(*DeactivateApplicationRequest)(nil),              // 17: zitadel.app.v2beta.DeactivateApplicationRequest
	(*DeactivateApplicationResponse)(nil),             // 18: zitadel.app.v2beta.DeactivateApplicationResponse
	(*ReactivateApplicationRequest)(nil),              // 19: zitadel.app.v2beta.ReactivateApplicationRequest
	(*ReactivateApplicationResponse)(nil),             // 20: zitadel.app.v2beta.ReactivateApplicationResponse
	(*RegenerateClientSecretRequest)(nil),             // 21: zitadel.app.v2beta.RegenerateClientSecretRequest
	(*RegenerateClientSecretResponse)(nil),            // 22: zitadel.app.v2beta.RegenerateClientSecretResponse
	(*ListApplicationsRequest)(nil),                   // 23: zitadel.app.v2beta.ListApplicationsRequest
	(*ListApplicationsResponse)(nil),                  // 24: zitadel.app.v2beta.ListApplicationsResponse
	(*CreateApplicationKeyRequest)(nil),               // 25: zitadel.app.v2beta.CreateApplicationKeyRequest
	(*CreateApplicationKeyResponse)(nil),              // 26: zitadel.app.v2beta.CreateApplicationKeyResponse
	(*DeleteApplicationKeyRequest)(nil),               // 27: zitadel.app.v2beta.DeleteApplicationKeyRequest
	(*DeleteApplicationKeyResponse)(nil),              // 28: zitadel.app.v2beta.DeleteApplicationKeyResponse
	(*GetApplicationKeyRequest)(nil),                  // 29: zitadel.app.v2beta.GetApplicationKeyRequest
	(*GetApplicationKeyResponse)(nil),                 // 30: zitadel.app.v2beta.GetApplicationKeyResponse
	(*ListApplicationKeysRequest)(nil),                // 31: zitadel.app.v2beta.ListApplicationKeysRequest
	(*ListApplicationKeysResponse)(nil),               // 32: zitadel.app.v2beta.ListApplicationKeysResponse
	(*timestamppb.Timestamp)(nil),                     // 33: google.protobuf.Timestamp
	(OIDCResponseType)(0),                             // 34: zitadel.app.v2beta.OIDCResponseType
	(OIDCGrantType)(0),                                // 35: zitadel.app.v2beta.OIDCGrantType
	(OIDCAppType)(0),                                  // 36: zitadel.app.v2beta.OIDCAppType
	(OIDCAuthMethodType)(0),                           // 37: zitadel.app.v2beta.OIDCAuthMethodType
	(OIDCVersion)(0),                                  // 38: zitadel.app.v2beta.OIDCVersion
	(OIDCTokenType)(0),                                // 39: zitadel.app.v2beta.OIDCTokenType
	(*durationpb.Duration)(nil),                       // 40: google.protobuf.Duration
	(*LoginVersion)(nil),                              // 41: zitadel.app.v2beta.LoginVersion
	(*OIDCLocalizedMessage)(nil),                      // 42: zitadel.app.v2beta.OIDCLocalizedMessage
	(APIAuthMethodType)(0),                            // 43: zitadel.app.v2beta.APIAuthMethodType
	(*Application)(nil),                               // 44: zitadel.app.v2beta.Application
	(*v2.PaginationRequest)(nil),                      // 45: zitadel.filter.v2.PaginationRequest
	(*ApplicationSearchFilter)(nil),                   // 46: zitadel.app.v2beta.ApplicationSearchFilter
	(AppSorting)(0),                                   // 47: zitadel.app.v2beta.AppSorting
	(*v2.PaginationResponse)(nil),                     // 48: zitadel.filter.v2.PaginationResponse
	(ApplicationKeysSorting)(0),                       // 49: zitadel.app.v2beta.ApplicationKeysSorting
	(*ApplicationKey)(nil),                            // 50: zitadel.app.v2beta.ApplicationKey
}
var file_zitadel_app_v2beta_app_service_proto_depIdxs = []int32{
	2,  // 0: zitadel.app.v2beta.CreateApplicationRequest.oidc_request:type_name -> zitadel.app.v2beta.CreateOIDCApplicationRequest
	4,  // 1: zitadel.app.v2beta.CreateApplicationRequest.saml_request:type_name -> zitadel.app.v2beta.CreateSAMLApplicationRequest
	6,  // 2: zitadel.app.v2beta.CreateApplicationRequest.api_request:type_name -> zitadel.app.v2beta.CreateAPIApplicationRequest
	33, // 3: zitadel.app.v2beta.CreateApplicationResponse.creation_date:type_name -> google.protobuf.Timestamp
	3,  // 4: zitadel.app.v2beta.CreateApplicationResponse.oidc_response:type_name -> zitadel.app.v2beta.CreateOIDCApplicationResponse
	5,  // 5: zitadel.app.v2beta.CreateApplicationResponse.saml_response:type_name -> zitadel.app.v2beta.CreateSAMLApplicationResponse
	7,  // 6: zitadel.app.v2beta.CreateApplicationResponse.api_response:type_name -> zitadel.app.v2beta.CreateAPIApplicationResponse
	34, // 7: zitadel.app.v2beta.CreateOIDCApplicationRequest.response_types:type_name -> zitadel.app.v2beta.OIDCResponseType
	35, // 8: zitadel.app.v2beta.CreateOIDCApplicationRequest.grant_types:type_name -> zitadel.app.v2beta.OIDCGrantType
	36, // 9: zitadel.app.v2beta.CreateOIDCApplicationRequest.app_type:type_name -> zitadel.app.v2beta.OIDCAppType
	37, // 10: zitadel.app.v2beta.CreateOIDCApplicationRequest.auth_method_type:type_name -> zitadel.app.v2beta.OIDCAuthMethodType
	38, // 11: zitadel.app.v2beta.CreateOIDCApplicationRequest.version:type_name -> zitadel.app.v2beta.OIDCVersion
	39, // 12: zitadel.app.v2beta.CreateOIDCApplicationRequest.access_token_type:type_name -> zitadel.app.v2beta.OIDCTokenType
	40, // 13: zitadel.app.v2beta.CreateOIDCApplicationRequest.clock_skew:type_name -> google.protobuf.Duration
	41, // 14: zitadel.app.v2beta.CreateOIDCApplicationRequest.login_version:type_name -> zitadel.app.v2beta.LoginVersion
	42, // 15: zitadel.app.v2beta.CreateOIDCApplicationResponse.compliance_problems:type_name -> zitadel.app.v2beta.OIDCLocalizedMessage
	41, // 16: zitadel.app.v2beta.CreateSAMLApplicationRequest.login_version:type_name -> zitadel.app.v2beta.LoginVersion
	43, // 17: zitadel.app.v2beta.CreateAPIApplicationRequest.auth_method_type:type_name -> zitadel.app.v2beta.APIAuthMethodType
	10, // 18: zitadel.app.v2beta.UpdateApplicationRequest.saml_configuration_request:type_name -> zitadel.app.v2beta.UpdateSAMLApplicationConfigurationRequest
	11, // 19: zitadel.app.v2beta.UpdateApplicationRequest.oidc_configuration_request:type_name -> zitadel.app.v2beta.UpdateOIDCApplicationConfigurationRequest
	12, // 20: zitadel.app.v2beta.UpdateApplicationRequest.api_configuration_request:type_name -> zitadel.app.v2beta.UpdateAPIApplicationConfigurationRequest
	33, // 21: zitadel.app.v2beta.UpdateApplicationResponse.change_date:type_name -> google.protobuf.Timestamp
	41, // 22: zitadel.app.v2beta.UpdateSAMLApplicationConfigurationRequest.login_version:type_name -> zitadel.app.v2beta.LoginVersion
	34, // 23: zitadel.app.v2beta.UpdateOIDCApplicationConfigurationRequest.response_types:type_name -> zitadel.app.v2beta.OIDCResponseType
	35, // 24: zitadel.app.v2beta.UpdateOIDCApplicationConfigurationRequest.grant_types:type_name -> zitadel.app.v2beta.OIDCGrantType
	36, // 25: zitadel.app.v2beta.UpdateOIDCApplicationConfigurationRequest.app_type:type_name -> zitadel.app.v2beta.OIDCAppType
	37, // 26: zitadel.app.v2beta.UpdateOIDCApplicationConfigurationRequest.auth_method_type:type_name -> zitadel.app.v2beta.OIDCAuthMethodType
	38, // 27: zitadel.app.v2beta.UpdateOIDCApplicationConfigurationRequest.version:type_name -> zitadel.app.v2beta.OIDCVersion
	39, // 28: zitadel.app.v2beta.UpdateOIDCApplicationConfigurationRequest.access_token_type:type_name -> zitadel.app.v2beta.OIDCTokenType
	40, // 29: zitadel.app.v2beta.UpdateOIDCApplicationConfigurationRequest.clock_skew:type_name -> google.protobuf.Duration
	41, // 30: zitadel.app.v2beta.UpdateOIDCApplicationConfigurationRequest.login_version:type_name -> zitadel.app.v2beta.LoginVersion
	43, // 31: zitadel.app.v2beta.UpdateAPIApplicationConfigurationRequest.auth_method_type:type_name -> zitadel.app.v2beta.APIAuthMethodType
	44, // 32: zitadel.app.v2beta.GetApplicationResponse.app:type_name -> zitadel.app.v2beta.Application
	33, // 33: zitadel.app.v2beta.DeleteApplicationResponse.deletion_date:type_name -> google.protobuf.Timestamp
	33, // 34: zitadel.app.v2beta.DeactivateApplicationResponse.deactivation_date:type_name -> google.protobuf.Timestamp
	33, // 35: zitadel.app.v2beta.ReactivateApplicationResponse.reactivation_date:type_name -> google.protobuf.Timestamp
	33, // 36: zitadel.app.v2beta.RegenerateClientSecretResponse.creation_date:type_name -> google.protobuf.Timestamp
	45, // 37: zitadel.app.v2beta.ListApplicationsRequest.pagination:type_name -> zitadel.filter.v2.PaginationRequest
	46, // 38: zitadel.app.v2beta.ListApplicationsRequest.filters:type_name -> zitadel.app.v2beta.ApplicationSearchFilter
	47, // 39: zitadel.app.v2beta.ListApplicationsRequest.sorting_column:type_name -> zitadel.app.v2beta.AppSorting
	44, // 40: zitadel.app.v2beta.ListApplicationsResponse.applications:type_name -> zitadel.app.v2beta.Application
	48, // 41: zitadel.app.v2beta.ListApplicationsResponse.pagination:type_name -> zitadel.filter.v2.PaginationResponse
	33, // 42: zitadel.app.v2beta.CreateApplicationKeyRequest.expiration_date:type_name -> google.protobuf.Timestamp
	33, // 43: zitadel.app.v2beta.CreateApplicationKeyResponse.creation_date:type_name -> google.protobuf.Timestamp
	33, // 44: zitadel.app.v2beta.DeleteApplicationKeyResponse.deletion_date:type_name -> google.protobuf.Timestamp
	33, // 45: zitadel.app.v2beta.GetApplicationKeyResponse.creation_date:type_name -> google.protobuf.Timestamp
	33, // 46: zitadel.app.v2beta.GetApplicationKeyResponse.expiration_date:type_name -> google.protobuf.Timestamp
	45, // 47: zitadel.app.v2beta.ListApplicationKeysRequest.pagination:type_name -> zitadel.filter.v2.PaginationRequest
	49, // 48: zitadel.app.v2beta.ListApplicationKeysRequest.sorting_column:type_name -> zitadel.app.v2beta.ApplicationKeysSorting
	50, // 49: zitadel.app.v2beta.ListApplicationKeysResponse.keys:type_name -> zitadel.app.v2beta.ApplicationKey
	48, // 50: zitadel.app.v2beta.ListApplicationKeysResponse.pagination:type_name -> zitadel.filter.v2.PaginationResponse
	0,  // 51: zitadel.app.v2beta.AppService.CreateApplication:input_type -> zitadel.app.v2beta.CreateApplicationRequest
	8,  // 52: zitadel.app.v2beta.AppService.UpdateApplication:input_type -> zitadel.app.v2beta.UpdateApplicationRequest
	13, // 53: zitadel.app.v2beta.AppService.GetApplication:input_type -> zitadel.app.v2beta.GetApplicationRequest
	15, // 54: zitadel.app.v2beta.AppService.DeleteApplication:input_type -> zitadel.app.v2beta.DeleteApplicationRequest
	17, // 55: zitadel.app.v2beta.AppService.DeactivateApplication:input_type -> zitadel.app.v2beta.DeactivateApplicationRequest
	19, // 56: zitadel.app.v2beta.AppService.ReactivateApplication:input_type -> zitadel.app.v2beta.ReactivateApplicationRequest
	21, // 57: zitadel.app.v2beta.AppService.RegenerateClientSecret:input_type -> zitadel.app.v2beta.RegenerateClientSecretRequest
	23, // 58: zitadel.app.v2beta.AppService.ListApplications:input_type -> zitadel.app.v2beta.ListApplicationsRequest
	25, // 59: zitadel.app.v2beta.AppService.CreateApplicationKey:input_type -> zitadel.app.v2beta.CreateApplicationKeyRequest
	27, // 60: zitadel.app.v2beta.AppService.DeleteApplicationKey:input_type -> zitadel.app.v2beta.DeleteApplicationKeyRequest
	29, // 61: zitadel.app.v2beta.AppService.GetApplicationKey:input_type -> zitadel.app.v2beta.GetApplicationKeyRequest
	31, // 62: zitadel.app.v2beta.AppService.ListApplicationKeys:input_type -> zitadel.app.v2beta.ListApplicationKeysRequest
	1,  // 63: zitadel.app.v2beta.AppService.CreateApplication:output_type -> zitadel.app.v2beta.CreateApplicationResponse
	9,  // 64: zitadel.app.v2beta.AppService.UpdateApplication:output_type -> zitadel.app.v2beta.UpdateApplicationResponse
	14, // 65: zitadel.app.v2beta.AppService.GetApplication:output_type -> zitadel.app.v2beta.GetApplicationResponse
	16, // 66: zitadel.app.v2beta.AppService.DeleteApplication:output_type -> zitadel.app.v2beta.DeleteApplicationResponse
	18, // 67: zitadel.app.v2beta.AppService.DeactivateApplication:output_type -> zitadel.app.v2beta.DeactivateApplicationResponse
	20, // 68: zitadel.app.v2beta.AppService.ReactivateApplication:output_type -> zitadel.app.v2beta.ReactivateApplicationResponse
	22, // 69: zitadel.app.v2beta.AppService.RegenerateClientSecret:output_type -> zitadel.app.v2beta.RegenerateClientSecretResponse
	24, // 70: zitadel.app.v2beta.AppService.ListApplications:output_type -> zitadel.app.v2beta.ListApplicationsResponse
	26, // 71: zitadel.app.v2beta.AppService.CreateApplicationKey:output_type -> zitadel.app.v2beta.CreateApplicationKeyResponse
	28, // 72: zitadel.app.v2beta.AppService.DeleteApplicationKey:output_type -> zitadel.app.v2beta.DeleteApplicationKeyResponse
	30, // 73: zitadel.app.v2beta.AppService.GetApplicationKey:output_type -> zitadel.app.v2beta.GetApplicationKeyResponse
	32, // 74: zitadel.app.v2beta.AppService.ListApplicationKeys:output_type -> zitadel.app.v2beta.ListApplicationKeysResponse
	63, // [63:75] is the sub-list for method output_type
	51, // [51:63] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_zitadel_app_v2beta_app_service_proto_init() }
func file_zitadel_app_v2beta_app_service_proto_init() {
	if File_zitadel_app_v2beta_app_service_proto != nil {
		return
	}
	file_zitadel_app_v2beta_login_proto_init()
	file_zitadel_app_v2beta_oidc_proto_init()
	file_zitadel_app_v2beta_api_proto_init()
	file_zitadel_app_v2beta_app_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zitadel_app_v2beta_app_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOIDCApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOIDCApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSAMLApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSAMLApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAPIApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAPIApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSAMLApplicationConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOIDCApplicationConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAPIApplicationConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactivateApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactivateApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegenerateClientSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegenerateClientSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApplicationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApplicationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateApplicationKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateApplicationKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteApplicationKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteApplicationKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApplicationKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApplicationKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApplicationKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_app_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApplicationKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_app_v2beta_app_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CreateApplicationRequest_OidcRequest)(nil),
		(*CreateApplicationRequest_SamlRequest)(nil),
		(*CreateApplicationRequest_ApiRequest)(nil),
	}
	file_zitadel_app_v2beta_app_service_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*CreateApplicationResponse_OidcResponse)(nil),
		(*CreateApplicationResponse_SamlResponse)(nil),
		(*CreateApplicationResponse_ApiResponse)(nil),
	}
	file_zitadel_app_v2beta_app_service_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*CreateSAMLApplicationRequest_MetadataXml)(nil),
		(*CreateSAMLApplicationRequest_MetadataUrl)(nil),
	}
	file_zitadel_app_v2beta_app_service_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*UpdateApplicationRequest_SamlConfigurationRequest)(nil),
		(*UpdateApplicationRequest_OidcConfigurationRequest)(nil),
		(*UpdateApplicationRequest_ApiConfigurationRequest)(nil),
	}
	file_zitadel_app_v2beta_app_service_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*UpdateSAMLApplicationConfigurationRequest_MetadataXml)(nil),
		(*UpdateSAMLApplicationConfigurationRequest_MetadataUrl)(nil),
	}
	file_zitadel_app_v2beta_app_service_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_zitadel_app_v2beta_app_service_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*RegenerateClientSecretRequest_IsOidc)(nil),
		(*RegenerateClientSecretRequest_IsApi)(nil),
	}
	file_zitadel_app_v2beta_app_service_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*ListApplicationKeysRequest_ApplicationId)(nil),
		(*ListApplicationKeysRequest_ProjectId)(nil),
		(*ListApplicationKeysRequest_OrganizationId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_app_v2beta_app_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zitadel_app_v2beta_app_service_proto_goTypes,
		DependencyIndexes: file_zitadel_app_v2beta_app_service_proto_depIdxs,
		MessageInfos:      file_zitadel_app_v2beta_app_service_proto_msgTypes,
	}.Build()
	File_zitadel_app_v2beta_app_service_proto = out.File
	file_zitadel_app_v2beta_app_service_proto_rawDesc = nil
	file_zitadel_app_v2beta_app_service_proto_goTypes = nil
	file_zitadel_app_v2beta_app_service_proto_depIdxs = nil
}
