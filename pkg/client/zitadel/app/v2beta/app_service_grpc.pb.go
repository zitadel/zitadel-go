// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: zitadel/app/v2beta/app_service.proto

package app

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppService_CreateApplication_FullMethodName      = "/zitadel.app.v2beta.AppService/CreateApplication"
	AppService_UpdateApplication_FullMethodName      = "/zitadel.app.v2beta.AppService/UpdateApplication"
	AppService_GetApplication_FullMethodName         = "/zitadel.app.v2beta.AppService/GetApplication"
	AppService_DeleteApplication_FullMethodName      = "/zitadel.app.v2beta.AppService/DeleteApplication"
	AppService_DeactivateApplication_FullMethodName  = "/zitadel.app.v2beta.AppService/DeactivateApplication"
	AppService_ReactivateApplication_FullMethodName  = "/zitadel.app.v2beta.AppService/ReactivateApplication"
	AppService_RegenerateClientSecret_FullMethodName = "/zitadel.app.v2beta.AppService/RegenerateClientSecret"
	AppService_ListApplications_FullMethodName       = "/zitadel.app.v2beta.AppService/ListApplications"
	AppService_CreateApplicationKey_FullMethodName   = "/zitadel.app.v2beta.AppService/CreateApplicationKey"
	AppService_DeleteApplicationKey_FullMethodName   = "/zitadel.app.v2beta.AppService/DeleteApplicationKey"
	AppService_GetApplicationKey_FullMethodName      = "/zitadel.app.v2beta.AppService/GetApplicationKey"
	AppService_ListApplicationKeys_FullMethodName    = "/zitadel.app.v2beta.AppService/ListApplicationKeys"
)

// AppServiceClient is the client API for AppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppServiceClient interface {
	// Create Application
	//
	// Create an application. The application can be OIDC, API or SAML type, based on the input.
	//
	// Required permissions:
	//   - project.app.write
	CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error)
	// Update Application
	//
	// Changes the configuration of an OIDC, API or SAML type application, as well as
	// the application name, based on the input provided.
	//
	// Required permissions:
	//   - project.app.write
	UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*UpdateApplicationResponse, error)
	// Get Application
	//
	// Retrieves the application matching the provided ID.
	//
	// Required permissions:
	//   - project.app.read
	GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error)
	// Delete Application
	//
	// Deletes the application belonging to the input project and matching the provided
	// application ID.
	//
	// Required permissions:
	//   - project.app.delete
	DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*DeleteApplicationResponse, error)
	// Deactivate Application
	//
	// Deactivates the application belonging to the input project and matching the provided
	// application ID.
	//
	// Required permissions:
	//   - project.app.write
	DeactivateApplication(ctx context.Context, in *DeactivateApplicationRequest, opts ...grpc.CallOption) (*DeactivateApplicationResponse, error)
	// Reactivate Application
	//
	// Reactivates the application belonging to the input project and matching the provided
	// application ID.
	//
	// Required permissions:
	//   - project.app.write
	ReactivateApplication(ctx context.Context, in *ReactivateApplicationRequest, opts ...grpc.CallOption) (*ReactivateApplicationResponse, error)
	// Regenerate Client Secret
	//
	// Regenerates the client secret of an API or OIDC application that belongs to the input project.
	//
	// Required permissions:
	//   - project.app.write
	RegenerateClientSecret(ctx context.Context, in *RegenerateClientSecretRequest, opts ...grpc.CallOption) (*RegenerateClientSecretResponse, error)
	// List Applications
	//
	// Returns a list of applications matching the input parameters that belong to the provided
	// project.
	//
	// The result can be sorted by app id, name, creation date, change date or state. It can also
	// be filtered by app state, app type and app name.
	//
	// Required permissions:
	//   - project.app.read
	ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error)
	// Create Application Key
	//
	// Create a new application key, which is used to authorize an API application.
	//
	// Key details are returned in the response. They must be stored safely, as it will not
	// be possible to retrieve them again.
	//
	// Required permissions:
	//   - `project.app.write`
	CreateApplicationKey(ctx context.Context, in *CreateApplicationKeyRequest, opts ...grpc.CallOption) (*CreateApplicationKeyResponse, error)
	// Delete Application Key
	//
	// Deletes an application key matching the provided ID.
	//
	// Organization ID is not mandatory, but helps with filtering/performance.
	//
	// The deletion time is returned in response message.
	//
	// Required permissions:
	//   - `project.app.write`
	DeleteApplicationKey(ctx context.Context, in *DeleteApplicationKeyRequest, opts ...grpc.CallOption) (*DeleteApplicationKeyResponse, error)
	// Get Application Key
	//
	// Retrieves the application key matching the provided ID.
	//
	// Specifying a project, organization and app ID is optional but help with filtering/performance.
	//
	// Required permissions:
	//   - project.app.read
	GetApplicationKey(ctx context.Context, in *GetApplicationKeyRequest, opts ...grpc.CallOption) (*GetApplicationKeyResponse, error)
	// List Application Keys
	//
	// Returns a list of application keys matching the input parameters.
	//
	// The result can be sorted by id, aggregate, creation date, expiration date, resource owner or type.
	// It can also be filtered by app, project or organization ID.
	//
	// Required permissions:
	//   - project.app.read
	ListApplicationKeys(ctx context.Context, in *ListApplicationKeysRequest, opts ...grpc.CallOption) (*ListApplicationKeysResponse, error)
}

type appServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppServiceClient(cc grpc.ClientConnInterface) AppServiceClient {
	return &appServiceClient{cc}
}

func (c *appServiceClient) CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error) {
	out := new(CreateApplicationResponse)
	err := c.cc.Invoke(ctx, AppService_CreateApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*UpdateApplicationResponse, error) {
	out := new(UpdateApplicationResponse)
	err := c.cc.Invoke(ctx, AppService_UpdateApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error) {
	out := new(GetApplicationResponse)
	err := c.cc.Invoke(ctx, AppService_GetApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*DeleteApplicationResponse, error) {
	out := new(DeleteApplicationResponse)
	err := c.cc.Invoke(ctx, AppService_DeleteApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeactivateApplication(ctx context.Context, in *DeactivateApplicationRequest, opts ...grpc.CallOption) (*DeactivateApplicationResponse, error) {
	out := new(DeactivateApplicationResponse)
	err := c.cc.Invoke(ctx, AppService_DeactivateApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ReactivateApplication(ctx context.Context, in *ReactivateApplicationRequest, opts ...grpc.CallOption) (*ReactivateApplicationResponse, error) {
	out := new(ReactivateApplicationResponse)
	err := c.cc.Invoke(ctx, AppService_ReactivateApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) RegenerateClientSecret(ctx context.Context, in *RegenerateClientSecretRequest, opts ...grpc.CallOption) (*RegenerateClientSecretResponse, error) {
	out := new(RegenerateClientSecretResponse)
	err := c.cc.Invoke(ctx, AppService_RegenerateClientSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error) {
	out := new(ListApplicationsResponse)
	err := c.cc.Invoke(ctx, AppService_ListApplications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateApplicationKey(ctx context.Context, in *CreateApplicationKeyRequest, opts ...grpc.CallOption) (*CreateApplicationKeyResponse, error) {
	out := new(CreateApplicationKeyResponse)
	err := c.cc.Invoke(ctx, AppService_CreateApplicationKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteApplicationKey(ctx context.Context, in *DeleteApplicationKeyRequest, opts ...grpc.CallOption) (*DeleteApplicationKeyResponse, error) {
	out := new(DeleteApplicationKeyResponse)
	err := c.cc.Invoke(ctx, AppService_DeleteApplicationKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetApplicationKey(ctx context.Context, in *GetApplicationKeyRequest, opts ...grpc.CallOption) (*GetApplicationKeyResponse, error) {
	out := new(GetApplicationKeyResponse)
	err := c.cc.Invoke(ctx, AppService_GetApplicationKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListApplicationKeys(ctx context.Context, in *ListApplicationKeysRequest, opts ...grpc.CallOption) (*ListApplicationKeysResponse, error) {
	out := new(ListApplicationKeysResponse)
	err := c.cc.Invoke(ctx, AppService_ListApplicationKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServiceServer is the server API for AppService service.
// All implementations must embed UnimplementedAppServiceServer
// for forward compatibility
type AppServiceServer interface {
	// Create Application
	//
	// Create an application. The application can be OIDC, API or SAML type, based on the input.
	//
	// Required permissions:
	//   - project.app.write
	CreateApplication(context.Context, *CreateApplicationRequest) (*CreateApplicationResponse, error)
	// Update Application
	//
	// Changes the configuration of an OIDC, API or SAML type application, as well as
	// the application name, based on the input provided.
	//
	// Required permissions:
	//   - project.app.write
	UpdateApplication(context.Context, *UpdateApplicationRequest) (*UpdateApplicationResponse, error)
	// Get Application
	//
	// Retrieves the application matching the provided ID.
	//
	// Required permissions:
	//   - project.app.read
	GetApplication(context.Context, *GetApplicationRequest) (*GetApplicationResponse, error)
	// Delete Application
	//
	// Deletes the application belonging to the input project and matching the provided
	// application ID.
	//
	// Required permissions:
	//   - project.app.delete
	DeleteApplication(context.Context, *DeleteApplicationRequest) (*DeleteApplicationResponse, error)
	// Deactivate Application
	//
	// Deactivates the application belonging to the input project and matching the provided
	// application ID.
	//
	// Required permissions:
	//   - project.app.write
	DeactivateApplication(context.Context, *DeactivateApplicationRequest) (*DeactivateApplicationResponse, error)
	// Reactivate Application
	//
	// Reactivates the application belonging to the input project and matching the provided
	// application ID.
	//
	// Required permissions:
	//   - project.app.write
	ReactivateApplication(context.Context, *ReactivateApplicationRequest) (*ReactivateApplicationResponse, error)
	// Regenerate Client Secret
	//
	// Regenerates the client secret of an API or OIDC application that belongs to the input project.
	//
	// Required permissions:
	//   - project.app.write
	RegenerateClientSecret(context.Context, *RegenerateClientSecretRequest) (*RegenerateClientSecretResponse, error)
	// List Applications
	//
	// Returns a list of applications matching the input parameters that belong to the provided
	// project.
	//
	// The result can be sorted by app id, name, creation date, change date or state. It can also
	// be filtered by app state, app type and app name.
	//
	// Required permissions:
	//   - project.app.read
	ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error)
	// Create Application Key
	//
	// Create a new application key, which is used to authorize an API application.
	//
	// Key details are returned in the response. They must be stored safely, as it will not
	// be possible to retrieve them again.
	//
	// Required permissions:
	//   - `project.app.write`
	CreateApplicationKey(context.Context, *CreateApplicationKeyRequest) (*CreateApplicationKeyResponse, error)
	// Delete Application Key
	//
	// Deletes an application key matching the provided ID.
	//
	// Organization ID is not mandatory, but helps with filtering/performance.
	//
	// The deletion time is returned in response message.
	//
	// Required permissions:
	//   - `project.app.write`
	DeleteApplicationKey(context.Context, *DeleteApplicationKeyRequest) (*DeleteApplicationKeyResponse, error)
	// Get Application Key
	//
	// Retrieves the application key matching the provided ID.
	//
	// Specifying a project, organization and app ID is optional but help with filtering/performance.
	//
	// Required permissions:
	//   - project.app.read
	GetApplicationKey(context.Context, *GetApplicationKeyRequest) (*GetApplicationKeyResponse, error)
	// List Application Keys
	//
	// Returns a list of application keys matching the input parameters.
	//
	// The result can be sorted by id, aggregate, creation date, expiration date, resource owner or type.
	// It can also be filtered by app, project or organization ID.
	//
	// Required permissions:
	//   - project.app.read
	ListApplicationKeys(context.Context, *ListApplicationKeysRequest) (*ListApplicationKeysResponse, error)
	mustEmbedUnimplementedAppServiceServer()
}

// UnimplementedAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppServiceServer struct {
}

func (UnimplementedAppServiceServer) CreateApplication(context.Context, *CreateApplicationRequest) (*CreateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplication not implemented")
}
func (UnimplementedAppServiceServer) UpdateApplication(context.Context, *UpdateApplicationRequest) (*UpdateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplication not implemented")
}
func (UnimplementedAppServiceServer) GetApplication(context.Context, *GetApplicationRequest) (*GetApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplication not implemented")
}
func (UnimplementedAppServiceServer) DeleteApplication(context.Context, *DeleteApplicationRequest) (*DeleteApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplication not implemented")
}
func (UnimplementedAppServiceServer) DeactivateApplication(context.Context, *DeactivateApplicationRequest) (*DeactivateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateApplication not implemented")
}
func (UnimplementedAppServiceServer) ReactivateApplication(context.Context, *ReactivateApplicationRequest) (*ReactivateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateApplication not implemented")
}
func (UnimplementedAppServiceServer) RegenerateClientSecret(context.Context, *RegenerateClientSecretRequest) (*RegenerateClientSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateClientSecret not implemented")
}
func (UnimplementedAppServiceServer) ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplications not implemented")
}
func (UnimplementedAppServiceServer) CreateApplicationKey(context.Context, *CreateApplicationKeyRequest) (*CreateApplicationKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplicationKey not implemented")
}
func (UnimplementedAppServiceServer) DeleteApplicationKey(context.Context, *DeleteApplicationKeyRequest) (*DeleteApplicationKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplicationKey not implemented")
}
func (UnimplementedAppServiceServer) GetApplicationKey(context.Context, *GetApplicationKeyRequest) (*GetApplicationKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationKey not implemented")
}
func (UnimplementedAppServiceServer) ListApplicationKeys(context.Context, *ListApplicationKeysRequest) (*ListApplicationKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplicationKeys not implemented")
}
func (UnimplementedAppServiceServer) mustEmbedUnimplementedAppServiceServer() {}

// UnsafeAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServiceServer will
// result in compilation errors.
type UnsafeAppServiceServer interface {
	mustEmbedUnimplementedAppServiceServer()
}

func RegisterAppServiceServer(s grpc.ServiceRegistrar, srv AppServiceServer) {
	s.RegisterService(&AppService_ServiceDesc, srv)
}

func _AppService_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_CreateApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateApplication(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_UpdateApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdateApplication(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetApplication(ctx, req.(*GetApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DeleteApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteApplication(ctx, req.(*DeleteApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeactivateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeactivateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DeactivateApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeactivateApplication(ctx, req.(*DeactivateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ReactivateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ReactivateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ReactivateApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ReactivateApplication(ctx, req.(*ReactivateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_RegenerateClientSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateClientSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).RegenerateClientSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_RegenerateClientSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).RegenerateClientSecret(ctx, req.(*RegenerateClientSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ListApplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListApplications(ctx, req.(*ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateApplicationKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateApplicationKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_CreateApplicationKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateApplicationKey(ctx, req.(*CreateApplicationKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteApplicationKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteApplicationKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_DeleteApplicationKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteApplicationKey(ctx, req.(*DeleteApplicationKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetApplicationKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetApplicationKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_GetApplicationKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetApplicationKey(ctx, req.(*GetApplicationKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListApplicationKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListApplicationKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppService_ListApplicationKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListApplicationKeys(ctx, req.(*ListApplicationKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppService_ServiceDesc is the grpc.ServiceDesc for AppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zitadel.app.v2beta.AppService",
	HandlerType: (*AppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApplication",
			Handler:    _AppService_CreateApplication_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _AppService_UpdateApplication_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _AppService_GetApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _AppService_DeleteApplication_Handler,
		},
		{
			MethodName: "DeactivateApplication",
			Handler:    _AppService_DeactivateApplication_Handler,
		},
		{
			MethodName: "ReactivateApplication",
			Handler:    _AppService_ReactivateApplication_Handler,
		},
		{
			MethodName: "RegenerateClientSecret",
			Handler:    _AppService_RegenerateClientSecret_Handler,
		},
		{
			MethodName: "ListApplications",
			Handler:    _AppService_ListApplications_Handler,
		},
		{
			MethodName: "CreateApplicationKey",
			Handler:    _AppService_CreateApplicationKey_Handler,
		},
		{
			MethodName: "DeleteApplicationKey",
			Handler:    _AppService_DeleteApplicationKey_Handler,
		},
		{
			MethodName: "GetApplicationKey",
			Handler:    _AppService_GetApplicationKey_Handler,
		},
		{
			MethodName: "ListApplicationKeys",
			Handler:    _AppService_ListApplicationKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zitadel/app/v2beta/app_service.proto",
}
