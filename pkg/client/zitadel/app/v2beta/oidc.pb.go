// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/app/v2beta/oidc.proto

package app

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OIDCResponseType int32

const (
	OIDCResponseType_OIDC_RESPONSE_TYPE_UNSPECIFIED    OIDCResponseType = 0
	OIDCResponseType_OIDC_RESPONSE_TYPE_CODE           OIDCResponseType = 1
	OIDCResponseType_OIDC_RESPONSE_TYPE_ID_TOKEN       OIDCResponseType = 2
	OIDCResponseType_OIDC_RESPONSE_TYPE_ID_TOKEN_TOKEN OIDCResponseType = 3
)

// Enum value maps for OIDCResponseType.
var (
	OIDCResponseType_name = map[int32]string{
		0: "OIDC_RESPONSE_TYPE_UNSPECIFIED",
		1: "OIDC_RESPONSE_TYPE_CODE",
		2: "OIDC_RESPONSE_TYPE_ID_TOKEN",
		3: "OIDC_RESPONSE_TYPE_ID_TOKEN_TOKEN",
	}
	OIDCResponseType_value = map[string]int32{
		"OIDC_RESPONSE_TYPE_UNSPECIFIED":    0,
		"OIDC_RESPONSE_TYPE_CODE":           1,
		"OIDC_RESPONSE_TYPE_ID_TOKEN":       2,
		"OIDC_RESPONSE_TYPE_ID_TOKEN_TOKEN": 3,
	}
)

func (x OIDCResponseType) Enum() *OIDCResponseType {
	p := new(OIDCResponseType)
	*p = x
	return p
}

func (x OIDCResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OIDCResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_app_v2beta_oidc_proto_enumTypes[0].Descriptor()
}

func (OIDCResponseType) Type() protoreflect.EnumType {
	return &file_zitadel_app_v2beta_oidc_proto_enumTypes[0]
}

func (x OIDCResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OIDCResponseType.Descriptor instead.
func (OIDCResponseType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_oidc_proto_rawDescGZIP(), []int{0}
}

type OIDCGrantType int32

const (
	OIDCGrantType_OIDC_GRANT_TYPE_AUTHORIZATION_CODE OIDCGrantType = 0
	OIDCGrantType_OIDC_GRANT_TYPE_IMPLICIT           OIDCGrantType = 1
	OIDCGrantType_OIDC_GRANT_TYPE_REFRESH_TOKEN      OIDCGrantType = 2
	OIDCGrantType_OIDC_GRANT_TYPE_DEVICE_CODE        OIDCGrantType = 3
	OIDCGrantType_OIDC_GRANT_TYPE_TOKEN_EXCHANGE     OIDCGrantType = 4
)

// Enum value maps for OIDCGrantType.
var (
	OIDCGrantType_name = map[int32]string{
		0: "OIDC_GRANT_TYPE_AUTHORIZATION_CODE",
		1: "OIDC_GRANT_TYPE_IMPLICIT",
		2: "OIDC_GRANT_TYPE_REFRESH_TOKEN",
		3: "OIDC_GRANT_TYPE_DEVICE_CODE",
		4: "OIDC_GRANT_TYPE_TOKEN_EXCHANGE",
	}
	OIDCGrantType_value = map[string]int32{
		"OIDC_GRANT_TYPE_AUTHORIZATION_CODE": 0,
		"OIDC_GRANT_TYPE_IMPLICIT":           1,
		"OIDC_GRANT_TYPE_REFRESH_TOKEN":      2,
		"OIDC_GRANT_TYPE_DEVICE_CODE":        3,
		"OIDC_GRANT_TYPE_TOKEN_EXCHANGE":     4,
	}
)

func (x OIDCGrantType) Enum() *OIDCGrantType {
	p := new(OIDCGrantType)
	*p = x
	return p
}

func (x OIDCGrantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OIDCGrantType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_app_v2beta_oidc_proto_enumTypes[1].Descriptor()
}

func (OIDCGrantType) Type() protoreflect.EnumType {
	return &file_zitadel_app_v2beta_oidc_proto_enumTypes[1]
}

func (x OIDCGrantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OIDCGrantType.Descriptor instead.
func (OIDCGrantType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_oidc_proto_rawDescGZIP(), []int{1}
}

type OIDCAppType int32

const (
	OIDCAppType_OIDC_APP_TYPE_WEB        OIDCAppType = 0
	OIDCAppType_OIDC_APP_TYPE_USER_AGENT OIDCAppType = 1
	OIDCAppType_OIDC_APP_TYPE_NATIVE     OIDCAppType = 2
)

// Enum value maps for OIDCAppType.
var (
	OIDCAppType_name = map[int32]string{
		0: "OIDC_APP_TYPE_WEB",
		1: "OIDC_APP_TYPE_USER_AGENT",
		2: "OIDC_APP_TYPE_NATIVE",
	}
	OIDCAppType_value = map[string]int32{
		"OIDC_APP_TYPE_WEB":        0,
		"OIDC_APP_TYPE_USER_AGENT": 1,
		"OIDC_APP_TYPE_NATIVE":     2,
	}
)

func (x OIDCAppType) Enum() *OIDCAppType {
	p := new(OIDCAppType)
	*p = x
	return p
}

func (x OIDCAppType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OIDCAppType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_app_v2beta_oidc_proto_enumTypes[2].Descriptor()
}

func (OIDCAppType) Type() protoreflect.EnumType {
	return &file_zitadel_app_v2beta_oidc_proto_enumTypes[2]
}

func (x OIDCAppType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OIDCAppType.Descriptor instead.
func (OIDCAppType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_oidc_proto_rawDescGZIP(), []int{2}
}

type OIDCAuthMethodType int32

const (
	OIDCAuthMethodType_OIDC_AUTH_METHOD_TYPE_BASIC           OIDCAuthMethodType = 0
	OIDCAuthMethodType_OIDC_AUTH_METHOD_TYPE_POST            OIDCAuthMethodType = 1
	OIDCAuthMethodType_OIDC_AUTH_METHOD_TYPE_NONE            OIDCAuthMethodType = 2
	OIDCAuthMethodType_OIDC_AUTH_METHOD_TYPE_PRIVATE_KEY_JWT OIDCAuthMethodType = 3
)

// Enum value maps for OIDCAuthMethodType.
var (
	OIDCAuthMethodType_name = map[int32]string{
		0: "OIDC_AUTH_METHOD_TYPE_BASIC",
		1: "OIDC_AUTH_METHOD_TYPE_POST",
		2: "OIDC_AUTH_METHOD_TYPE_NONE",
		3: "OIDC_AUTH_METHOD_TYPE_PRIVATE_KEY_JWT",
	}
	OIDCAuthMethodType_value = map[string]int32{
		"OIDC_AUTH_METHOD_TYPE_BASIC":           0,
		"OIDC_AUTH_METHOD_TYPE_POST":            1,
		"OIDC_AUTH_METHOD_TYPE_NONE":            2,
		"OIDC_AUTH_METHOD_TYPE_PRIVATE_KEY_JWT": 3,
	}
)

func (x OIDCAuthMethodType) Enum() *OIDCAuthMethodType {
	p := new(OIDCAuthMethodType)
	*p = x
	return p
}

func (x OIDCAuthMethodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OIDCAuthMethodType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_app_v2beta_oidc_proto_enumTypes[3].Descriptor()
}

func (OIDCAuthMethodType) Type() protoreflect.EnumType {
	return &file_zitadel_app_v2beta_oidc_proto_enumTypes[3]
}

func (x OIDCAuthMethodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OIDCAuthMethodType.Descriptor instead.
func (OIDCAuthMethodType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_oidc_proto_rawDescGZIP(), []int{3}
}

type OIDCVersion int32

const (
	OIDCVersion_OIDC_VERSION_1_0 OIDCVersion = 0
)

// Enum value maps for OIDCVersion.
var (
	OIDCVersion_name = map[int32]string{
		0: "OIDC_VERSION_1_0",
	}
	OIDCVersion_value = map[string]int32{
		"OIDC_VERSION_1_0": 0,
	}
)

func (x OIDCVersion) Enum() *OIDCVersion {
	p := new(OIDCVersion)
	*p = x
	return p
}

func (x OIDCVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OIDCVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_app_v2beta_oidc_proto_enumTypes[4].Descriptor()
}

func (OIDCVersion) Type() protoreflect.EnumType {
	return &file_zitadel_app_v2beta_oidc_proto_enumTypes[4]
}

func (x OIDCVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OIDCVersion.Descriptor instead.
func (OIDCVersion) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_oidc_proto_rawDescGZIP(), []int{4}
}

type OIDCTokenType int32

const (
	OIDCTokenType_OIDC_TOKEN_TYPE_BEARER OIDCTokenType = 0
	OIDCTokenType_OIDC_TOKEN_TYPE_JWT    OIDCTokenType = 1
)

// Enum value maps for OIDCTokenType.
var (
	OIDCTokenType_name = map[int32]string{
		0: "OIDC_TOKEN_TYPE_BEARER",
		1: "OIDC_TOKEN_TYPE_JWT",
	}
	OIDCTokenType_value = map[string]int32{
		"OIDC_TOKEN_TYPE_BEARER": 0,
		"OIDC_TOKEN_TYPE_JWT":    1,
	}
)

func (x OIDCTokenType) Enum() *OIDCTokenType {
	p := new(OIDCTokenType)
	*p = x
	return p
}

func (x OIDCTokenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OIDCTokenType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_app_v2beta_oidc_proto_enumTypes[5].Descriptor()
}

func (OIDCTokenType) Type() protoreflect.EnumType {
	return &file_zitadel_app_v2beta_oidc_proto_enumTypes[5]
}

func (x OIDCTokenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OIDCTokenType.Descriptor instead.
func (OIDCTokenType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_oidc_proto_rawDescGZIP(), []int{5}
}

type OIDCLocalizedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key              string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	LocalizedMessage string `protobuf:"bytes,2,opt,name=localized_message,json=localizedMessage,proto3" json:"localized_message,omitempty"`
}

func (x *OIDCLocalizedMessage) Reset() {
	*x = OIDCLocalizedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_oidc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OIDCLocalizedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OIDCLocalizedMessage) ProtoMessage() {}

func (x *OIDCLocalizedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_oidc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OIDCLocalizedMessage.ProtoReflect.Descriptor instead.
func (*OIDCLocalizedMessage) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_oidc_proto_rawDescGZIP(), []int{0}
}

func (x *OIDCLocalizedMessage) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *OIDCLocalizedMessage) GetLocalizedMessage() string {
	if x != nil {
		return x.LocalizedMessage
	}
	return ""
}

type OIDCConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedirectUris             []string                `protobuf:"bytes,1,rep,name=redirect_uris,json=redirectUris,proto3" json:"redirect_uris,omitempty"`
	ResponseTypes            []OIDCResponseType      `protobuf:"varint,2,rep,packed,name=response_types,json=responseTypes,proto3,enum=zitadel.app.v2beta.OIDCResponseType" json:"response_types,omitempty"`
	GrantTypes               []OIDCGrantType         `protobuf:"varint,3,rep,packed,name=grant_types,json=grantTypes,proto3,enum=zitadel.app.v2beta.OIDCGrantType" json:"grant_types,omitempty"`
	AppType                  OIDCAppType             `protobuf:"varint,4,opt,name=app_type,json=appType,proto3,enum=zitadel.app.v2beta.OIDCAppType" json:"app_type,omitempty"`
	ClientId                 string                  `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	AuthMethodType           OIDCAuthMethodType      `protobuf:"varint,6,opt,name=auth_method_type,json=authMethodType,proto3,enum=zitadel.app.v2beta.OIDCAuthMethodType" json:"auth_method_type,omitempty"`
	PostLogoutRedirectUris   []string                `protobuf:"bytes,7,rep,name=post_logout_redirect_uris,json=postLogoutRedirectUris,proto3" json:"post_logout_redirect_uris,omitempty"`
	Version                  OIDCVersion             `protobuf:"varint,8,opt,name=version,proto3,enum=zitadel.app.v2beta.OIDCVersion" json:"version,omitempty"`
	NoneCompliant            bool                    `protobuf:"varint,9,opt,name=none_compliant,json=noneCompliant,proto3" json:"none_compliant,omitempty"`
	ComplianceProblems       []*OIDCLocalizedMessage `protobuf:"bytes,10,rep,name=compliance_problems,json=complianceProblems,proto3" json:"compliance_problems,omitempty"`
	DevMode                  bool                    `protobuf:"varint,11,opt,name=dev_mode,json=devMode,proto3" json:"dev_mode,omitempty"`
	AccessTokenType          OIDCTokenType           `protobuf:"varint,12,opt,name=access_token_type,json=accessTokenType,proto3,enum=zitadel.app.v2beta.OIDCTokenType" json:"access_token_type,omitempty"`
	AccessTokenRoleAssertion bool                    `protobuf:"varint,13,opt,name=access_token_role_assertion,json=accessTokenRoleAssertion,proto3" json:"access_token_role_assertion,omitempty"`
	IdTokenRoleAssertion     bool                    `protobuf:"varint,14,opt,name=id_token_role_assertion,json=idTokenRoleAssertion,proto3" json:"id_token_role_assertion,omitempty"`
	IdTokenUserinfoAssertion bool                    `protobuf:"varint,15,opt,name=id_token_userinfo_assertion,json=idTokenUserinfoAssertion,proto3" json:"id_token_userinfo_assertion,omitempty"`
	ClockSkew                *durationpb.Duration    `protobuf:"bytes,16,opt,name=clock_skew,json=clockSkew,proto3" json:"clock_skew,omitempty"`
	AdditionalOrigins        []string                `protobuf:"bytes,17,rep,name=additional_origins,json=additionalOrigins,proto3" json:"additional_origins,omitempty"`
	AllowedOrigins           []string                `protobuf:"bytes,18,rep,name=allowed_origins,json=allowedOrigins,proto3" json:"allowed_origins,omitempty"`
	SkipNativeAppSuccessPage bool                    `protobuf:"varint,19,opt,name=skip_native_app_success_page,json=skipNativeAppSuccessPage,proto3" json:"skip_native_app_success_page,omitempty"`
	BackChannelLogoutUri     string                  `protobuf:"bytes,20,opt,name=back_channel_logout_uri,json=backChannelLogoutUri,proto3" json:"back_channel_logout_uri,omitempty"`
	LoginVersion             *LoginVersion           `protobuf:"bytes,21,opt,name=login_version,json=loginVersion,proto3" json:"login_version,omitempty"`
}

func (x *OIDCConfig) Reset() {
	*x = OIDCConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_app_v2beta_oidc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OIDCConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OIDCConfig) ProtoMessage() {}

func (x *OIDCConfig) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_app_v2beta_oidc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OIDCConfig.ProtoReflect.Descriptor instead.
func (*OIDCConfig) Descriptor() ([]byte, []int) {
	return file_zitadel_app_v2beta_oidc_proto_rawDescGZIP(), []int{1}
}

func (x *OIDCConfig) GetRedirectUris() []string {
	if x != nil {
		return x.RedirectUris
	}
	return nil
}

func (x *OIDCConfig) GetResponseTypes() []OIDCResponseType {
	if x != nil {
		return x.ResponseTypes
	}
	return nil
}

func (x *OIDCConfig) GetGrantTypes() []OIDCGrantType {
	if x != nil {
		return x.GrantTypes
	}
	return nil
}

func (x *OIDCConfig) GetAppType() OIDCAppType {
	if x != nil {
		return x.AppType
	}
	return OIDCAppType_OIDC_APP_TYPE_WEB
}

func (x *OIDCConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OIDCConfig) GetAuthMethodType() OIDCAuthMethodType {
	if x != nil {
		return x.AuthMethodType
	}
	return OIDCAuthMethodType_OIDC_AUTH_METHOD_TYPE_BASIC
}

func (x *OIDCConfig) GetPostLogoutRedirectUris() []string {
	if x != nil {
		return x.PostLogoutRedirectUris
	}
	return nil
}

func (x *OIDCConfig) GetVersion() OIDCVersion {
	if x != nil {
		return x.Version
	}
	return OIDCVersion_OIDC_VERSION_1_0
}

func (x *OIDCConfig) GetNoneCompliant() bool {
	if x != nil {
		return x.NoneCompliant
	}
	return false
}

func (x *OIDCConfig) GetComplianceProblems() []*OIDCLocalizedMessage {
	if x != nil {
		return x.ComplianceProblems
	}
	return nil
}

func (x *OIDCConfig) GetDevMode() bool {
	if x != nil {
		return x.DevMode
	}
	return false
}

func (x *OIDCConfig) GetAccessTokenType() OIDCTokenType {
	if x != nil {
		return x.AccessTokenType
	}
	return OIDCTokenType_OIDC_TOKEN_TYPE_BEARER
}

func (x *OIDCConfig) GetAccessTokenRoleAssertion() bool {
	if x != nil {
		return x.AccessTokenRoleAssertion
	}
	return false
}

func (x *OIDCConfig) GetIdTokenRoleAssertion() bool {
	if x != nil {
		return x.IdTokenRoleAssertion
	}
	return false
}

func (x *OIDCConfig) GetIdTokenUserinfoAssertion() bool {
	if x != nil {
		return x.IdTokenUserinfoAssertion
	}
	return false
}

func (x *OIDCConfig) GetClockSkew() *durationpb.Duration {
	if x != nil {
		return x.ClockSkew
	}
	return nil
}

func (x *OIDCConfig) GetAdditionalOrigins() []string {
	if x != nil {
		return x.AdditionalOrigins
	}
	return nil
}

func (x *OIDCConfig) GetAllowedOrigins() []string {
	if x != nil {
		return x.AllowedOrigins
	}
	return nil
}

func (x *OIDCConfig) GetSkipNativeAppSuccessPage() bool {
	if x != nil {
		return x.SkipNativeAppSuccessPage
	}
	return false
}

func (x *OIDCConfig) GetBackChannelLogoutUri() string {
	if x != nil {
		return x.BackChannelLogoutUri
	}
	return ""
}

func (x *OIDCConfig) GetLoginVersion() *LoginVersion {
	if x != nil {
		return x.LoginVersion
	}
	return nil
}

var File_zitadel_app_v2beta_oidc_proto protoreflect.FileDescriptor

var file_zitadel_app_v2beta_oidc_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2f, 0x6f, 0x69, 0x64, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x1a, 0x1e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x61, 0x70, 0x70,
	0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x55, 0x0a, 0x14, 0x4f, 0x49, 0x44, 0x43, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a,
	0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf6, 0x19, 0x0a, 0x0a, 0x4f,
	0x49, 0x44, 0x43, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xac, 0x01, 0x0a, 0x0d, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x86, 0x01, 0x92, 0x41, 0x82, 0x01, 0x32, 0x52, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x20, 0x55, 0x52, 0x49, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
	0x64, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x20, 0x77, 0x69, 0x6c,
	0x6c, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x4a, 0x2c, 0x5b, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x5d, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x50, 0x92, 0x41, 0x4d, 0x32, 0x4b, 0x44, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x20, 0x61, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x2c, 0x20, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x6a, 0x75, 0x73, 0x74, 0x20,
	0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65,
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x7a, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x31, 0x54, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20,
	0x74, 0x79, 0x70, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x61, 0x69,
	0x6e, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x49, 0x44, 0x43,
	0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72,
	0x61, 0x64, 0x69, 0x67, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x5e, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x1f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x2f, 0x6f, 0x69, 0x64, 0x63,
	0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x4a, 0x1b, 0x22, 0x36, 0x39, 0x36,
	0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x40, 0x5a,
	0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x22, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x8b, 0x01, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x34, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x73, 0x20, 0x68, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x20, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52,
	0x0e, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0xa3, 0x01, 0x0a, 0x19, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x68, 0x92, 0x41, 0x65, 0x32, 0x3c, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45,
	0x4c, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x20, 0x61, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20,
	0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x4a, 0x25, 0x5b, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x22, 0x5d, 0x52, 0x16, 0x70,
	0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x55, 0x72, 0x69, 0x73, 0x12, 0x68, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x49, 0x44, 0x43,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x74, 0x68,
	0x65, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x75,
	0x73, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x8a, 0x01, 0x0a, 0x0e, 0x6e, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x63, 0x92, 0x41, 0x60, 0x32, 0x5e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x69, 0x73, 0x20, 0x4f,
	0x49, 0x44, 0x43, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x2e, 0x20, 0x41,
	0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44,
	0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x0d, 0x6e,
	0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x85, 0x01, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x4f, 0x49, 0x44, 0x43, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x79,
	0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14, 0x75, 0x73, 0x65,
	0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x64, 0x65, 0x76, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x49, 0x44, 0x43,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x52, 0x0f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0xaf, 0x01, 0x0a, 0x1b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x70, 0x92, 0x41, 0x6d, 0x32, 0x6b, 0x61, 0x64, 0x64, 0x73,
	0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x28, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69,
	0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x3d, 0x20, 0x4a, 0x57, 0x54, 0x29, 0x20, 0x65,
	0x76, 0x65, 0x6e, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x61, 0x72, 0x65, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79,
	0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x18, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x8d, 0x01, 0x0a, 0x17, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x56, 0x92, 0x41, 0x53, 0x32, 0x51, 0x61, 0x64, 0x64, 0x73, 0x20, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20,
	0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x14, 0x69, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xe5, 0x01, 0x0a, 0x1b, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0xa5, 0x01, 0x92, 0x41, 0xa1, 0x01, 0x32, 0x9e,
	0x01, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2c, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2c, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x65, 0x76,
	0x65, 0x6e, 0x20, 0x69, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x2e,
	0x20, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4f, 0x49, 0x44,
	0x43, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x18, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xca, 0x01, 0x0a, 0x0a, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6b, 0x65, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x8f, 0x01, 0x92, 0x41, 0x8b, 0x01,
	0x32, 0x88, 0x01, 0x55, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x6e, 0x73, 0x61, 0x74, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2e, 0x20, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x22, 0x65, 0x78, 0x70, 0x22, 0x20, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x22, 0x69, 0x61, 0x74, 0x22, 0x2c, 0x20, 0x22,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x22,
	0x6e, 0x62, 0x66, 0x22, 0x20, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x52, 0x09, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x6b, 0x65, 0x77, 0x12, 0xb4, 0x01, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x84, 0x01, 0x92, 0x41, 0x80, 0x01, 0x32, 0x50, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x20, 0x28,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x29, 0x20, 0x66, 0x72,
	0x6f, 0x6d, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x4a, 0x2c, 0x5b, 0x22,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x5d, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x8e, 0x01,
	0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x42, 0x65, 0x92, 0x41, 0x62, 0x32, 0x32, 0x61, 0x6c,
	0x6c, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x41, 0x50, 0x49, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64,
	0x4a, 0x2c, 0x5b, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x5d, 0x52, 0x0e,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0xa2,
	0x01, 0x0a, 0x1c, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x42, 0x62, 0x92, 0x41, 0x5f, 0x32, 0x5d, 0x53, 0x6b, 0x69, 0x70,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x20,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x20, 0x61, 0x70, 0x70, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x18, 0x73, 0x6b, 0x69, 0x70, 0x4e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x9e, 0x02, 0x0a, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0xe6, 0x01, 0x92, 0x41, 0xe2, 0x01, 0x32, 0xb5, 0x01, 0x5a,
	0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x55, 0x52, 0x49, 0x20, 0x74, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4f, 0x49, 0x44,
	0x43, 0x20, 0x42, 0x61, 0x63, 0x6b, 0x2d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x4c,
	0x6f, 0x67, 0x6f, 0x75, 0x74, 0x20, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2d, 0x62,
	0x61, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x31, 0x5f, 0x30, 0x2e, 0x68,
	0x74, 0x6d, 0x6c, 0x29, 0x4a, 0x28, 0x5b, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x62, 0x61, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x5d, 0x52, 0x14,
	0x62, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x55, 0x72, 0x69, 0x12, 0xdc, 0x01, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x94,
	0x01, 0x92, 0x41, 0x90, 0x01, 0x32, 0x8d, 0x01, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x20, 0x55, 0x49, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x75,
	0x6e, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20,
	0x55, 0x49, 0x20, 0x69, 0x73, 0x20, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x20, 0x62, 0x79, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2a, 0x9b, 0x01, 0x0a, 0x10, 0x4f, 0x49, 0x44, 0x43, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x49, 0x44, 0x43,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x4f, 0x49, 0x44, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x49, 0x44,
	0x43, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x49,
	0x44, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10,
	0x03, 0x2a, 0xbd, 0x01, 0x0a, 0x0d, 0x4f, 0x49, 0x44, 0x43, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x49, 0x44, 0x43, 0x5f, 0x47, 0x52, 0x41, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4f,
	0x49, 0x44, 0x43, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x49, 0x44,
	0x43, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46,
	0x52, 0x45, 0x53, 0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b,
	0x4f, 0x49, 0x44, 0x43, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x12, 0x22, 0x0a,
	0x1e, 0x4f, 0x49, 0x44, 0x43, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x04, 0x2a, 0x5c, 0x0a, 0x0b, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x15, 0x0a, 0x11, 0x4f, 0x49, 0x44, 0x43, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x45, 0x42, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x49, 0x44, 0x43, 0x5f,
	0x41, 0x50, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x49, 0x44, 0x43, 0x5f, 0x41, 0x50,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a,
	0xa0, 0x01, 0x0a, 0x12, 0x4f, 0x49, 0x44, 0x43, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x49, 0x44, 0x43, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x49, 0x44, 0x43, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x49, 0x44, 0x43, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x49, 0x44, 0x43, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4a, 0x57, 0x54,
	0x10, 0x03, 0x2a, 0x23, 0x0a, 0x0b, 0x4f, 0x49, 0x44, 0x43, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x49, 0x44, 0x43, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x00, 0x2a, 0x44, 0x0a, 0x0d, 0x4f, 0x49, 0x44, 0x43, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x49, 0x44, 0x43,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x41, 0x52,
	0x45, 0x52, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x49, 0x44, 0x43, 0x5f, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x57, 0x54, 0x10, 0x01, 0x42, 0x34, 0x5a,
	0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x3b,
	0x61, 0x70, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_app_v2beta_oidc_proto_rawDescOnce sync.Once
	file_zitadel_app_v2beta_oidc_proto_rawDescData = file_zitadel_app_v2beta_oidc_proto_rawDesc
)

func file_zitadel_app_v2beta_oidc_proto_rawDescGZIP() []byte {
	file_zitadel_app_v2beta_oidc_proto_rawDescOnce.Do(func() {
		file_zitadel_app_v2beta_oidc_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_app_v2beta_oidc_proto_rawDescData)
	})
	return file_zitadel_app_v2beta_oidc_proto_rawDescData
}

var file_zitadel_app_v2beta_oidc_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_zitadel_app_v2beta_oidc_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_zitadel_app_v2beta_oidc_proto_goTypes = []interface{}{
	(OIDCResponseType)(0),        // 0: zitadel.app.v2beta.OIDCResponseType
	(OIDCGrantType)(0),           // 1: zitadel.app.v2beta.OIDCGrantType
	(OIDCAppType)(0),             // 2: zitadel.app.v2beta.OIDCAppType
	(OIDCAuthMethodType)(0),      // 3: zitadel.app.v2beta.OIDCAuthMethodType
	(OIDCVersion)(0),             // 4: zitadel.app.v2beta.OIDCVersion
	(OIDCTokenType)(0),           // 5: zitadel.app.v2beta.OIDCTokenType
	(*OIDCLocalizedMessage)(nil), // 6: zitadel.app.v2beta.OIDCLocalizedMessage
	(*OIDCConfig)(nil),           // 7: zitadel.app.v2beta.OIDCConfig
	(*durationpb.Duration)(nil),  // 8: google.protobuf.Duration
	(*LoginVersion)(nil),         // 9: zitadel.app.v2beta.LoginVersion
}
var file_zitadel_app_v2beta_oidc_proto_depIdxs = []int32{
	0, // 0: zitadel.app.v2beta.OIDCConfig.response_types:type_name -> zitadel.app.v2beta.OIDCResponseType
	1, // 1: zitadel.app.v2beta.OIDCConfig.grant_types:type_name -> zitadel.app.v2beta.OIDCGrantType
	2, // 2: zitadel.app.v2beta.OIDCConfig.app_type:type_name -> zitadel.app.v2beta.OIDCAppType
	3, // 3: zitadel.app.v2beta.OIDCConfig.auth_method_type:type_name -> zitadel.app.v2beta.OIDCAuthMethodType
	4, // 4: zitadel.app.v2beta.OIDCConfig.version:type_name -> zitadel.app.v2beta.OIDCVersion
	6, // 5: zitadel.app.v2beta.OIDCConfig.compliance_problems:type_name -> zitadel.app.v2beta.OIDCLocalizedMessage
	5, // 6: zitadel.app.v2beta.OIDCConfig.access_token_type:type_name -> zitadel.app.v2beta.OIDCTokenType
	8, // 7: zitadel.app.v2beta.OIDCConfig.clock_skew:type_name -> google.protobuf.Duration
	9, // 8: zitadel.app.v2beta.OIDCConfig.login_version:type_name -> zitadel.app.v2beta.LoginVersion
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_zitadel_app_v2beta_oidc_proto_init() }
func file_zitadel_app_v2beta_oidc_proto_init() {
	if File_zitadel_app_v2beta_oidc_proto != nil {
		return
	}
	file_zitadel_app_v2beta_login_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zitadel_app_v2beta_oidc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OIDCLocalizedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_app_v2beta_oidc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OIDCConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_app_v2beta_oidc_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_app_v2beta_oidc_proto_goTypes,
		DependencyIndexes: file_zitadel_app_v2beta_oidc_proto_depIdxs,
		EnumInfos:         file_zitadel_app_v2beta_oidc_proto_enumTypes,
		MessageInfos:      file_zitadel_app_v2beta_oidc_proto_msgTypes,
	}.Build()
	File_zitadel_app_v2beta_oidc_proto = out.File
	file_zitadel_app_v2beta_oidc_proto_rawDesc = nil
	file_zitadel_app_v2beta_oidc_proto_goTypes = nil
	file_zitadel_app_v2beta_oidc_proto_depIdxs = nil
}
