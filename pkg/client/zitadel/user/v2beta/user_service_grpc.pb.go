// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: zitadel/user/v2beta/user_service.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_AddHumanUser_FullMethodName                   = "/zitadel.user.v2beta.UserService/AddHumanUser"
	UserService_GetUserByID_FullMethodName                    = "/zitadel.user.v2beta.UserService/GetUserByID"
	UserService_ListUsers_FullMethodName                      = "/zitadel.user.v2beta.UserService/ListUsers"
	UserService_SetEmail_FullMethodName                       = "/zitadel.user.v2beta.UserService/SetEmail"
	UserService_ResendEmailCode_FullMethodName                = "/zitadel.user.v2beta.UserService/ResendEmailCode"
	UserService_VerifyEmail_FullMethodName                    = "/zitadel.user.v2beta.UserService/VerifyEmail"
	UserService_SetPhone_FullMethodName                       = "/zitadel.user.v2beta.UserService/SetPhone"
	UserService_RemovePhone_FullMethodName                    = "/zitadel.user.v2beta.UserService/RemovePhone"
	UserService_ResendPhoneCode_FullMethodName                = "/zitadel.user.v2beta.UserService/ResendPhoneCode"
	UserService_VerifyPhone_FullMethodName                    = "/zitadel.user.v2beta.UserService/VerifyPhone"
	UserService_UpdateHumanUser_FullMethodName                = "/zitadel.user.v2beta.UserService/UpdateHumanUser"
	UserService_DeactivateUser_FullMethodName                 = "/zitadel.user.v2beta.UserService/DeactivateUser"
	UserService_ReactivateUser_FullMethodName                 = "/zitadel.user.v2beta.UserService/ReactivateUser"
	UserService_LockUser_FullMethodName                       = "/zitadel.user.v2beta.UserService/LockUser"
	UserService_UnlockUser_FullMethodName                     = "/zitadel.user.v2beta.UserService/UnlockUser"
	UserService_DeleteUser_FullMethodName                     = "/zitadel.user.v2beta.UserService/DeleteUser"
	UserService_RegisterPasskey_FullMethodName                = "/zitadel.user.v2beta.UserService/RegisterPasskey"
	UserService_VerifyPasskeyRegistration_FullMethodName      = "/zitadel.user.v2beta.UserService/VerifyPasskeyRegistration"
	UserService_CreatePasskeyRegistrationLink_FullMethodName  = "/zitadel.user.v2beta.UserService/CreatePasskeyRegistrationLink"
	UserService_RegisterU2F_FullMethodName                    = "/zitadel.user.v2beta.UserService/RegisterU2F"
	UserService_VerifyU2FRegistration_FullMethodName          = "/zitadel.user.v2beta.UserService/VerifyU2FRegistration"
	UserService_RegisterTOTP_FullMethodName                   = "/zitadel.user.v2beta.UserService/RegisterTOTP"
	UserService_VerifyTOTPRegistration_FullMethodName         = "/zitadel.user.v2beta.UserService/VerifyTOTPRegistration"
	UserService_RemoveTOTP_FullMethodName                     = "/zitadel.user.v2beta.UserService/RemoveTOTP"
	UserService_AddOTPSMS_FullMethodName                      = "/zitadel.user.v2beta.UserService/AddOTPSMS"
	UserService_RemoveOTPSMS_FullMethodName                   = "/zitadel.user.v2beta.UserService/RemoveOTPSMS"
	UserService_AddOTPEmail_FullMethodName                    = "/zitadel.user.v2beta.UserService/AddOTPEmail"
	UserService_RemoveOTPEmail_FullMethodName                 = "/zitadel.user.v2beta.UserService/RemoveOTPEmail"
	UserService_StartIdentityProviderIntent_FullMethodName    = "/zitadel.user.v2beta.UserService/StartIdentityProviderIntent"
	UserService_RetrieveIdentityProviderIntent_FullMethodName = "/zitadel.user.v2beta.UserService/RetrieveIdentityProviderIntent"
	UserService_AddIDPLink_FullMethodName                     = "/zitadel.user.v2beta.UserService/AddIDPLink"
	UserService_PasswordReset_FullMethodName                  = "/zitadel.user.v2beta.UserService/PasswordReset"
	UserService_SetPassword_FullMethodName                    = "/zitadel.user.v2beta.UserService/SetPassword"
	UserService_ListAuthenticationMethodTypes_FullMethodName  = "/zitadel.user.v2beta.UserService/ListAuthenticationMethodTypes"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// Create a new human user
	//
	// Create/import a new user with the type human. The newly created user will get a verification email if either the email address is not marked as verified and you did not request the verification to be returned.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA)
	AddHumanUser(ctx context.Context, in *AddHumanUserRequest, opts ...grpc.CallOption) (*AddHumanUserResponse, error)
	// User by ID
	//
	// Returns the full user object (human or machine) including the profile, email, etc.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error)
	// Search Users
	//
	// Search for users. By default, we will return users of your organization. Make sure to include a limit and sorting for pagination.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// Change the user email
	//
	// Change the email address of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by email.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	SetEmail(ctx context.Context, in *SetEmailRequest, opts ...grpc.CallOption) (*SetEmailResponse, error)
	// Resend code to verify user email
	//
	// # Resend code to verify user email
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	ResendEmailCode(ctx context.Context, in *ResendEmailCodeRequest, opts ...grpc.CallOption) (*ResendEmailCodeResponse, error)
	// Verify the email
	//
	// Verify the email with the generated code.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	// Set the user phone
	//
	// Set the phone number of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by sms.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	SetPhone(ctx context.Context, in *SetPhoneRequest, opts ...grpc.CallOption) (*SetPhoneResponse, error)
	// Remove the user phone
	//
	// # Remove the user phone
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	RemovePhone(ctx context.Context, in *RemovePhoneRequest, opts ...grpc.CallOption) (*RemovePhoneResponse, error)
	// Resend code to verify user phone
	//
	// # Resend code to verify user phone
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	ResendPhoneCode(ctx context.Context, in *ResendPhoneCodeRequest, opts ...grpc.CallOption) (*ResendPhoneCodeResponse, error)
	// Verify the phone
	//
	// Verify the phone with the generated code.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	VerifyPhone(ctx context.Context, in *VerifyPhoneRequest, opts ...grpc.CallOption) (*VerifyPhoneResponse, error)
	// Update User
	//
	// Update all information from a user.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	UpdateHumanUser(ctx context.Context, in *UpdateHumanUserRequest, opts ...grpc.CallOption) (*UpdateHumanUserResponse, error)
	// Deactivate user
	//
	// The state of the user will be changed to 'deactivated'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'deactivated'. Use deactivate user when the user should not be able to use the account anymore, but you still need access to the user data.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	DeactivateUser(ctx context.Context, in *DeactivateUserRequest, opts ...grpc.CallOption) (*DeactivateUserResponse, error)
	// Reactivate user
	//
	// Reactivate a user with the state 'deactivated'. The user will be able to log in again afterward. The endpoint returns an error if the user is not in the state 'deactivated'.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	ReactivateUser(ctx context.Context, in *ReactivateUserRequest, opts ...grpc.CallOption) (*ReactivateUserResponse, error)
	// Lock user
	//
	// The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.).
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	LockUser(ctx context.Context, in *LockUserRequest, opts ...grpc.CallOption) (*LockUserResponse, error)
	// Unlock user
	//
	// The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.).
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	UnlockUser(ctx context.Context, in *UnlockUserRequest, opts ...grpc.CallOption) (*UnlockUserResponse, error)
	// Delete user
	//
	// The state of the user will be changed to 'deleted'. The user will not be able to log in anymore. Endpoints requesting this user will return an error 'User not found.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// Start the registration of passkey for a user
	//
	// Start the registration of a passkey for a user, as a response the public key credential creation options are returned, which are used to verify the passkey.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	RegisterPasskey(ctx context.Context, in *RegisterPasskeyRequest, opts ...grpc.CallOption) (*RegisterPasskeyResponse, error)
	// Verify a passkey for a user
	//
	// Verify the passkey registration with the public key credential.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	VerifyPasskeyRegistration(ctx context.Context, in *VerifyPasskeyRegistrationRequest, opts ...grpc.CallOption) (*VerifyPasskeyRegistrationResponse, error)
	// Create a passkey registration link for a user
	//
	// Create a passkey registration link which includes a code and either return it or send it to the user.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	CreatePasskeyRegistrationLink(ctx context.Context, in *CreatePasskeyRegistrationLinkRequest, opts ...grpc.CallOption) (*CreatePasskeyRegistrationLinkResponse, error)
	// Start the registration of a u2f token for a user
	//
	// Start the registration of a u2f token for a user, as a response the public key credential creation options are returned, which are used to verify the u2f token.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	RegisterU2F(ctx context.Context, in *RegisterU2FRequest, opts ...grpc.CallOption) (*RegisterU2FResponse, error)
	// Verify a u2f token for a user
	//
	// Verify the u2f token registration with the public key credential.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	VerifyU2FRegistration(ctx context.Context, in *VerifyU2FRegistrationRequest, opts ...grpc.CallOption) (*VerifyU2FRegistrationResponse, error)
	// Start the registration of a TOTP generator for a user
	//
	// Start the registration of a TOTP generator for a user, as a response a secret returned, which is used to initialize a TOTP app or device.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	RegisterTOTP(ctx context.Context, in *RegisterTOTPRequest, opts ...grpc.CallOption) (*RegisterTOTPResponse, error)
	// Verify a TOTP generator for a user
	//
	// Verify the TOTP registration with a generated code.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	VerifyTOTPRegistration(ctx context.Context, in *VerifyTOTPRegistrationRequest, opts ...grpc.CallOption) (*VerifyTOTPRegistrationResponse, error)
	// Remove TOTP generator from a user
	//
	// Remove the configured TOTP generator of a user. As only one TOTP generator per user is allowed, the user will not have TOTP as a second factor afterward.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	RemoveTOTP(ctx context.Context, in *RemoveTOTPRequest, opts ...grpc.CallOption) (*RemoveTOTPResponse, error)
	// Add OTP SMS for a user
	//
	// Add a new One-Time Password (OTP) SMS factor to the authenticated user. OTP SMS will enable the user to verify a OTP with the latest verified phone number. The phone number has to be verified to add the second factor.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	AddOTPSMS(ctx context.Context, in *AddOTPSMSRequest, opts ...grpc.CallOption) (*AddOTPSMSResponse, error)
	// Remove One-Time Password (OTP) SMS from a user
	//
	// Remove the configured One-Time Password (OTP) SMS factor of a user. As only one OTP SMS per user is allowed, the user will not have OTP SMS as a second factor afterward.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	RemoveOTPSMS(ctx context.Context, in *RemoveOTPSMSRequest, opts ...grpc.CallOption) (*RemoveOTPSMSResponse, error)
	// Add OTP Email for a user
	//
	// Add a new One-Time Password (OTP) Email factor to the authenticated user. OTP Email will enable the user to verify a OTP with the latest verified email. The email has to be verified to add the second factor.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	AddOTPEmail(ctx context.Context, in *AddOTPEmailRequest, opts ...grpc.CallOption) (*AddOTPEmailResponse, error)
	// Remove One-Time Password (OTP) Email from a user
	//
	// Remove the configured One-Time Password (OTP) Email factor of a user. As only one OTP Email per user is allowed, the user will not have OTP Email as a second factor afterward.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	RemoveOTPEmail(ctx context.Context, in *RemoveOTPEmailRequest, opts ...grpc.CallOption) (*RemoveOTPEmailResponse, error)
	// Start flow with an identity provider
	//
	// Start a flow with an identity provider, for external login, registration or linking.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	StartIdentityProviderIntent(ctx context.Context, in *StartIdentityProviderIntentRequest, opts ...grpc.CallOption) (*StartIdentityProviderIntentResponse, error)
	// Retrieve the information returned by the identity provider
	//
	// Retrieve the information returned by the identity provider for registration or updating an existing user with new information.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	RetrieveIdentityProviderIntent(ctx context.Context, in *RetrieveIdentityProviderIntentRequest, opts ...grpc.CallOption) (*RetrieveIdentityProviderIntentResponse, error)
	// Add link to an identity provider to an user
	//
	// Add link to an identity provider to an user.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	AddIDPLink(ctx context.Context, in *AddIDPLinkRequest, opts ...grpc.CallOption) (*AddIDPLinkResponse, error)
	// Request a code to reset a password
	//
	// Request a code to reset a password.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	PasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...grpc.CallOption) (*PasswordResetResponse, error)
	// Change password
	//
	// Change the password of a user with either a verification code or the current password.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*SetPasswordResponse, error)
	// List all possible authentication methods of a user
	//
	// List all possible authentication methods of a user like password, passwordless, (T)OTP and more.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	ListAuthenticationMethodTypes(ctx context.Context, in *ListAuthenticationMethodTypesRequest, opts ...grpc.CallOption) (*ListAuthenticationMethodTypesResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) AddHumanUser(ctx context.Context, in *AddHumanUserRequest, opts ...grpc.CallOption) (*AddHumanUserResponse, error) {
	out := new(AddHumanUserResponse)
	err := c.cc.Invoke(ctx, UserService_AddHumanUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error) {
	out := new(GetUserByIDResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, UserService_ListUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetEmail(ctx context.Context, in *SetEmailRequest, opts ...grpc.CallOption) (*SetEmailResponse, error) {
	out := new(SetEmailResponse)
	err := c.cc.Invoke(ctx, UserService_SetEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResendEmailCode(ctx context.Context, in *ResendEmailCodeRequest, opts ...grpc.CallOption) (*ResendEmailCodeResponse, error) {
	out := new(ResendEmailCodeResponse)
	err := c.cc.Invoke(ctx, UserService_ResendEmailCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, UserService_VerifyEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetPhone(ctx context.Context, in *SetPhoneRequest, opts ...grpc.CallOption) (*SetPhoneResponse, error) {
	out := new(SetPhoneResponse)
	err := c.cc.Invoke(ctx, UserService_SetPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemovePhone(ctx context.Context, in *RemovePhoneRequest, opts ...grpc.CallOption) (*RemovePhoneResponse, error) {
	out := new(RemovePhoneResponse)
	err := c.cc.Invoke(ctx, UserService_RemovePhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResendPhoneCode(ctx context.Context, in *ResendPhoneCodeRequest, opts ...grpc.CallOption) (*ResendPhoneCodeResponse, error) {
	out := new(ResendPhoneCodeResponse)
	err := c.cc.Invoke(ctx, UserService_ResendPhoneCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyPhone(ctx context.Context, in *VerifyPhoneRequest, opts ...grpc.CallOption) (*VerifyPhoneResponse, error) {
	out := new(VerifyPhoneResponse)
	err := c.cc.Invoke(ctx, UserService_VerifyPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateHumanUser(ctx context.Context, in *UpdateHumanUserRequest, opts ...grpc.CallOption) (*UpdateHumanUserResponse, error) {
	out := new(UpdateHumanUserResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateHumanUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeactivateUser(ctx context.Context, in *DeactivateUserRequest, opts ...grpc.CallOption) (*DeactivateUserResponse, error) {
	out := new(DeactivateUserResponse)
	err := c.cc.Invoke(ctx, UserService_DeactivateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ReactivateUser(ctx context.Context, in *ReactivateUserRequest, opts ...grpc.CallOption) (*ReactivateUserResponse, error) {
	out := new(ReactivateUserResponse)
	err := c.cc.Invoke(ctx, UserService_ReactivateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LockUser(ctx context.Context, in *LockUserRequest, opts ...grpc.CallOption) (*LockUserResponse, error) {
	out := new(LockUserResponse)
	err := c.cc.Invoke(ctx, UserService_LockUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UnlockUser(ctx context.Context, in *UnlockUserRequest, opts ...grpc.CallOption) (*UnlockUserResponse, error) {
	out := new(UnlockUserResponse)
	err := c.cc.Invoke(ctx, UserService_UnlockUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RegisterPasskey(ctx context.Context, in *RegisterPasskeyRequest, opts ...grpc.CallOption) (*RegisterPasskeyResponse, error) {
	out := new(RegisterPasskeyResponse)
	err := c.cc.Invoke(ctx, UserService_RegisterPasskey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyPasskeyRegistration(ctx context.Context, in *VerifyPasskeyRegistrationRequest, opts ...grpc.CallOption) (*VerifyPasskeyRegistrationResponse, error) {
	out := new(VerifyPasskeyRegistrationResponse)
	err := c.cc.Invoke(ctx, UserService_VerifyPasskeyRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreatePasskeyRegistrationLink(ctx context.Context, in *CreatePasskeyRegistrationLinkRequest, opts ...grpc.CallOption) (*CreatePasskeyRegistrationLinkResponse, error) {
	out := new(CreatePasskeyRegistrationLinkResponse)
	err := c.cc.Invoke(ctx, UserService_CreatePasskeyRegistrationLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RegisterU2F(ctx context.Context, in *RegisterU2FRequest, opts ...grpc.CallOption) (*RegisterU2FResponse, error) {
	out := new(RegisterU2FResponse)
	err := c.cc.Invoke(ctx, UserService_RegisterU2F_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyU2FRegistration(ctx context.Context, in *VerifyU2FRegistrationRequest, opts ...grpc.CallOption) (*VerifyU2FRegistrationResponse, error) {
	out := new(VerifyU2FRegistrationResponse)
	err := c.cc.Invoke(ctx, UserService_VerifyU2FRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RegisterTOTP(ctx context.Context, in *RegisterTOTPRequest, opts ...grpc.CallOption) (*RegisterTOTPResponse, error) {
	out := new(RegisterTOTPResponse)
	err := c.cc.Invoke(ctx, UserService_RegisterTOTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyTOTPRegistration(ctx context.Context, in *VerifyTOTPRegistrationRequest, opts ...grpc.CallOption) (*VerifyTOTPRegistrationResponse, error) {
	out := new(VerifyTOTPRegistrationResponse)
	err := c.cc.Invoke(ctx, UserService_VerifyTOTPRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveTOTP(ctx context.Context, in *RemoveTOTPRequest, opts ...grpc.CallOption) (*RemoveTOTPResponse, error) {
	out := new(RemoveTOTPResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveTOTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddOTPSMS(ctx context.Context, in *AddOTPSMSRequest, opts ...grpc.CallOption) (*AddOTPSMSResponse, error) {
	out := new(AddOTPSMSResponse)
	err := c.cc.Invoke(ctx, UserService_AddOTPSMS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveOTPSMS(ctx context.Context, in *RemoveOTPSMSRequest, opts ...grpc.CallOption) (*RemoveOTPSMSResponse, error) {
	out := new(RemoveOTPSMSResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveOTPSMS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddOTPEmail(ctx context.Context, in *AddOTPEmailRequest, opts ...grpc.CallOption) (*AddOTPEmailResponse, error) {
	out := new(AddOTPEmailResponse)
	err := c.cc.Invoke(ctx, UserService_AddOTPEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveOTPEmail(ctx context.Context, in *RemoveOTPEmailRequest, opts ...grpc.CallOption) (*RemoveOTPEmailResponse, error) {
	out := new(RemoveOTPEmailResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveOTPEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) StartIdentityProviderIntent(ctx context.Context, in *StartIdentityProviderIntentRequest, opts ...grpc.CallOption) (*StartIdentityProviderIntentResponse, error) {
	out := new(StartIdentityProviderIntentResponse)
	err := c.cc.Invoke(ctx, UserService_StartIdentityProviderIntent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RetrieveIdentityProviderIntent(ctx context.Context, in *RetrieveIdentityProviderIntentRequest, opts ...grpc.CallOption) (*RetrieveIdentityProviderIntentResponse, error) {
	out := new(RetrieveIdentityProviderIntentResponse)
	err := c.cc.Invoke(ctx, UserService_RetrieveIdentityProviderIntent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddIDPLink(ctx context.Context, in *AddIDPLinkRequest, opts ...grpc.CallOption) (*AddIDPLinkResponse, error) {
	out := new(AddIDPLinkResponse)
	err := c.cc.Invoke(ctx, UserService_AddIDPLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) PasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...grpc.CallOption) (*PasswordResetResponse, error) {
	out := new(PasswordResetResponse)
	err := c.cc.Invoke(ctx, UserService_PasswordReset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*SetPasswordResponse, error) {
	out := new(SetPasswordResponse)
	err := c.cc.Invoke(ctx, UserService_SetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListAuthenticationMethodTypes(ctx context.Context, in *ListAuthenticationMethodTypesRequest, opts ...grpc.CallOption) (*ListAuthenticationMethodTypesResponse, error) {
	out := new(ListAuthenticationMethodTypesResponse)
	err := c.cc.Invoke(ctx, UserService_ListAuthenticationMethodTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// Create a new human user
	//
	// Create/import a new user with the type human. The newly created user will get a verification email if either the email address is not marked as verified and you did not request the verification to be returned.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA)
	AddHumanUser(context.Context, *AddHumanUserRequest) (*AddHumanUserResponse, error)
	// User by ID
	//
	// Returns the full user object (human or machine) including the profile, email, etc.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error)
	// Search Users
	//
	// Search for users. By default, we will return users of your organization. Make sure to include a limit and sorting for pagination.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// Change the user email
	//
	// Change the email address of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by email.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	SetEmail(context.Context, *SetEmailRequest) (*SetEmailResponse, error)
	// Resend code to verify user email
	//
	// # Resend code to verify user email
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	ResendEmailCode(context.Context, *ResendEmailCodeRequest) (*ResendEmailCodeResponse, error)
	// Verify the email
	//
	// Verify the email with the generated code.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	// Set the user phone
	//
	// Set the phone number of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by sms.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	SetPhone(context.Context, *SetPhoneRequest) (*SetPhoneResponse, error)
	// Remove the user phone
	//
	// # Remove the user phone
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	RemovePhone(context.Context, *RemovePhoneRequest) (*RemovePhoneResponse, error)
	// Resend code to verify user phone
	//
	// # Resend code to verify user phone
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	ResendPhoneCode(context.Context, *ResendPhoneCodeRequest) (*ResendPhoneCodeResponse, error)
	// Verify the phone
	//
	// Verify the phone with the generated code.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	VerifyPhone(context.Context, *VerifyPhoneRequest) (*VerifyPhoneResponse, error)
	// Update User
	//
	// Update all information from a user.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	UpdateHumanUser(context.Context, *UpdateHumanUserRequest) (*UpdateHumanUserResponse, error)
	// Deactivate user
	//
	// The state of the user will be changed to 'deactivated'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'deactivated'. Use deactivate user when the user should not be able to use the account anymore, but you still need access to the user data.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	DeactivateUser(context.Context, *DeactivateUserRequest) (*DeactivateUserResponse, error)
	// Reactivate user
	//
	// Reactivate a user with the state 'deactivated'. The user will be able to log in again afterward. The endpoint returns an error if the user is not in the state 'deactivated'.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	ReactivateUser(context.Context, *ReactivateUserRequest) (*ReactivateUserResponse, error)
	// Lock user
	//
	// The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.).
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	LockUser(context.Context, *LockUserRequest) (*LockUserResponse, error)
	// Unlock user
	//
	// The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.).
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	UnlockUser(context.Context, *UnlockUserRequest) (*UnlockUserResponse, error)
	// Delete user
	//
	// The state of the user will be changed to 'deleted'. The user will not be able to log in anymore. Endpoints requesting this user will return an error 'User not found.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// Start the registration of passkey for a user
	//
	// Start the registration of a passkey for a user, as a response the public key credential creation options are returned, which are used to verify the passkey.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	RegisterPasskey(context.Context, *RegisterPasskeyRequest) (*RegisterPasskeyResponse, error)
	// Verify a passkey for a user
	//
	// Verify the passkey registration with the public key credential.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	VerifyPasskeyRegistration(context.Context, *VerifyPasskeyRegistrationRequest) (*VerifyPasskeyRegistrationResponse, error)
	// Create a passkey registration link for a user
	//
	// Create a passkey registration link which includes a code and either return it or send it to the user.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	CreatePasskeyRegistrationLink(context.Context, *CreatePasskeyRegistrationLinkRequest) (*CreatePasskeyRegistrationLinkResponse, error)
	// Start the registration of a u2f token for a user
	//
	// Start the registration of a u2f token for a user, as a response the public key credential creation options are returned, which are used to verify the u2f token.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	RegisterU2F(context.Context, *RegisterU2FRequest) (*RegisterU2FResponse, error)
	// Verify a u2f token for a user
	//
	// Verify the u2f token registration with the public key credential.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	VerifyU2FRegistration(context.Context, *VerifyU2FRegistrationRequest) (*VerifyU2FRegistrationResponse, error)
	// Start the registration of a TOTP generator for a user
	//
	// Start the registration of a TOTP generator for a user, as a response a secret returned, which is used to initialize a TOTP app or device.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	RegisterTOTP(context.Context, *RegisterTOTPRequest) (*RegisterTOTPResponse, error)
	// Verify a TOTP generator for a user
	//
	// Verify the TOTP registration with a generated code.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	VerifyTOTPRegistration(context.Context, *VerifyTOTPRegistrationRequest) (*VerifyTOTPRegistrationResponse, error)
	// Remove TOTP generator from a user
	//
	// Remove the configured TOTP generator of a user. As only one TOTP generator per user is allowed, the user will not have TOTP as a second factor afterward.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	RemoveTOTP(context.Context, *RemoveTOTPRequest) (*RemoveTOTPResponse, error)
	// Add OTP SMS for a user
	//
	// Add a new One-Time Password (OTP) SMS factor to the authenticated user. OTP SMS will enable the user to verify a OTP with the latest verified phone number. The phone number has to be verified to add the second factor.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	AddOTPSMS(context.Context, *AddOTPSMSRequest) (*AddOTPSMSResponse, error)
	// Remove One-Time Password (OTP) SMS from a user
	//
	// Remove the configured One-Time Password (OTP) SMS factor of a user. As only one OTP SMS per user is allowed, the user will not have OTP SMS as a second factor afterward.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	RemoveOTPSMS(context.Context, *RemoveOTPSMSRequest) (*RemoveOTPSMSResponse, error)
	// Add OTP Email for a user
	//
	// Add a new One-Time Password (OTP) Email factor to the authenticated user. OTP Email will enable the user to verify a OTP with the latest verified email. The email has to be verified to add the second factor.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	AddOTPEmail(context.Context, *AddOTPEmailRequest) (*AddOTPEmailResponse, error)
	// Remove One-Time Password (OTP) Email from a user
	//
	// Remove the configured One-Time Password (OTP) Email factor of a user. As only one OTP Email per user is allowed, the user will not have OTP Email as a second factor afterward.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	RemoveOTPEmail(context.Context, *RemoveOTPEmailRequest) (*RemoveOTPEmailResponse, error)
	// Start flow with an identity provider
	//
	// Start a flow with an identity provider, for external login, registration or linking.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	StartIdentityProviderIntent(context.Context, *StartIdentityProviderIntentRequest) (*StartIdentityProviderIntentResponse, error)
	// Retrieve the information returned by the identity provider
	//
	// Retrieve the information returned by the identity provider for registration or updating an existing user with new information.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	RetrieveIdentityProviderIntent(context.Context, *RetrieveIdentityProviderIntentRequest) (*RetrieveIdentityProviderIntentResponse, error)
	// Add link to an identity provider to an user
	//
	// Add link to an identity provider to an user.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	AddIDPLink(context.Context, *AddIDPLinkRequest) (*AddIDPLinkResponse, error)
	// Request a code to reset a password
	//
	// Request a code to reset a password.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	PasswordReset(context.Context, *PasswordResetRequest) (*PasswordResetResponse, error)
	// Change password
	//
	// Change the password of a user with either a verification code or the current password.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	SetPassword(context.Context, *SetPasswordRequest) (*SetPasswordResponse, error)
	// List all possible authentication methods of a user
	//
	// List all possible authentication methods of a user like password, passwordless, (T)OTP and more.
	//
	// Deprecated: please move to the corresponding endpoint under user service v2 (GA).
	ListAuthenticationMethodTypes(context.Context, *ListAuthenticationMethodTypesRequest) (*ListAuthenticationMethodTypesResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) AddHumanUser(context.Context, *AddHumanUserRequest) (*AddHumanUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHumanUser not implemented")
}
func (UnimplementedUserServiceServer) GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedUserServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedUserServiceServer) SetEmail(context.Context, *SetEmailRequest) (*SetEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEmail not implemented")
}
func (UnimplementedUserServiceServer) ResendEmailCode(context.Context, *ResendEmailCodeRequest) (*ResendEmailCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendEmailCode not implemented")
}
func (UnimplementedUserServiceServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedUserServiceServer) SetPhone(context.Context, *SetPhoneRequest) (*SetPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPhone not implemented")
}
func (UnimplementedUserServiceServer) RemovePhone(context.Context, *RemovePhoneRequest) (*RemovePhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePhone not implemented")
}
func (UnimplementedUserServiceServer) ResendPhoneCode(context.Context, *ResendPhoneCodeRequest) (*ResendPhoneCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendPhoneCode not implemented")
}
func (UnimplementedUserServiceServer) VerifyPhone(context.Context, *VerifyPhoneRequest) (*VerifyPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPhone not implemented")
}
func (UnimplementedUserServiceServer) UpdateHumanUser(context.Context, *UpdateHumanUserRequest) (*UpdateHumanUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHumanUser not implemented")
}
func (UnimplementedUserServiceServer) DeactivateUser(context.Context, *DeactivateUserRequest) (*DeactivateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateUser not implemented")
}
func (UnimplementedUserServiceServer) ReactivateUser(context.Context, *ReactivateUserRequest) (*ReactivateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateUser not implemented")
}
func (UnimplementedUserServiceServer) LockUser(context.Context, *LockUserRequest) (*LockUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockUser not implemented")
}
func (UnimplementedUserServiceServer) UnlockUser(context.Context, *UnlockUserRequest) (*UnlockUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) RegisterPasskey(context.Context, *RegisterPasskeyRequest) (*RegisterPasskeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPasskey not implemented")
}
func (UnimplementedUserServiceServer) VerifyPasskeyRegistration(context.Context, *VerifyPasskeyRegistrationRequest) (*VerifyPasskeyRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPasskeyRegistration not implemented")
}
func (UnimplementedUserServiceServer) CreatePasskeyRegistrationLink(context.Context, *CreatePasskeyRegistrationLinkRequest) (*CreatePasskeyRegistrationLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePasskeyRegistrationLink not implemented")
}
func (UnimplementedUserServiceServer) RegisterU2F(context.Context, *RegisterU2FRequest) (*RegisterU2FResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterU2F not implemented")
}
func (UnimplementedUserServiceServer) VerifyU2FRegistration(context.Context, *VerifyU2FRegistrationRequest) (*VerifyU2FRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyU2FRegistration not implemented")
}
func (UnimplementedUserServiceServer) RegisterTOTP(context.Context, *RegisterTOTPRequest) (*RegisterTOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTOTP not implemented")
}
func (UnimplementedUserServiceServer) VerifyTOTPRegistration(context.Context, *VerifyTOTPRegistrationRequest) (*VerifyTOTPRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTOTPRegistration not implemented")
}
func (UnimplementedUserServiceServer) RemoveTOTP(context.Context, *RemoveTOTPRequest) (*RemoveTOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTOTP not implemented")
}
func (UnimplementedUserServiceServer) AddOTPSMS(context.Context, *AddOTPSMSRequest) (*AddOTPSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOTPSMS not implemented")
}
func (UnimplementedUserServiceServer) RemoveOTPSMS(context.Context, *RemoveOTPSMSRequest) (*RemoveOTPSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOTPSMS not implemented")
}
func (UnimplementedUserServiceServer) AddOTPEmail(context.Context, *AddOTPEmailRequest) (*AddOTPEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOTPEmail not implemented")
}
func (UnimplementedUserServiceServer) RemoveOTPEmail(context.Context, *RemoveOTPEmailRequest) (*RemoveOTPEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOTPEmail not implemented")
}
func (UnimplementedUserServiceServer) StartIdentityProviderIntent(context.Context, *StartIdentityProviderIntentRequest) (*StartIdentityProviderIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartIdentityProviderIntent not implemented")
}
func (UnimplementedUserServiceServer) RetrieveIdentityProviderIntent(context.Context, *RetrieveIdentityProviderIntentRequest) (*RetrieveIdentityProviderIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveIdentityProviderIntent not implemented")
}
func (UnimplementedUserServiceServer) AddIDPLink(context.Context, *AddIDPLinkRequest) (*AddIDPLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIDPLink not implemented")
}
func (UnimplementedUserServiceServer) PasswordReset(context.Context, *PasswordResetRequest) (*PasswordResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordReset not implemented")
}
func (UnimplementedUserServiceServer) SetPassword(context.Context, *SetPasswordRequest) (*SetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPassword not implemented")
}
func (UnimplementedUserServiceServer) ListAuthenticationMethodTypes(context.Context, *ListAuthenticationMethodTypesRequest) (*ListAuthenticationMethodTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthenticationMethodTypes not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_AddHumanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHumanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddHumanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddHumanUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddHumanUser(ctx, req.(*AddHumanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByID(ctx, req.(*GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SetEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetEmail(ctx, req.(*SetEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResendEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendEmailCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResendEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResendEmailCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResendEmailCode(ctx, req.(*ResendEmailCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SetPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetPhone(ctx, req.(*SetPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemovePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemovePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemovePhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemovePhone(ctx, req.(*RemovePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResendPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendPhoneCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResendPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResendPhoneCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResendPhoneCode(ctx, req.(*ResendPhoneCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyPhone(ctx, req.(*VerifyPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateHumanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHumanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateHumanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateHumanUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateHumanUser(ctx, req.(*UpdateHumanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeactivateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeactivateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeactivateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeactivateUser(ctx, req.(*DeactivateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ReactivateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ReactivateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ReactivateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ReactivateUser(ctx, req.(*ReactivateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_LockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LockUser(ctx, req.(*LockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UnlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UnlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UnlockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UnlockUser(ctx, req.(*UnlockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RegisterPasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPasskeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterPasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RegisterPasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterPasskey(ctx, req.(*RegisterPasskeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyPasskeyRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPasskeyRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyPasskeyRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyPasskeyRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyPasskeyRegistration(ctx, req.(*VerifyPasskeyRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreatePasskeyRegistrationLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePasskeyRegistrationLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreatePasskeyRegistrationLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreatePasskeyRegistrationLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreatePasskeyRegistrationLink(ctx, req.(*CreatePasskeyRegistrationLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RegisterU2F_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterU2FRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterU2F(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RegisterU2F_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterU2F(ctx, req.(*RegisterU2FRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyU2FRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyU2FRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyU2FRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyU2FRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyU2FRegistration(ctx, req.(*VerifyU2FRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RegisterTOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterTOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RegisterTOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterTOTP(ctx, req.(*RegisterTOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyTOTPRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTOTPRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyTOTPRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyTOTPRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyTOTPRegistration(ctx, req.(*VerifyTOTPRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveTOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveTOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveTOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveTOTP(ctx, req.(*RemoveTOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddOTPSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOTPSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddOTPSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddOTPSMS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddOTPSMS(ctx, req.(*AddOTPSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveOTPSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOTPSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveOTPSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveOTPSMS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveOTPSMS(ctx, req.(*RemoveOTPSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddOTPEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOTPEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddOTPEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddOTPEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddOTPEmail(ctx, req.(*AddOTPEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveOTPEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOTPEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveOTPEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveOTPEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveOTPEmail(ctx, req.(*RemoveOTPEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_StartIdentityProviderIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartIdentityProviderIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).StartIdentityProviderIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_StartIdentityProviderIntent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).StartIdentityProviderIntent(ctx, req.(*StartIdentityProviderIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RetrieveIdentityProviderIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveIdentityProviderIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RetrieveIdentityProviderIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RetrieveIdentityProviderIntent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RetrieveIdentityProviderIntent(ctx, req.(*RetrieveIdentityProviderIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddIDPLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIDPLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddIDPLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddIDPLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddIDPLink(ctx, req.(*AddIDPLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_PasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).PasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_PasswordReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).PasswordReset(ctx, req.(*PasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetPassword(ctx, req.(*SetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListAuthenticationMethodTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthenticationMethodTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListAuthenticationMethodTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListAuthenticationMethodTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListAuthenticationMethodTypes(ctx, req.(*ListAuthenticationMethodTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zitadel.user.v2beta.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddHumanUser",
			Handler:    _UserService_AddHumanUser_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _UserService_GetUserByID_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _UserService_ListUsers_Handler,
		},
		{
			MethodName: "SetEmail",
			Handler:    _UserService_SetEmail_Handler,
		},
		{
			MethodName: "ResendEmailCode",
			Handler:    _UserService_ResendEmailCode_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _UserService_VerifyEmail_Handler,
		},
		{
			MethodName: "SetPhone",
			Handler:    _UserService_SetPhone_Handler,
		},
		{
			MethodName: "RemovePhone",
			Handler:    _UserService_RemovePhone_Handler,
		},
		{
			MethodName: "ResendPhoneCode",
			Handler:    _UserService_ResendPhoneCode_Handler,
		},
		{
			MethodName: "VerifyPhone",
			Handler:    _UserService_VerifyPhone_Handler,
		},
		{
			MethodName: "UpdateHumanUser",
			Handler:    _UserService_UpdateHumanUser_Handler,
		},
		{
			MethodName: "DeactivateUser",
			Handler:    _UserService_DeactivateUser_Handler,
		},
		{
			MethodName: "ReactivateUser",
			Handler:    _UserService_ReactivateUser_Handler,
		},
		{
			MethodName: "LockUser",
			Handler:    _UserService_LockUser_Handler,
		},
		{
			MethodName: "UnlockUser",
			Handler:    _UserService_UnlockUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "RegisterPasskey",
			Handler:    _UserService_RegisterPasskey_Handler,
		},
		{
			MethodName: "VerifyPasskeyRegistration",
			Handler:    _UserService_VerifyPasskeyRegistration_Handler,
		},
		{
			MethodName: "CreatePasskeyRegistrationLink",
			Handler:    _UserService_CreatePasskeyRegistrationLink_Handler,
		},
		{
			MethodName: "RegisterU2F",
			Handler:    _UserService_RegisterU2F_Handler,
		},
		{
			MethodName: "VerifyU2FRegistration",
			Handler:    _UserService_VerifyU2FRegistration_Handler,
		},
		{
			MethodName: "RegisterTOTP",
			Handler:    _UserService_RegisterTOTP_Handler,
		},
		{
			MethodName: "VerifyTOTPRegistration",
			Handler:    _UserService_VerifyTOTPRegistration_Handler,
		},
		{
			MethodName: "RemoveTOTP",
			Handler:    _UserService_RemoveTOTP_Handler,
		},
		{
			MethodName: "AddOTPSMS",
			Handler:    _UserService_AddOTPSMS_Handler,
		},
		{
			MethodName: "RemoveOTPSMS",
			Handler:    _UserService_RemoveOTPSMS_Handler,
		},
		{
			MethodName: "AddOTPEmail",
			Handler:    _UserService_AddOTPEmail_Handler,
		},
		{
			MethodName: "RemoveOTPEmail",
			Handler:    _UserService_RemoveOTPEmail_Handler,
		},
		{
			MethodName: "StartIdentityProviderIntent",
			Handler:    _UserService_StartIdentityProviderIntent_Handler,
		},
		{
			MethodName: "RetrieveIdentityProviderIntent",
			Handler:    _UserService_RetrieveIdentityProviderIntent_Handler,
		},
		{
			MethodName: "AddIDPLink",
			Handler:    _UserService_AddIDPLink_Handler,
		},
		{
			MethodName: "PasswordReset",
			Handler:    _UserService_PasswordReset_Handler,
		},
		{
			MethodName: "SetPassword",
			Handler:    _UserService_SetPassword_Handler,
		},
		{
			MethodName: "ListAuthenticationMethodTypes",
			Handler:    _UserService_ListAuthenticationMethodTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zitadel/user/v2beta/user_service.proto",
}
