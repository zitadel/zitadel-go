// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/user/v2beta/user_service.proto

package user

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	v2beta "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/object/v2beta"
	_ "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/protoc/v2"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuthenticationMethodType int32

const (
	AuthenticationMethodType_AUTHENTICATION_METHOD_TYPE_UNSPECIFIED AuthenticationMethodType = 0
	AuthenticationMethodType_AUTHENTICATION_METHOD_TYPE_PASSWORD    AuthenticationMethodType = 1
	AuthenticationMethodType_AUTHENTICATION_METHOD_TYPE_PASSKEY     AuthenticationMethodType = 2
	AuthenticationMethodType_AUTHENTICATION_METHOD_TYPE_IDP         AuthenticationMethodType = 3
	AuthenticationMethodType_AUTHENTICATION_METHOD_TYPE_TOTP        AuthenticationMethodType = 4
	AuthenticationMethodType_AUTHENTICATION_METHOD_TYPE_U2F         AuthenticationMethodType = 5
	AuthenticationMethodType_AUTHENTICATION_METHOD_TYPE_OTP_SMS     AuthenticationMethodType = 6
	AuthenticationMethodType_AUTHENTICATION_METHOD_TYPE_OTP_EMAIL   AuthenticationMethodType = 7
)

// Enum value maps for AuthenticationMethodType.
var (
	AuthenticationMethodType_name = map[int32]string{
		0: "AUTHENTICATION_METHOD_TYPE_UNSPECIFIED",
		1: "AUTHENTICATION_METHOD_TYPE_PASSWORD",
		2: "AUTHENTICATION_METHOD_TYPE_PASSKEY",
		3: "AUTHENTICATION_METHOD_TYPE_IDP",
		4: "AUTHENTICATION_METHOD_TYPE_TOTP",
		5: "AUTHENTICATION_METHOD_TYPE_U2F",
		6: "AUTHENTICATION_METHOD_TYPE_OTP_SMS",
		7: "AUTHENTICATION_METHOD_TYPE_OTP_EMAIL",
	}
	AuthenticationMethodType_value = map[string]int32{
		"AUTHENTICATION_METHOD_TYPE_UNSPECIFIED": 0,
		"AUTHENTICATION_METHOD_TYPE_PASSWORD":    1,
		"AUTHENTICATION_METHOD_TYPE_PASSKEY":     2,
		"AUTHENTICATION_METHOD_TYPE_IDP":         3,
		"AUTHENTICATION_METHOD_TYPE_TOTP":        4,
		"AUTHENTICATION_METHOD_TYPE_U2F":         5,
		"AUTHENTICATION_METHOD_TYPE_OTP_SMS":     6,
		"AUTHENTICATION_METHOD_TYPE_OTP_EMAIL":   7,
	}
)

func (x AuthenticationMethodType) Enum() *AuthenticationMethodType {
	p := new(AuthenticationMethodType)
	*p = x
	return p
}

func (x AuthenticationMethodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticationMethodType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_user_v2beta_user_service_proto_enumTypes[0].Descriptor()
}

func (AuthenticationMethodType) Type() protoreflect.EnumType {
	return &file_zitadel_user_v2beta_user_service_proto_enumTypes[0]
}

func (x AuthenticationMethodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticationMethodType.Descriptor instead.
func (AuthenticationMethodType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{0}
}

type AddHumanUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optionally set your own id unique for the user.
	UserId *string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	// optionally set a unique username, if none is provided the email will be used.
	Username     *string              `protobuf:"bytes,2,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Organization *v2beta.Organization `protobuf:"bytes,11,opt,name=organization,proto3" json:"organization,omitempty"`
	Profile      *SetHumanProfile     `protobuf:"bytes,4,opt,name=profile,proto3" json:"profile,omitempty"`
	Email        *SetHumanEmail       `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Phone        *SetHumanPhone       `protobuf:"bytes,10,opt,name=phone,proto3" json:"phone,omitempty"`
	Metadata     []*SetMetadataEntry  `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty"`
	// Types that are assignable to PasswordType:
	//
	//	*AddHumanUserRequest_Password
	//	*AddHumanUserRequest_HashedPassword
	PasswordType isAddHumanUserRequest_PasswordType `protobuf_oneof:"password_type"`
	IdpLinks     []*IDPLink                         `protobuf:"bytes,9,rep,name=idp_links,json=idpLinks,proto3" json:"idp_links,omitempty"`
	// An Implementation of RFC 6238 is used, with HMAC-SHA-1 and time-step of 30 seconds.
	// Currently no other options are supported, and if anything different is used the validation will fail.
	TotpSecret *string `protobuf:"bytes,12,opt,name=totp_secret,json=totpSecret,proto3,oneof" json:"totp_secret,omitempty"`
}

func (x *AddHumanUserRequest) Reset() {
	*x = AddHumanUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHumanUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHumanUserRequest) ProtoMessage() {}

func (x *AddHumanUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHumanUserRequest.ProtoReflect.Descriptor instead.
func (*AddHumanUserRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{0}
}

func (x *AddHumanUserRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *AddHumanUserRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *AddHumanUserRequest) GetOrganization() *v2beta.Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *AddHumanUserRequest) GetProfile() *SetHumanProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *AddHumanUserRequest) GetEmail() *SetHumanEmail {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *AddHumanUserRequest) GetPhone() *SetHumanPhone {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *AddHumanUserRequest) GetMetadata() []*SetMetadataEntry {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (m *AddHumanUserRequest) GetPasswordType() isAddHumanUserRequest_PasswordType {
	if m != nil {
		return m.PasswordType
	}
	return nil
}

func (x *AddHumanUserRequest) GetPassword() *Password {
	if x, ok := x.GetPasswordType().(*AddHumanUserRequest_Password); ok {
		return x.Password
	}
	return nil
}

func (x *AddHumanUserRequest) GetHashedPassword() *HashedPassword {
	if x, ok := x.GetPasswordType().(*AddHumanUserRequest_HashedPassword); ok {
		return x.HashedPassword
	}
	return nil
}

func (x *AddHumanUserRequest) GetIdpLinks() []*IDPLink {
	if x != nil {
		return x.IdpLinks
	}
	return nil
}

func (x *AddHumanUserRequest) GetTotpSecret() string {
	if x != nil && x.TotpSecret != nil {
		return *x.TotpSecret
	}
	return ""
}

type isAddHumanUserRequest_PasswordType interface {
	isAddHumanUserRequest_PasswordType()
}

type AddHumanUserRequest_Password struct {
	Password *Password `protobuf:"bytes,7,opt,name=password,proto3,oneof"`
}

type AddHumanUserRequest_HashedPassword struct {
	HashedPassword *HashedPassword `protobuf:"bytes,8,opt,name=hashed_password,json=hashedPassword,proto3,oneof"`
}

func (*AddHumanUserRequest_Password) isAddHumanUserRequest_PasswordType() {}

func (*AddHumanUserRequest_HashedPassword) isAddHumanUserRequest_PasswordType() {}

type AddHumanUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string          `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Details   *v2beta.Details `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	EmailCode *string         `protobuf:"bytes,3,opt,name=email_code,json=emailCode,proto3,oneof" json:"email_code,omitempty"`
	PhoneCode *string         `protobuf:"bytes,4,opt,name=phone_code,json=phoneCode,proto3,oneof" json:"phone_code,omitempty"`
}

func (x *AddHumanUserResponse) Reset() {
	*x = AddHumanUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHumanUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHumanUserResponse) ProtoMessage() {}

func (x *AddHumanUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHumanUserResponse.ProtoReflect.Descriptor instead.
func (*AddHumanUserResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{1}
}

func (x *AddHumanUserResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddHumanUserResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *AddHumanUserResponse) GetEmailCode() string {
	if x != nil && x.EmailCode != nil {
		return *x.EmailCode
	}
	return ""
}

func (x *AddHumanUserResponse) GetPhoneCode() string {
	if x != nil && x.PhoneCode != nil {
		return *x.PhoneCode
	}
	return ""
}

type GetUserByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetUserByIDRequest) Reset() {
	*x = GetUserByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByIDRequest) ProtoMessage() {}

func (x *GetUserByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByIDRequest.ProtoReflect.Descriptor instead.
func (*GetUserByIDRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetUserByIDRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// deprecated: details is moved into user
	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	User    *User           `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GetUserByIDResponse) Reset() {
	*x = GetUserByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByIDResponse) ProtoMessage() {}

func (x *GetUserByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByIDResponse.ProtoReflect.Descriptor instead.
func (*GetUserByIDResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserByIDResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *GetUserByIDResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type ListUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list limitations and ordering
	Query *v2beta.ListQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// the field the result is sorted
	SortingColumn UserFieldName `protobuf:"varint,2,opt,name=sorting_column,json=sortingColumn,proto3,enum=zitadel.user.v2beta.UserFieldName" json:"sorting_column,omitempty"`
	// criteria the client is looking for
	Queries []*SearchQuery `protobuf:"bytes,3,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *ListUsersRequest) Reset() {
	*x = ListUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersRequest) ProtoMessage() {}

func (x *ListUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersRequest.ProtoReflect.Descriptor instead.
func (*ListUsersRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListUsersRequest) GetQuery() *v2beta.ListQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ListUsersRequest) GetSortingColumn() UserFieldName {
	if x != nil {
		return x.SortingColumn
	}
	return UserFieldName_USER_FIELD_NAME_UNSPECIFIED
}

func (x *ListUsersRequest) GetQueries() []*SearchQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

type ListUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details       *v2beta.ListDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	SortingColumn UserFieldName       `protobuf:"varint,2,opt,name=sorting_column,json=sortingColumn,proto3,enum=zitadel.user.v2beta.UserFieldName" json:"sorting_column,omitempty"`
	Result        []*User             `protobuf:"bytes,3,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ListUsersResponse) Reset() {
	*x = ListUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersResponse) ProtoMessage() {}

func (x *ListUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersResponse.ProtoReflect.Descriptor instead.
func (*ListUsersResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListUsersResponse) GetDetails() *v2beta.ListDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ListUsersResponse) GetSortingColumn() UserFieldName {
	if x != nil {
		return x.SortingColumn
	}
	return UserFieldName_USER_FIELD_NAME_UNSPECIFIED
}

func (x *ListUsersResponse) GetResult() []*User {
	if x != nil {
		return x.Result
	}
	return nil
}

type SetEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Email  string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// if no verification is specified, an email is sent with the default url
	//
	// Types that are assignable to Verification:
	//
	//	*SetEmailRequest_SendCode
	//	*SetEmailRequest_ReturnCode
	//	*SetEmailRequest_IsVerified
	Verification isSetEmailRequest_Verification `protobuf_oneof:"verification"`
}

func (x *SetEmailRequest) Reset() {
	*x = SetEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEmailRequest) ProtoMessage() {}

func (x *SetEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEmailRequest.ProtoReflect.Descriptor instead.
func (*SetEmailRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{6}
}

func (x *SetEmailRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SetEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (m *SetEmailRequest) GetVerification() isSetEmailRequest_Verification {
	if m != nil {
		return m.Verification
	}
	return nil
}

func (x *SetEmailRequest) GetSendCode() *SendEmailVerificationCode {
	if x, ok := x.GetVerification().(*SetEmailRequest_SendCode); ok {
		return x.SendCode
	}
	return nil
}

func (x *SetEmailRequest) GetReturnCode() *ReturnEmailVerificationCode {
	if x, ok := x.GetVerification().(*SetEmailRequest_ReturnCode); ok {
		return x.ReturnCode
	}
	return nil
}

func (x *SetEmailRequest) GetIsVerified() bool {
	if x, ok := x.GetVerification().(*SetEmailRequest_IsVerified); ok {
		return x.IsVerified
	}
	return false
}

type isSetEmailRequest_Verification interface {
	isSetEmailRequest_Verification()
}

type SetEmailRequest_SendCode struct {
	SendCode *SendEmailVerificationCode `protobuf:"bytes,3,opt,name=send_code,json=sendCode,proto3,oneof"`
}

type SetEmailRequest_ReturnCode struct {
	ReturnCode *ReturnEmailVerificationCode `protobuf:"bytes,4,opt,name=return_code,json=returnCode,proto3,oneof"`
}

type SetEmailRequest_IsVerified struct {
	IsVerified bool `protobuf:"varint,5,opt,name=is_verified,json=isVerified,proto3,oneof"`
}

func (*SetEmailRequest_SendCode) isSetEmailRequest_Verification() {}

func (*SetEmailRequest_ReturnCode) isSetEmailRequest_Verification() {}

func (*SetEmailRequest_IsVerified) isSetEmailRequest_Verification() {}

type SetEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	// in case the verification was set to return_code, the code will be returned
	VerificationCode *string `protobuf:"bytes,2,opt,name=verification_code,json=verificationCode,proto3,oneof" json:"verification_code,omitempty"`
}

func (x *SetEmailResponse) Reset() {
	*x = SetEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEmailResponse) ProtoMessage() {}

func (x *SetEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEmailResponse.ProtoReflect.Descriptor instead.
func (*SetEmailResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{7}
}

func (x *SetEmailResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *SetEmailResponse) GetVerificationCode() string {
	if x != nil && x.VerificationCode != nil {
		return *x.VerificationCode
	}
	return ""
}

type ResendEmailCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// if no verification is specified, an email is sent with the default url
	//
	// Types that are assignable to Verification:
	//
	//	*ResendEmailCodeRequest_SendCode
	//	*ResendEmailCodeRequest_ReturnCode
	Verification isResendEmailCodeRequest_Verification `protobuf_oneof:"verification"`
}

func (x *ResendEmailCodeRequest) Reset() {
	*x = ResendEmailCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendEmailCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendEmailCodeRequest) ProtoMessage() {}

func (x *ResendEmailCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendEmailCodeRequest.ProtoReflect.Descriptor instead.
func (*ResendEmailCodeRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{8}
}

func (x *ResendEmailCodeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (m *ResendEmailCodeRequest) GetVerification() isResendEmailCodeRequest_Verification {
	if m != nil {
		return m.Verification
	}
	return nil
}

func (x *ResendEmailCodeRequest) GetSendCode() *SendEmailVerificationCode {
	if x, ok := x.GetVerification().(*ResendEmailCodeRequest_SendCode); ok {
		return x.SendCode
	}
	return nil
}

func (x *ResendEmailCodeRequest) GetReturnCode() *ReturnEmailVerificationCode {
	if x, ok := x.GetVerification().(*ResendEmailCodeRequest_ReturnCode); ok {
		return x.ReturnCode
	}
	return nil
}

type isResendEmailCodeRequest_Verification interface {
	isResendEmailCodeRequest_Verification()
}

type ResendEmailCodeRequest_SendCode struct {
	SendCode *SendEmailVerificationCode `protobuf:"bytes,2,opt,name=send_code,json=sendCode,proto3,oneof"`
}

type ResendEmailCodeRequest_ReturnCode struct {
	ReturnCode *ReturnEmailVerificationCode `protobuf:"bytes,3,opt,name=return_code,json=returnCode,proto3,oneof"`
}

func (*ResendEmailCodeRequest_SendCode) isResendEmailCodeRequest_Verification() {}

func (*ResendEmailCodeRequest_ReturnCode) isResendEmailCodeRequest_Verification() {}

type ResendEmailCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	// in case the verification was set to return_code, the code will be returned
	VerificationCode *string `protobuf:"bytes,2,opt,name=verification_code,json=verificationCode,proto3,oneof" json:"verification_code,omitempty"`
}

func (x *ResendEmailCodeResponse) Reset() {
	*x = ResendEmailCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendEmailCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendEmailCodeResponse) ProtoMessage() {}

func (x *ResendEmailCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendEmailCodeResponse.ProtoReflect.Descriptor instead.
func (*ResendEmailCodeResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{9}
}

func (x *ResendEmailCodeResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ResendEmailCodeResponse) GetVerificationCode() string {
	if x != nil && x.VerificationCode != nil {
		return *x.VerificationCode
	}
	return ""
}

type VerifyEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VerificationCode string `protobuf:"bytes,2,opt,name=verification_code,json=verificationCode,proto3" json:"verification_code,omitempty"`
}

func (x *VerifyEmailRequest) Reset() {
	*x = VerifyEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyEmailRequest) ProtoMessage() {}

func (x *VerifyEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyEmailRequest.ProtoReflect.Descriptor instead.
func (*VerifyEmailRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{10}
}

func (x *VerifyEmailRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *VerifyEmailRequest) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

type VerifyEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *VerifyEmailResponse) Reset() {
	*x = VerifyEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyEmailResponse) ProtoMessage() {}

func (x *VerifyEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyEmailResponse.ProtoReflect.Descriptor instead.
func (*VerifyEmailResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{11}
}

func (x *VerifyEmailResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type SetPhoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Phone  string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	// if no verification is specified, an sms is sent
	//
	// Types that are assignable to Verification:
	//
	//	*SetPhoneRequest_SendCode
	//	*SetPhoneRequest_ReturnCode
	//	*SetPhoneRequest_IsVerified
	Verification isSetPhoneRequest_Verification `protobuf_oneof:"verification"`
}

func (x *SetPhoneRequest) Reset() {
	*x = SetPhoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPhoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPhoneRequest) ProtoMessage() {}

func (x *SetPhoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPhoneRequest.ProtoReflect.Descriptor instead.
func (*SetPhoneRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{12}
}

func (x *SetPhoneRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SetPhoneRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (m *SetPhoneRequest) GetVerification() isSetPhoneRequest_Verification {
	if m != nil {
		return m.Verification
	}
	return nil
}

func (x *SetPhoneRequest) GetSendCode() *SendPhoneVerificationCode {
	if x, ok := x.GetVerification().(*SetPhoneRequest_SendCode); ok {
		return x.SendCode
	}
	return nil
}

func (x *SetPhoneRequest) GetReturnCode() *ReturnPhoneVerificationCode {
	if x, ok := x.GetVerification().(*SetPhoneRequest_ReturnCode); ok {
		return x.ReturnCode
	}
	return nil
}

func (x *SetPhoneRequest) GetIsVerified() bool {
	if x, ok := x.GetVerification().(*SetPhoneRequest_IsVerified); ok {
		return x.IsVerified
	}
	return false
}

type isSetPhoneRequest_Verification interface {
	isSetPhoneRequest_Verification()
}

type SetPhoneRequest_SendCode struct {
	SendCode *SendPhoneVerificationCode `protobuf:"bytes,3,opt,name=send_code,json=sendCode,proto3,oneof"`
}

type SetPhoneRequest_ReturnCode struct {
	ReturnCode *ReturnPhoneVerificationCode `protobuf:"bytes,4,opt,name=return_code,json=returnCode,proto3,oneof"`
}

type SetPhoneRequest_IsVerified struct {
	IsVerified bool `protobuf:"varint,5,opt,name=is_verified,json=isVerified,proto3,oneof"`
}

func (*SetPhoneRequest_SendCode) isSetPhoneRequest_Verification() {}

func (*SetPhoneRequest_ReturnCode) isSetPhoneRequest_Verification() {}

func (*SetPhoneRequest_IsVerified) isSetPhoneRequest_Verification() {}

type SetPhoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	// in case the verification was set to return_code, the code will be returned
	VerificationCode *string `protobuf:"bytes,2,opt,name=verification_code,json=verificationCode,proto3,oneof" json:"verification_code,omitempty"`
}

func (x *SetPhoneResponse) Reset() {
	*x = SetPhoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPhoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPhoneResponse) ProtoMessage() {}

func (x *SetPhoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPhoneResponse.ProtoReflect.Descriptor instead.
func (*SetPhoneResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{13}
}

func (x *SetPhoneResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *SetPhoneResponse) GetVerificationCode() string {
	if x != nil && x.VerificationCode != nil {
		return *x.VerificationCode
	}
	return ""
}

type RemovePhoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *RemovePhoneRequest) Reset() {
	*x = RemovePhoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePhoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePhoneRequest) ProtoMessage() {}

func (x *RemovePhoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePhoneRequest.ProtoReflect.Descriptor instead.
func (*RemovePhoneRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{14}
}

func (x *RemovePhoneRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type RemovePhoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *RemovePhoneResponse) Reset() {
	*x = RemovePhoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePhoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePhoneResponse) ProtoMessage() {}

func (x *RemovePhoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePhoneResponse.ProtoReflect.Descriptor instead.
func (*RemovePhoneResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{15}
}

func (x *RemovePhoneResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type ResendPhoneCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// if no verification is specified, an sms is sent
	//
	// Types that are assignable to Verification:
	//
	//	*ResendPhoneCodeRequest_SendCode
	//	*ResendPhoneCodeRequest_ReturnCode
	Verification isResendPhoneCodeRequest_Verification `protobuf_oneof:"verification"`
}

func (x *ResendPhoneCodeRequest) Reset() {
	*x = ResendPhoneCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendPhoneCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendPhoneCodeRequest) ProtoMessage() {}

func (x *ResendPhoneCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendPhoneCodeRequest.ProtoReflect.Descriptor instead.
func (*ResendPhoneCodeRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{16}
}

func (x *ResendPhoneCodeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (m *ResendPhoneCodeRequest) GetVerification() isResendPhoneCodeRequest_Verification {
	if m != nil {
		return m.Verification
	}
	return nil
}

func (x *ResendPhoneCodeRequest) GetSendCode() *SendPhoneVerificationCode {
	if x, ok := x.GetVerification().(*ResendPhoneCodeRequest_SendCode); ok {
		return x.SendCode
	}
	return nil
}

func (x *ResendPhoneCodeRequest) GetReturnCode() *ReturnPhoneVerificationCode {
	if x, ok := x.GetVerification().(*ResendPhoneCodeRequest_ReturnCode); ok {
		return x.ReturnCode
	}
	return nil
}

type isResendPhoneCodeRequest_Verification interface {
	isResendPhoneCodeRequest_Verification()
}

type ResendPhoneCodeRequest_SendCode struct {
	SendCode *SendPhoneVerificationCode `protobuf:"bytes,3,opt,name=send_code,json=sendCode,proto3,oneof"`
}

type ResendPhoneCodeRequest_ReturnCode struct {
	ReturnCode *ReturnPhoneVerificationCode `protobuf:"bytes,4,opt,name=return_code,json=returnCode,proto3,oneof"`
}

func (*ResendPhoneCodeRequest_SendCode) isResendPhoneCodeRequest_Verification() {}

func (*ResendPhoneCodeRequest_ReturnCode) isResendPhoneCodeRequest_Verification() {}

type ResendPhoneCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	// in case the verification was set to return_code, the code will be returned
	VerificationCode *string `protobuf:"bytes,2,opt,name=verification_code,json=verificationCode,proto3,oneof" json:"verification_code,omitempty"`
}

func (x *ResendPhoneCodeResponse) Reset() {
	*x = ResendPhoneCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendPhoneCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendPhoneCodeResponse) ProtoMessage() {}

func (x *ResendPhoneCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendPhoneCodeResponse.ProtoReflect.Descriptor instead.
func (*ResendPhoneCodeResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{17}
}

func (x *ResendPhoneCodeResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ResendPhoneCodeResponse) GetVerificationCode() string {
	if x != nil && x.VerificationCode != nil {
		return *x.VerificationCode
	}
	return ""
}

type VerifyPhoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VerificationCode string `protobuf:"bytes,2,opt,name=verification_code,json=verificationCode,proto3" json:"verification_code,omitempty"`
}

func (x *VerifyPhoneRequest) Reset() {
	*x = VerifyPhoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyPhoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPhoneRequest) ProtoMessage() {}

func (x *VerifyPhoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPhoneRequest.ProtoReflect.Descriptor instead.
func (*VerifyPhoneRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{18}
}

func (x *VerifyPhoneRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *VerifyPhoneRequest) GetVerificationCode() string {
	if x != nil {
		return x.VerificationCode
	}
	return ""
}

type VerifyPhoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *VerifyPhoneResponse) Reset() {
	*x = VerifyPhoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyPhoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPhoneResponse) ProtoMessage() {}

func (x *VerifyPhoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPhoneResponse.ProtoReflect.Descriptor instead.
func (*VerifyPhoneResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{19}
}

func (x *VerifyPhoneResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type DeleteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DeleteUserRequest) Reset() {
	*x = DeleteUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserRequest) ProtoMessage() {}

func (x *DeleteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type DeleteUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *DeleteUserResponse) Reset() {
	*x = DeleteUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserResponse) ProtoMessage() {}

func (x *DeleteUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteUserResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type UpdateHumanUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username *string          `protobuf:"bytes,2,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Profile  *SetHumanProfile `protobuf:"bytes,3,opt,name=profile,proto3,oneof" json:"profile,omitempty"`
	Email    *SetHumanEmail   `protobuf:"bytes,4,opt,name=email,proto3,oneof" json:"email,omitempty"`
	Phone    *SetHumanPhone   `protobuf:"bytes,5,opt,name=phone,proto3,oneof" json:"phone,omitempty"`
	Password *SetPassword     `protobuf:"bytes,6,opt,name=password,proto3,oneof" json:"password,omitempty"`
}

func (x *UpdateHumanUserRequest) Reset() {
	*x = UpdateHumanUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHumanUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHumanUserRequest) ProtoMessage() {}

func (x *UpdateHumanUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHumanUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateHumanUserRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateHumanUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateHumanUserRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *UpdateHumanUserRequest) GetProfile() *SetHumanProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *UpdateHumanUserRequest) GetEmail() *SetHumanEmail {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *UpdateHumanUserRequest) GetPhone() *SetHumanPhone {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *UpdateHumanUserRequest) GetPassword() *SetPassword {
	if x != nil {
		return x.Password
	}
	return nil
}

type UpdateHumanUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details   *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	EmailCode *string         `protobuf:"bytes,2,opt,name=email_code,json=emailCode,proto3,oneof" json:"email_code,omitempty"`
	PhoneCode *string         `protobuf:"bytes,3,opt,name=phone_code,json=phoneCode,proto3,oneof" json:"phone_code,omitempty"`
}

func (x *UpdateHumanUserResponse) Reset() {
	*x = UpdateHumanUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHumanUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHumanUserResponse) ProtoMessage() {}

func (x *UpdateHumanUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHumanUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateHumanUserResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateHumanUserResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *UpdateHumanUserResponse) GetEmailCode() string {
	if x != nil && x.EmailCode != nil {
		return *x.EmailCode
	}
	return ""
}

func (x *UpdateHumanUserResponse) GetPhoneCode() string {
	if x != nil && x.PhoneCode != nil {
		return *x.PhoneCode
	}
	return ""
}

type DeactivateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DeactivateUserRequest) Reset() {
	*x = DeactivateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateUserRequest) ProtoMessage() {}

func (x *DeactivateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateUserRequest.ProtoReflect.Descriptor instead.
func (*DeactivateUserRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{24}
}

func (x *DeactivateUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type DeactivateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *DeactivateUserResponse) Reset() {
	*x = DeactivateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateUserResponse) ProtoMessage() {}

func (x *DeactivateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateUserResponse.ProtoReflect.Descriptor instead.
func (*DeactivateUserResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{25}
}

func (x *DeactivateUserResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type ReactivateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ReactivateUserRequest) Reset() {
	*x = ReactivateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactivateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactivateUserRequest) ProtoMessage() {}

func (x *ReactivateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactivateUserRequest.ProtoReflect.Descriptor instead.
func (*ReactivateUserRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{26}
}

func (x *ReactivateUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ReactivateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ReactivateUserResponse) Reset() {
	*x = ReactivateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactivateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactivateUserResponse) ProtoMessage() {}

func (x *ReactivateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactivateUserResponse.ProtoReflect.Descriptor instead.
func (*ReactivateUserResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{27}
}

func (x *ReactivateUserResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type LockUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *LockUserRequest) Reset() {
	*x = LockUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockUserRequest) ProtoMessage() {}

func (x *LockUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockUserRequest.ProtoReflect.Descriptor instead.
func (*LockUserRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{28}
}

func (x *LockUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type LockUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *LockUserResponse) Reset() {
	*x = LockUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockUserResponse) ProtoMessage() {}

func (x *LockUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockUserResponse.ProtoReflect.Descriptor instead.
func (*LockUserResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{29}
}

func (x *LockUserResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type UnlockUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UnlockUserRequest) Reset() {
	*x = UnlockUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockUserRequest) ProtoMessage() {}

func (x *UnlockUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockUserRequest.ProtoReflect.Descriptor instead.
func (*UnlockUserRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{30}
}

func (x *UnlockUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UnlockUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UnlockUserResponse) Reset() {
	*x = UnlockUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockUserResponse) ProtoMessage() {}

func (x *UnlockUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockUserResponse.ProtoReflect.Descriptor instead.
func (*UnlockUserResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{31}
}

func (x *UnlockUserResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type RegisterPasskeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string                   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Code          *PasskeyRegistrationCode `protobuf:"bytes,2,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Authenticator PasskeyAuthenticator     `protobuf:"varint,3,opt,name=authenticator,proto3,enum=zitadel.user.v2beta.PasskeyAuthenticator" json:"authenticator,omitempty"`
	Domain        string                   `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *RegisterPasskeyRequest) Reset() {
	*x = RegisterPasskeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterPasskeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPasskeyRequest) ProtoMessage() {}

func (x *RegisterPasskeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPasskeyRequest.ProtoReflect.Descriptor instead.
func (*RegisterPasskeyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{32}
}

func (x *RegisterPasskeyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RegisterPasskeyRequest) GetCode() *PasskeyRegistrationCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *RegisterPasskeyRequest) GetAuthenticator() PasskeyAuthenticator {
	if x != nil {
		return x.Authenticator
	}
	return PasskeyAuthenticator_PASSKEY_AUTHENTICATOR_UNSPECIFIED
}

func (x *RegisterPasskeyRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type RegisterPasskeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details                            *v2beta.Details  `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	PasskeyId                          string           `protobuf:"bytes,2,opt,name=passkey_id,json=passkeyId,proto3" json:"passkey_id,omitempty"`
	PublicKeyCredentialCreationOptions *structpb.Struct `protobuf:"bytes,3,opt,name=public_key_credential_creation_options,json=publicKeyCredentialCreationOptions,proto3" json:"public_key_credential_creation_options,omitempty"`
}

func (x *RegisterPasskeyResponse) Reset() {
	*x = RegisterPasskeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterPasskeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPasskeyResponse) ProtoMessage() {}

func (x *RegisterPasskeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPasskeyResponse.ProtoReflect.Descriptor instead.
func (*RegisterPasskeyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{33}
}

func (x *RegisterPasskeyResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *RegisterPasskeyResponse) GetPasskeyId() string {
	if x != nil {
		return x.PasskeyId
	}
	return ""
}

func (x *RegisterPasskeyResponse) GetPublicKeyCredentialCreationOptions() *structpb.Struct {
	if x != nil {
		return x.PublicKeyCredentialCreationOptions
	}
	return nil
}

type VerifyPasskeyRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId              string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PasskeyId           string           `protobuf:"bytes,2,opt,name=passkey_id,json=passkeyId,proto3" json:"passkey_id,omitempty"`
	PublicKeyCredential *structpb.Struct `protobuf:"bytes,3,opt,name=public_key_credential,json=publicKeyCredential,proto3" json:"public_key_credential,omitempty"`
	PasskeyName         string           `protobuf:"bytes,4,opt,name=passkey_name,json=passkeyName,proto3" json:"passkey_name,omitempty"`
}

func (x *VerifyPasskeyRegistrationRequest) Reset() {
	*x = VerifyPasskeyRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyPasskeyRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPasskeyRegistrationRequest) ProtoMessage() {}

func (x *VerifyPasskeyRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPasskeyRegistrationRequest.ProtoReflect.Descriptor instead.
func (*VerifyPasskeyRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{34}
}

func (x *VerifyPasskeyRegistrationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *VerifyPasskeyRegistrationRequest) GetPasskeyId() string {
	if x != nil {
		return x.PasskeyId
	}
	return ""
}

func (x *VerifyPasskeyRegistrationRequest) GetPublicKeyCredential() *structpb.Struct {
	if x != nil {
		return x.PublicKeyCredential
	}
	return nil
}

func (x *VerifyPasskeyRegistrationRequest) GetPasskeyName() string {
	if x != nil {
		return x.PasskeyName
	}
	return ""
}

type VerifyPasskeyRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *VerifyPasskeyRegistrationResponse) Reset() {
	*x = VerifyPasskeyRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyPasskeyRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPasskeyRegistrationResponse) ProtoMessage() {}

func (x *VerifyPasskeyRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPasskeyRegistrationResponse.ProtoReflect.Descriptor instead.
func (*VerifyPasskeyRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{35}
}

func (x *VerifyPasskeyRegistrationResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type RegisterU2FRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *RegisterU2FRequest) Reset() {
	*x = RegisterU2FRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterU2FRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterU2FRequest) ProtoMessage() {}

func (x *RegisterU2FRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterU2FRequest.ProtoReflect.Descriptor instead.
func (*RegisterU2FRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{36}
}

func (x *RegisterU2FRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RegisterU2FRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type RegisterU2FResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details                            *v2beta.Details  `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	U2FId                              string           `protobuf:"bytes,2,opt,name=u2f_id,json=u2fId,proto3" json:"u2f_id,omitempty"`
	PublicKeyCredentialCreationOptions *structpb.Struct `protobuf:"bytes,3,opt,name=public_key_credential_creation_options,json=publicKeyCredentialCreationOptions,proto3" json:"public_key_credential_creation_options,omitempty"`
}

func (x *RegisterU2FResponse) Reset() {
	*x = RegisterU2FResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterU2FResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterU2FResponse) ProtoMessage() {}

func (x *RegisterU2FResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterU2FResponse.ProtoReflect.Descriptor instead.
func (*RegisterU2FResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{37}
}

func (x *RegisterU2FResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *RegisterU2FResponse) GetU2FId() string {
	if x != nil {
		return x.U2FId
	}
	return ""
}

func (x *RegisterU2FResponse) GetPublicKeyCredentialCreationOptions() *structpb.Struct {
	if x != nil {
		return x.PublicKeyCredentialCreationOptions
	}
	return nil
}

type VerifyU2FRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId              string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	U2FId               string           `protobuf:"bytes,2,opt,name=u2f_id,json=u2fId,proto3" json:"u2f_id,omitempty"`
	PublicKeyCredential *structpb.Struct `protobuf:"bytes,3,opt,name=public_key_credential,json=publicKeyCredential,proto3" json:"public_key_credential,omitempty"`
	TokenName           string           `protobuf:"bytes,4,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
}

func (x *VerifyU2FRegistrationRequest) Reset() {
	*x = VerifyU2FRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyU2FRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyU2FRegistrationRequest) ProtoMessage() {}

func (x *VerifyU2FRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyU2FRegistrationRequest.ProtoReflect.Descriptor instead.
func (*VerifyU2FRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{38}
}

func (x *VerifyU2FRegistrationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *VerifyU2FRegistrationRequest) GetU2FId() string {
	if x != nil {
		return x.U2FId
	}
	return ""
}

func (x *VerifyU2FRegistrationRequest) GetPublicKeyCredential() *structpb.Struct {
	if x != nil {
		return x.PublicKeyCredential
	}
	return nil
}

func (x *VerifyU2FRegistrationRequest) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

type VerifyU2FRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *VerifyU2FRegistrationResponse) Reset() {
	*x = VerifyU2FRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyU2FRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyU2FRegistrationResponse) ProtoMessage() {}

func (x *VerifyU2FRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyU2FRegistrationResponse.ProtoReflect.Descriptor instead.
func (*VerifyU2FRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{39}
}

func (x *VerifyU2FRegistrationResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type RegisterTOTPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *RegisterTOTPRequest) Reset() {
	*x = RegisterTOTPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTOTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTOTPRequest) ProtoMessage() {}

func (x *RegisterTOTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTOTPRequest.ProtoReflect.Descriptor instead.
func (*RegisterTOTPRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{40}
}

func (x *RegisterTOTPRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type RegisterTOTPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	Uri     string          `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	Secret  string          `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *RegisterTOTPResponse) Reset() {
	*x = RegisterTOTPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTOTPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTOTPResponse) ProtoMessage() {}

func (x *RegisterTOTPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTOTPResponse.ProtoReflect.Descriptor instead.
func (*RegisterTOTPResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{41}
}

func (x *RegisterTOTPResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *RegisterTOTPResponse) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *RegisterTOTPResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type VerifyTOTPRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Code   string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *VerifyTOTPRegistrationRequest) Reset() {
	*x = VerifyTOTPRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyTOTPRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTOTPRegistrationRequest) ProtoMessage() {}

func (x *VerifyTOTPRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTOTPRegistrationRequest.ProtoReflect.Descriptor instead.
func (*VerifyTOTPRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{42}
}

func (x *VerifyTOTPRegistrationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *VerifyTOTPRegistrationRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type VerifyTOTPRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *VerifyTOTPRegistrationResponse) Reset() {
	*x = VerifyTOTPRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyTOTPRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTOTPRegistrationResponse) ProtoMessage() {}

func (x *VerifyTOTPRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTOTPRegistrationResponse.ProtoReflect.Descriptor instead.
func (*VerifyTOTPRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{43}
}

func (x *VerifyTOTPRegistrationResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type RemoveTOTPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *RemoveTOTPRequest) Reset() {
	*x = RemoveTOTPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTOTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTOTPRequest) ProtoMessage() {}

func (x *RemoveTOTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTOTPRequest.ProtoReflect.Descriptor instead.
func (*RemoveTOTPRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{44}
}

func (x *RemoveTOTPRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type RemoveTOTPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *RemoveTOTPResponse) Reset() {
	*x = RemoveTOTPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTOTPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTOTPResponse) ProtoMessage() {}

func (x *RemoveTOTPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTOTPResponse.ProtoReflect.Descriptor instead.
func (*RemoveTOTPResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{45}
}

func (x *RemoveTOTPResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type AddOTPSMSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *AddOTPSMSRequest) Reset() {
	*x = AddOTPSMSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOTPSMSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOTPSMSRequest) ProtoMessage() {}

func (x *AddOTPSMSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOTPSMSRequest.ProtoReflect.Descriptor instead.
func (*AddOTPSMSRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{46}
}

func (x *AddOTPSMSRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AddOTPSMSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *AddOTPSMSResponse) Reset() {
	*x = AddOTPSMSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOTPSMSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOTPSMSResponse) ProtoMessage() {}

func (x *AddOTPSMSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOTPSMSResponse.ProtoReflect.Descriptor instead.
func (*AddOTPSMSResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{47}
}

func (x *AddOTPSMSResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type RemoveOTPSMSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *RemoveOTPSMSRequest) Reset() {
	*x = RemoveOTPSMSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveOTPSMSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveOTPSMSRequest) ProtoMessage() {}

func (x *RemoveOTPSMSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveOTPSMSRequest.ProtoReflect.Descriptor instead.
func (*RemoveOTPSMSRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{48}
}

func (x *RemoveOTPSMSRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type RemoveOTPSMSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *RemoveOTPSMSResponse) Reset() {
	*x = RemoveOTPSMSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveOTPSMSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveOTPSMSResponse) ProtoMessage() {}

func (x *RemoveOTPSMSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveOTPSMSResponse.ProtoReflect.Descriptor instead.
func (*RemoveOTPSMSResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{49}
}

func (x *RemoveOTPSMSResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type AddOTPEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *AddOTPEmailRequest) Reset() {
	*x = AddOTPEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOTPEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOTPEmailRequest) ProtoMessage() {}

func (x *AddOTPEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOTPEmailRequest.ProtoReflect.Descriptor instead.
func (*AddOTPEmailRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{50}
}

func (x *AddOTPEmailRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AddOTPEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *AddOTPEmailResponse) Reset() {
	*x = AddOTPEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOTPEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOTPEmailResponse) ProtoMessage() {}

func (x *AddOTPEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOTPEmailResponse.ProtoReflect.Descriptor instead.
func (*AddOTPEmailResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{51}
}

func (x *AddOTPEmailResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type RemoveOTPEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *RemoveOTPEmailRequest) Reset() {
	*x = RemoveOTPEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveOTPEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveOTPEmailRequest) ProtoMessage() {}

func (x *RemoveOTPEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveOTPEmailRequest.ProtoReflect.Descriptor instead.
func (*RemoveOTPEmailRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{52}
}

func (x *RemoveOTPEmailRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type RemoveOTPEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *RemoveOTPEmailResponse) Reset() {
	*x = RemoveOTPEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveOTPEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveOTPEmailResponse) ProtoMessage() {}

func (x *RemoveOTPEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveOTPEmailResponse.ProtoReflect.Descriptor instead.
func (*RemoveOTPEmailResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{53}
}

func (x *RemoveOTPEmailResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type CreatePasskeyRegistrationLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// if no medium is specified, an email is sent with the default url
	//
	// Types that are assignable to Medium:
	//
	//	*CreatePasskeyRegistrationLinkRequest_SendLink
	//	*CreatePasskeyRegistrationLinkRequest_ReturnCode
	Medium isCreatePasskeyRegistrationLinkRequest_Medium `protobuf_oneof:"medium"`
}

func (x *CreatePasskeyRegistrationLinkRequest) Reset() {
	*x = CreatePasskeyRegistrationLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePasskeyRegistrationLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePasskeyRegistrationLinkRequest) ProtoMessage() {}

func (x *CreatePasskeyRegistrationLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePasskeyRegistrationLinkRequest.ProtoReflect.Descriptor instead.
func (*CreatePasskeyRegistrationLinkRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{54}
}

func (x *CreatePasskeyRegistrationLinkRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (m *CreatePasskeyRegistrationLinkRequest) GetMedium() isCreatePasskeyRegistrationLinkRequest_Medium {
	if m != nil {
		return m.Medium
	}
	return nil
}

func (x *CreatePasskeyRegistrationLinkRequest) GetSendLink() *SendPasskeyRegistrationLink {
	if x, ok := x.GetMedium().(*CreatePasskeyRegistrationLinkRequest_SendLink); ok {
		return x.SendLink
	}
	return nil
}

func (x *CreatePasskeyRegistrationLinkRequest) GetReturnCode() *ReturnPasskeyRegistrationCode {
	if x, ok := x.GetMedium().(*CreatePasskeyRegistrationLinkRequest_ReturnCode); ok {
		return x.ReturnCode
	}
	return nil
}

type isCreatePasskeyRegistrationLinkRequest_Medium interface {
	isCreatePasskeyRegistrationLinkRequest_Medium()
}

type CreatePasskeyRegistrationLinkRequest_SendLink struct {
	SendLink *SendPasskeyRegistrationLink `protobuf:"bytes,2,opt,name=send_link,json=sendLink,proto3,oneof"`
}

type CreatePasskeyRegistrationLinkRequest_ReturnCode struct {
	ReturnCode *ReturnPasskeyRegistrationCode `protobuf:"bytes,3,opt,name=return_code,json=returnCode,proto3,oneof"`
}

func (*CreatePasskeyRegistrationLinkRequest_SendLink) isCreatePasskeyRegistrationLinkRequest_Medium() {
}

func (*CreatePasskeyRegistrationLinkRequest_ReturnCode) isCreatePasskeyRegistrationLinkRequest_Medium() {
}

type CreatePasskeyRegistrationLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	// in case the medium was set to return_code, the code will be returned
	Code *PasskeyRegistrationCode `protobuf:"bytes,2,opt,name=code,proto3,oneof" json:"code,omitempty"`
}

func (x *CreatePasskeyRegistrationLinkResponse) Reset() {
	*x = CreatePasskeyRegistrationLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePasskeyRegistrationLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePasskeyRegistrationLinkResponse) ProtoMessage() {}

func (x *CreatePasskeyRegistrationLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePasskeyRegistrationLinkResponse.ProtoReflect.Descriptor instead.
func (*CreatePasskeyRegistrationLinkResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{55}
}

func (x *CreatePasskeyRegistrationLinkResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *CreatePasskeyRegistrationLinkResponse) GetCode() *PasskeyRegistrationCode {
	if x != nil {
		return x.Code
	}
	return nil
}

type StartIdentityProviderIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpId string `protobuf:"bytes,1,opt,name=idp_id,json=idpId,proto3" json:"idp_id,omitempty"`
	// Types that are assignable to Content:
	//
	//	*StartIdentityProviderIntentRequest_Urls
	//	*StartIdentityProviderIntentRequest_Ldap
	Content isStartIdentityProviderIntentRequest_Content `protobuf_oneof:"content"`
}

func (x *StartIdentityProviderIntentRequest) Reset() {
	*x = StartIdentityProviderIntentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartIdentityProviderIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartIdentityProviderIntentRequest) ProtoMessage() {}

func (x *StartIdentityProviderIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartIdentityProviderIntentRequest.ProtoReflect.Descriptor instead.
func (*StartIdentityProviderIntentRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{56}
}

func (x *StartIdentityProviderIntentRequest) GetIdpId() string {
	if x != nil {
		return x.IdpId
	}
	return ""
}

func (m *StartIdentityProviderIntentRequest) GetContent() isStartIdentityProviderIntentRequest_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *StartIdentityProviderIntentRequest) GetUrls() *RedirectURLs {
	if x, ok := x.GetContent().(*StartIdentityProviderIntentRequest_Urls); ok {
		return x.Urls
	}
	return nil
}

func (x *StartIdentityProviderIntentRequest) GetLdap() *LDAPCredentials {
	if x, ok := x.GetContent().(*StartIdentityProviderIntentRequest_Ldap); ok {
		return x.Ldap
	}
	return nil
}

type isStartIdentityProviderIntentRequest_Content interface {
	isStartIdentityProviderIntentRequest_Content()
}

type StartIdentityProviderIntentRequest_Urls struct {
	Urls *RedirectURLs `protobuf:"bytes,2,opt,name=urls,proto3,oneof"`
}

type StartIdentityProviderIntentRequest_Ldap struct {
	Ldap *LDAPCredentials `protobuf:"bytes,3,opt,name=ldap,proto3,oneof"`
}

func (*StartIdentityProviderIntentRequest_Urls) isStartIdentityProviderIntentRequest_Content() {}

func (*StartIdentityProviderIntentRequest_Ldap) isStartIdentityProviderIntentRequest_Content() {}

type StartIdentityProviderIntentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	// Types that are assignable to NextStep:
	//
	//	*StartIdentityProviderIntentResponse_AuthUrl
	//	*StartIdentityProviderIntentResponse_IdpIntent
	//	*StartIdentityProviderIntentResponse_PostForm
	NextStep isStartIdentityProviderIntentResponse_NextStep `protobuf_oneof:"next_step"`
}

func (x *StartIdentityProviderIntentResponse) Reset() {
	*x = StartIdentityProviderIntentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartIdentityProviderIntentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartIdentityProviderIntentResponse) ProtoMessage() {}

func (x *StartIdentityProviderIntentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartIdentityProviderIntentResponse.ProtoReflect.Descriptor instead.
func (*StartIdentityProviderIntentResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{57}
}

func (x *StartIdentityProviderIntentResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (m *StartIdentityProviderIntentResponse) GetNextStep() isStartIdentityProviderIntentResponse_NextStep {
	if m != nil {
		return m.NextStep
	}
	return nil
}

func (x *StartIdentityProviderIntentResponse) GetAuthUrl() string {
	if x, ok := x.GetNextStep().(*StartIdentityProviderIntentResponse_AuthUrl); ok {
		return x.AuthUrl
	}
	return ""
}

func (x *StartIdentityProviderIntentResponse) GetIdpIntent() *IDPIntent {
	if x, ok := x.GetNextStep().(*StartIdentityProviderIntentResponse_IdpIntent); ok {
		return x.IdpIntent
	}
	return nil
}

func (x *StartIdentityProviderIntentResponse) GetPostForm() []byte {
	if x, ok := x.GetNextStep().(*StartIdentityProviderIntentResponse_PostForm); ok {
		return x.PostForm
	}
	return nil
}

type isStartIdentityProviderIntentResponse_NextStep interface {
	isStartIdentityProviderIntentResponse_NextStep()
}

type StartIdentityProviderIntentResponse_AuthUrl struct {
	AuthUrl string `protobuf:"bytes,2,opt,name=auth_url,json=authUrl,proto3,oneof"`
}

type StartIdentityProviderIntentResponse_IdpIntent struct {
	IdpIntent *IDPIntent `protobuf:"bytes,3,opt,name=idp_intent,json=idpIntent,proto3,oneof"`
}

type StartIdentityProviderIntentResponse_PostForm struct {
	PostForm []byte `protobuf:"bytes,4,opt,name=post_form,json=postForm,proto3,oneof"`
}

func (*StartIdentityProviderIntentResponse_AuthUrl) isStartIdentityProviderIntentResponse_NextStep() {
}

func (*StartIdentityProviderIntentResponse_IdpIntent) isStartIdentityProviderIntentResponse_NextStep() {
}

func (*StartIdentityProviderIntentResponse_PostForm) isStartIdentityProviderIntentResponse_NextStep() {
}

type RetrieveIdentityProviderIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdpIntentId    string `protobuf:"bytes,1,opt,name=idp_intent_id,json=idpIntentId,proto3" json:"idp_intent_id,omitempty"`
	IdpIntentToken string `protobuf:"bytes,2,opt,name=idp_intent_token,json=idpIntentToken,proto3" json:"idp_intent_token,omitempty"`
}

func (x *RetrieveIdentityProviderIntentRequest) Reset() {
	*x = RetrieveIdentityProviderIntentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveIdentityProviderIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveIdentityProviderIntentRequest) ProtoMessage() {}

func (x *RetrieveIdentityProviderIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveIdentityProviderIntentRequest.ProtoReflect.Descriptor instead.
func (*RetrieveIdentityProviderIntentRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{58}
}

func (x *RetrieveIdentityProviderIntentRequest) GetIdpIntentId() string {
	if x != nil {
		return x.IdpIntentId
	}
	return ""
}

func (x *RetrieveIdentityProviderIntentRequest) GetIdpIntentToken() string {
	if x != nil {
		return x.IdpIntentToken
	}
	return ""
}

type RetrieveIdentityProviderIntentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details        *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	IdpInformation *IDPInformation `protobuf:"bytes,2,opt,name=idp_information,json=idpInformation,proto3" json:"idp_information,omitempty"`
	UserId         string          `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *RetrieveIdentityProviderIntentResponse) Reset() {
	*x = RetrieveIdentityProviderIntentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveIdentityProviderIntentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveIdentityProviderIntentResponse) ProtoMessage() {}

func (x *RetrieveIdentityProviderIntentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveIdentityProviderIntentResponse.ProtoReflect.Descriptor instead.
func (*RetrieveIdentityProviderIntentResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{59}
}

func (x *RetrieveIdentityProviderIntentResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *RetrieveIdentityProviderIntentResponse) GetIdpInformation() *IDPInformation {
	if x != nil {
		return x.IdpInformation
	}
	return nil
}

func (x *RetrieveIdentityProviderIntentResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AddIDPLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IdpLink *IDPLink `protobuf:"bytes,2,opt,name=idp_link,json=idpLink,proto3" json:"idp_link,omitempty"`
}

func (x *AddIDPLinkRequest) Reset() {
	*x = AddIDPLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIDPLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIDPLinkRequest) ProtoMessage() {}

func (x *AddIDPLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIDPLinkRequest.ProtoReflect.Descriptor instead.
func (*AddIDPLinkRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{60}
}

func (x *AddIDPLinkRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddIDPLinkRequest) GetIdpLink() *IDPLink {
	if x != nil {
		return x.IdpLink
	}
	return nil
}

type AddIDPLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *AddIDPLinkResponse) Reset() {
	*x = AddIDPLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIDPLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIDPLinkResponse) ProtoMessage() {}

func (x *AddIDPLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIDPLinkResponse.ProtoReflect.Descriptor instead.
func (*AddIDPLinkResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{61}
}

func (x *AddIDPLinkResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type PasswordResetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// if no medium is specified, an email is sent with the default url
	//
	// Types that are assignable to Medium:
	//
	//	*PasswordResetRequest_SendLink
	//	*PasswordResetRequest_ReturnCode
	Medium isPasswordResetRequest_Medium `protobuf_oneof:"medium"`
}

func (x *PasswordResetRequest) Reset() {
	*x = PasswordResetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordResetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordResetRequest) ProtoMessage() {}

func (x *PasswordResetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordResetRequest.ProtoReflect.Descriptor instead.
func (*PasswordResetRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{62}
}

func (x *PasswordResetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (m *PasswordResetRequest) GetMedium() isPasswordResetRequest_Medium {
	if m != nil {
		return m.Medium
	}
	return nil
}

func (x *PasswordResetRequest) GetSendLink() *SendPasswordResetLink {
	if x, ok := x.GetMedium().(*PasswordResetRequest_SendLink); ok {
		return x.SendLink
	}
	return nil
}

func (x *PasswordResetRequest) GetReturnCode() *ReturnPasswordResetCode {
	if x, ok := x.GetMedium().(*PasswordResetRequest_ReturnCode); ok {
		return x.ReturnCode
	}
	return nil
}

type isPasswordResetRequest_Medium interface {
	isPasswordResetRequest_Medium()
}

type PasswordResetRequest_SendLink struct {
	SendLink *SendPasswordResetLink `protobuf:"bytes,2,opt,name=send_link,json=sendLink,proto3,oneof"`
}

type PasswordResetRequest_ReturnCode struct {
	ReturnCode *ReturnPasswordResetCode `protobuf:"bytes,3,opt,name=return_code,json=returnCode,proto3,oneof"`
}

func (*PasswordResetRequest_SendLink) isPasswordResetRequest_Medium() {}

func (*PasswordResetRequest_ReturnCode) isPasswordResetRequest_Medium() {}

type PasswordResetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	// in case the medium was set to return_code, the code will be returned
	VerificationCode *string `protobuf:"bytes,2,opt,name=verification_code,json=verificationCode,proto3,oneof" json:"verification_code,omitempty"`
}

func (x *PasswordResetResponse) Reset() {
	*x = PasswordResetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordResetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordResetResponse) ProtoMessage() {}

func (x *PasswordResetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordResetResponse.ProtoReflect.Descriptor instead.
func (*PasswordResetResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{63}
}

func (x *PasswordResetResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *PasswordResetResponse) GetVerificationCode() string {
	if x != nil && x.VerificationCode != nil {
		return *x.VerificationCode
	}
	return ""
}

type SetPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string    `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	NewPassword *Password `protobuf:"bytes,2,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
	// if neither, the current password must be provided nor a verification code generated by the PasswordReset is provided,
	// the user must be granted permission to set a password
	//
	// Types that are assignable to Verification:
	//
	//	*SetPasswordRequest_CurrentPassword
	//	*SetPasswordRequest_VerificationCode
	Verification isSetPasswordRequest_Verification `protobuf_oneof:"verification"`
}

func (x *SetPasswordRequest) Reset() {
	*x = SetPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPasswordRequest) ProtoMessage() {}

func (x *SetPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPasswordRequest.ProtoReflect.Descriptor instead.
func (*SetPasswordRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{64}
}

func (x *SetPasswordRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SetPasswordRequest) GetNewPassword() *Password {
	if x != nil {
		return x.NewPassword
	}
	return nil
}

func (m *SetPasswordRequest) GetVerification() isSetPasswordRequest_Verification {
	if m != nil {
		return m.Verification
	}
	return nil
}

func (x *SetPasswordRequest) GetCurrentPassword() string {
	if x, ok := x.GetVerification().(*SetPasswordRequest_CurrentPassword); ok {
		return x.CurrentPassword
	}
	return ""
}

func (x *SetPasswordRequest) GetVerificationCode() string {
	if x, ok := x.GetVerification().(*SetPasswordRequest_VerificationCode); ok {
		return x.VerificationCode
	}
	return ""
}

type isSetPasswordRequest_Verification interface {
	isSetPasswordRequest_Verification()
}

type SetPasswordRequest_CurrentPassword struct {
	CurrentPassword string `protobuf:"bytes,3,opt,name=current_password,json=currentPassword,proto3,oneof"`
}

type SetPasswordRequest_VerificationCode struct {
	VerificationCode string `protobuf:"bytes,4,opt,name=verification_code,json=verificationCode,proto3,oneof"`
}

func (*SetPasswordRequest_CurrentPassword) isSetPasswordRequest_Verification() {}

func (*SetPasswordRequest_VerificationCode) isSetPasswordRequest_Verification() {}

type SetPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2beta.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *SetPasswordResponse) Reset() {
	*x = SetPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPasswordResponse) ProtoMessage() {}

func (x *SetPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPasswordResponse.ProtoReflect.Descriptor instead.
func (*SetPasswordResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{65}
}

func (x *SetPasswordResponse) GetDetails() *v2beta.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type ListAuthenticationMethodTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ListAuthenticationMethodTypesRequest) Reset() {
	*x = ListAuthenticationMethodTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuthenticationMethodTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthenticationMethodTypesRequest) ProtoMessage() {}

func (x *ListAuthenticationMethodTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuthenticationMethodTypesRequest.ProtoReflect.Descriptor instead.
func (*ListAuthenticationMethodTypesRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{66}
}

func (x *ListAuthenticationMethodTypesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ListAuthenticationMethodTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details         *v2beta.ListDetails        `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	AuthMethodTypes []AuthenticationMethodType `protobuf:"varint,2,rep,packed,name=auth_method_types,json=authMethodTypes,proto3,enum=zitadel.user.v2beta.AuthenticationMethodType" json:"auth_method_types,omitempty"`
}

func (x *ListAuthenticationMethodTypesResponse) Reset() {
	*x = ListAuthenticationMethodTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuthenticationMethodTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthenticationMethodTypesResponse) ProtoMessage() {}

func (x *ListAuthenticationMethodTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_user_service_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuthenticationMethodTypesResponse.ProtoReflect.Descriptor instead.
func (*ListAuthenticationMethodTypesResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_user_service_proto_rawDescGZIP(), []int{67}
}

func (x *ListAuthenticationMethodTypesResponse) GetDetails() *v2beta.ListDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ListAuthenticationMethodTypesResponse) GetAuthMethodTypes() []AuthenticationMethodType {
	if x != nil {
		return x.AuthMethodTypes
	}
	return nil
}

var File_zitadel_user_v2beta_user_service_proto protoreflect.FileDescriptor

var file_zitadel_user_v2beta_user_service_proto_rawDesc = []byte{
	0x0a, 0x26, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x1a, 0x22, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2b, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x69, 0x64, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x22, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x07, 0x0a, 0x13, 0x41,
	0x64, 0x64, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x59, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x2e, 0x4a, 0x26, 0x22, 0x64, 0x36, 0x35, 0x34, 0x65,
	0x36, 0x62, 0x61, 0x2d, 0x37, 0x30, 0x61, 0x33, 0x2d, 0x34, 0x38, 0x65, 0x66, 0x2d, 0x61, 0x39,
	0x35, 0x64, 0x2d, 0x33, 0x37, 0x63, 0x38, 0x64, 0x38, 0x61, 0x37, 0x39, 0x30, 0x31, 0x61, 0x22,
	0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01,
	0x48, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x23, 0x92, 0x41, 0x16, 0x4a, 0x0e, 0x22, 0x6d, 0x69, 0x6e, 0x6e, 0x69, 0x65, 0x2d, 0x6d, 0x6f,
	0x75, 0x73, 0x65, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0xc8, 0x01, 0x48, 0x02, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53,
	0x65, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x0b, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x38, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x4e, 0x0a, 0x0f, 0x68, 0x61,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x69, 0x64,
	0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x49, 0x44, 0x50, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x08, 0x69, 0x64, 0x70,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x5d, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x70, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x2a, 0x4a,
	0x22, 0x22, 0x54, 0x4a, 0x4f, 0x50, 0x57, 0x53, 0x44, 0x59, 0x49, 0x4c, 0x4c, 0x48, 0x58, 0x46,
	0x56, 0x34, 0x4d, 0x4c, 0x4b, 0x4e, 0x4e, 0x4a, 0x4f, 0x57, 0x46, 0x47, 0x37, 0x56, 0x53, 0x44,
	0x43, 0x4b, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xc8, 0x01, 0x48, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x04, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xcf, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22,
	0x0a, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0x92, 0x41,
	0x41, 0x32, 0x24, 0x55, 0x73, 0x65, 0x72, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20,
	0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x2e, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30,
	0x31, 0x32, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80,
	0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x0c, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xd1, 0x01, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22,
	0xcf, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x0d, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xf9, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39,
	0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22,
	0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x18, 0x4a,
	0x10, 0x22, 0x6d, 0x69, 0x6e, 0x69, 0x40, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x09, 0x72, 0x07, 0x10,
	0x01, 0x18, 0xc8, 0x01, 0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x4d, 0x0a,
	0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x0b,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x6a, 0x02, 0x08, 0x01, 0x48,
	0x00, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x01,
	0x0a, 0x10, 0x53, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x11,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36,
	0x38, 0x30, 0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x17, 0x52, 0x65,
	0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x30, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38,
	0x30, 0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x60, 0x92, 0x41, 0x51, 0x32, 0x3e, 0x22, 0x74, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x65, 0x74, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x4a, 0x0a, 0x22, 0x53, 0x4b, 0x4a, 0x64, 0x33, 0x34, 0x32, 0x6b,
	0x22, 0x78, 0x14, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01,
	0x18, 0x14, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x4f, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xf5, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a,
	0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36, 0x34, 0x38, 0x39,
	0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x3c, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26,
	0x92, 0x41, 0x16, 0x4a, 0x0e, 0x22, 0x2b, 0x34, 0x31, 0x37, 0x39, 0x31, 0x32, 0x33, 0x34, 0x35,
	0x36, 0x37, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x4d, 0x0a,
	0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x0b,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x6a, 0x02, 0x08, 0x01, 0x48,
	0x00, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x01,
	0x0a, 0x10, 0x53, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x11,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x5a, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b,
	0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36, 0x34, 0x38,
	0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x4f, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0x92, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92,
	0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36,
	0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x4d, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x53, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x65, 0x6e,
	0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x11,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41,
	0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36, 0x34,
	0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x8d, 0x01, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x60, 0x92,
	0x41, 0x51, 0x32, 0x3e, 0x22, 0x74, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x65, 0x74, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x4a, 0x0a, 0x22, 0x53, 0x4b, 0x4a, 0x64, 0x33, 0x34, 0x32, 0x6b, 0x22, 0x78, 0x14,
	0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52,
	0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x4f, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0x59, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22,
	0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x31, 0x32, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33,
	0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4e, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xf4, 0x03,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x2e, 0x4a, 0x26,
	0x22, 0x64, 0x36, 0x35, 0x34, 0x65, 0x36, 0x62, 0x61, 0x2d, 0x37, 0x30, 0x61, 0x33, 0x2d, 0x34,
	0x38, 0x65, 0x66, 0x2d, 0x61, 0x39, 0x35, 0x64, 0x2d, 0x33, 0x37, 0x63, 0x38, 0x64, 0x38, 0x61,
	0x37, 0x39, 0x30, 0x31, 0x61, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x44,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x23, 0x92, 0x41, 0x16, 0x4a, 0x0e, 0x22, 0x6d, 0x69, 0x6e, 0x6e, 0x69, 0x65, 0x2d, 0x6d,
	0x6f, 0x75, 0x73, 0x65, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x10, 0x01, 0x18, 0xc8, 0x01, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x48,
	0x75, 0x6d, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x01, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53,
	0x65, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x48, 0x02, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x65,
	0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x48, 0x03, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x53, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x04, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x75, 0x6d, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x5d, 0x0a, 0x15, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a,
	0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x31, 0x32, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38,
	0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x52, 0x0a, 0x16, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0x5d, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92,
	0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x31, 0x32, 0x39, 0x30, 0x36,
	0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x52, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x57, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a,
	0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x31, 0x32, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38,
	0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x4c, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x59, 0x0a,
	0x11, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39,
	0x30, 0x31, 0x32, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x78, 0xc8, 0x01,
	0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x12, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xd7, 0x04, 0x0a, 0x16, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x1c, 0x4a, 0x14, 0x22, 0x31, 0x36, 0x33, 0x38,
	0x34, 0x30, 0x37, 0x37, 0x36, 0x38, 0x33, 0x35, 0x34, 0x33, 0x32, 0x37, 0x30, 0x35, 0x22, 0x78,
	0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18,
	0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0xb8, 0x01, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x71, 0x92, 0x41, 0x6e, 0x32, 0x6c, 0x22, 0x6f,
	0x6e, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45,
	0x4c, 0x3b, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79,
	0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0xe6, 0x01, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x94, 0x01, 0x92, 0x41, 0x90, 0x01, 0x32,
	0x8d, 0x01, 0x22, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x20, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x28, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6f, 0x72, 0x20,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x29, 0x2e,
	0x20, 0x49, 0x66, 0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x20, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x64, 0x2c, 0x20, 0x62, 0x6f, 0x74, 0x68, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x2e, 0x22, 0x52,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x49,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31,
	0x92, 0x41, 0x2e, 0x32, 0x2c, 0x22, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x6f, 0x6e, 0x20,
	0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69,
	0x73, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e,
	0x22, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xba, 0x07, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41,
	0x16, 0x4a, 0x14, 0x22, 0x31, 0x36, 0x33, 0x38, 0x34, 0x30, 0x37, 0x37, 0x36, 0x38, 0x33, 0x35,
	0x34, 0x33, 0x32, 0x37, 0x30, 0x35, 0x22, 0x52, 0x09, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0xaa, 0x06, 0x0a, 0x26, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0xbc, 0x05, 0x92,
	0x41, 0xb8, 0x05, 0x32, 0xfa, 0x01, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x20, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x29, 0x2e, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x20,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x4a, 0x53, 0x4f, 0x4e, 0x2c, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x75, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x57, 0x65, 0x62, 0x61, 0x75, 0x74,
	0x68, 0x4e, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x53, 0x65, 0x65, 0x20, 0x61,
	0x6c, 0x73, 0x6f, 0x3a, 0x20, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
	0x77, 0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x54, 0x52, 0x2f, 0x77, 0x65, 0x62, 0x61,
	0x75, 0x74, 0x68, 0x6e, 0x2f, 0x23, 0x64, 0x69, 0x63, 0x74, 0x64, 0x65, 0x66, 0x2d, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x79, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4a, 0xb8, 0x03, 0x7b, 0x22, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x3a,
	0x7b, 0x22, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x22,
	0x6e, 0x6f, 0x6e, 0x65, 0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x7b,
	0x22, 0x75, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x7d, 0x2c, 0x22,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x3a, 0x22, 0x58, 0x61, 0x4d, 0x59,
	0x77, 0x57, 0x4f, 0x5a, 0x35, 0x68, 0x6a, 0x36, 0x70, 0x77, 0x74, 0x77, 0x4a, 0x4a, 0x6c, 0x70,
	0x63, 0x49, 0x2d, 0x45, 0x78, 0x6b, 0x4f, 0x35, 0x54, 0x78, 0x65, 0x76, 0x42, 0x4d, 0x47, 0x34,
	0x52, 0x38, 0x44, 0x6f, 0x4b, 0x51, 0x51, 0x22, 0x2c, 0x22, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x3a, 0x5b, 0x7b,
	0x22, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x74, 0x56, 0x70, 0x31, 0x51, 0x66, 0x59, 0x68, 0x54, 0x38,
	0x44, 0x6b, 0x79, 0x45, 0x48, 0x56, 0x72, 0x76, 0x37, 0x62, 0x6c, 0x6e, 0x70, 0x41, 0x6f, 0x32,
	0x59, 0x4a, 0x7a, 0x62, 0x5a, 0x67, 0x5a, 0x4e, 0x42, 0x66, 0x37, 0x7a, 0x50, 0x73, 0x36, 0x43,
	0x49, 0x22, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2d, 0x6b, 0x65, 0x79, 0x22, 0x7d, 0x5d, 0x2c, 0x22, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x43, 0x72, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x61,
	0x6c, 0x67, 0x22, 0x3a, 0x2d, 0x37, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x6b, 0x65, 0x79, 0x22, 0x7d, 0x5d, 0x2c, 0x22, 0x72, 0x70,
	0x22, 0x3a, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f,
	0x73, 0x74, 0x22, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x5a, 0x49, 0x54, 0x41,
	0x44, 0x45, 0x4c, 0x22, 0x7d, 0x2c, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x3a,
	0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2c, 0x22, 0x75, 0x73, 0x65, 0x72, 0x22, 0x3a, 0x7b, 0x22,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x54, 0x69,
	0x6d, 0x20, 0x4d, 0x6f, 0x68, 0x6c, 0x6d, 0x61, 0x6e, 0x6e, 0x22, 0x2c, 0x22, 0x69, 0x64, 0x22,
	0x3a, 0x22, 0x4d, 0x6a, 0x45, 0x31, 0x4e, 0x54, 0x6b, 0x34, 0x4d, 0x44, 0x41, 0x77, 0x4e, 0x44,
	0x59, 0x30, 0x4f, 0x54, 0x6b, 0x34, 0x4f, 0x54, 0x51, 0x77, 0x22, 0x2c, 0x22, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x6d, 0x22, 0x7d, 0x7d, 0x7d, 0x52, 0x22, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xe2, 0x09, 0x0a, 0x20, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65,
	0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x1c, 0x4a, 0x14, 0x22, 0x31, 0x36, 0x33,
	0x38, 0x34, 0x30, 0x37, 0x37, 0x36, 0x38, 0x33, 0x35, 0x34, 0x33, 0x32, 0x37, 0x30, 0x35, 0x22,
	0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0a, 0x70,
	0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2c, 0x92, 0x41, 0x1c, 0x4a, 0x14, 0x22, 0x31, 0x36, 0x33, 0x38, 0x34, 0x30, 0x37, 0x37, 0x36,
	0x38, 0x33, 0x35, 0x34, 0x33, 0x32, 0x37, 0x30, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x70,
	0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0xe2, 0x07, 0x0a, 0x15, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x42, 0x94, 0x07, 0x92, 0x41, 0x85, 0x07, 0x32, 0xb1, 0x01, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x4a, 0x53, 0x4f, 0x4e, 0x20,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x20, 0x57, 0x65, 0x62,
	0x61, 0x75, 0x74, 0x68, 0x4e, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x53, 0x65,
	0x65, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x3a, 0x20, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x77, 0x77, 0x77, 0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x54, 0x52, 0x2f, 0x77,
	0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2f, 0x23, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6b,
	0x65, 0x79, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4a, 0xc7, 0x05, 0x7b,
	0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x6b,
	0x65, 0x79, 0x22, 0x2c, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x70, 0x61, 0x77, 0x56, 0x61, 0x72,
	0x46, 0x34, 0x78, 0x50, 0x78, 0x4c, 0x46, 0x6d, 0x66, 0x43, 0x6e, 0x52, 0x6b, 0x77, 0x58, 0x57,
	0x65, 0x54, 0x72, 0x4b, 0x47, 0x7a, 0x61, 0x62, 0x63, 0x41, 0x69, 0x39, 0x32, 0x4c, 0x45, 0x49,
	0x31, 0x57, 0x43, 0x30, 0x30, 0x22, 0x2c, 0x22, 0x72, 0x61, 0x77, 0x49, 0x64, 0x22, 0x3a, 0x22,
	0x70, 0x61, 0x77, 0x56, 0x61, 0x72, 0x46, 0x34, 0x78, 0x50, 0x78, 0x4c, 0x46, 0x6d, 0x66, 0x43,
	0x6e, 0x52, 0x6b, 0x77, 0x58, 0x57, 0x65, 0x54, 0x72, 0x4b, 0x47, 0x7a, 0x61, 0x62, 0x63, 0x41,
	0x69, 0x39, 0x32, 0x4c, 0x45, 0x49, 0x31, 0x57, 0x43, 0x30, 0x30, 0x22, 0x2c, 0x22, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x7b, 0x22, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x3a, 0x22, 0x6f, 0x32,
	0x4e, 0x6d, 0x62, 0x58, 0x52, 0x6d, 0x63, 0x47, 0x46, 0x6a, 0x61, 0x32, 0x56, 0x6b, 0x5a, 0x32,
	0x46, 0x30, 0x64, 0x46, 0x4e, 0x30, 0x62, 0x58, 0x53, 0x69, 0x59, 0x32, 0x46, 0x73, 0x5a, 0x79,
	0x5a, 0x6a, 0x63, 0x32, 0x6c, 0x6e, 0x57, 0x45, 0x63, 0x77, 0x52, 0x51, 0x49, 0x67, 0x52, 0x4b,
	0x53, 0x33, 0x56, 0x70, 0x65, 0x45, 0x39, 0x74, 0x66, 0x45, 0x78, 0x58, 0x52, 0x7a, 0x6b, 0x6f,
	0x55, 0x4b, 0x6e, 0x47, 0x34, 0x72, 0x51, 0x57, 0x50, 0x76, 0x74, 0x53, 0x53, 0x74, 0x34, 0x59,
	0x74, 0x44, 0x47, 0x67, 0x54, 0x78, 0x33, 0x32, 0x6f, 0x43, 0x49, 0x51, 0x44, 0x50, 0x65, 0x79,
	0x2d, 0x32, 0x59, 0x4a, 0x34, 0x75, 0x49, 0x67, 0x2d, 0x51, 0x43, 0x4d, 0x34, 0x6a, 0x6a, 0x36,
	0x61, 0x45, 0x32, 0x55, 0x33, 0x74, 0x67, 0x4d, 0x46, 0x4d, 0x5f, 0x52, 0x50, 0x37, 0x45, 0x66,
	0x78, 0x36, 0x78, 0x52, 0x75, 0x33, 0x4a, 0x47, 0x68, 0x68, 0x64, 0x58, 0x52, 0x6f, 0x52, 0x47,
	0x46, 0x30, 0x59, 0x56, 0x69, 0x6b, 0x53, 0x5a, 0x59, 0x4e, 0x35, 0x59, 0x67, 0x4f, 0x6a, 0x47,
	0x68, 0x30, 0x4e, 0x42, 0x63, 0x50, 0x5a, 0x48, 0x5a, 0x67, 0x57, 0x34, 0x5f, 0x6b, 0x72, 0x72,
	0x6d, 0x69, 0x68, 0x6a, 0x4c, 0x48, 0x6d, 0x56, 0x7a, 0x7a, 0x75, 0x6f, 0x4d, 0x64, 0x6c, 0x32,
	0x4e, 0x46, 0x41, 0x41, 0x41, 0x41, 0x41, 0x44, 0x6a, 0x75, 0x37, 0x36, 0x30, 0x38, 0x35, 0x59,
	0x68, 0x6d, 0x6c, 0x74, 0x31, 0x43, 0x45, 0x4f, 0x48, 0x6b, 0x77, 0x4c, 0x51, 0x41, 0x49, 0x4b,
	0x57, 0x73, 0x46, 0x57, 0x71, 0x78, 0x65, 0x4d, 0x54, 0x38, 0x53, 0x78, 0x5a, 0x6e, 0x77, 0x70,
	0x30, 0x5a, 0x4d, 0x46, 0x31, 0x6e, 0x6b, 0x36, 0x79, 0x68, 0x73, 0x32, 0x6d, 0x33, 0x41, 0x49,
	0x76, 0x64, 0x69, 0x78, 0x43, 0x4e, 0x56, 0x67, 0x74, 0x4e, 0x70, 0x51, 0x45, 0x43, 0x41, 0x79,
	0x59, 0x67, 0x41, 0x53, 0x46, 0x59, 0x49, 0x4d, 0x47, 0x55, 0x44, 0x53, 0x50, 0x32, 0x46, 0x41,
	0x51, 0x6e, 0x32, 0x4d, 0x49, 0x66, 0x50, 0x4d, 0x79, 0x37, 0x63, 0x79, 0x42, 0x5f, 0x59, 0x33,
	0x30, 0x56, 0x71, 0x69, 0x78, 0x56, 0x67, 0x47, 0x55, 0x4c, 0x54, 0x42, 0x74, 0x46, 0x6a, 0x66,
	0x52, 0x69, 0x49, 0x6c, 0x67, 0x67, 0x6a, 0x55, 0x47, 0x66, 0x51, 0x6f, 0x33, 0x5f, 0x2d, 0x43,
	0x72, 0x4d, 0x6d, 0x48, 0x33, 0x53, 0x2d, 0x5a, 0x51, 0x6b, 0x46, 0x4b, 0x57, 0x4b, 0x6e, 0x4e,
	0x42, 0x51, 0x45, 0x41, 0x4d, 0x6b, 0x46, 0x74, 0x47, 0x2d, 0x39, 0x41, 0x34, 0x7a, 0x71, 0x57,
	0x30, 0x22, 0x2c, 0x22, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x53,
	0x4f, 0x4e, 0x22, 0x3a, 0x22, 0x65, 0x79, 0x4a, 0x30, 0x65, 0x58, 0x42, 0x6c, 0x49, 0x6a, 0x6f,
	0x69, 0x64, 0x32, 0x56, 0x69, 0x59, 0x58, 0x56, 0x30, 0x61, 0x47, 0x34, 0x75, 0x59, 0x33, 0x4a,
	0x6c, 0x59, 0x58, 0x52, 0x6c, 0x49, 0x69, 0x77, 0x69, 0x59, 0x32, 0x68, 0x68, 0x62, 0x47, 0x78,
	0x6c, 0x62, 0x6d, 0x64, 0x6c, 0x49, 0x6a, 0x6f, 0x69, 0x51, 0x6c, 0x68, 0x58, 0x64, 0x48, 0x68,
	0x30, 0x57, 0x47, 0x78, 0x4a, 0x65, 0x46, 0x5a, 0x5a, 0x61, 0x30, 0x70, 0x48, 0x54, 0x31, 0x64,
	0x56, 0x61, 0x55, 0x56, 0x6d, 0x4d, 0x32, 0x35, 0x7a, 0x62, 0x79, 0x30, 0x32, 0x61, 0x58, 0x5a,
	0x4b, 0x64, 0x57, 0x77, 0x32, 0x59, 0x6d, 0x4e, 0x6d, 0x57, 0x48, 0x64, 0x4d, 0x56, 0x6c, 0x46,
	0x49, 0x61, 0x79, 0x49, 0x73, 0x49, 0x6d, 0x39, 0x79, 0x61, 0x57, 0x64, 0x70, 0x62, 0x69, 0x49,
	0x36, 0x49, 0x6d, 0x68, 0x30, 0x64, 0x48, 0x42, 0x7a, 0x4f, 0x69, 0x38, 0x76, 0x62, 0x47, 0x39,
	0x6a, 0x59, 0x57, 0x78, 0x6f, 0x62, 0x33, 0x4e, 0x30, 0x4f, 0x6a, 0x67, 0x77, 0x4f, 0x44, 0x41,
	0x69, 0x66, 0x51, 0x22, 0x7d, 0x7d, 0x78, 0x80, 0x80, 0x40, 0x80, 0x01, 0x37, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x45, 0x0a,
	0x0c, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x12, 0x4a, 0x0a, 0x22, 0x66, 0x69, 0x64, 0x6f, 0x20,
	0x6b, 0x65, 0x79, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x21, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61,
	0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x55, 0x32, 0x46, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x1c,
	0x4a, 0x14, 0x22, 0x31, 0x36, 0x33, 0x38, 0x34, 0x30, 0x37, 0x37, 0x36, 0x38, 0x33, 0x35, 0x34,
	0x33, 0x32, 0x37, 0x30, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x49, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x22, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20,
	0x6f, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x22, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xae, 0x07, 0x0a,
	0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x32, 0x46, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x30,
	0x0a, 0x06, 0x75, 0x32, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0x92, 0x41, 0x16, 0x4a, 0x14, 0x22, 0x31, 0x36, 0x33, 0x38, 0x34, 0x30, 0x37, 0x37, 0x36, 0x38,
	0x33, 0x35, 0x34, 0x33, 0x32, 0x37, 0x30, 0x35, 0x22, 0x52, 0x05, 0x75, 0x32, 0x66, 0x49, 0x64,
	0x12, 0xaa, 0x06, 0x0a, 0x26, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0xbc, 0x05, 0x92, 0x41, 0xb8,
	0x05, 0x32, 0xfa, 0x01, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x28, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x20,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x29, 0x2e, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x68,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x20, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x20, 0x74, 0x6f, 0x20, 0x4a, 0x53, 0x4f, 0x4e, 0x2c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x75,
	0x73, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x57, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x4e,
	0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x53, 0x65, 0x65, 0x20, 0x61, 0x6c, 0x73,
	0x6f, 0x3a, 0x20, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e,
	0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x54, 0x52, 0x2f, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74,
	0x68, 0x6e, 0x2f, 0x23, 0x64, 0x69, 0x63, 0x74, 0x64, 0x65, 0x66, 0x2d, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x6b, 0x65, 0x79, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0xb8,
	0x03, 0x7b, 0x22, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x3a, 0x7b, 0x22,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x22, 0x6e, 0x6f,
	0x6e, 0x65, 0x22, 0x2c, 0x22, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x7b, 0x22, 0x75,
	0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x7d, 0x2c, 0x22, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x3a, 0x22, 0x58, 0x61, 0x4d, 0x59, 0x77, 0x57,
	0x4f, 0x5a, 0x35, 0x68, 0x6a, 0x36, 0x70, 0x77, 0x74, 0x77, 0x4a, 0x4a, 0x6c, 0x70, 0x63, 0x49,
	0x2d, 0x45, 0x78, 0x6b, 0x4f, 0x35, 0x54, 0x78, 0x65, 0x76, 0x42, 0x4d, 0x47, 0x34, 0x52, 0x38,
	0x44, 0x6f, 0x4b, 0x51, 0x51, 0x22, 0x2c, 0x22, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x69,
	0x64, 0x22, 0x3a, 0x22, 0x74, 0x56, 0x70, 0x31, 0x51, 0x66, 0x59, 0x68, 0x54, 0x38, 0x44, 0x6b,
	0x79, 0x45, 0x48, 0x56, 0x72, 0x76, 0x37, 0x62, 0x6c, 0x6e, 0x70, 0x41, 0x6f, 0x32, 0x59, 0x4a,
	0x7a, 0x62, 0x5a, 0x67, 0x5a, 0x4e, 0x42, 0x66, 0x37, 0x7a, 0x50, 0x73, 0x36, 0x43, 0x49, 0x22,
	0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d,
	0x6b, 0x65, 0x79, 0x22, 0x7d, 0x5d, 0x2c, 0x22, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x43, 0x72,
	0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x61, 0x6c, 0x67,
	0x22, 0x3a, 0x2d, 0x37, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2d, 0x6b, 0x65, 0x79, 0x22, 0x7d, 0x5d, 0x2c, 0x22, 0x72, 0x70, 0x22, 0x3a,
	0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74,
	0x22, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45,
	0x4c, 0x22, 0x7d, 0x2c, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x3a, 0x33, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x2c, 0x22, 0x75, 0x73, 0x65, 0x72, 0x22, 0x3a, 0x7b, 0x22, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x54, 0x69, 0x6d, 0x20,
	0x4d, 0x6f, 0x68, 0x6c, 0x6d, 0x61, 0x6e, 0x6e, 0x22, 0x2c, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x22,
	0x4d, 0x6a, 0x45, 0x31, 0x4e, 0x54, 0x6b, 0x34, 0x4d, 0x44, 0x41, 0x77, 0x4e, 0x44, 0x59, 0x30,
	0x4f, 0x54, 0x6b, 0x34, 0x4f, 0x54, 0x51, 0x77, 0x22, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x3a, 0x22, 0x74, 0x69, 0x6d, 0x22, 0x7d, 0x7d, 0x7d, 0x52, 0x22, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd2, 0x09,
	0x0a, 0x1c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x32, 0x46, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2c, 0x92, 0x41, 0x1c, 0x4a, 0x14, 0x22, 0x31, 0x36, 0x33, 0x38, 0x34, 0x30, 0x37, 0x37, 0x36,
	0x38, 0x33, 0x35, 0x34, 0x33, 0x32, 0x37, 0x30, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x06, 0x75, 0x32, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x1c, 0x4a, 0x14, 0x22, 0x31, 0x36, 0x33,
	0x38, 0x34, 0x30, 0x37, 0x37, 0x36, 0x38, 0x33, 0x35, 0x34, 0x33, 0x32, 0x37, 0x30, 0x35, 0x22,
	0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xc8, 0x01, 0x52, 0x05, 0x75, 0x32, 0x66, 0x49, 0x64, 0x12, 0xe2, 0x07, 0x0a, 0x15, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x42, 0x94, 0x07, 0x92, 0x41, 0x85, 0x07, 0x32, 0xb1, 0x01, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x20, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x20, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x4a, 0x53, 0x4f,
	0x4e, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x20, 0x57,
	0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x4e, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x20,
	0x53, 0x65, 0x65, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x3a, 0x20, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x54, 0x52,
	0x2f, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2f, 0x23, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x6b, 0x65, 0x79, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4a, 0xc7,
	0x05, 0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2d, 0x6b, 0x65, 0x79, 0x22, 0x2c, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x70, 0x61, 0x77, 0x56,
	0x61, 0x72, 0x46, 0x34, 0x78, 0x50, 0x78, 0x4c, 0x46, 0x6d, 0x66, 0x43, 0x6e, 0x52, 0x6b, 0x77,
	0x58, 0x57, 0x65, 0x54, 0x72, 0x4b, 0x47, 0x7a, 0x61, 0x62, 0x63, 0x41, 0x69, 0x39, 0x32, 0x4c,
	0x45, 0x49, 0x31, 0x57, 0x43, 0x30, 0x30, 0x22, 0x2c, 0x22, 0x72, 0x61, 0x77, 0x49, 0x64, 0x22,
	0x3a, 0x22, 0x70, 0x61, 0x77, 0x56, 0x61, 0x72, 0x46, 0x34, 0x78, 0x50, 0x78, 0x4c, 0x46, 0x6d,
	0x66, 0x43, 0x6e, 0x52, 0x6b, 0x77, 0x58, 0x57, 0x65, 0x54, 0x72, 0x4b, 0x47, 0x7a, 0x61, 0x62,
	0x63, 0x41, 0x69, 0x39, 0x32, 0x4c, 0x45, 0x49, 0x31, 0x57, 0x43, 0x30, 0x30, 0x22, 0x2c, 0x22,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x7b, 0x22, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x3a, 0x22,
	0x6f, 0x32, 0x4e, 0x6d, 0x62, 0x58, 0x52, 0x6d, 0x63, 0x47, 0x46, 0x6a, 0x61, 0x32, 0x56, 0x6b,
	0x5a, 0x32, 0x46, 0x30, 0x64, 0x46, 0x4e, 0x30, 0x62, 0x58, 0x53, 0x69, 0x59, 0x32, 0x46, 0x73,
	0x5a, 0x79, 0x5a, 0x6a, 0x63, 0x32, 0x6c, 0x6e, 0x57, 0x45, 0x63, 0x77, 0x52, 0x51, 0x49, 0x67,
	0x52, 0x4b, 0x53, 0x33, 0x56, 0x70, 0x65, 0x45, 0x39, 0x74, 0x66, 0x45, 0x78, 0x58, 0x52, 0x7a,
	0x6b, 0x6f, 0x55, 0x4b, 0x6e, 0x47, 0x34, 0x72, 0x51, 0x57, 0x50, 0x76, 0x74, 0x53, 0x53, 0x74,
	0x34, 0x59, 0x74, 0x44, 0x47, 0x67, 0x54, 0x78, 0x33, 0x32, 0x6f, 0x43, 0x49, 0x51, 0x44, 0x50,
	0x65, 0x79, 0x2d, 0x32, 0x59, 0x4a, 0x34, 0x75, 0x49, 0x67, 0x2d, 0x51, 0x43, 0x4d, 0x34, 0x6a,
	0x6a, 0x36, 0x61, 0x45, 0x32, 0x55, 0x33, 0x74, 0x67, 0x4d, 0x46, 0x4d, 0x5f, 0x52, 0x50, 0x37,
	0x45, 0x66, 0x78, 0x36, 0x78, 0x52, 0x75, 0x33, 0x4a, 0x47, 0x68, 0x68, 0x64, 0x58, 0x52, 0x6f,
	0x52, 0x47, 0x46, 0x30, 0x59, 0x56, 0x69, 0x6b, 0x53, 0x5a, 0x59, 0x4e, 0x35, 0x59, 0x67, 0x4f,
	0x6a, 0x47, 0x68, 0x30, 0x4e, 0x42, 0x63, 0x50, 0x5a, 0x48, 0x5a, 0x67, 0x57, 0x34, 0x5f, 0x6b,
	0x72, 0x72, 0x6d, 0x69, 0x68, 0x6a, 0x4c, 0x48, 0x6d, 0x56, 0x7a, 0x7a, 0x75, 0x6f, 0x4d, 0x64,
	0x6c, 0x32, 0x4e, 0x46, 0x41, 0x41, 0x41, 0x41, 0x41, 0x44, 0x6a, 0x75, 0x37, 0x36, 0x30, 0x38,
	0x35, 0x59, 0x68, 0x6d, 0x6c, 0x74, 0x31, 0x43, 0x45, 0x4f, 0x48, 0x6b, 0x77, 0x4c, 0x51, 0x41,
	0x49, 0x4b, 0x57, 0x73, 0x46, 0x57, 0x71, 0x78, 0x65, 0x4d, 0x54, 0x38, 0x53, 0x78, 0x5a, 0x6e,
	0x77, 0x70, 0x30, 0x5a, 0x4d, 0x46, 0x31, 0x6e, 0x6b, 0x36, 0x79, 0x68, 0x73, 0x32, 0x6d, 0x33,
	0x41, 0x49, 0x76, 0x64, 0x69, 0x78, 0x43, 0x4e, 0x56, 0x67, 0x74, 0x4e, 0x70, 0x51, 0x45, 0x43,
	0x41, 0x79, 0x59, 0x67, 0x41, 0x53, 0x46, 0x59, 0x49, 0x4d, 0x47, 0x55, 0x44, 0x53, 0x50, 0x32,
	0x46, 0x41, 0x51, 0x6e, 0x32, 0x4d, 0x49, 0x66, 0x50, 0x4d, 0x79, 0x37, 0x63, 0x79, 0x42, 0x5f,
	0x59, 0x33, 0x30, 0x56, 0x71, 0x69, 0x78, 0x56, 0x67, 0x47, 0x55, 0x4c, 0x54, 0x42, 0x74, 0x46,
	0x6a, 0x66, 0x52, 0x69, 0x49, 0x6c, 0x67, 0x67, 0x6a, 0x55, 0x47, 0x66, 0x51, 0x6f, 0x33, 0x5f,
	0x2d, 0x43, 0x72, 0x4d, 0x6d, 0x48, 0x33, 0x53, 0x2d, 0x5a, 0x51, 0x6b, 0x46, 0x4b, 0x57, 0x4b,
	0x6e, 0x4e, 0x42, 0x51, 0x45, 0x41, 0x4d, 0x6b, 0x46, 0x74, 0x47, 0x2d, 0x39, 0x41, 0x34, 0x7a,
	0x71, 0x57, 0x30, 0x22, 0x2c, 0x22, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x3a, 0x22, 0x65, 0x79, 0x4a, 0x30, 0x65, 0x58, 0x42, 0x6c, 0x49,
	0x6a, 0x6f, 0x69, 0x64, 0x32, 0x56, 0x69, 0x59, 0x58, 0x56, 0x30, 0x61, 0x47, 0x34, 0x75, 0x59,
	0x33, 0x4a, 0x6c, 0x59, 0x58, 0x52, 0x6c, 0x49, 0x69, 0x77, 0x69, 0x59, 0x32, 0x68, 0x68, 0x62,
	0x47, 0x78, 0x6c, 0x62, 0x6d, 0x64, 0x6c, 0x49, 0x6a, 0x6f, 0x69, 0x51, 0x6c, 0x68, 0x58, 0x64,
	0x48, 0x68, 0x30, 0x57, 0x47, 0x78, 0x4a, 0x65, 0x46, 0x5a, 0x5a, 0x61, 0x30, 0x70, 0x48, 0x54,
	0x31, 0x64, 0x56, 0x61, 0x55, 0x56, 0x6d, 0x4d, 0x32, 0x35, 0x7a, 0x62, 0x79, 0x30, 0x32, 0x61,
	0x58, 0x5a, 0x4b, 0x64, 0x57, 0x77, 0x32, 0x59, 0x6d, 0x4e, 0x6d, 0x57, 0x48, 0x64, 0x4d, 0x56,
	0x6c, 0x46, 0x49, 0x61, 0x79, 0x49, 0x73, 0x49, 0x6d, 0x39, 0x79, 0x61, 0x57, 0x64, 0x70, 0x62,
	0x69, 0x49, 0x36, 0x49, 0x6d, 0x68, 0x30, 0x64, 0x48, 0x42, 0x7a, 0x4f, 0x69, 0x38, 0x76, 0x62,
	0x47, 0x39, 0x6a, 0x59, 0x57, 0x78, 0x6f, 0x62, 0x33, 0x4e, 0x30, 0x4f, 0x6a, 0x67, 0x77, 0x4f,
	0x44, 0x41, 0x69, 0x66, 0x51, 0x22, 0x7d, 0x7d, 0x78, 0x80, 0x80, 0x40, 0x80, 0x01, 0x37, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x13, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x41, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x12, 0x4a, 0x0a, 0x22, 0x66, 0x69, 0x64, 0x6f, 0x20,
	0x6b, 0x65, 0x79, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x59, 0x0a, 0x1d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x32, 0x46, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x5c, 0x0a,
	0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x4f, 0x54, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x1c, 0x4a, 0x14, 0x22, 0x31, 0x36, 0x33,
	0x38, 0x34, 0x30, 0x37, 0x37, 0x36, 0x38, 0x33, 0x35, 0x34, 0x33, 0x32, 0x37, 0x30, 0x35, 0x22,
	0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb7, 0x02, 0x0a, 0x14,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x4f, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0xa3,
	0x01, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x90, 0x01, 0x92,
	0x41, 0x8c, 0x01, 0x4a, 0x89, 0x01, 0x22, 0x6f, 0x74, 0x70, 0x61, 0x75, 0x74, 0x68, 0x3a, 0x2f,
	0x2f, 0x74, 0x6f, 0x74, 0x70, 0x2f, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x3a, 0x67, 0x69,
	0x67, 0x69, 0x40, 0x61, 0x63, 0x6d, 0x65, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x3f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x3d,
	0x53, 0x48, 0x41, 0x31, 0x26, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x3d, 0x36, 0x26, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x3d, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x26, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x3d, 0x33, 0x30, 0x26, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x3d, 0x54, 0x4a,
	0x4f, 0x50, 0x57, 0x53, 0x44, 0x59, 0x49, 0x4c, 0x4c, 0x48, 0x58, 0x46, 0x56, 0x34, 0x4d, 0x4c,
	0x4b, 0x4e, 0x4e, 0x4a, 0x4f, 0x57, 0x46, 0x47, 0x37, 0x56, 0x53, 0x44, 0x43, 0x4b, 0x22, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x24, 0x4a, 0x22, 0x22, 0x54, 0x4a, 0x4f, 0x50,
	0x57, 0x53, 0x44, 0x59, 0x49, 0x4c, 0x4c, 0x48, 0x58, 0x46, 0x56, 0x34, 0x4d, 0x4c, 0x4b, 0x4e,
	0x4e, 0x4a, 0x4f, 0x57, 0x46, 0x47, 0x37, 0x56, 0x53, 0x44, 0x43, 0x4b, 0x22, 0x52, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x1d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x54, 0x4f, 0x54, 0x50, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x1c, 0x4a, 0x14, 0x22,
	0x31, 0x36, 0x33, 0x38, 0x34, 0x30, 0x37, 0x37, 0x36, 0x38, 0x33, 0x35, 0x34, 0x33, 0x32, 0x37,
	0x30, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x54,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x92, 0x41,
	0x30, 0x32, 0x24, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x54, 0x4f, 0x54, 0x50, 0x20, 0x61, 0x70, 0x70, 0x20, 0x6f, 0x72,
	0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x08, 0x22, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
	0x22, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x5a, 0x0a, 0x1e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x4f,
	0x54, 0x50, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0x5a, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x4f, 0x54, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x1c, 0x4a, 0x14, 0x22, 0x31, 0x36,
	0x33, 0x38, 0x34, 0x30, 0x37, 0x37, 0x36, 0x38, 0x33, 0x35, 0x34, 0x33, 0x32, 0x37, 0x30, 0x35,
	0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x12,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x4f, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x59, 0x0a, 0x10,
	0x41, 0x64, 0x64, 0x4f, 0x54, 0x50, 0x53, 0x4d, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2c, 0x92, 0x41, 0x1c, 0x4a, 0x14, 0x22, 0x31, 0x36, 0x33, 0x38, 0x34, 0x30, 0x37,
	0x37, 0x36, 0x38, 0x33, 0x35, 0x34, 0x33, 0x32, 0x37, 0x30, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80,
	0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x4f, 0x54,
	0x50, 0x53, 0x4d, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x5c, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4f, 0x54, 0x50, 0x53, 0x4d, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c,
	0x92, 0x41, 0x1c, 0x4a, 0x14, 0x22, 0x31, 0x36, 0x33, 0x38, 0x34, 0x30, 0x37, 0x37, 0x36, 0x38,
	0x33, 0x35, 0x34, 0x33, 0x32, 0x37, 0x30, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x54,
	0x50, 0x53, 0x4d, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x5b, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4f, 0x54, 0x50,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92,
	0x41, 0x1c, 0x4a, 0x14, 0x22, 0x31, 0x36, 0x33, 0x38, 0x34, 0x30, 0x37, 0x37, 0x36, 0x38, 0x33,
	0x35, 0x34, 0x33, 0x32, 0x37, 0x30, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4f, 0x54, 0x50, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x5e, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x54,
	0x50, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c,
	0x92, 0x41, 0x1c, 0x4a, 0x14, 0x22, 0x31, 0x36, 0x33, 0x38, 0x34, 0x30, 0x37, 0x37, 0x36, 0x38,
	0x33, 0x35, 0x34, 0x33, 0x32, 0x37, 0x30, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x54,
	0x50, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x9f, 0x02, 0x0a, 0x24, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x45, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x1c, 0x4a, 0x14, 0x22, 0x31, 0x36, 0x33, 0x38, 0x34, 0x30,
	0x37, 0x37, 0x36, 0x38, 0x33, 0x35, 0x34, 0x33, 0x32, 0x37, 0x30, 0x35, 0x22, 0x78, 0xc8, 0x01,
	0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x55, 0x0a, 0x0b, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x6b,
	0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x22, 0xa5, 0x02, 0x0a, 0x25, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0xb8,
	0x01, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x71, 0x92, 0x41, 0x6e,
	0x32, 0x6c, 0x22, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65,
	0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x5a, 0x49,
	0x54, 0x41, 0x44, 0x45, 0x4c, 0x3b, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73,
	0x73, 0x6b, 0x65, 0x79, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x00,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x89, 0x02, 0x0a, 0x22, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x06, 0x69, 0x64, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4c, 0x92, 0x41, 0x3f, 0x32, 0x21,
	0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x4a, 0x14, 0x22, 0x31, 0x36, 0x33, 0x38, 0x34, 0x30, 0x37, 0x37, 0x36, 0x38, 0x33, 0x35,
	0x34, 0x33, 0x32, 0x37, 0x30, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x69, 0x64, 0x70, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x73, 0x48,
	0x00, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x64, 0x61, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x44, 0x41, 0x50,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x04, 0x6c,
	0x64, 0x61, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xcd,
	0x03, 0x0a, 0x23, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0xc5, 0x01, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0xa7, 0x01, 0x92, 0x41, 0xa3, 0x01, 0x32, 0x27, 0x55, 0x52, 0x4c, 0x20,
	0x74, 0x6f, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x4a, 0x78, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6f, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x3f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x3d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x26, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x3d, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x25, 0x33, 0x41, 0x25, 0x32, 0x46, 0x25, 0x32, 0x46, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x25, 0x32, 0x46, 0x69, 0x64, 0x70,
	0x73, 0x25, 0x32, 0x46, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x48, 0x00, 0x52,
	0x07, 0x61, 0x75, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x5c, 0x0a, 0x0a, 0x69, 0x64, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x49, 0x44, 0x50, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x1b, 0x92, 0x41,
	0x18, 0x32, 0x16, 0x49, 0x44, 0x50, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x69, 0x64, 0x70,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15,
	0x50, 0x4f, 0x53, 0x54, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x22, 0x91,
	0x03, 0x0a, 0x25, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xa5, 0x01, 0x0a, 0x0d, 0x69, 0x64, 0x70,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x80, 0x01, 0x92, 0x41, 0x73, 0x32, 0x55, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x69, 0x64, 0x70, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x49, 0x44, 0x50, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4a, 0x14, 0x22,
	0x31, 0x36, 0x33, 0x38, 0x34, 0x30, 0x37, 0x37, 0x36, 0x38, 0x33, 0x35, 0x34, 0x33, 0x32, 0x37,
	0x30, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xc8, 0x01, 0x52, 0x0b, 0x69, 0x64, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0xbf, 0x01, 0x0a, 0x10, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x94, 0x01, 0x92, 0x41,
	0x86, 0x01, 0x32, 0x58, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x69, 0x64, 0x70, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x49, 0x44, 0x50, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4a, 0x24, 0x22, 0x53,
	0x4a, 0x4b, 0x4c, 0x33, 0x69, 0x6f, 0x49, 0x44, 0x70, 0x6f, 0x33, 0x34, 0x32, 0x69, 0x6f, 0x71,
	0x77, 0x39, 0x38, 0x66, 0x6a, 0x70, 0x33, 0x73, 0x64, 0x66, 0x33, 0x32, 0x77, 0x61, 0x68, 0x62,
	0x3d, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18,
	0xc8, 0x01, 0x52, 0x0e, 0x69, 0x64, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x9a, 0x02, 0x0a, 0x26, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x69, 0x64, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x44, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x69, 0x64, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0x92, 0x41, 0x4c, 0x32, 0x34, 0x49, 0x44, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x5a,
	0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x69, 0x66, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x4a, 0x14, 0x22, 0x31, 0x36, 0x33, 0x38, 0x34, 0x30, 0x37, 0x37, 0x36, 0x38, 0x33, 0x35,
	0x34, 0x33, 0x32, 0x33, 0x34, 0x35, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x92, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x49, 0x44, 0x50, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39,
	0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22,
	0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x69,
	0x64, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x49, 0x44, 0x50, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x07, 0x69, 0x64, 0x70,
	0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x4e, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x49, 0x44, 0x50, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x14, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b,
	0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38, 0x30,
	0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x4f,
	0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x22, 0x99, 0x01, 0x0a, 0x15, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x30, 0x0a,
	0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x97, 0x03, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92,
	0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36,
	0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x56, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29,
	0x92, 0x41, 0x19, 0x4a, 0x11, 0x22, 0x53, 0x65, 0x63, 0x72, 0x33, 0x74, 0x50, 0x34, 0x73, 0x73,
	0x77, 0x30, 0x72, 0x64, 0x21, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x90, 0x01, 0x0a,
	0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x61, 0x92, 0x41, 0x52, 0x32, 0x3f, 0x22,
	0x74, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4a, 0x0a,
	0x22, 0x53, 0x4b, 0x4a, 0x64, 0x33, 0x34, 0x32, 0x6b, 0x22, 0x78, 0x14, 0x80, 0x01, 0x01, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x48, 0x00, 0x52, 0x10, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x4f, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0x6c, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13,
	0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36, 0x34, 0x38, 0x39, 0x34,
	0x35, 0x35, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc0,
	0x01, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x59, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x2a, 0xd6, 0x02, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x26, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52,
	0x44, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x4b, 0x45, 0x59, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x41,
	0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x50, 0x10, 0x03, 0x12,
	0x23, 0x0a, 0x1f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f,
	0x54, 0x50, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x32, 0x46, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x55, 0x54, 0x48,
	0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x50, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x06,
	0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x54, 0x50, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x07, 0x32, 0xcd, 0x34, 0x0a, 0x0b, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xba, 0x01, 0x0a, 0x0c, 0x41,
	0x64, 0x64, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x41, 0x64, 0x64, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x48,
	0x75, 0x6d, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x55, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02,
	0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x21, 0x0a, 0x1a, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x1a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x03, 0x08, 0xc9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a,
	0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0xad, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x12, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x92, 0x41, 0x0f, 0x4a,
	0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5,
	0x18, 0x16, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x03, 0x08, 0xc8, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17,
	0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xff, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa2, 0x01, 0x92, 0x41, 0x6d, 0x4a, 0x2f, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x28, 0x0a, 0x26, 0x41, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x6c, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x38, 0x0a, 0x03, 0x34,
	0x30, 0x30, 0x12, 0x31, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x16, 0x0a, 0x0f, 0x0a, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x03, 0x08, 0xc8,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x08, 0x53, 0x65,
	0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x74,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4f, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0xc4, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x56, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x12, 0xb8, 0x01, 0x0a, 0x0b,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56,
	0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b,
	0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a,
	0x22, 0x24, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0xa8, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x53, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4f, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02,
	0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a,
	0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0xed, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x92, 0x41, 0x4a, 0x12, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x1a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02,
	0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a,
	0x01, 0x2a, 0x2a, 0x1d, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0xc4, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x6e, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x56, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02,
	0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a,
	0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x12, 0xb8, 0x01, 0x0a, 0x0b, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x92, 0x41, 0x0f,
	0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a,
	0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x2f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x12, 0xb4, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x75,
	0x6d, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x46, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04,
	0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x1a, 0x17, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xbf, 0x01, 0x0a, 0x0e, 0x44,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f,
	0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0xbf, 0x01, 0x0a,
	0x0e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11,
	0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0xa7,
	0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11,
	0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0xaf, 0x01, 0x0a, 0x0a, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11,
	0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0xa3, 0x01, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x92, 0x41, 0x0f, 0x4a,
	0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5,
	0x18, 0x0f, 0x0a, 0x0d, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0xc0, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x52, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f,
	0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01,
	0x2a, 0x22, 0x20, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x6b,
	0x65, 0x79, 0x73, 0x12, 0xeb, 0x01, 0x0a, 0x19, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61,
	0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61,
	0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x5f, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02,
	0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a,
	0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x61, 0x73, 0x73,
	0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0x81, 0x02, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x6b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x39, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x6b,
	0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x92, 0x41, 0x0f, 0x4a,
	0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5,
	0x18, 0x16, 0x0a, 0x14, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x6b,
	0x65, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01,
	0x2a, 0x22, 0x32, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x6b,
	0x65, 0x79, 0x73, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0xaf, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x32, 0x46, 0x12, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x32, 0x46, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x32, 0x46,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11,
	0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x75, 0x32, 0x66, 0x12, 0xd6, 0x01, 0x0a, 0x15, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x55, 0x32, 0x46, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x32,
	0x46, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x55, 0x32, 0x46, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11,
	0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x75, 0x32, 0x66, 0x2f, 0x7b, 0x75, 0x32, 0x66, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0xb3, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x4f, 0x54,
	0x50, 0x12, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x4f, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x4f, 0x54, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f,
	0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x74, 0x6f, 0x74, 0x70, 0x12, 0xd8, 0x01, 0x0a, 0x16, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x54, 0x4f, 0x54, 0x50, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x4f,
	0x54, 0x50, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x54, 0x4f, 0x54, 0x50, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x92, 0x41, 0x0f, 0x4a,
	0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5,
	0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x6f, 0x74, 0x70, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x12, 0xaa, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x4f, 0x54, 0x50,
	0x12, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x4f, 0x54,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x4f, 0x54, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4b, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a,
	0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x2a, 0x1c, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x6f, 0x74, 0x70, 0x12, 0xad,
	0x01, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4f, 0x54, 0x50, 0x53, 0x4d, 0x53, 0x12, 0x25, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x54, 0x50, 0x53, 0x4d, 0x53, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x54, 0x50,
	0x53, 0x4d, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x92, 0x41, 0x0f,
	0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a,
	0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x74, 0x70, 0x5f, 0x73, 0x6d, 0x73, 0x12, 0xb3,
	0x01, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x54, 0x50, 0x53, 0x4d, 0x53, 0x12,
	0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x54, 0x50, 0x53,
	0x4d, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x54, 0x50, 0x53, 0x4d, 0x53, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x2a, 0x1f, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x74, 0x70,
	0x5f, 0x73, 0x6d, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x4f, 0x54, 0x50, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x54,
	0x50, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x54, 0x50, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11, 0x0a,
	0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6f, 0x74, 0x70, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0xbb, 0x01, 0x0a,
	0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x54, 0x50, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x54, 0x50, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x54, 0x50, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11,
	0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6f, 0x74, 0x70, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0xd7, 0x01, 0x0a, 0x1b, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x92,
	0x41, 0x0f, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58,
	0x01, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22,
	0x13, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0xf0, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x55, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02,
	0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a,
	0x01, 0x2a, 0x22, 0x23, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x69, 0x64, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x70, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xae, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x49,
	0x44, 0x50, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64,
	0x49, 0x44, 0x50, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x44, 0x50, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11, 0x0a,
	0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0xc0, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x29, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x58, 0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a,
	0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0xb4, 0x01, 0x0a, 0x0b,
	0x53, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x27, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52,
	0x92, 0x41, 0x0f, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b,
	0x58, 0x01, 0x8a, 0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a,
	0x22, 0x20, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0xf5, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x39, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x92, 0x41, 0x0f,
	0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x58, 0x01, 0x8a,
	0xb5, 0x18, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x42, 0xaf, 0x08, 0x92, 0x41, 0xf5,
	0x07, 0x12, 0xd3, 0x02, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xc4, 0x01, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x69, 0x73,
	0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x5a,
	0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x73,
	0x20, 0x69, 0x6e, 0x20, 0x62, 0x65, 0x74, 0x61, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x20,
	0x49, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x20, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x22, 0x2e, 0x0a, 0x07, 0x5a, 0x49, 0x54,
	0x41, 0x44, 0x45, 0x4c, 0x12, 0x13, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x1a, 0x0e, 0x68, 0x69, 0x40, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x42, 0x0a, 0x0a, 0x41, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x20, 0x32, 0x2e, 0x30, 0x12, 0x34, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x62, 0x6c, 0x6f, 0x62,
	0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x32, 0x08, 0x32,
	0x2e, 0x30, 0x2d, 0x62, 0x65, 0x74, 0x61, 0x1a, 0x0e, 0x24, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x2d, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x22, 0x01, 0x2f, 0x2a, 0x02, 0x02, 0x01, 0x32, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x32, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2d, 0x77, 0x65, 0x62, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x3a, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2d, 0x77, 0x65, 0x62, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x6d,
	0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x66, 0x0a, 0x47, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x50, 0x0a,
	0x03, 0x34, 0x30, 0x34, 0x12, 0x49, 0x0a, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5a,
	0xc2, 0x01, 0x0a, 0xbf, 0x01, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0xb4, 0x01,
	0x08, 0x03, 0x28, 0x04, 0x32, 0x21, 0x24, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x2d, 0x44, 0x4f,
	0x4d, 0x41, 0x49, 0x4e, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x3a, 0x1d, 0x24, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x2d, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x32,
	0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x6c, 0x0a, 0x10, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x64, 0x12, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x0a, 0x58, 0x0a, 0x2a, 0x75, 0x72,
	0x6e, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69, 0x61, 0x6d, 0x3a, 0x6f, 0x72,
	0x67, 0x3a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x69, 0x64, 0x3a, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x3a, 0x61, 0x75, 0x64, 0x12, 0x2a, 0x75, 0x72, 0x6e, 0x3a, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69, 0x61, 0x6d, 0x3a, 0x6f, 0x72, 0x67, 0x3a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x69, 0x64, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x3a, 0x61, 0x75, 0x64, 0x62, 0x40, 0x0a, 0x3e, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x12, 0x34, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x0a, 0x2a, 0x75, 0x72, 0x6e, 0x3a,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69, 0x61, 0x6d, 0x3a, 0x6f, 0x72, 0x67, 0x3a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x69, 0x64, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x3a, 0x61, 0x75, 0x64, 0x72, 0x3e, 0x0a, 0x22, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x12, 0x18, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_user_v2beta_user_service_proto_rawDescOnce sync.Once
	file_zitadel_user_v2beta_user_service_proto_rawDescData = file_zitadel_user_v2beta_user_service_proto_rawDesc
)

func file_zitadel_user_v2beta_user_service_proto_rawDescGZIP() []byte {
	file_zitadel_user_v2beta_user_service_proto_rawDescOnce.Do(func() {
		file_zitadel_user_v2beta_user_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_user_v2beta_user_service_proto_rawDescData)
	})
	return file_zitadel_user_v2beta_user_service_proto_rawDescData
}

var file_zitadel_user_v2beta_user_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zitadel_user_v2beta_user_service_proto_msgTypes = make([]protoimpl.MessageInfo, 68)
var file_zitadel_user_v2beta_user_service_proto_goTypes = []interface{}{
	(AuthenticationMethodType)(0),                  // 0: zitadel.user.v2beta.AuthenticationMethodType
	(*AddHumanUserRequest)(nil),                    // 1: zitadel.user.v2beta.AddHumanUserRequest
	(*AddHumanUserResponse)(nil),                   // 2: zitadel.user.v2beta.AddHumanUserResponse
	(*GetUserByIDRequest)(nil),                     // 3: zitadel.user.v2beta.GetUserByIDRequest
	(*GetUserByIDResponse)(nil),                    // 4: zitadel.user.v2beta.GetUserByIDResponse
	(*ListUsersRequest)(nil),                       // 5: zitadel.user.v2beta.ListUsersRequest
	(*ListUsersResponse)(nil),                      // 6: zitadel.user.v2beta.ListUsersResponse
	(*SetEmailRequest)(nil),                        // 7: zitadel.user.v2beta.SetEmailRequest
	(*SetEmailResponse)(nil),                       // 8: zitadel.user.v2beta.SetEmailResponse
	(*ResendEmailCodeRequest)(nil),                 // 9: zitadel.user.v2beta.ResendEmailCodeRequest
	(*ResendEmailCodeResponse)(nil),                // 10: zitadel.user.v2beta.ResendEmailCodeResponse
	(*VerifyEmailRequest)(nil),                     // 11: zitadel.user.v2beta.VerifyEmailRequest
	(*VerifyEmailResponse)(nil),                    // 12: zitadel.user.v2beta.VerifyEmailResponse
	(*SetPhoneRequest)(nil),                        // 13: zitadel.user.v2beta.SetPhoneRequest
	(*SetPhoneResponse)(nil),                       // 14: zitadel.user.v2beta.SetPhoneResponse
	(*RemovePhoneRequest)(nil),                     // 15: zitadel.user.v2beta.RemovePhoneRequest
	(*RemovePhoneResponse)(nil),                    // 16: zitadel.user.v2beta.RemovePhoneResponse
	(*ResendPhoneCodeRequest)(nil),                 // 17: zitadel.user.v2beta.ResendPhoneCodeRequest
	(*ResendPhoneCodeResponse)(nil),                // 18: zitadel.user.v2beta.ResendPhoneCodeResponse
	(*VerifyPhoneRequest)(nil),                     // 19: zitadel.user.v2beta.VerifyPhoneRequest
	(*VerifyPhoneResponse)(nil),                    // 20: zitadel.user.v2beta.VerifyPhoneResponse
	(*DeleteUserRequest)(nil),                      // 21: zitadel.user.v2beta.DeleteUserRequest
	(*DeleteUserResponse)(nil),                     // 22: zitadel.user.v2beta.DeleteUserResponse
	(*UpdateHumanUserRequest)(nil),                 // 23: zitadel.user.v2beta.UpdateHumanUserRequest
	(*UpdateHumanUserResponse)(nil),                // 24: zitadel.user.v2beta.UpdateHumanUserResponse
	(*DeactivateUserRequest)(nil),                  // 25: zitadel.user.v2beta.DeactivateUserRequest
	(*DeactivateUserResponse)(nil),                 // 26: zitadel.user.v2beta.DeactivateUserResponse
	(*ReactivateUserRequest)(nil),                  // 27: zitadel.user.v2beta.ReactivateUserRequest
	(*ReactivateUserResponse)(nil),                 // 28: zitadel.user.v2beta.ReactivateUserResponse
	(*LockUserRequest)(nil),                        // 29: zitadel.user.v2beta.LockUserRequest
	(*LockUserResponse)(nil),                       // 30: zitadel.user.v2beta.LockUserResponse
	(*UnlockUserRequest)(nil),                      // 31: zitadel.user.v2beta.UnlockUserRequest
	(*UnlockUserResponse)(nil),                     // 32: zitadel.user.v2beta.UnlockUserResponse
	(*RegisterPasskeyRequest)(nil),                 // 33: zitadel.user.v2beta.RegisterPasskeyRequest
	(*RegisterPasskeyResponse)(nil),                // 34: zitadel.user.v2beta.RegisterPasskeyResponse
	(*VerifyPasskeyRegistrationRequest)(nil),       // 35: zitadel.user.v2beta.VerifyPasskeyRegistrationRequest
	(*VerifyPasskeyRegistrationResponse)(nil),      // 36: zitadel.user.v2beta.VerifyPasskeyRegistrationResponse
	(*RegisterU2FRequest)(nil),                     // 37: zitadel.user.v2beta.RegisterU2FRequest
	(*RegisterU2FResponse)(nil),                    // 38: zitadel.user.v2beta.RegisterU2FResponse
	(*VerifyU2FRegistrationRequest)(nil),           // 39: zitadel.user.v2beta.VerifyU2FRegistrationRequest
	(*VerifyU2FRegistrationResponse)(nil),          // 40: zitadel.user.v2beta.VerifyU2FRegistrationResponse
	(*RegisterTOTPRequest)(nil),                    // 41: zitadel.user.v2beta.RegisterTOTPRequest
	(*RegisterTOTPResponse)(nil),                   // 42: zitadel.user.v2beta.RegisterTOTPResponse
	(*VerifyTOTPRegistrationRequest)(nil),          // 43: zitadel.user.v2beta.VerifyTOTPRegistrationRequest
	(*VerifyTOTPRegistrationResponse)(nil),         // 44: zitadel.user.v2beta.VerifyTOTPRegistrationResponse
	(*RemoveTOTPRequest)(nil),                      // 45: zitadel.user.v2beta.RemoveTOTPRequest
	(*RemoveTOTPResponse)(nil),                     // 46: zitadel.user.v2beta.RemoveTOTPResponse
	(*AddOTPSMSRequest)(nil),                       // 47: zitadel.user.v2beta.AddOTPSMSRequest
	(*AddOTPSMSResponse)(nil),                      // 48: zitadel.user.v2beta.AddOTPSMSResponse
	(*RemoveOTPSMSRequest)(nil),                    // 49: zitadel.user.v2beta.RemoveOTPSMSRequest
	(*RemoveOTPSMSResponse)(nil),                   // 50: zitadel.user.v2beta.RemoveOTPSMSResponse
	(*AddOTPEmailRequest)(nil),                     // 51: zitadel.user.v2beta.AddOTPEmailRequest
	(*AddOTPEmailResponse)(nil),                    // 52: zitadel.user.v2beta.AddOTPEmailResponse
	(*RemoveOTPEmailRequest)(nil),                  // 53: zitadel.user.v2beta.RemoveOTPEmailRequest
	(*RemoveOTPEmailResponse)(nil),                 // 54: zitadel.user.v2beta.RemoveOTPEmailResponse
	(*CreatePasskeyRegistrationLinkRequest)(nil),   // 55: zitadel.user.v2beta.CreatePasskeyRegistrationLinkRequest
	(*CreatePasskeyRegistrationLinkResponse)(nil),  // 56: zitadel.user.v2beta.CreatePasskeyRegistrationLinkResponse
	(*StartIdentityProviderIntentRequest)(nil),     // 57: zitadel.user.v2beta.StartIdentityProviderIntentRequest
	(*StartIdentityProviderIntentResponse)(nil),    // 58: zitadel.user.v2beta.StartIdentityProviderIntentResponse
	(*RetrieveIdentityProviderIntentRequest)(nil),  // 59: zitadel.user.v2beta.RetrieveIdentityProviderIntentRequest
	(*RetrieveIdentityProviderIntentResponse)(nil), // 60: zitadel.user.v2beta.RetrieveIdentityProviderIntentResponse
	(*AddIDPLinkRequest)(nil),                      // 61: zitadel.user.v2beta.AddIDPLinkRequest
	(*AddIDPLinkResponse)(nil),                     // 62: zitadel.user.v2beta.AddIDPLinkResponse
	(*PasswordResetRequest)(nil),                   // 63: zitadel.user.v2beta.PasswordResetRequest
	(*PasswordResetResponse)(nil),                  // 64: zitadel.user.v2beta.PasswordResetResponse
	(*SetPasswordRequest)(nil),                     // 65: zitadel.user.v2beta.SetPasswordRequest
	(*SetPasswordResponse)(nil),                    // 66: zitadel.user.v2beta.SetPasswordResponse
	(*ListAuthenticationMethodTypesRequest)(nil),   // 67: zitadel.user.v2beta.ListAuthenticationMethodTypesRequest
	(*ListAuthenticationMethodTypesResponse)(nil),  // 68: zitadel.user.v2beta.ListAuthenticationMethodTypesResponse
	(*v2beta.Organization)(nil),                    // 69: zitadel.object.v2beta.Organization
	(*SetHumanProfile)(nil),                        // 70: zitadel.user.v2beta.SetHumanProfile
	(*SetHumanEmail)(nil),                          // 71: zitadel.user.v2beta.SetHumanEmail
	(*SetHumanPhone)(nil),                          // 72: zitadel.user.v2beta.SetHumanPhone
	(*SetMetadataEntry)(nil),                       // 73: zitadel.user.v2beta.SetMetadataEntry
	(*Password)(nil),                               // 74: zitadel.user.v2beta.Password
	(*HashedPassword)(nil),                         // 75: zitadel.user.v2beta.HashedPassword
	(*IDPLink)(nil),                                // 76: zitadel.user.v2beta.IDPLink
	(*v2beta.Details)(nil),                         // 77: zitadel.object.v2beta.Details
	(*User)(nil),                                   // 78: zitadel.user.v2beta.User
	(*v2beta.ListQuery)(nil),                       // 79: zitadel.object.v2beta.ListQuery
	(UserFieldName)(0),                             // 80: zitadel.user.v2beta.UserFieldName
	(*SearchQuery)(nil),                            // 81: zitadel.user.v2beta.SearchQuery
	(*v2beta.ListDetails)(nil),                     // 82: zitadel.object.v2beta.ListDetails
	(*SendEmailVerificationCode)(nil),              // 83: zitadel.user.v2beta.SendEmailVerificationCode
	(*ReturnEmailVerificationCode)(nil),            // 84: zitadel.user.v2beta.ReturnEmailVerificationCode
	(*SendPhoneVerificationCode)(nil),              // 85: zitadel.user.v2beta.SendPhoneVerificationCode
	(*ReturnPhoneVerificationCode)(nil),            // 86: zitadel.user.v2beta.ReturnPhoneVerificationCode
	(*SetPassword)(nil),                            // 87: zitadel.user.v2beta.SetPassword
	(*PasskeyRegistrationCode)(nil),                // 88: zitadel.user.v2beta.PasskeyRegistrationCode
	(PasskeyAuthenticator)(0),                      // 89: zitadel.user.v2beta.PasskeyAuthenticator
	(*structpb.Struct)(nil),                        // 90: google.protobuf.Struct
	(*SendPasskeyRegistrationLink)(nil),            // 91: zitadel.user.v2beta.SendPasskeyRegistrationLink
	(*ReturnPasskeyRegistrationCode)(nil),          // 92: zitadel.user.v2beta.ReturnPasskeyRegistrationCode
	(*RedirectURLs)(nil),                           // 93: zitadel.user.v2beta.RedirectURLs
	(*LDAPCredentials)(nil),                        // 94: zitadel.user.v2beta.LDAPCredentials
	(*IDPIntent)(nil),                              // 95: zitadel.user.v2beta.IDPIntent
	(*IDPInformation)(nil),                         // 96: zitadel.user.v2beta.IDPInformation
	(*SendPasswordResetLink)(nil),                  // 97: zitadel.user.v2beta.SendPasswordResetLink
	(*ReturnPasswordResetCode)(nil),                // 98: zitadel.user.v2beta.ReturnPasswordResetCode
}
var file_zitadel_user_v2beta_user_service_proto_depIdxs = []int32{
	69,  // 0: zitadel.user.v2beta.AddHumanUserRequest.organization:type_name -> zitadel.object.v2beta.Organization
	70,  // 1: zitadel.user.v2beta.AddHumanUserRequest.profile:type_name -> zitadel.user.v2beta.SetHumanProfile
	71,  // 2: zitadel.user.v2beta.AddHumanUserRequest.email:type_name -> zitadel.user.v2beta.SetHumanEmail
	72,  // 3: zitadel.user.v2beta.AddHumanUserRequest.phone:type_name -> zitadel.user.v2beta.SetHumanPhone
	73,  // 4: zitadel.user.v2beta.AddHumanUserRequest.metadata:type_name -> zitadel.user.v2beta.SetMetadataEntry
	74,  // 5: zitadel.user.v2beta.AddHumanUserRequest.password:type_name -> zitadel.user.v2beta.Password
	75,  // 6: zitadel.user.v2beta.AddHumanUserRequest.hashed_password:type_name -> zitadel.user.v2beta.HashedPassword
	76,  // 7: zitadel.user.v2beta.AddHumanUserRequest.idp_links:type_name -> zitadel.user.v2beta.IDPLink
	77,  // 8: zitadel.user.v2beta.AddHumanUserResponse.details:type_name -> zitadel.object.v2beta.Details
	77,  // 9: zitadel.user.v2beta.GetUserByIDResponse.details:type_name -> zitadel.object.v2beta.Details
	78,  // 10: zitadel.user.v2beta.GetUserByIDResponse.user:type_name -> zitadel.user.v2beta.User
	79,  // 11: zitadel.user.v2beta.ListUsersRequest.query:type_name -> zitadel.object.v2beta.ListQuery
	80,  // 12: zitadel.user.v2beta.ListUsersRequest.sorting_column:type_name -> zitadel.user.v2beta.UserFieldName
	81,  // 13: zitadel.user.v2beta.ListUsersRequest.queries:type_name -> zitadel.user.v2beta.SearchQuery
	82,  // 14: zitadel.user.v2beta.ListUsersResponse.details:type_name -> zitadel.object.v2beta.ListDetails
	80,  // 15: zitadel.user.v2beta.ListUsersResponse.sorting_column:type_name -> zitadel.user.v2beta.UserFieldName
	78,  // 16: zitadel.user.v2beta.ListUsersResponse.result:type_name -> zitadel.user.v2beta.User
	83,  // 17: zitadel.user.v2beta.SetEmailRequest.send_code:type_name -> zitadel.user.v2beta.SendEmailVerificationCode
	84,  // 18: zitadel.user.v2beta.SetEmailRequest.return_code:type_name -> zitadel.user.v2beta.ReturnEmailVerificationCode
	77,  // 19: zitadel.user.v2beta.SetEmailResponse.details:type_name -> zitadel.object.v2beta.Details
	83,  // 20: zitadel.user.v2beta.ResendEmailCodeRequest.send_code:type_name -> zitadel.user.v2beta.SendEmailVerificationCode
	84,  // 21: zitadel.user.v2beta.ResendEmailCodeRequest.return_code:type_name -> zitadel.user.v2beta.ReturnEmailVerificationCode
	77,  // 22: zitadel.user.v2beta.ResendEmailCodeResponse.details:type_name -> zitadel.object.v2beta.Details
	77,  // 23: zitadel.user.v2beta.VerifyEmailResponse.details:type_name -> zitadel.object.v2beta.Details
	85,  // 24: zitadel.user.v2beta.SetPhoneRequest.send_code:type_name -> zitadel.user.v2beta.SendPhoneVerificationCode
	86,  // 25: zitadel.user.v2beta.SetPhoneRequest.return_code:type_name -> zitadel.user.v2beta.ReturnPhoneVerificationCode
	77,  // 26: zitadel.user.v2beta.SetPhoneResponse.details:type_name -> zitadel.object.v2beta.Details
	77,  // 27: zitadel.user.v2beta.RemovePhoneResponse.details:type_name -> zitadel.object.v2beta.Details
	85,  // 28: zitadel.user.v2beta.ResendPhoneCodeRequest.send_code:type_name -> zitadel.user.v2beta.SendPhoneVerificationCode
	86,  // 29: zitadel.user.v2beta.ResendPhoneCodeRequest.return_code:type_name -> zitadel.user.v2beta.ReturnPhoneVerificationCode
	77,  // 30: zitadel.user.v2beta.ResendPhoneCodeResponse.details:type_name -> zitadel.object.v2beta.Details
	77,  // 31: zitadel.user.v2beta.VerifyPhoneResponse.details:type_name -> zitadel.object.v2beta.Details
	77,  // 32: zitadel.user.v2beta.DeleteUserResponse.details:type_name -> zitadel.object.v2beta.Details
	70,  // 33: zitadel.user.v2beta.UpdateHumanUserRequest.profile:type_name -> zitadel.user.v2beta.SetHumanProfile
	71,  // 34: zitadel.user.v2beta.UpdateHumanUserRequest.email:type_name -> zitadel.user.v2beta.SetHumanEmail
	72,  // 35: zitadel.user.v2beta.UpdateHumanUserRequest.phone:type_name -> zitadel.user.v2beta.SetHumanPhone
	87,  // 36: zitadel.user.v2beta.UpdateHumanUserRequest.password:type_name -> zitadel.user.v2beta.SetPassword
	77,  // 37: zitadel.user.v2beta.UpdateHumanUserResponse.details:type_name -> zitadel.object.v2beta.Details
	77,  // 38: zitadel.user.v2beta.DeactivateUserResponse.details:type_name -> zitadel.object.v2beta.Details
	77,  // 39: zitadel.user.v2beta.ReactivateUserResponse.details:type_name -> zitadel.object.v2beta.Details
	77,  // 40: zitadel.user.v2beta.LockUserResponse.details:type_name -> zitadel.object.v2beta.Details
	77,  // 41: zitadel.user.v2beta.UnlockUserResponse.details:type_name -> zitadel.object.v2beta.Details
	88,  // 42: zitadel.user.v2beta.RegisterPasskeyRequest.code:type_name -> zitadel.user.v2beta.PasskeyRegistrationCode
	89,  // 43: zitadel.user.v2beta.RegisterPasskeyRequest.authenticator:type_name -> zitadel.user.v2beta.PasskeyAuthenticator
	77,  // 44: zitadel.user.v2beta.RegisterPasskeyResponse.details:type_name -> zitadel.object.v2beta.Details
	90,  // 45: zitadel.user.v2beta.RegisterPasskeyResponse.public_key_credential_creation_options:type_name -> google.protobuf.Struct
	90,  // 46: zitadel.user.v2beta.VerifyPasskeyRegistrationRequest.public_key_credential:type_name -> google.protobuf.Struct
	77,  // 47: zitadel.user.v2beta.VerifyPasskeyRegistrationResponse.details:type_name -> zitadel.object.v2beta.Details
	77,  // 48: zitadel.user.v2beta.RegisterU2FResponse.details:type_name -> zitadel.object.v2beta.Details
	90,  // 49: zitadel.user.v2beta.RegisterU2FResponse.public_key_credential_creation_options:type_name -> google.protobuf.Struct
	90,  // 50: zitadel.user.v2beta.VerifyU2FRegistrationRequest.public_key_credential:type_name -> google.protobuf.Struct
	77,  // 51: zitadel.user.v2beta.VerifyU2FRegistrationResponse.details:type_name -> zitadel.object.v2beta.Details
	77,  // 52: zitadel.user.v2beta.RegisterTOTPResponse.details:type_name -> zitadel.object.v2beta.Details
	77,  // 53: zitadel.user.v2beta.VerifyTOTPRegistrationResponse.details:type_name -> zitadel.object.v2beta.Details
	77,  // 54: zitadel.user.v2beta.RemoveTOTPResponse.details:type_name -> zitadel.object.v2beta.Details
	77,  // 55: zitadel.user.v2beta.AddOTPSMSResponse.details:type_name -> zitadel.object.v2beta.Details
	77,  // 56: zitadel.user.v2beta.RemoveOTPSMSResponse.details:type_name -> zitadel.object.v2beta.Details
	77,  // 57: zitadel.user.v2beta.AddOTPEmailResponse.details:type_name -> zitadel.object.v2beta.Details
	77,  // 58: zitadel.user.v2beta.RemoveOTPEmailResponse.details:type_name -> zitadel.object.v2beta.Details
	91,  // 59: zitadel.user.v2beta.CreatePasskeyRegistrationLinkRequest.send_link:type_name -> zitadel.user.v2beta.SendPasskeyRegistrationLink
	92,  // 60: zitadel.user.v2beta.CreatePasskeyRegistrationLinkRequest.return_code:type_name -> zitadel.user.v2beta.ReturnPasskeyRegistrationCode
	77,  // 61: zitadel.user.v2beta.CreatePasskeyRegistrationLinkResponse.details:type_name -> zitadel.object.v2beta.Details
	88,  // 62: zitadel.user.v2beta.CreatePasskeyRegistrationLinkResponse.code:type_name -> zitadel.user.v2beta.PasskeyRegistrationCode
	93,  // 63: zitadel.user.v2beta.StartIdentityProviderIntentRequest.urls:type_name -> zitadel.user.v2beta.RedirectURLs
	94,  // 64: zitadel.user.v2beta.StartIdentityProviderIntentRequest.ldap:type_name -> zitadel.user.v2beta.LDAPCredentials
	77,  // 65: zitadel.user.v2beta.StartIdentityProviderIntentResponse.details:type_name -> zitadel.object.v2beta.Details
	95,  // 66: zitadel.user.v2beta.StartIdentityProviderIntentResponse.idp_intent:type_name -> zitadel.user.v2beta.IDPIntent
	77,  // 67: zitadel.user.v2beta.RetrieveIdentityProviderIntentResponse.details:type_name -> zitadel.object.v2beta.Details
	96,  // 68: zitadel.user.v2beta.RetrieveIdentityProviderIntentResponse.idp_information:type_name -> zitadel.user.v2beta.IDPInformation
	76,  // 69: zitadel.user.v2beta.AddIDPLinkRequest.idp_link:type_name -> zitadel.user.v2beta.IDPLink
	77,  // 70: zitadel.user.v2beta.AddIDPLinkResponse.details:type_name -> zitadel.object.v2beta.Details
	97,  // 71: zitadel.user.v2beta.PasswordResetRequest.send_link:type_name -> zitadel.user.v2beta.SendPasswordResetLink
	98,  // 72: zitadel.user.v2beta.PasswordResetRequest.return_code:type_name -> zitadel.user.v2beta.ReturnPasswordResetCode
	77,  // 73: zitadel.user.v2beta.PasswordResetResponse.details:type_name -> zitadel.object.v2beta.Details
	74,  // 74: zitadel.user.v2beta.SetPasswordRequest.new_password:type_name -> zitadel.user.v2beta.Password
	77,  // 75: zitadel.user.v2beta.SetPasswordResponse.details:type_name -> zitadel.object.v2beta.Details
	82,  // 76: zitadel.user.v2beta.ListAuthenticationMethodTypesResponse.details:type_name -> zitadel.object.v2beta.ListDetails
	0,   // 77: zitadel.user.v2beta.ListAuthenticationMethodTypesResponse.auth_method_types:type_name -> zitadel.user.v2beta.AuthenticationMethodType
	1,   // 78: zitadel.user.v2beta.UserService.AddHumanUser:input_type -> zitadel.user.v2beta.AddHumanUserRequest
	3,   // 79: zitadel.user.v2beta.UserService.GetUserByID:input_type -> zitadel.user.v2beta.GetUserByIDRequest
	5,   // 80: zitadel.user.v2beta.UserService.ListUsers:input_type -> zitadel.user.v2beta.ListUsersRequest
	7,   // 81: zitadel.user.v2beta.UserService.SetEmail:input_type -> zitadel.user.v2beta.SetEmailRequest
	9,   // 82: zitadel.user.v2beta.UserService.ResendEmailCode:input_type -> zitadel.user.v2beta.ResendEmailCodeRequest
	11,  // 83: zitadel.user.v2beta.UserService.VerifyEmail:input_type -> zitadel.user.v2beta.VerifyEmailRequest
	13,  // 84: zitadel.user.v2beta.UserService.SetPhone:input_type -> zitadel.user.v2beta.SetPhoneRequest
	15,  // 85: zitadel.user.v2beta.UserService.RemovePhone:input_type -> zitadel.user.v2beta.RemovePhoneRequest
	17,  // 86: zitadel.user.v2beta.UserService.ResendPhoneCode:input_type -> zitadel.user.v2beta.ResendPhoneCodeRequest
	19,  // 87: zitadel.user.v2beta.UserService.VerifyPhone:input_type -> zitadel.user.v2beta.VerifyPhoneRequest
	23,  // 88: zitadel.user.v2beta.UserService.UpdateHumanUser:input_type -> zitadel.user.v2beta.UpdateHumanUserRequest
	25,  // 89: zitadel.user.v2beta.UserService.DeactivateUser:input_type -> zitadel.user.v2beta.DeactivateUserRequest
	27,  // 90: zitadel.user.v2beta.UserService.ReactivateUser:input_type -> zitadel.user.v2beta.ReactivateUserRequest
	29,  // 91: zitadel.user.v2beta.UserService.LockUser:input_type -> zitadel.user.v2beta.LockUserRequest
	31,  // 92: zitadel.user.v2beta.UserService.UnlockUser:input_type -> zitadel.user.v2beta.UnlockUserRequest
	21,  // 93: zitadel.user.v2beta.UserService.DeleteUser:input_type -> zitadel.user.v2beta.DeleteUserRequest
	33,  // 94: zitadel.user.v2beta.UserService.RegisterPasskey:input_type -> zitadel.user.v2beta.RegisterPasskeyRequest
	35,  // 95: zitadel.user.v2beta.UserService.VerifyPasskeyRegistration:input_type -> zitadel.user.v2beta.VerifyPasskeyRegistrationRequest
	55,  // 96: zitadel.user.v2beta.UserService.CreatePasskeyRegistrationLink:input_type -> zitadel.user.v2beta.CreatePasskeyRegistrationLinkRequest
	37,  // 97: zitadel.user.v2beta.UserService.RegisterU2F:input_type -> zitadel.user.v2beta.RegisterU2FRequest
	39,  // 98: zitadel.user.v2beta.UserService.VerifyU2FRegistration:input_type -> zitadel.user.v2beta.VerifyU2FRegistrationRequest
	41,  // 99: zitadel.user.v2beta.UserService.RegisterTOTP:input_type -> zitadel.user.v2beta.RegisterTOTPRequest
	43,  // 100: zitadel.user.v2beta.UserService.VerifyTOTPRegistration:input_type -> zitadel.user.v2beta.VerifyTOTPRegistrationRequest
	45,  // 101: zitadel.user.v2beta.UserService.RemoveTOTP:input_type -> zitadel.user.v2beta.RemoveTOTPRequest
	47,  // 102: zitadel.user.v2beta.UserService.AddOTPSMS:input_type -> zitadel.user.v2beta.AddOTPSMSRequest
	49,  // 103: zitadel.user.v2beta.UserService.RemoveOTPSMS:input_type -> zitadel.user.v2beta.RemoveOTPSMSRequest
	51,  // 104: zitadel.user.v2beta.UserService.AddOTPEmail:input_type -> zitadel.user.v2beta.AddOTPEmailRequest
	53,  // 105: zitadel.user.v2beta.UserService.RemoveOTPEmail:input_type -> zitadel.user.v2beta.RemoveOTPEmailRequest
	57,  // 106: zitadel.user.v2beta.UserService.StartIdentityProviderIntent:input_type -> zitadel.user.v2beta.StartIdentityProviderIntentRequest
	59,  // 107: zitadel.user.v2beta.UserService.RetrieveIdentityProviderIntent:input_type -> zitadel.user.v2beta.RetrieveIdentityProviderIntentRequest
	61,  // 108: zitadel.user.v2beta.UserService.AddIDPLink:input_type -> zitadel.user.v2beta.AddIDPLinkRequest
	63,  // 109: zitadel.user.v2beta.UserService.PasswordReset:input_type -> zitadel.user.v2beta.PasswordResetRequest
	65,  // 110: zitadel.user.v2beta.UserService.SetPassword:input_type -> zitadel.user.v2beta.SetPasswordRequest
	67,  // 111: zitadel.user.v2beta.UserService.ListAuthenticationMethodTypes:input_type -> zitadel.user.v2beta.ListAuthenticationMethodTypesRequest
	2,   // 112: zitadel.user.v2beta.UserService.AddHumanUser:output_type -> zitadel.user.v2beta.AddHumanUserResponse
	4,   // 113: zitadel.user.v2beta.UserService.GetUserByID:output_type -> zitadel.user.v2beta.GetUserByIDResponse
	6,   // 114: zitadel.user.v2beta.UserService.ListUsers:output_type -> zitadel.user.v2beta.ListUsersResponse
	8,   // 115: zitadel.user.v2beta.UserService.SetEmail:output_type -> zitadel.user.v2beta.SetEmailResponse
	10,  // 116: zitadel.user.v2beta.UserService.ResendEmailCode:output_type -> zitadel.user.v2beta.ResendEmailCodeResponse
	12,  // 117: zitadel.user.v2beta.UserService.VerifyEmail:output_type -> zitadel.user.v2beta.VerifyEmailResponse
	14,  // 118: zitadel.user.v2beta.UserService.SetPhone:output_type -> zitadel.user.v2beta.SetPhoneResponse
	16,  // 119: zitadel.user.v2beta.UserService.RemovePhone:output_type -> zitadel.user.v2beta.RemovePhoneResponse
	18,  // 120: zitadel.user.v2beta.UserService.ResendPhoneCode:output_type -> zitadel.user.v2beta.ResendPhoneCodeResponse
	20,  // 121: zitadel.user.v2beta.UserService.VerifyPhone:output_type -> zitadel.user.v2beta.VerifyPhoneResponse
	24,  // 122: zitadel.user.v2beta.UserService.UpdateHumanUser:output_type -> zitadel.user.v2beta.UpdateHumanUserResponse
	26,  // 123: zitadel.user.v2beta.UserService.DeactivateUser:output_type -> zitadel.user.v2beta.DeactivateUserResponse
	28,  // 124: zitadel.user.v2beta.UserService.ReactivateUser:output_type -> zitadel.user.v2beta.ReactivateUserResponse
	30,  // 125: zitadel.user.v2beta.UserService.LockUser:output_type -> zitadel.user.v2beta.LockUserResponse
	32,  // 126: zitadel.user.v2beta.UserService.UnlockUser:output_type -> zitadel.user.v2beta.UnlockUserResponse
	22,  // 127: zitadel.user.v2beta.UserService.DeleteUser:output_type -> zitadel.user.v2beta.DeleteUserResponse
	34,  // 128: zitadel.user.v2beta.UserService.RegisterPasskey:output_type -> zitadel.user.v2beta.RegisterPasskeyResponse
	36,  // 129: zitadel.user.v2beta.UserService.VerifyPasskeyRegistration:output_type -> zitadel.user.v2beta.VerifyPasskeyRegistrationResponse
	56,  // 130: zitadel.user.v2beta.UserService.CreatePasskeyRegistrationLink:output_type -> zitadel.user.v2beta.CreatePasskeyRegistrationLinkResponse
	38,  // 131: zitadel.user.v2beta.UserService.RegisterU2F:output_type -> zitadel.user.v2beta.RegisterU2FResponse
	40,  // 132: zitadel.user.v2beta.UserService.VerifyU2FRegistration:output_type -> zitadel.user.v2beta.VerifyU2FRegistrationResponse
	42,  // 133: zitadel.user.v2beta.UserService.RegisterTOTP:output_type -> zitadel.user.v2beta.RegisterTOTPResponse
	44,  // 134: zitadel.user.v2beta.UserService.VerifyTOTPRegistration:output_type -> zitadel.user.v2beta.VerifyTOTPRegistrationResponse
	46,  // 135: zitadel.user.v2beta.UserService.RemoveTOTP:output_type -> zitadel.user.v2beta.RemoveTOTPResponse
	48,  // 136: zitadel.user.v2beta.UserService.AddOTPSMS:output_type -> zitadel.user.v2beta.AddOTPSMSResponse
	50,  // 137: zitadel.user.v2beta.UserService.RemoveOTPSMS:output_type -> zitadel.user.v2beta.RemoveOTPSMSResponse
	52,  // 138: zitadel.user.v2beta.UserService.AddOTPEmail:output_type -> zitadel.user.v2beta.AddOTPEmailResponse
	54,  // 139: zitadel.user.v2beta.UserService.RemoveOTPEmail:output_type -> zitadel.user.v2beta.RemoveOTPEmailResponse
	58,  // 140: zitadel.user.v2beta.UserService.StartIdentityProviderIntent:output_type -> zitadel.user.v2beta.StartIdentityProviderIntentResponse
	60,  // 141: zitadel.user.v2beta.UserService.RetrieveIdentityProviderIntent:output_type -> zitadel.user.v2beta.RetrieveIdentityProviderIntentResponse
	62,  // 142: zitadel.user.v2beta.UserService.AddIDPLink:output_type -> zitadel.user.v2beta.AddIDPLinkResponse
	64,  // 143: zitadel.user.v2beta.UserService.PasswordReset:output_type -> zitadel.user.v2beta.PasswordResetResponse
	66,  // 144: zitadel.user.v2beta.UserService.SetPassword:output_type -> zitadel.user.v2beta.SetPasswordResponse
	68,  // 145: zitadel.user.v2beta.UserService.ListAuthenticationMethodTypes:output_type -> zitadel.user.v2beta.ListAuthenticationMethodTypesResponse
	112, // [112:146] is the sub-list for method output_type
	78,  // [78:112] is the sub-list for method input_type
	78,  // [78:78] is the sub-list for extension type_name
	78,  // [78:78] is the sub-list for extension extendee
	0,   // [0:78] is the sub-list for field type_name
}

func init() { file_zitadel_user_v2beta_user_service_proto_init() }
func file_zitadel_user_v2beta_user_service_proto_init() {
	if File_zitadel_user_v2beta_user_service_proto != nil {
		return
	}
	file_zitadel_user_v2beta_auth_proto_init()
	file_zitadel_user_v2beta_email_proto_init()
	file_zitadel_user_v2beta_phone_proto_init()
	file_zitadel_user_v2beta_idp_proto_init()
	file_zitadel_user_v2beta_password_proto_init()
	file_zitadel_user_v2beta_user_proto_init()
	file_zitadel_user_v2beta_query_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zitadel_user_v2beta_user_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHumanUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHumanUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendEmailCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendEmailCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPhoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPhoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePhoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePhoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendPhoneCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendPhoneCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyPhoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyPhoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHumanUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateHumanUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactivateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactivateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterPasskeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterPasskeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyPasskeyRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyPasskeyRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterU2FRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterU2FResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyU2FRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyU2FRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTOTPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterTOTPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyTOTPRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyTOTPRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTOTPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTOTPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOTPSMSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOTPSMSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveOTPSMSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveOTPSMSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOTPEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOTPEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveOTPEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveOTPEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePasskeyRegistrationLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePasskeyRegistrationLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartIdentityProviderIntentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartIdentityProviderIntentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveIdentityProviderIntentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveIdentityProviderIntentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIDPLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIDPLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordResetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordResetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuthenticationMethodTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_user_service_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuthenticationMethodTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_user_v2beta_user_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AddHumanUserRequest_Password)(nil),
		(*AddHumanUserRequest_HashedPassword)(nil),
	}
	file_zitadel_user_v2beta_user_service_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_zitadel_user_v2beta_user_service_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*SetEmailRequest_SendCode)(nil),
		(*SetEmailRequest_ReturnCode)(nil),
		(*SetEmailRequest_IsVerified)(nil),
	}
	file_zitadel_user_v2beta_user_service_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_zitadel_user_v2beta_user_service_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ResendEmailCodeRequest_SendCode)(nil),
		(*ResendEmailCodeRequest_ReturnCode)(nil),
	}
	file_zitadel_user_v2beta_user_service_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_zitadel_user_v2beta_user_service_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*SetPhoneRequest_SendCode)(nil),
		(*SetPhoneRequest_ReturnCode)(nil),
		(*SetPhoneRequest_IsVerified)(nil),
	}
	file_zitadel_user_v2beta_user_service_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_zitadel_user_v2beta_user_service_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ResendPhoneCodeRequest_SendCode)(nil),
		(*ResendPhoneCodeRequest_ReturnCode)(nil),
	}
	file_zitadel_user_v2beta_user_service_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_zitadel_user_v2beta_user_service_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_zitadel_user_v2beta_user_service_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_zitadel_user_v2beta_user_service_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_zitadel_user_v2beta_user_service_proto_msgTypes[54].OneofWrappers = []interface{}{
		(*CreatePasskeyRegistrationLinkRequest_SendLink)(nil),
		(*CreatePasskeyRegistrationLinkRequest_ReturnCode)(nil),
	}
	file_zitadel_user_v2beta_user_service_proto_msgTypes[55].OneofWrappers = []interface{}{}
	file_zitadel_user_v2beta_user_service_proto_msgTypes[56].OneofWrappers = []interface{}{
		(*StartIdentityProviderIntentRequest_Urls)(nil),
		(*StartIdentityProviderIntentRequest_Ldap)(nil),
	}
	file_zitadel_user_v2beta_user_service_proto_msgTypes[57].OneofWrappers = []interface{}{
		(*StartIdentityProviderIntentResponse_AuthUrl)(nil),
		(*StartIdentityProviderIntentResponse_IdpIntent)(nil),
		(*StartIdentityProviderIntentResponse_PostForm)(nil),
	}
	file_zitadel_user_v2beta_user_service_proto_msgTypes[62].OneofWrappers = []interface{}{
		(*PasswordResetRequest_SendLink)(nil),
		(*PasswordResetRequest_ReturnCode)(nil),
	}
	file_zitadel_user_v2beta_user_service_proto_msgTypes[63].OneofWrappers = []interface{}{}
	file_zitadel_user_v2beta_user_service_proto_msgTypes[64].OneofWrappers = []interface{}{
		(*SetPasswordRequest_CurrentPassword)(nil),
		(*SetPasswordRequest_VerificationCode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_user_v2beta_user_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   68,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zitadel_user_v2beta_user_service_proto_goTypes,
		DependencyIndexes: file_zitadel_user_v2beta_user_service_proto_depIdxs,
		EnumInfos:         file_zitadel_user_v2beta_user_service_proto_enumTypes,
		MessageInfos:      file_zitadel_user_v2beta_user_service_proto_msgTypes,
	}.Build()
	File_zitadel_user_v2beta_user_service_proto = out.File
	file_zitadel_user_v2beta_user_service_proto_rawDesc = nil
	file_zitadel_user_v2beta_user_service_proto_goTypes = nil
	file_zitadel_user_v2beta_user_service_proto_depIdxs = nil
}
