// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/user/v2beta/query.proto

package user

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	v2beta "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/object/v2beta"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	Type_TYPE_UNSPECIFIED Type = 0
	Type_TYPE_HUMAN       Type = 1
	Type_TYPE_MACHINE     Type = 2
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_HUMAN",
		2: "TYPE_MACHINE",
	}
	Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_HUMAN":       1,
		"TYPE_MACHINE":     2,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_user_v2beta_query_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_zitadel_user_v2beta_query_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_query_proto_rawDescGZIP(), []int{0}
}

type UserFieldName int32

const (
	UserFieldName_USER_FIELD_NAME_UNSPECIFIED   UserFieldName = 0
	UserFieldName_USER_FIELD_NAME_USER_NAME     UserFieldName = 1
	UserFieldName_USER_FIELD_NAME_FIRST_NAME    UserFieldName = 2
	UserFieldName_USER_FIELD_NAME_LAST_NAME     UserFieldName = 3
	UserFieldName_USER_FIELD_NAME_NICK_NAME     UserFieldName = 4
	UserFieldName_USER_FIELD_NAME_DISPLAY_NAME  UserFieldName = 5
	UserFieldName_USER_FIELD_NAME_EMAIL         UserFieldName = 6
	UserFieldName_USER_FIELD_NAME_STATE         UserFieldName = 7
	UserFieldName_USER_FIELD_NAME_TYPE          UserFieldName = 8
	UserFieldName_USER_FIELD_NAME_CREATION_DATE UserFieldName = 9
)

// Enum value maps for UserFieldName.
var (
	UserFieldName_name = map[int32]string{
		0: "USER_FIELD_NAME_UNSPECIFIED",
		1: "USER_FIELD_NAME_USER_NAME",
		2: "USER_FIELD_NAME_FIRST_NAME",
		3: "USER_FIELD_NAME_LAST_NAME",
		4: "USER_FIELD_NAME_NICK_NAME",
		5: "USER_FIELD_NAME_DISPLAY_NAME",
		6: "USER_FIELD_NAME_EMAIL",
		7: "USER_FIELD_NAME_STATE",
		8: "USER_FIELD_NAME_TYPE",
		9: "USER_FIELD_NAME_CREATION_DATE",
	}
	UserFieldName_value = map[string]int32{
		"USER_FIELD_NAME_UNSPECIFIED":   0,
		"USER_FIELD_NAME_USER_NAME":     1,
		"USER_FIELD_NAME_FIRST_NAME":    2,
		"USER_FIELD_NAME_LAST_NAME":     3,
		"USER_FIELD_NAME_NICK_NAME":     4,
		"USER_FIELD_NAME_DISPLAY_NAME":  5,
		"USER_FIELD_NAME_EMAIL":         6,
		"USER_FIELD_NAME_STATE":         7,
		"USER_FIELD_NAME_TYPE":          8,
		"USER_FIELD_NAME_CREATION_DATE": 9,
	}
)

func (x UserFieldName) Enum() *UserFieldName {
	p := new(UserFieldName)
	*p = x
	return p
}

func (x UserFieldName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserFieldName) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_user_v2beta_query_proto_enumTypes[1].Descriptor()
}

func (UserFieldName) Type() protoreflect.EnumType {
	return &file_zitadel_user_v2beta_query_proto_enumTypes[1]
}

func (x UserFieldName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserFieldName.Descriptor instead.
func (UserFieldName) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_query_proto_rawDescGZIP(), []int{1}
}

type SearchQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*SearchQuery_UserNameQuery
	//	*SearchQuery_FirstNameQuery
	//	*SearchQuery_LastNameQuery
	//	*SearchQuery_NickNameQuery
	//	*SearchQuery_DisplayNameQuery
	//	*SearchQuery_EmailQuery
	//	*SearchQuery_StateQuery
	//	*SearchQuery_TypeQuery
	//	*SearchQuery_LoginNameQuery
	//	*SearchQuery_InUserIdsQuery
	//	*SearchQuery_OrQuery
	//	*SearchQuery_AndQuery
	//	*SearchQuery_NotQuery
	//	*SearchQuery_InUserEmailsQuery
	//	*SearchQuery_OrganizationIdQuery
	Query isSearchQuery_Query `protobuf_oneof:"query"`
}

func (x *SearchQuery) Reset() {
	*x = SearchQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery) ProtoMessage() {}

func (x *SearchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery.ProtoReflect.Descriptor instead.
func (*SearchQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_query_proto_rawDescGZIP(), []int{0}
}

func (m *SearchQuery) GetQuery() isSearchQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *SearchQuery) GetUserNameQuery() *UserNameQuery {
	if x, ok := x.GetQuery().(*SearchQuery_UserNameQuery); ok {
		return x.UserNameQuery
	}
	return nil
}

func (x *SearchQuery) GetFirstNameQuery() *FirstNameQuery {
	if x, ok := x.GetQuery().(*SearchQuery_FirstNameQuery); ok {
		return x.FirstNameQuery
	}
	return nil
}

func (x *SearchQuery) GetLastNameQuery() *LastNameQuery {
	if x, ok := x.GetQuery().(*SearchQuery_LastNameQuery); ok {
		return x.LastNameQuery
	}
	return nil
}

func (x *SearchQuery) GetNickNameQuery() *NickNameQuery {
	if x, ok := x.GetQuery().(*SearchQuery_NickNameQuery); ok {
		return x.NickNameQuery
	}
	return nil
}

func (x *SearchQuery) GetDisplayNameQuery() *DisplayNameQuery {
	if x, ok := x.GetQuery().(*SearchQuery_DisplayNameQuery); ok {
		return x.DisplayNameQuery
	}
	return nil
}

func (x *SearchQuery) GetEmailQuery() *EmailQuery {
	if x, ok := x.GetQuery().(*SearchQuery_EmailQuery); ok {
		return x.EmailQuery
	}
	return nil
}

func (x *SearchQuery) GetStateQuery() *StateQuery {
	if x, ok := x.GetQuery().(*SearchQuery_StateQuery); ok {
		return x.StateQuery
	}
	return nil
}

func (x *SearchQuery) GetTypeQuery() *TypeQuery {
	if x, ok := x.GetQuery().(*SearchQuery_TypeQuery); ok {
		return x.TypeQuery
	}
	return nil
}

func (x *SearchQuery) GetLoginNameQuery() *LoginNameQuery {
	if x, ok := x.GetQuery().(*SearchQuery_LoginNameQuery); ok {
		return x.LoginNameQuery
	}
	return nil
}

func (x *SearchQuery) GetInUserIdsQuery() *InUserIDQuery {
	if x, ok := x.GetQuery().(*SearchQuery_InUserIdsQuery); ok {
		return x.InUserIdsQuery
	}
	return nil
}

func (x *SearchQuery) GetOrQuery() *OrQuery {
	if x, ok := x.GetQuery().(*SearchQuery_OrQuery); ok {
		return x.OrQuery
	}
	return nil
}

func (x *SearchQuery) GetAndQuery() *AndQuery {
	if x, ok := x.GetQuery().(*SearchQuery_AndQuery); ok {
		return x.AndQuery
	}
	return nil
}

func (x *SearchQuery) GetNotQuery() *NotQuery {
	if x, ok := x.GetQuery().(*SearchQuery_NotQuery); ok {
		return x.NotQuery
	}
	return nil
}

func (x *SearchQuery) GetInUserEmailsQuery() *InUserEmailsQuery {
	if x, ok := x.GetQuery().(*SearchQuery_InUserEmailsQuery); ok {
		return x.InUserEmailsQuery
	}
	return nil
}

func (x *SearchQuery) GetOrganizationIdQuery() *OrganizationIdQuery {
	if x, ok := x.GetQuery().(*SearchQuery_OrganizationIdQuery); ok {
		return x.OrganizationIdQuery
	}
	return nil
}

type isSearchQuery_Query interface {
	isSearchQuery_Query()
}

type SearchQuery_UserNameQuery struct {
	UserNameQuery *UserNameQuery `protobuf:"bytes,1,opt,name=user_name_query,json=userNameQuery,proto3,oneof"`
}

type SearchQuery_FirstNameQuery struct {
	FirstNameQuery *FirstNameQuery `protobuf:"bytes,2,opt,name=first_name_query,json=firstNameQuery,proto3,oneof"`
}

type SearchQuery_LastNameQuery struct {
	LastNameQuery *LastNameQuery `protobuf:"bytes,3,opt,name=last_name_query,json=lastNameQuery,proto3,oneof"`
}

type SearchQuery_NickNameQuery struct {
	NickNameQuery *NickNameQuery `protobuf:"bytes,4,opt,name=nick_name_query,json=nickNameQuery,proto3,oneof"`
}

type SearchQuery_DisplayNameQuery struct {
	DisplayNameQuery *DisplayNameQuery `protobuf:"bytes,5,opt,name=display_name_query,json=displayNameQuery,proto3,oneof"`
}

type SearchQuery_EmailQuery struct {
	EmailQuery *EmailQuery `protobuf:"bytes,6,opt,name=email_query,json=emailQuery,proto3,oneof"`
}

type SearchQuery_StateQuery struct {
	StateQuery *StateQuery `protobuf:"bytes,7,opt,name=state_query,json=stateQuery,proto3,oneof"`
}

type SearchQuery_TypeQuery struct {
	TypeQuery *TypeQuery `protobuf:"bytes,8,opt,name=type_query,json=typeQuery,proto3,oneof"`
}

type SearchQuery_LoginNameQuery struct {
	LoginNameQuery *LoginNameQuery `protobuf:"bytes,9,opt,name=login_name_query,json=loginNameQuery,proto3,oneof"`
}

type SearchQuery_InUserIdsQuery struct {
	InUserIdsQuery *InUserIDQuery `protobuf:"bytes,10,opt,name=in_user_ids_query,json=inUserIdsQuery,proto3,oneof"`
}

type SearchQuery_OrQuery struct {
	OrQuery *OrQuery `protobuf:"bytes,11,opt,name=or_query,json=orQuery,proto3,oneof"`
}

type SearchQuery_AndQuery struct {
	AndQuery *AndQuery `protobuf:"bytes,12,opt,name=and_query,json=andQuery,proto3,oneof"`
}

type SearchQuery_NotQuery struct {
	NotQuery *NotQuery `protobuf:"bytes,13,opt,name=not_query,json=notQuery,proto3,oneof"`
}

type SearchQuery_InUserEmailsQuery struct {
	InUserEmailsQuery *InUserEmailsQuery `protobuf:"bytes,14,opt,name=in_user_emails_query,json=inUserEmailsQuery,proto3,oneof"`
}

type SearchQuery_OrganizationIdQuery struct {
	OrganizationIdQuery *OrganizationIdQuery `protobuf:"bytes,15,opt,name=organization_id_query,json=organizationIdQuery,proto3,oneof"`
}

func (*SearchQuery_UserNameQuery) isSearchQuery_Query() {}

func (*SearchQuery_FirstNameQuery) isSearchQuery_Query() {}

func (*SearchQuery_LastNameQuery) isSearchQuery_Query() {}

func (*SearchQuery_NickNameQuery) isSearchQuery_Query() {}

func (*SearchQuery_DisplayNameQuery) isSearchQuery_Query() {}

func (*SearchQuery_EmailQuery) isSearchQuery_Query() {}

func (*SearchQuery_StateQuery) isSearchQuery_Query() {}

func (*SearchQuery_TypeQuery) isSearchQuery_Query() {}

func (*SearchQuery_LoginNameQuery) isSearchQuery_Query() {}

func (*SearchQuery_InUserIdsQuery) isSearchQuery_Query() {}

func (*SearchQuery_OrQuery) isSearchQuery_Query() {}

func (*SearchQuery_AndQuery) isSearchQuery_Query() {}

func (*SearchQuery_NotQuery) isSearchQuery_Query() {}

func (*SearchQuery_InUserEmailsQuery) isSearchQuery_Query() {}

func (*SearchQuery_OrganizationIdQuery) isSearchQuery_Query() {}

// Connect multiple sub-condition with and OR operator.
type OrQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*SearchQuery `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *OrQuery) Reset() {
	*x = OrQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrQuery) ProtoMessage() {}

func (x *OrQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrQuery.ProtoReflect.Descriptor instead.
func (*OrQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_query_proto_rawDescGZIP(), []int{1}
}

func (x *OrQuery) GetQueries() []*SearchQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

// Connect multiple sub-condition with and AND operator.
type AndQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*SearchQuery `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *AndQuery) Reset() {
	*x = AndQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndQuery) ProtoMessage() {}

func (x *AndQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndQuery.ProtoReflect.Descriptor instead.
func (*AndQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_query_proto_rawDescGZIP(), []int{2}
}

func (x *AndQuery) GetQueries() []*SearchQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

// Negate the sub-condition.
type NotQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *SearchQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *NotQuery) Reset() {
	*x = NotQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotQuery) ProtoMessage() {}

func (x *NotQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotQuery.ProtoReflect.Descriptor instead.
func (*NotQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_query_proto_rawDescGZIP(), []int{3}
}

func (x *NotQuery) GetQuery() *SearchQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

// Query for users with ID in list of IDs.
type InUserIDQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *InUserIDQuery) Reset() {
	*x = InUserIDQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InUserIDQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InUserIDQuery) ProtoMessage() {}

func (x *InUserIDQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InUserIDQuery.ProtoReflect.Descriptor instead.
func (*InUserIDQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_query_proto_rawDescGZIP(), []int{4}
}

func (x *InUserIDQuery) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

// Query for users with a specific user name.
type UserNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string                 `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Method   v2beta.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.object.v2beta.TextQueryMethod" json:"method,omitempty"`
}

func (x *UserNameQuery) Reset() {
	*x = UserNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNameQuery) ProtoMessage() {}

func (x *UserNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNameQuery.ProtoReflect.Descriptor instead.
func (*UserNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_query_proto_rawDescGZIP(), []int{5}
}

func (x *UserNameQuery) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserNameQuery) GetMethod() v2beta.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return v2beta.TextQueryMethod(0)
}

// Query for users with a specific first name.
type FirstNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName string                 `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	Method    v2beta.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.object.v2beta.TextQueryMethod" json:"method,omitempty"`
}

func (x *FirstNameQuery) Reset() {
	*x = FirstNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstNameQuery) ProtoMessage() {}

func (x *FirstNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstNameQuery.ProtoReflect.Descriptor instead.
func (*FirstNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_query_proto_rawDescGZIP(), []int{6}
}

func (x *FirstNameQuery) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *FirstNameQuery) GetMethod() v2beta.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return v2beta.TextQueryMethod(0)
}

// Query for users with a specific last name.
type LastNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastName string                 `protobuf:"bytes,1,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Method   v2beta.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.object.v2beta.TextQueryMethod" json:"method,omitempty"`
}

func (x *LastNameQuery) Reset() {
	*x = LastNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastNameQuery) ProtoMessage() {}

func (x *LastNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastNameQuery.ProtoReflect.Descriptor instead.
func (*LastNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_query_proto_rawDescGZIP(), []int{7}
}

func (x *LastNameQuery) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *LastNameQuery) GetMethod() v2beta.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return v2beta.TextQueryMethod(0)
}

// Query for users with a specific nickname.
type NickNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NickName string                 `protobuf:"bytes,1,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	Method   v2beta.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.object.v2beta.TextQueryMethod" json:"method,omitempty"`
}

func (x *NickNameQuery) Reset() {
	*x = NickNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NickNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NickNameQuery) ProtoMessage() {}

func (x *NickNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NickNameQuery.ProtoReflect.Descriptor instead.
func (*NickNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_query_proto_rawDescGZIP(), []int{8}
}

func (x *NickNameQuery) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *NickNameQuery) GetMethod() v2beta.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return v2beta.TextQueryMethod(0)
}

// Query for users with a specific display name.
type DisplayNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string                 `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Method      v2beta.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.object.v2beta.TextQueryMethod" json:"method,omitempty"`
}

func (x *DisplayNameQuery) Reset() {
	*x = DisplayNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayNameQuery) ProtoMessage() {}

func (x *DisplayNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayNameQuery.ProtoReflect.Descriptor instead.
func (*DisplayNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_query_proto_rawDescGZIP(), []int{9}
}

func (x *DisplayNameQuery) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *DisplayNameQuery) GetMethod() v2beta.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return v2beta.TextQueryMethod(0)
}

// Query for users with a specific email.
type EmailQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmailAddress string                 `protobuf:"bytes,1,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	Method       v2beta.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.object.v2beta.TextQueryMethod" json:"method,omitempty"`
}

func (x *EmailQuery) Reset() {
	*x = EmailQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailQuery) ProtoMessage() {}

func (x *EmailQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailQuery.ProtoReflect.Descriptor instead.
func (*EmailQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_query_proto_rawDescGZIP(), []int{10}
}

func (x *EmailQuery) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *EmailQuery) GetMethod() v2beta.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return v2beta.TextQueryMethod(0)
}

// Query for users with a specific state.
type LoginNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginName string                 `protobuf:"bytes,1,opt,name=login_name,json=loginName,proto3" json:"login_name,omitempty"`
	Method    v2beta.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.object.v2beta.TextQueryMethod" json:"method,omitempty"`
}

func (x *LoginNameQuery) Reset() {
	*x = LoginNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginNameQuery) ProtoMessage() {}

func (x *LoginNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginNameQuery.ProtoReflect.Descriptor instead.
func (*LoginNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_query_proto_rawDescGZIP(), []int{11}
}

func (x *LoginNameQuery) GetLoginName() string {
	if x != nil {
		return x.LoginName
	}
	return ""
}

func (x *LoginNameQuery) GetMethod() v2beta.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return v2beta.TextQueryMethod(0)
}

// Query for users with a specific state.
type StateQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State UserState `protobuf:"varint,1,opt,name=state,proto3,enum=zitadel.user.v2beta.UserState" json:"state,omitempty"`
}

func (x *StateQuery) Reset() {
	*x = StateQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateQuery) ProtoMessage() {}

func (x *StateQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateQuery.ProtoReflect.Descriptor instead.
func (*StateQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_query_proto_rawDescGZIP(), []int{12}
}

func (x *StateQuery) GetState() UserState {
	if x != nil {
		return x.State
	}
	return UserState_USER_STATE_UNSPECIFIED
}

// Query for users with a specific type.
type TypeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Type `protobuf:"varint,1,opt,name=type,proto3,enum=zitadel.user.v2beta.Type" json:"type,omitempty"`
}

func (x *TypeQuery) Reset() {
	*x = TypeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeQuery) ProtoMessage() {}

func (x *TypeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeQuery.ProtoReflect.Descriptor instead.
func (*TypeQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_query_proto_rawDescGZIP(), []int{13}
}

func (x *TypeQuery) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_TYPE_UNSPECIFIED
}

// Query for users with email in list of emails.
type InUserEmailsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserEmails []string `protobuf:"bytes,1,rep,name=user_emails,json=userEmails,proto3" json:"user_emails,omitempty"`
}

func (x *InUserEmailsQuery) Reset() {
	*x = InUserEmailsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_query_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InUserEmailsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InUserEmailsQuery) ProtoMessage() {}

func (x *InUserEmailsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_query_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InUserEmailsQuery.ProtoReflect.Descriptor instead.
func (*InUserEmailsQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_query_proto_rawDescGZIP(), []int{14}
}

func (x *InUserEmailsQuery) GetUserEmails() []string {
	if x != nil {
		return x.UserEmails
	}
	return nil
}

// Query for users under a specific organization as resource owner.
type OrganizationIdQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *OrganizationIdQuery) Reset() {
	*x = OrganizationIdQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2beta_query_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationIdQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationIdQuery) ProtoMessage() {}

func (x *OrganizationIdQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2beta_query_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationIdQuery.ProtoReflect.Descriptor instead.
func (*OrganizationIdQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2beta_query_proto_rawDescGZIP(), []int{15}
}

func (x *OrganizationIdQuery) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

var File_zitadel_user_v2beta_query_proto protoreflect.FileDescriptor

var file_zitadel_user_v2beta_query_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8a, 0x09, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x4c, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x4f, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x4c, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x4c, 0x0a, 0x0f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0d,
	0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x55, 0x0a,
	0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0a,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4f, 0x0a,
	0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4f,
	0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x0e, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x39, 0x0a, 0x08, 0x6f, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x07, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x09, 0x61, 0x6e,
	0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08,
	0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x4e, 0x6f, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x6f,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x59, 0x0a, 0x14, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x11,
	0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x5e, 0x0a, 0x15, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x13, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x42, 0x0c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22,
	0x63, 0x0a, 0x07, 0x4f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x58, 0x0a, 0x07, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x1c, 0x92,
	0x41, 0x19, 0x32, 0x17, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x20, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x27, 0x4f, 0x52, 0x27, 0x52, 0x07, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x08, 0x41, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x59, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75,
	0x62, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x27, 0x41, 0x4e,
	0x44, 0x27, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x08, 0x4e,
	0x6f, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x74, 0x6f, 0x20,
	0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x20, 0x28, 0x4e, 0x4f, 0x54, 0x29, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x22, 0x7b, 0x0a, 0x0d, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x6a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x4f, 0x92, 0x41, 0x4c, 0x32, 0x1f, 0x74, 0x68, 0x65,
	0x20, 0x69, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4a, 0x29, 0x5b, 0x22,
	0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33,
	0x34, 0x22, 0x2c, 0x22, 0x36, 0x39, 0x36, 0x32, 0x32, 0x33, 0x36, 0x36, 0x30, 0x31, 0x32, 0x33,
	0x35, 0x35, 0x36, 0x36, 0x32, 0x22, 0x5d, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x22, 0xcd, 0x01, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x43, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x16, 0x4a, 0x0e, 0x22, 0x67, 0x69, 0x67,
	0x69, 0x2d, 0x67, 0x69, 0x72, 0x61, 0x66, 0x66, 0x65, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x77, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42,
	0x37, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68,
	0x69, 0x63, 0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x22, 0xc8, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x0e, 0x4a, 0x06, 0x22, 0x47,
	0x69, 0x67, 0x69, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x77, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92, 0x41, 0x2c, 0x32,
	0x2a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74,
	0x65, 0x78, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x0d,
	0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3e, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x21, 0x92, 0x41, 0x11, 0x4a, 0x09, 0x22, 0x47, 0x69, 0x72, 0x61, 0x66, 0x66, 0x65, 0x22,
	0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xc8, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x77, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x65,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69,
	0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x0d, 0x4e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x0e,
	0x4a, 0x06, 0x22, 0x47, 0x69, 0x67, 0x69, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x77, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92,
	0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63,
	0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xd6,
	0x01, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x16, 0x4a, 0x0e,
	0x22, 0x47, 0x69, 0x67, 0x69, 0x20, 0x47, 0x69, 0x72, 0x61, 0x66, 0x66, 0x65, 0x22, 0x78, 0xc8,
	0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8,
	0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x77,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20,
	0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20,
	0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xec, 0x01, 0x0a, 0x0a, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x65, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x92,
	0x41, 0x32, 0x32, 0x19, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x12, 0x22,
	0x67, 0x69, 0x67, 0x69, 0x40, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x22, 0x78, 0xc8, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52,
	0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x77, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76,
	0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x65,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69,
	0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x0a, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92,
	0x41, 0x1c, 0x4a, 0x14, 0x22, 0x67, 0x69, 0x67, 0x69, 0x40, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x77, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37,
	0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69,
	0x63, 0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22,
	0x6d, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x5f, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x29, 0x92, 0x41,
	0x1b, 0x32, 0x19, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x60,
	0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x53, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x24, 0x92, 0x41, 0x16, 0x32, 0x14, 0x74, 0x68, 0x65, 0x20, 0x74,
	0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x86, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x71, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x50, 0x92, 0x41, 0x4d,
	0x32, 0x22, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x4a, 0x27, 0x5b, 0x22, 0x74, 0x65, 0x73, 0x74, 0x40, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x2c, 0x22, 0x74, 0x65, 0x73, 0x74, 0x40,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x22, 0x5d, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x6b, 0x0a, 0x13, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x54, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13,
	0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33,
	0x33, 0x34, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2a, 0x3e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x55, 0x4d,
	0x41, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43,
	0x48, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x2a, 0xc2, 0x02, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x53,
	0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x49, 0x43, 0x4b, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41,
	0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x18,
	0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x09, 0x42, 0x36, 0x5a, 0x34, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x3b, 0x75,
	0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_user_v2beta_query_proto_rawDescOnce sync.Once
	file_zitadel_user_v2beta_query_proto_rawDescData = file_zitadel_user_v2beta_query_proto_rawDesc
)

func file_zitadel_user_v2beta_query_proto_rawDescGZIP() []byte {
	file_zitadel_user_v2beta_query_proto_rawDescOnce.Do(func() {
		file_zitadel_user_v2beta_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_user_v2beta_query_proto_rawDescData)
	})
	return file_zitadel_user_v2beta_query_proto_rawDescData
}

var file_zitadel_user_v2beta_query_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_zitadel_user_v2beta_query_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_zitadel_user_v2beta_query_proto_goTypes = []interface{}{
	(Type)(0),                   // 0: zitadel.user.v2beta.Type
	(UserFieldName)(0),          // 1: zitadel.user.v2beta.UserFieldName
	(*SearchQuery)(nil),         // 2: zitadel.user.v2beta.SearchQuery
	(*OrQuery)(nil),             // 3: zitadel.user.v2beta.OrQuery
	(*AndQuery)(nil),            // 4: zitadel.user.v2beta.AndQuery
	(*NotQuery)(nil),            // 5: zitadel.user.v2beta.NotQuery
	(*InUserIDQuery)(nil),       // 6: zitadel.user.v2beta.InUserIDQuery
	(*UserNameQuery)(nil),       // 7: zitadel.user.v2beta.UserNameQuery
	(*FirstNameQuery)(nil),      // 8: zitadel.user.v2beta.FirstNameQuery
	(*LastNameQuery)(nil),       // 9: zitadel.user.v2beta.LastNameQuery
	(*NickNameQuery)(nil),       // 10: zitadel.user.v2beta.NickNameQuery
	(*DisplayNameQuery)(nil),    // 11: zitadel.user.v2beta.DisplayNameQuery
	(*EmailQuery)(nil),          // 12: zitadel.user.v2beta.EmailQuery
	(*LoginNameQuery)(nil),      // 13: zitadel.user.v2beta.LoginNameQuery
	(*StateQuery)(nil),          // 14: zitadel.user.v2beta.StateQuery
	(*TypeQuery)(nil),           // 15: zitadel.user.v2beta.TypeQuery
	(*InUserEmailsQuery)(nil),   // 16: zitadel.user.v2beta.InUserEmailsQuery
	(*OrganizationIdQuery)(nil), // 17: zitadel.user.v2beta.OrganizationIdQuery
	(v2beta.TextQueryMethod)(0), // 18: zitadel.object.v2beta.TextQueryMethod
	(UserState)(0),              // 19: zitadel.user.v2beta.UserState
}
var file_zitadel_user_v2beta_query_proto_depIdxs = []int32{
	7,  // 0: zitadel.user.v2beta.SearchQuery.user_name_query:type_name -> zitadel.user.v2beta.UserNameQuery
	8,  // 1: zitadel.user.v2beta.SearchQuery.first_name_query:type_name -> zitadel.user.v2beta.FirstNameQuery
	9,  // 2: zitadel.user.v2beta.SearchQuery.last_name_query:type_name -> zitadel.user.v2beta.LastNameQuery
	10, // 3: zitadel.user.v2beta.SearchQuery.nick_name_query:type_name -> zitadel.user.v2beta.NickNameQuery
	11, // 4: zitadel.user.v2beta.SearchQuery.display_name_query:type_name -> zitadel.user.v2beta.DisplayNameQuery
	12, // 5: zitadel.user.v2beta.SearchQuery.email_query:type_name -> zitadel.user.v2beta.EmailQuery
	14, // 6: zitadel.user.v2beta.SearchQuery.state_query:type_name -> zitadel.user.v2beta.StateQuery
	15, // 7: zitadel.user.v2beta.SearchQuery.type_query:type_name -> zitadel.user.v2beta.TypeQuery
	13, // 8: zitadel.user.v2beta.SearchQuery.login_name_query:type_name -> zitadel.user.v2beta.LoginNameQuery
	6,  // 9: zitadel.user.v2beta.SearchQuery.in_user_ids_query:type_name -> zitadel.user.v2beta.InUserIDQuery
	3,  // 10: zitadel.user.v2beta.SearchQuery.or_query:type_name -> zitadel.user.v2beta.OrQuery
	4,  // 11: zitadel.user.v2beta.SearchQuery.and_query:type_name -> zitadel.user.v2beta.AndQuery
	5,  // 12: zitadel.user.v2beta.SearchQuery.not_query:type_name -> zitadel.user.v2beta.NotQuery
	16, // 13: zitadel.user.v2beta.SearchQuery.in_user_emails_query:type_name -> zitadel.user.v2beta.InUserEmailsQuery
	17, // 14: zitadel.user.v2beta.SearchQuery.organization_id_query:type_name -> zitadel.user.v2beta.OrganizationIdQuery
	2,  // 15: zitadel.user.v2beta.OrQuery.queries:type_name -> zitadel.user.v2beta.SearchQuery
	2,  // 16: zitadel.user.v2beta.AndQuery.queries:type_name -> zitadel.user.v2beta.SearchQuery
	2,  // 17: zitadel.user.v2beta.NotQuery.query:type_name -> zitadel.user.v2beta.SearchQuery
	18, // 18: zitadel.user.v2beta.UserNameQuery.method:type_name -> zitadel.object.v2beta.TextQueryMethod
	18, // 19: zitadel.user.v2beta.FirstNameQuery.method:type_name -> zitadel.object.v2beta.TextQueryMethod
	18, // 20: zitadel.user.v2beta.LastNameQuery.method:type_name -> zitadel.object.v2beta.TextQueryMethod
	18, // 21: zitadel.user.v2beta.NickNameQuery.method:type_name -> zitadel.object.v2beta.TextQueryMethod
	18, // 22: zitadel.user.v2beta.DisplayNameQuery.method:type_name -> zitadel.object.v2beta.TextQueryMethod
	18, // 23: zitadel.user.v2beta.EmailQuery.method:type_name -> zitadel.object.v2beta.TextQueryMethod
	18, // 24: zitadel.user.v2beta.LoginNameQuery.method:type_name -> zitadel.object.v2beta.TextQueryMethod
	19, // 25: zitadel.user.v2beta.StateQuery.state:type_name -> zitadel.user.v2beta.UserState
	0,  // 26: zitadel.user.v2beta.TypeQuery.type:type_name -> zitadel.user.v2beta.Type
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_zitadel_user_v2beta_query_proto_init() }
func file_zitadel_user_v2beta_query_proto_init() {
	if File_zitadel_user_v2beta_query_proto != nil {
		return
	}
	file_zitadel_user_v2beta_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zitadel_user_v2beta_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InUserIDQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NickNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_query_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_query_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_query_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InUserEmailsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2beta_query_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationIdQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_user_v2beta_query_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SearchQuery_UserNameQuery)(nil),
		(*SearchQuery_FirstNameQuery)(nil),
		(*SearchQuery_LastNameQuery)(nil),
		(*SearchQuery_NickNameQuery)(nil),
		(*SearchQuery_DisplayNameQuery)(nil),
		(*SearchQuery_EmailQuery)(nil),
		(*SearchQuery_StateQuery)(nil),
		(*SearchQuery_TypeQuery)(nil),
		(*SearchQuery_LoginNameQuery)(nil),
		(*SearchQuery_InUserIdsQuery)(nil),
		(*SearchQuery_OrQuery)(nil),
		(*SearchQuery_AndQuery)(nil),
		(*SearchQuery_NotQuery)(nil),
		(*SearchQuery_InUserEmailsQuery)(nil),
		(*SearchQuery_OrganizationIdQuery)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_user_v2beta_query_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_user_v2beta_query_proto_goTypes,
		DependencyIndexes: file_zitadel_user_v2beta_query_proto_depIdxs,
		EnumInfos:         file_zitadel_user_v2beta_query_proto_enumTypes,
		MessageInfos:      file_zitadel_user_v2beta_query_proto_msgTypes,
	}.Build()
	File_zitadel_user_v2beta_query_proto = out.File
	file_zitadel_user_v2beta_query_proto_rawDesc = nil
	file_zitadel_user_v2beta_query_proto_goTypes = nil
	file_zitadel_user_v2beta_query_proto_depIdxs = nil
}
