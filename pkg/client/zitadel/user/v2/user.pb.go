// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/user/v2/user.proto

package user

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	v2 "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/object/v2"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Gender int32

const (
	Gender_GENDER_UNSPECIFIED Gender = 0
	Gender_GENDER_FEMALE      Gender = 1
	Gender_GENDER_MALE        Gender = 2
	Gender_GENDER_DIVERSE     Gender = 3
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "GENDER_UNSPECIFIED",
		1: "GENDER_FEMALE",
		2: "GENDER_MALE",
		3: "GENDER_DIVERSE",
	}
	Gender_value = map[string]int32{
		"GENDER_UNSPECIFIED": 0,
		"GENDER_FEMALE":      1,
		"GENDER_MALE":        2,
		"GENDER_DIVERSE":     3,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_user_v2_user_proto_enumTypes[0].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_zitadel_user_v2_user_proto_enumTypes[0]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_user_v2_user_proto_rawDescGZIP(), []int{0}
}

type AccessTokenType int32

const (
	AccessTokenType_ACCESS_TOKEN_TYPE_BEARER AccessTokenType = 0
	AccessTokenType_ACCESS_TOKEN_TYPE_JWT    AccessTokenType = 1
)

// Enum value maps for AccessTokenType.
var (
	AccessTokenType_name = map[int32]string{
		0: "ACCESS_TOKEN_TYPE_BEARER",
		1: "ACCESS_TOKEN_TYPE_JWT",
	}
	AccessTokenType_value = map[string]int32{
		"ACCESS_TOKEN_TYPE_BEARER": 0,
		"ACCESS_TOKEN_TYPE_JWT":    1,
	}
)

func (x AccessTokenType) Enum() *AccessTokenType {
	p := new(AccessTokenType)
	*p = x
	return p
}

func (x AccessTokenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessTokenType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_user_v2_user_proto_enumTypes[1].Descriptor()
}

func (AccessTokenType) Type() protoreflect.EnumType {
	return &file_zitadel_user_v2_user_proto_enumTypes[1]
}

func (x AccessTokenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessTokenType.Descriptor instead.
func (AccessTokenType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_user_v2_user_proto_rawDescGZIP(), []int{1}
}

type UserState int32

const (
	UserState_USER_STATE_UNSPECIFIED UserState = 0
	UserState_USER_STATE_ACTIVE      UserState = 1
	UserState_USER_STATE_INACTIVE    UserState = 2
	UserState_USER_STATE_DELETED     UserState = 3
	UserState_USER_STATE_LOCKED      UserState = 4
	UserState_USER_STATE_INITIAL     UserState = 5
)

// Enum value maps for UserState.
var (
	UserState_name = map[int32]string{
		0: "USER_STATE_UNSPECIFIED",
		1: "USER_STATE_ACTIVE",
		2: "USER_STATE_INACTIVE",
		3: "USER_STATE_DELETED",
		4: "USER_STATE_LOCKED",
		5: "USER_STATE_INITIAL",
	}
	UserState_value = map[string]int32{
		"USER_STATE_UNSPECIFIED": 0,
		"USER_STATE_ACTIVE":      1,
		"USER_STATE_INACTIVE":    2,
		"USER_STATE_DELETED":     3,
		"USER_STATE_LOCKED":      4,
		"USER_STATE_INITIAL":     5,
	}
)

func (x UserState) Enum() *UserState {
	p := new(UserState)
	*p = x
	return p
}

func (x UserState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserState) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_user_v2_user_proto_enumTypes[2].Descriptor()
}

func (UserState) Type() protoreflect.EnumType {
	return &file_zitadel_user_v2_user_proto_enumTypes[2]
}

func (x UserState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserState.Descriptor instead.
func (UserState) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_user_v2_user_proto_rawDescGZIP(), []int{2}
}

type AuthFactorState int32

const (
	AuthFactorState_AUTH_FACTOR_STATE_UNSPECIFIED AuthFactorState = 0
	AuthFactorState_AUTH_FACTOR_STATE_NOT_READY   AuthFactorState = 1
	AuthFactorState_AUTH_FACTOR_STATE_READY       AuthFactorState = 2
	AuthFactorState_AUTH_FACTOR_STATE_REMOVED     AuthFactorState = 3
)

// Enum value maps for AuthFactorState.
var (
	AuthFactorState_name = map[int32]string{
		0: "AUTH_FACTOR_STATE_UNSPECIFIED",
		1: "AUTH_FACTOR_STATE_NOT_READY",
		2: "AUTH_FACTOR_STATE_READY",
		3: "AUTH_FACTOR_STATE_REMOVED",
	}
	AuthFactorState_value = map[string]int32{
		"AUTH_FACTOR_STATE_UNSPECIFIED": 0,
		"AUTH_FACTOR_STATE_NOT_READY":   1,
		"AUTH_FACTOR_STATE_READY":       2,
		"AUTH_FACTOR_STATE_REMOVED":     3,
	}
)

func (x AuthFactorState) Enum() *AuthFactorState {
	p := new(AuthFactorState)
	*p = x
	return p
}

func (x AuthFactorState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthFactorState) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_user_v2_user_proto_enumTypes[3].Descriptor()
}

func (AuthFactorState) Type() protoreflect.EnumType {
	return &file_zitadel_user_v2_user_proto_enumTypes[3]
}

func (x AuthFactorState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthFactorState.Descriptor instead.
func (AuthFactorState) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_user_v2_user_proto_rawDescGZIP(), []int{3}
}

type SetHumanProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GivenName         string  `protobuf:"bytes,1,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	FamilyName        string  `protobuf:"bytes,2,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	NickName          *string `protobuf:"bytes,3,opt,name=nick_name,json=nickName,proto3,oneof" json:"nick_name,omitempty"`
	DisplayName       *string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3,oneof" json:"display_name,omitempty"`
	PreferredLanguage *string `protobuf:"bytes,5,opt,name=preferred_language,json=preferredLanguage,proto3,oneof" json:"preferred_language,omitempty"`
	Gender            *Gender `protobuf:"varint,6,opt,name=gender,proto3,enum=zitadel.user.v2.Gender,oneof" json:"gender,omitempty"`
}

func (x *SetHumanProfile) Reset() {
	*x = SetHumanProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHumanProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHumanProfile) ProtoMessage() {}

func (x *SetHumanProfile) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHumanProfile.ProtoReflect.Descriptor instead.
func (*SetHumanProfile) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2_user_proto_rawDescGZIP(), []int{0}
}

func (x *SetHumanProfile) GetGivenName() string {
	if x != nil {
		return x.GivenName
	}
	return ""
}

func (x *SetHumanProfile) GetFamilyName() string {
	if x != nil {
		return x.FamilyName
	}
	return ""
}

func (x *SetHumanProfile) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *SetHumanProfile) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *SetHumanProfile) GetPreferredLanguage() string {
	if x != nil && x.PreferredLanguage != nil {
		return *x.PreferredLanguage
	}
	return ""
}

func (x *SetHumanProfile) GetGender() Gender {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return Gender_GENDER_UNSPECIFIED
}

type HumanProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GivenName         string  `protobuf:"bytes,1,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	FamilyName        string  `protobuf:"bytes,2,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	NickName          *string `protobuf:"bytes,3,opt,name=nick_name,json=nickName,proto3,oneof" json:"nick_name,omitempty"`
	DisplayName       *string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3,oneof" json:"display_name,omitempty"`
	PreferredLanguage *string `protobuf:"bytes,5,opt,name=preferred_language,json=preferredLanguage,proto3,oneof" json:"preferred_language,omitempty"`
	Gender            *Gender `protobuf:"varint,6,opt,name=gender,proto3,enum=zitadel.user.v2.Gender,oneof" json:"gender,omitempty"`
	AvatarUrl         string  `protobuf:"bytes,7,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
}

func (x *HumanProfile) Reset() {
	*x = HumanProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumanProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanProfile) ProtoMessage() {}

func (x *HumanProfile) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanProfile.ProtoReflect.Descriptor instead.
func (*HumanProfile) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2_user_proto_rawDescGZIP(), []int{1}
}

func (x *HumanProfile) GetGivenName() string {
	if x != nil {
		return x.GivenName
	}
	return ""
}

func (x *HumanProfile) GetFamilyName() string {
	if x != nil {
		return x.FamilyName
	}
	return ""
}

func (x *HumanProfile) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *HumanProfile) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *HumanProfile) GetPreferredLanguage() string {
	if x != nil && x.PreferredLanguage != nil {
		return *x.PreferredLanguage
	}
	return ""
}

func (x *HumanProfile) GetGender() Gender {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return Gender_GENDER_UNSPECIFIED
}

func (x *HumanProfile) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

type SetMetadataEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SetMetadataEntry) Reset() {
	*x = SetMetadataEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMetadataEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMetadataEntry) ProtoMessage() {}

func (x *SetMetadataEntry) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMetadataEntry.ProtoReflect.Descriptor instead.
func (*SetMetadataEntry) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2_user_proto_rawDescGZIP(), []int{2}
}

func (x *SetMetadataEntry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetMetadataEntry) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type HumanUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the user.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// State of the user, for example active, inactive, locked, deleted, initial.
	State UserState `protobuf:"varint,2,opt,name=state,proto3,enum=zitadel.user.v2.UserState" json:"state,omitempty"`
	// Username of the user, which can be globally unique or unique on organization level.
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// Possible usable login names for the user.
	LoginNames []string `protobuf:"bytes,4,rep,name=login_names,json=loginNames,proto3" json:"login_names,omitempty"`
	// Preferred login name of the user.
	PreferredLoginName string `protobuf:"bytes,5,opt,name=preferred_login_name,json=preferredLoginName,proto3" json:"preferred_login_name,omitempty"`
	// Profile information of the user.
	Profile *HumanProfile `protobuf:"bytes,6,opt,name=profile,proto3" json:"profile,omitempty"`
	// Email of the user, if defined.
	Email *HumanEmail `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	// Phone of the user, if defined.
	Phone *HumanPhone `protobuf:"bytes,8,opt,name=phone,proto3" json:"phone,omitempty"`
	// User is required to change the used password on the next login.
	PasswordChangeRequired bool `protobuf:"varint,9,opt,name=password_change_required,json=passwordChangeRequired,proto3" json:"password_change_required,omitempty"`
	// The time the user last changed their password.
	PasswordChanged *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=password_changed,json=passwordChanged,proto3" json:"password_changed,omitempty"`
}

func (x *HumanUser) Reset() {
	*x = HumanUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumanUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanUser) ProtoMessage() {}

func (x *HumanUser) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanUser.ProtoReflect.Descriptor instead.
func (*HumanUser) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2_user_proto_rawDescGZIP(), []int{3}
}

func (x *HumanUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *HumanUser) GetState() UserState {
	if x != nil {
		return x.State
	}
	return UserState_USER_STATE_UNSPECIFIED
}

func (x *HumanUser) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *HumanUser) GetLoginNames() []string {
	if x != nil {
		return x.LoginNames
	}
	return nil
}

func (x *HumanUser) GetPreferredLoginName() string {
	if x != nil {
		return x.PreferredLoginName
	}
	return ""
}

func (x *HumanUser) GetProfile() *HumanProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *HumanUser) GetEmail() *HumanEmail {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *HumanUser) GetPhone() *HumanPhone {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *HumanUser) GetPasswordChangeRequired() bool {
	if x != nil {
		return x.PasswordChangeRequired
	}
	return false
}

func (x *HumanUser) GetPasswordChanged() *timestamppb.Timestamp {
	if x != nil {
		return x.PasswordChanged
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             string      `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Details            *v2.Details `protobuf:"bytes,8,opt,name=details,proto3" json:"details,omitempty"`
	State              UserState   `protobuf:"varint,2,opt,name=state,proto3,enum=zitadel.user.v2.UserState" json:"state,omitempty"`
	Username           string      `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	LoginNames         []string    `protobuf:"bytes,4,rep,name=login_names,json=loginNames,proto3" json:"login_names,omitempty"`
	PreferredLoginName string      `protobuf:"bytes,5,opt,name=preferred_login_name,json=preferredLoginName,proto3" json:"preferred_login_name,omitempty"`
	// Types that are assignable to Type:
	//
	//	*User_Human
	//	*User_Machine
	Type isUser_Type `protobuf_oneof:"type"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2_user_proto_rawDescGZIP(), []int{4}
}

func (x *User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *User) GetDetails() *v2.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *User) GetState() UserState {
	if x != nil {
		return x.State
	}
	return UserState_USER_STATE_UNSPECIFIED
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetLoginNames() []string {
	if x != nil {
		return x.LoginNames
	}
	return nil
}

func (x *User) GetPreferredLoginName() string {
	if x != nil {
		return x.PreferredLoginName
	}
	return ""
}

func (m *User) GetType() isUser_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *User) GetHuman() *HumanUser {
	if x, ok := x.GetType().(*User_Human); ok {
		return x.Human
	}
	return nil
}

func (x *User) GetMachine() *MachineUser {
	if x, ok := x.GetType().(*User_Machine); ok {
		return x.Machine
	}
	return nil
}

type isUser_Type interface {
	isUser_Type()
}

type User_Human struct {
	Human *HumanUser `protobuf:"bytes,6,opt,name=human,proto3,oneof"`
}

type User_Machine struct {
	Machine *MachineUser `protobuf:"bytes,7,opt,name=machine,proto3,oneof"`
}

func (*User_Human) isUser_Type() {}

func (*User_Machine) isUser_Type() {}

type MachineUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description     string          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	HasSecret       bool            `protobuf:"varint,3,opt,name=has_secret,json=hasSecret,proto3" json:"has_secret,omitempty"`
	AccessTokenType AccessTokenType `protobuf:"varint,4,opt,name=access_token_type,json=accessTokenType,proto3,enum=zitadel.user.v2.AccessTokenType" json:"access_token_type,omitempty"`
}

func (x *MachineUser) Reset() {
	*x = MachineUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineUser) ProtoMessage() {}

func (x *MachineUser) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineUser.ProtoReflect.Descriptor instead.
func (*MachineUser) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2_user_proto_rawDescGZIP(), []int{5}
}

func (x *MachineUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MachineUser) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MachineUser) GetHasSecret() bool {
	if x != nil {
		return x.HasSecret
	}
	return false
}

func (x *MachineUser) GetAccessTokenType() AccessTokenType {
	if x != nil {
		return x.AccessTokenType
	}
	return AccessTokenType_ACCESS_TOKEN_TYPE_BEARER
}

type Passkey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State AuthFactorState `protobuf:"varint,2,opt,name=state,proto3,enum=zitadel.user.v2.AuthFactorState" json:"state,omitempty"`
	Name  string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Passkey) Reset() {
	*x = Passkey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Passkey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Passkey) ProtoMessage() {}

func (x *Passkey) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Passkey.ProtoReflect.Descriptor instead.
func (*Passkey) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2_user_proto_rawDescGZIP(), []int{6}
}

func (x *Passkey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Passkey) GetState() AuthFactorState {
	if x != nil {
		return x.State
	}
	return AuthFactorState_AUTH_FACTOR_STATE_UNSPECIFIED
}

func (x *Passkey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SendInviteCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optionally set a url_template, which will be used in the invite mail sent by ZITADEL to guide the user to your invitation page.
	// If no template is set, the default ZITADEL url will be used.
	//
	// The following placeholders can be used: UserID, OrgID, Code
	UrlTemplate *string `protobuf:"bytes,1,opt,name=url_template,json=urlTemplate,proto3,oneof" json:"url_template,omitempty"`
	// Optionally set an application name, which will be used in the invite mail sent by ZITADEL.
	// If no application name is set, ZITADEL will be used as default.
	ApplicationName *string `protobuf:"bytes,2,opt,name=application_name,json=applicationName,proto3,oneof" json:"application_name,omitempty"`
}

func (x *SendInviteCode) Reset() {
	*x = SendInviteCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendInviteCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendInviteCode) ProtoMessage() {}

func (x *SendInviteCode) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendInviteCode.ProtoReflect.Descriptor instead.
func (*SendInviteCode) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2_user_proto_rawDescGZIP(), []int{7}
}

func (x *SendInviteCode) GetUrlTemplate() string {
	if x != nil && x.UrlTemplate != nil {
		return *x.UrlTemplate
	}
	return ""
}

func (x *SendInviteCode) GetApplicationName() string {
	if x != nil && x.ApplicationName != nil {
		return *x.ApplicationName
	}
	return ""
}

type ReturnInviteCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReturnInviteCode) Reset() {
	*x = ReturnInviteCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_v2_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnInviteCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnInviteCode) ProtoMessage() {}

func (x *ReturnInviteCode) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_v2_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnInviteCode.ProtoReflect.Descriptor instead.
func (*ReturnInviteCode) Descriptor() ([]byte, []int) {
	return file_zitadel_user_v2_user_proto_rawDescGZIP(), []int{8}
}

var File_zitadel_user_v2_user_proto protoreflect.FileDescriptor

var file_zitadel_user_v2_user_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76,
	0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xeb, 0x03, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x10, 0x4a,
	0x08, 0x22, 0x4d, 0x69, 0x6e, 0x6e, 0x69, 0x65, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x67, 0x69,
	0x76, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x0f, 0x4a, 0x07, 0x22, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x0a, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6e, 0x69, 0x63,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41,
	0x0b, 0x4a, 0x06, 0x22, 0x4d, 0x69, 0x6e, 0x69, 0x22, 0x78, 0xc8, 0x01, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0xc8, 0x01, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x13, 0x4a, 0x0e,
	0x22, 0x4d, 0x69, 0x6e, 0x6e, 0x69, 0x65, 0x20, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x22, 0x78, 0xc8,
	0x01, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x12, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x08, 0x4a, 0x04, 0x22, 0x65,
	0x6e, 0x22, 0x78, 0x0a, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x0a, 0x48, 0x02, 0x52, 0x11, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x14, 0x92, 0x41,
	0x11, 0x4a, 0x0f, 0x22, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x4d, 0x41, 0x4c,
	0x45, 0x22, 0x48, 0x03, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x22, 0xac, 0x04, 0x0a, 0x0c, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x32, 0x0a, 0x0a, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x4a, 0x08, 0x22, 0x4d, 0x69, 0x6e,
	0x6e, 0x69, 0x65, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x4a,
	0x07, 0x22, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x0a,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x6e, 0x69,
	0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92,
	0x41, 0x0b, 0x4a, 0x06, 0x22, 0x4d, 0x69, 0x6e, 0x69, 0x22, 0x78, 0xc8, 0x01, 0x48, 0x00, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x4a, 0x0e, 0x22, 0x4d, 0x69, 0x6e, 0x6e, 0x69, 0x65,
	0x20, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x22, 0x78, 0xc8, 0x01, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x12,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x4a, 0x04, 0x22,
	0x65, 0x6e, 0x22, 0x78, 0x0a, 0x48, 0x02, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x14, 0x92, 0x41, 0x11, 0x4a, 0x0f, 0x22, 0x47, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x22, 0x48, 0x03, 0x52, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x73, 0x0a, 0x0a, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x54, 0x92,
	0x41, 0x51, 0x32, 0x16, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x20, 0x55, 0x52, 0x4c, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x37, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x63, 0x68, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x2d, 0x33, 0x32, 0x34, 0x33, 0x32, 0x6a, 0x6b, 0x68, 0x34, 0x6b, 0x6a,
	0x33, 0x32, 0x22, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22,
	0xbb, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x92, 0x41, 0x10, 0x4a, 0x08, 0x22, 0x6d, 0x79, 0x2d, 0x6b, 0x65, 0x79, 0x22,
	0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xc8, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x73, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x5d, 0x92, 0x41, 0x4c, 0x32, 0x23, 0x54, 0x68,
	0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62,
	0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x2e, 0x4a, 0x1e, 0x22, 0x56, 0x47, 0x68, 0x70, 0x63, 0x79, 0x42, 0x70, 0x63, 0x79, 0x42, 0x74,
	0x65, 0x53, 0x42, 0x30, 0x5a, 0x58, 0x4e, 0x30, 0x49, 0x48, 0x5a, 0x68, 0x62, 0x48, 0x56, 0x6c,
	0x22, 0x78, 0xa0, 0xc2, 0x1e, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x08, 0x7a, 0x06,
	0x10, 0x01, 0x18, 0xa0, 0xc2, 0x1e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x96, 0x05,
	0x0a, 0x09, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41,
	0x28, 0x4a, 0x26, 0x22, 0x64, 0x36, 0x35, 0x34, 0x65, 0x36, 0x62, 0x61, 0x2d, 0x37, 0x30, 0x61,
	0x33, 0x2d, 0x34, 0x38, 0x65, 0x66, 0x2d, 0x61, 0x39, 0x35, 0x64, 0x2d, 0x33, 0x37, 0x63, 0x38,
	0x64, 0x38, 0x61, 0x37, 0x39, 0x30, 0x31, 0x61, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x50, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x1e, 0x92, 0x41,
	0x1b, 0x32, 0x19, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x4a, 0x0e, 0x22, 0x6d, 0x69, 0x6e,
	0x6e, 0x69, 0x65, 0x2d, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x22, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x4a, 0x2f,
	0x5b, 0x22, 0x67, 0x69, 0x67, 0x69, 0x40, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x22, 0x2c, 0x20, 0x22, 0x67, 0x69, 0x67, 0x69, 0x40, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x22, 0x5d, 0x52,
	0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x14, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x4a, 0x12,
	0x22, 0x67, 0x69, 0x67, 0x69, 0x40, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x22, 0x52, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x31, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x45, 0x0a, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x22, 0xeb, 0x04, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x44, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2b, 0x92, 0x41, 0x28, 0x4a, 0x26, 0x22, 0x64, 0x36, 0x35, 0x34, 0x65, 0x36, 0x62, 0x61,
	0x2d, 0x37, 0x30, 0x61, 0x33, 0x2d, 0x34, 0x38, 0x65, 0x66, 0x2d, 0x61, 0x39, 0x35, 0x64, 0x2d,
	0x33, 0x37, 0x63, 0x38, 0x64, 0x38, 0x61, 0x37, 0x39, 0x30, 0x31, 0x61, 0x22, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x50, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0x92, 0x41, 0x10, 0x4a, 0x0e, 0x22, 0x6d, 0x69, 0x6e, 0x6e, 0x69, 0x65, 0x2d, 0x6d, 0x6f,
	0x75, 0x73, 0x65, 0x22, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55,
	0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x4a, 0x2f, 0x5b, 0x22, 0x67, 0x69, 0x67, 0x69,
	0x40, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x2c, 0x20, 0x22,
	0x67, 0x69, 0x67, 0x69, 0x40, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x22, 0x5d, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x4a, 0x12, 0x22, 0x67, 0x69, 0x67, 0x69, 0x40,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x52, 0x12, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x59, 0x0a, 0x05, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x25, 0x92, 0x41, 0x22,
	0x32, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x20, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x48, 0x00, 0x52, 0x05, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x5f, 0x0a, 0x07, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32,
	0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x20, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x0b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92,
	0x41, 0x18, 0x4a, 0x16, 0x22, 0x54, 0x68, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x49, 0x41, 0x4d, 0x22, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0x92, 0x41, 0x08,
	0x4a, 0x06, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22, 0x52, 0x09, 0x68, 0x61, 0x73, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x72, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1f, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x73, 0x73,
	0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39,
	0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x59, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x21,
	0x92, 0x41, 0x1e, 0x32, 0x1c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x6b, 0x65,
	0x79, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x4a, 0x0a, 0x22, 0x66, 0x69,
	0x64, 0x6f, 0x20, 0x6b, 0x65, 0x79, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xa1, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x0c, 0x75, 0x72, 0x6c, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x69, 0x92,
	0x41, 0x5c, 0x4a, 0x54, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x3f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x3d, 0x7b, 0x7b, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x7d, 0x26, 0x63, 0x6f, 0x64, 0x65, 0x3d, 0x7b, 0x7b, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x7d, 0x7d, 0x26, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x3d, 0x7b, 0x7b, 0x2e,
	0x4f, 0x72, 0x67, 0x49, 0x44, 0x7d, 0x7d, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x72, 0x6c, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x92, 0x41, 0x18, 0x4a, 0x10, 0x22, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01,
	0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x48, 0x01, 0x52, 0x0f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2a, 0x58, 0x0a, 0x06, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x56, 0x45,
	0x52, 0x53, 0x45, 0x10, 0x03, 0x2a, 0x4a, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45,
	0x41, 0x52, 0x45, 0x52, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x57, 0x54, 0x10,
	0x01, 0x2a, 0x9e, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x10, 0x05, 0x2a, 0x91, 0x01, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x56, 0x45, 0x44, 0x10, 0x03, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x76, 0x32, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_zitadel_user_v2_user_proto_rawDescOnce sync.Once
	file_zitadel_user_v2_user_proto_rawDescData = file_zitadel_user_v2_user_proto_rawDesc
)

func file_zitadel_user_v2_user_proto_rawDescGZIP() []byte {
	file_zitadel_user_v2_user_proto_rawDescOnce.Do(func() {
		file_zitadel_user_v2_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_user_v2_user_proto_rawDescData)
	})
	return file_zitadel_user_v2_user_proto_rawDescData
}

var file_zitadel_user_v2_user_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_zitadel_user_v2_user_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_zitadel_user_v2_user_proto_goTypes = []interface{}{
	(Gender)(0),                   // 0: zitadel.user.v2.Gender
	(AccessTokenType)(0),          // 1: zitadel.user.v2.AccessTokenType
	(UserState)(0),                // 2: zitadel.user.v2.UserState
	(AuthFactorState)(0),          // 3: zitadel.user.v2.AuthFactorState
	(*SetHumanProfile)(nil),       // 4: zitadel.user.v2.SetHumanProfile
	(*HumanProfile)(nil),          // 5: zitadel.user.v2.HumanProfile
	(*SetMetadataEntry)(nil),      // 6: zitadel.user.v2.SetMetadataEntry
	(*HumanUser)(nil),             // 7: zitadel.user.v2.HumanUser
	(*User)(nil),                  // 8: zitadel.user.v2.User
	(*MachineUser)(nil),           // 9: zitadel.user.v2.MachineUser
	(*Passkey)(nil),               // 10: zitadel.user.v2.Passkey
	(*SendInviteCode)(nil),        // 11: zitadel.user.v2.SendInviteCode
	(*ReturnInviteCode)(nil),      // 12: zitadel.user.v2.ReturnInviteCode
	(*HumanEmail)(nil),            // 13: zitadel.user.v2.HumanEmail
	(*HumanPhone)(nil),            // 14: zitadel.user.v2.HumanPhone
	(*timestamppb.Timestamp)(nil), // 15: google.protobuf.Timestamp
	(*v2.Details)(nil),            // 16: zitadel.object.v2.Details
}
var file_zitadel_user_v2_user_proto_depIdxs = []int32{
	0,  // 0: zitadel.user.v2.SetHumanProfile.gender:type_name -> zitadel.user.v2.Gender
	0,  // 1: zitadel.user.v2.HumanProfile.gender:type_name -> zitadel.user.v2.Gender
	2,  // 2: zitadel.user.v2.HumanUser.state:type_name -> zitadel.user.v2.UserState
	5,  // 3: zitadel.user.v2.HumanUser.profile:type_name -> zitadel.user.v2.HumanProfile
	13, // 4: zitadel.user.v2.HumanUser.email:type_name -> zitadel.user.v2.HumanEmail
	14, // 5: zitadel.user.v2.HumanUser.phone:type_name -> zitadel.user.v2.HumanPhone
	15, // 6: zitadel.user.v2.HumanUser.password_changed:type_name -> google.protobuf.Timestamp
	16, // 7: zitadel.user.v2.User.details:type_name -> zitadel.object.v2.Details
	2,  // 8: zitadel.user.v2.User.state:type_name -> zitadel.user.v2.UserState
	7,  // 9: zitadel.user.v2.User.human:type_name -> zitadel.user.v2.HumanUser
	9,  // 10: zitadel.user.v2.User.machine:type_name -> zitadel.user.v2.MachineUser
	1,  // 11: zitadel.user.v2.MachineUser.access_token_type:type_name -> zitadel.user.v2.AccessTokenType
	3,  // 12: zitadel.user.v2.Passkey.state:type_name -> zitadel.user.v2.AuthFactorState
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_zitadel_user_v2_user_proto_init() }
func file_zitadel_user_v2_user_proto_init() {
	if File_zitadel_user_v2_user_proto != nil {
		return
	}
	file_zitadel_user_v2_email_proto_init()
	file_zitadel_user_v2_phone_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zitadel_user_v2_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHumanProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumanProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMetadataEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumanUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Passkey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendInviteCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_v2_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnInviteCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_user_v2_user_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_zitadel_user_v2_user_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_zitadel_user_v2_user_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*User_Human)(nil),
		(*User_Machine)(nil),
	}
	file_zitadel_user_v2_user_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_user_v2_user_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_user_v2_user_proto_goTypes,
		DependencyIndexes: file_zitadel_user_v2_user_proto_depIdxs,
		EnumInfos:         file_zitadel_user_v2_user_proto_enumTypes,
		MessageInfos:      file_zitadel_user_v2_user_proto_msgTypes,
	}.Build()
	File_zitadel_user_v2_user_proto = out.File
	file_zitadel_user_v2_user_proto_rawDesc = nil
	file_zitadel_user_v2_user_proto_goTypes = nil
	file_zitadel_user_v2_user_proto_depIdxs = nil
}
