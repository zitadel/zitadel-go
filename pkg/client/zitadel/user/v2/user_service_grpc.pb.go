// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: zitadel/user/v2/user_service.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_CreateUser_FullMethodName                     = "/zitadel.user.v2.UserService/CreateUser"
	UserService_AddHumanUser_FullMethodName                   = "/zitadel.user.v2.UserService/AddHumanUser"
	UserService_GetUserByID_FullMethodName                    = "/zitadel.user.v2.UserService/GetUserByID"
	UserService_ListUsers_FullMethodName                      = "/zitadel.user.v2.UserService/ListUsers"
	UserService_SetEmail_FullMethodName                       = "/zitadel.user.v2.UserService/SetEmail"
	UserService_ResendEmailCode_FullMethodName                = "/zitadel.user.v2.UserService/ResendEmailCode"
	UserService_SendEmailCode_FullMethodName                  = "/zitadel.user.v2.UserService/SendEmailCode"
	UserService_VerifyEmail_FullMethodName                    = "/zitadel.user.v2.UserService/VerifyEmail"
	UserService_SetPhone_FullMethodName                       = "/zitadel.user.v2.UserService/SetPhone"
	UserService_RemovePhone_FullMethodName                    = "/zitadel.user.v2.UserService/RemovePhone"
	UserService_ResendPhoneCode_FullMethodName                = "/zitadel.user.v2.UserService/ResendPhoneCode"
	UserService_VerifyPhone_FullMethodName                    = "/zitadel.user.v2.UserService/VerifyPhone"
	UserService_UpdateUser_FullMethodName                     = "/zitadel.user.v2.UserService/UpdateUser"
	UserService_UpdateHumanUser_FullMethodName                = "/zitadel.user.v2.UserService/UpdateHumanUser"
	UserService_DeactivateUser_FullMethodName                 = "/zitadel.user.v2.UserService/DeactivateUser"
	UserService_ReactivateUser_FullMethodName                 = "/zitadel.user.v2.UserService/ReactivateUser"
	UserService_LockUser_FullMethodName                       = "/zitadel.user.v2.UserService/LockUser"
	UserService_UnlockUser_FullMethodName                     = "/zitadel.user.v2.UserService/UnlockUser"
	UserService_DeleteUser_FullMethodName                     = "/zitadel.user.v2.UserService/DeleteUser"
	UserService_RegisterPasskey_FullMethodName                = "/zitadel.user.v2.UserService/RegisterPasskey"
	UserService_VerifyPasskeyRegistration_FullMethodName      = "/zitadel.user.v2.UserService/VerifyPasskeyRegistration"
	UserService_CreatePasskeyRegistrationLink_FullMethodName  = "/zitadel.user.v2.UserService/CreatePasskeyRegistrationLink"
	UserService_ListPasskeys_FullMethodName                   = "/zitadel.user.v2.UserService/ListPasskeys"
	UserService_RemovePasskey_FullMethodName                  = "/zitadel.user.v2.UserService/RemovePasskey"
	UserService_RegisterU2F_FullMethodName                    = "/zitadel.user.v2.UserService/RegisterU2F"
	UserService_VerifyU2FRegistration_FullMethodName          = "/zitadel.user.v2.UserService/VerifyU2FRegistration"
	UserService_RemoveU2F_FullMethodName                      = "/zitadel.user.v2.UserService/RemoveU2F"
	UserService_RegisterTOTP_FullMethodName                   = "/zitadel.user.v2.UserService/RegisterTOTP"
	UserService_VerifyTOTPRegistration_FullMethodName         = "/zitadel.user.v2.UserService/VerifyTOTPRegistration"
	UserService_RemoveTOTP_FullMethodName                     = "/zitadel.user.v2.UserService/RemoveTOTP"
	UserService_AddOTPSMS_FullMethodName                      = "/zitadel.user.v2.UserService/AddOTPSMS"
	UserService_RemoveOTPSMS_FullMethodName                   = "/zitadel.user.v2.UserService/RemoveOTPSMS"
	UserService_AddOTPEmail_FullMethodName                    = "/zitadel.user.v2.UserService/AddOTPEmail"
	UserService_RemoveOTPEmail_FullMethodName                 = "/zitadel.user.v2.UserService/RemoveOTPEmail"
	UserService_StartIdentityProviderIntent_FullMethodName    = "/zitadel.user.v2.UserService/StartIdentityProviderIntent"
	UserService_RetrieveIdentityProviderIntent_FullMethodName = "/zitadel.user.v2.UserService/RetrieveIdentityProviderIntent"
	UserService_AddIDPLink_FullMethodName                     = "/zitadel.user.v2.UserService/AddIDPLink"
	UserService_ListIDPLinks_FullMethodName                   = "/zitadel.user.v2.UserService/ListIDPLinks"
	UserService_RemoveIDPLink_FullMethodName                  = "/zitadel.user.v2.UserService/RemoveIDPLink"
	UserService_PasswordReset_FullMethodName                  = "/zitadel.user.v2.UserService/PasswordReset"
	UserService_SetPassword_FullMethodName                    = "/zitadel.user.v2.UserService/SetPassword"
	UserService_AddSecret_FullMethodName                      = "/zitadel.user.v2.UserService/AddSecret"
	UserService_RemoveSecret_FullMethodName                   = "/zitadel.user.v2.UserService/RemoveSecret"
	UserService_AddKey_FullMethodName                         = "/zitadel.user.v2.UserService/AddKey"
	UserService_RemoveKey_FullMethodName                      = "/zitadel.user.v2.UserService/RemoveKey"
	UserService_ListKeys_FullMethodName                       = "/zitadel.user.v2.UserService/ListKeys"
	UserService_AddPersonalAccessToken_FullMethodName         = "/zitadel.user.v2.UserService/AddPersonalAccessToken"
	UserService_RemovePersonalAccessToken_FullMethodName      = "/zitadel.user.v2.UserService/RemovePersonalAccessToken"
	UserService_ListPersonalAccessTokens_FullMethodName       = "/zitadel.user.v2.UserService/ListPersonalAccessTokens"
	UserService_ListAuthenticationMethodTypes_FullMethodName  = "/zitadel.user.v2.UserService/ListAuthenticationMethodTypes"
	UserService_ListAuthenticationFactors_FullMethodName      = "/zitadel.user.v2.UserService/ListAuthenticationFactors"
	UserService_CreateInviteCode_FullMethodName               = "/zitadel.user.v2.UserService/CreateInviteCode"
	UserService_ResendInviteCode_FullMethodName               = "/zitadel.user.v2.UserService/ResendInviteCode"
	UserService_VerifyInviteCode_FullMethodName               = "/zitadel.user.v2.UserService/VerifyInviteCode"
	UserService_HumanMFAInitSkipped_FullMethodName            = "/zitadel.user.v2.UserService/HumanMFAInitSkipped"
	UserService_SetUserMetadata_FullMethodName                = "/zitadel.user.v2.UserService/SetUserMetadata"
	UserService_ListUserMetadata_FullMethodName               = "/zitadel.user.v2.UserService/ListUserMetadata"
	UserService_DeleteUserMetadata_FullMethodName             = "/zitadel.user.v2.UserService/DeleteUserMetadata"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// Create a User
	//
	// Create a new human or machine user in the specified organization.
	//
	// Required permission:
	//   - user.write
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// Create a new human user
	//
	// Deprecated: Use [CreateUser](apis/resources/user_service_v2/user-service-create-user.api.mdx) to create a new user of type human instead.
	//
	// Create/import a new user with the type human. The newly created user will get a verification email if either the email address is not marked as verified and you did not request the verification to be returned.
	AddHumanUser(ctx context.Context, in *AddHumanUserRequest, opts ...grpc.CallOption) (*AddHumanUserResponse, error)
	// User by ID
	//
	// Returns the full user object (human or machine) including the profile, email, etc..
	GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error)
	// Search Users
	//
	// Search for users. By default, we will return all users of your instance that you have permission to read. Make sure to include a limit and sorting for pagination.
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// Change the user email
	//
	// Deprecated: [Update the users email field](apis/resources/user_service_v2/user-service-update-user.api.mdx).
	//
	// Change the email address of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by email..
	SetEmail(ctx context.Context, in *SetEmailRequest, opts ...grpc.CallOption) (*SetEmailResponse, error)
	// Resend code to verify user email
	ResendEmailCode(ctx context.Context, in *ResendEmailCodeRequest, opts ...grpc.CallOption) (*ResendEmailCodeResponse, error)
	// Send code to verify user email
	SendEmailCode(ctx context.Context, in *SendEmailCodeRequest, opts ...grpc.CallOption) (*SendEmailCodeResponse, error)
	// Verify the email
	//
	// Verify the email with the generated code.
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	// Set the user phone
	//
	// Deprecated: [Update the users phone field](apis/resources/user_service_v2/user-service-update-user.api.mdx).
	//
	// Set the phone number of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by sms..
	SetPhone(ctx context.Context, in *SetPhoneRequest, opts ...grpc.CallOption) (*SetPhoneResponse, error)
	// Delete the user phone
	//
	// Deprecated: [Update the users phone field](apis/resources/user_service_v2/user-service-update-user.api.mdx) to remove the phone number.
	//
	// Delete the phone number of a user.
	RemovePhone(ctx context.Context, in *RemovePhoneRequest, opts ...grpc.CallOption) (*RemovePhoneResponse, error)
	// Resend code to verify user phone number
	//
	// Resend code to verify user phone number.
	ResendPhoneCode(ctx context.Context, in *ResendPhoneCodeRequest, opts ...grpc.CallOption) (*ResendPhoneCodeResponse, error)
	// Verify the phone number
	//
	// Verify the phone number with the generated code.
	VerifyPhone(ctx context.Context, in *VerifyPhoneRequest, opts ...grpc.CallOption) (*VerifyPhoneResponse, error)
	// Update a User
	//
	// Partially update an existing user.
	// If you change the users email or phone, you can specify how the ownership should be verified.
	// If you change the users password, you can specify if the password should be changed again on the users next login.
	//
	// Required permission:
	//   - user.write
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// Update Human User
	//
	// Deprecated: Use [UpdateUser](apis/resources/user_service_v2/user-service-update-user.api.mdx) to update a user of type human instead.
	//
	// Update all information from a user.
	UpdateHumanUser(ctx context.Context, in *UpdateHumanUserRequest, opts ...grpc.CallOption) (*UpdateHumanUserResponse, error)
	// Deactivate user
	//
	// The state of the user will be changed to 'deactivated'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'deactivated'. Use deactivate user when the user should not be able to use the account anymore, but you still need access to the user data..
	DeactivateUser(ctx context.Context, in *DeactivateUserRequest, opts ...grpc.CallOption) (*DeactivateUserResponse, error)
	// Reactivate user
	//
	// Reactivate a user with the state 'deactivated'. The user will be able to log in again afterward. The endpoint returns an error if the user is not in the state 'deactivated'..
	ReactivateUser(ctx context.Context, in *ReactivateUserRequest, opts ...grpc.CallOption) (*ReactivateUserResponse, error)
	// Lock user
	//
	// The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.)..
	LockUser(ctx context.Context, in *LockUserRequest, opts ...grpc.CallOption) (*LockUserResponse, error)
	// Unlock user
	//
	// The state of the user will be changed to 'active'. The user will be able to log in again. The endpoint returns an error if the user is not in the state 'locked'.
	UnlockUser(ctx context.Context, in *UnlockUserRequest, opts ...grpc.CallOption) (*UnlockUserResponse, error)
	// Delete user
	//
	// The state of the user will be changed to 'deleted'. The user will not be able to log in anymore. Endpoints requesting this user will return an error 'User not found..
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// Start the registration of passkey for a user
	//
	// Start the registration of a passkey for a user, as a response the public key credential creation options are returned, which are used to verify the passkey..
	RegisterPasskey(ctx context.Context, in *RegisterPasskeyRequest, opts ...grpc.CallOption) (*RegisterPasskeyResponse, error)
	// Verify a passkey for a user
	//
	// Verify the passkey registration with the public key credential..
	VerifyPasskeyRegistration(ctx context.Context, in *VerifyPasskeyRegistrationRequest, opts ...grpc.CallOption) (*VerifyPasskeyRegistrationResponse, error)
	// Create a passkey registration link for a user
	//
	// Create a passkey registration link which includes a code and either return it or send it to the user..
	CreatePasskeyRegistrationLink(ctx context.Context, in *CreatePasskeyRegistrationLinkRequest, opts ...grpc.CallOption) (*CreatePasskeyRegistrationLinkResponse, error)
	// List passkeys of an user
	//
	// List passkeys of an user
	ListPasskeys(ctx context.Context, in *ListPasskeysRequest, opts ...grpc.CallOption) (*ListPasskeysResponse, error)
	// Remove passkey from a user
	//
	// Remove passkey from a user.
	RemovePasskey(ctx context.Context, in *RemovePasskeyRequest, opts ...grpc.CallOption) (*RemovePasskeyResponse, error)
	// Start the registration of a u2f token for a user
	//
	// Start the registration of a u2f token for a user, as a response the public key credential creation options are returned, which are used to verify the u2f token..
	RegisterU2F(ctx context.Context, in *RegisterU2FRequest, opts ...grpc.CallOption) (*RegisterU2FResponse, error)
	// Verify a u2f token for a user
	//
	// Verify the u2f token registration with the public key credential..
	VerifyU2FRegistration(ctx context.Context, in *VerifyU2FRegistrationRequest, opts ...grpc.CallOption) (*VerifyU2FRegistrationResponse, error)
	// Remove u2f token from a user
	//
	// Remove u2f token from a user.
	RemoveU2F(ctx context.Context, in *RemoveU2FRequest, opts ...grpc.CallOption) (*RemoveU2FResponse, error)
	// Start the registration of a TOTP generator for a user
	//
	// Start the registration of a TOTP generator for a user, as a response a secret returned, which is used to initialize a TOTP app or device..
	RegisterTOTP(ctx context.Context, in *RegisterTOTPRequest, opts ...grpc.CallOption) (*RegisterTOTPResponse, error)
	// Verify a TOTP generator for a user
	//
	// Verify the TOTP registration with a generated code..
	VerifyTOTPRegistration(ctx context.Context, in *VerifyTOTPRegistrationRequest, opts ...grpc.CallOption) (*VerifyTOTPRegistrationResponse, error)
	// Remove TOTP generator from a user
	//
	// Remove the configured TOTP generator of a user. As only one TOTP generator per user is allowed, the user will not have TOTP as a second factor afterward.
	RemoveTOTP(ctx context.Context, in *RemoveTOTPRequest, opts ...grpc.CallOption) (*RemoveTOTPResponse, error)
	// Add OTP SMS for a user
	//
	// Add a new One-Time Password (OTP) SMS factor to the authenticated user. OTP SMS will enable the user to verify a OTP with the latest verified phone number. The phone number has to be verified to add the second factor..
	AddOTPSMS(ctx context.Context, in *AddOTPSMSRequest, opts ...grpc.CallOption) (*AddOTPSMSResponse, error)
	// Remove One-Time Password (OTP) SMS from a user
	//
	// Remove the configured One-Time Password (OTP) SMS factor of a user. As only one OTP SMS per user is allowed, the user will not have OTP SMS as a second factor afterward.
	RemoveOTPSMS(ctx context.Context, in *RemoveOTPSMSRequest, opts ...grpc.CallOption) (*RemoveOTPSMSResponse, error)
	// Add OTP Email for a user
	//
	// Add a new One-Time Password (OTP) Email factor to the authenticated user. OTP Email will enable the user to verify a OTP with the latest verified email. The email has to be verified to add the second factor..
	AddOTPEmail(ctx context.Context, in *AddOTPEmailRequest, opts ...grpc.CallOption) (*AddOTPEmailResponse, error)
	// Remove One-Time Password (OTP) Email from a user
	//
	// Remove the configured One-Time Password (OTP) Email factor of a user. As only one OTP Email per user is allowed, the user will not have OTP Email as a second factor afterward.
	RemoveOTPEmail(ctx context.Context, in *RemoveOTPEmailRequest, opts ...grpc.CallOption) (*RemoveOTPEmailResponse, error)
	// Start flow with an identity provider
	//
	// Start a flow with an identity provider, for external login, registration or linking..
	StartIdentityProviderIntent(ctx context.Context, in *StartIdentityProviderIntentRequest, opts ...grpc.CallOption) (*StartIdentityProviderIntentResponse, error)
	// Retrieve the information returned by the identity provider
	//
	// Retrieve the information returned by the identity provider for registration or updating an existing user with new information..
	RetrieveIdentityProviderIntent(ctx context.Context, in *RetrieveIdentityProviderIntentRequest, opts ...grpc.CallOption) (*RetrieveIdentityProviderIntentResponse, error)
	// Add link to an identity provider to an user
	//
	// Add link to an identity provider to an user..
	AddIDPLink(ctx context.Context, in *AddIDPLinkRequest, opts ...grpc.CallOption) (*AddIDPLinkResponse, error)
	// List links to an identity provider of an user
	//
	// List links to an identity provider of an user.
	ListIDPLinks(ctx context.Context, in *ListIDPLinksRequest, opts ...grpc.CallOption) (*ListIDPLinksResponse, error)
	// Remove link of an identity provider to an user
	//
	// Remove link of an identity provider to an user.
	RemoveIDPLink(ctx context.Context, in *RemoveIDPLinkRequest, opts ...grpc.CallOption) (*RemoveIDPLinkResponse, error)
	// Request a code to reset a password
	//
	// Request a code to reset a password..
	PasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...grpc.CallOption) (*PasswordResetResponse, error)
	// Change password
	//
	// Deprecated: [Update the users password](apis/resources/user_service_v2/user-service-update-user.api.mdx) instead.
	//
	// Change the password of a user with either a verification code or the current password..
	SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*SetPasswordResponse, error)
	// Add a Users Secret
	//
	// Generates a client secret for the user.
	// The client id is the users username.
	// If the user already has a secret, it is overwritten.
	// Only users of type machine can have a secret.
	//
	// Required permission:
	//   - user.write
	AddSecret(ctx context.Context, in *AddSecretRequest, opts ...grpc.CallOption) (*AddSecretResponse, error)
	// Remove a Users Secret
	//
	// Remove the current client ID and client secret from a machine user.
	//
	// Required permission:
	//   - user.write
	RemoveSecret(ctx context.Context, in *RemoveSecretRequest, opts ...grpc.CallOption) (*RemoveSecretResponse, error)
	// Add a Key
	//
	// Add a keys that can be used to securely authenticate at the Zitadel APIs using JWT profile authentication using short-lived tokens.
	// Make sure you store the returned key safely, as you won't be able to read it from the Zitadel API anymore.
	// Only users of type machine can have keys.
	//
	// Required permission:
	//   - user.write
	AddKey(ctx context.Context, in *AddKeyRequest, opts ...grpc.CallOption) (*AddKeyResponse, error)
	// Remove a Key
	//
	// Remove a machine users key by the given key ID and an optionally given user ID.
	//
	// Required permission:
	//   - user.write
	RemoveKey(ctx context.Context, in *RemoveKeyRequest, opts ...grpc.CallOption) (*RemoveKeyResponse, error)
	// Search Keys
	//
	// List all matching keys. By default all keys of the instance on which the caller has permission to read the owning users are returned.
	// Make sure to include a limit and sorting for pagination.
	//
	// Required permission:
	//   - user.read
	ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error)
	// Add a Personal Access Token
	//
	// Personal access tokens (PAT) are the easiest way to authenticate to the Zitadel APIs.
	// Make sure you store the returned PAT safely, as you won't be able to read it from the Zitadel API anymore.
	// Only users of type machine can have personal access tokens.
	//
	// Required permission:
	//   - user.write
	AddPersonalAccessToken(ctx context.Context, in *AddPersonalAccessTokenRequest, opts ...grpc.CallOption) (*AddPersonalAccessTokenResponse, error)
	// Remove a Personal Access Token
	//
	// Removes a machine users personal access token by the given token ID and an optionally given user ID.
	//
	// Required permission:
	//   - user.write
	RemovePersonalAccessToken(ctx context.Context, in *RemovePersonalAccessTokenRequest, opts ...grpc.CallOption) (*RemovePersonalAccessTokenResponse, error)
	// Search Personal Access Tokens
	//
	// List all personal access tokens. By default all personal access tokens of the instance on which the caller has permission to read the owning users are returned.
	// Make sure to include a limit and sorting for pagination.
	//
	// Required permission:
	//   - user.read
	ListPersonalAccessTokens(ctx context.Context, in *ListPersonalAccessTokensRequest, opts ...grpc.CallOption) (*ListPersonalAccessTokensResponse, error)
	// List all possible authentication methods of a user
	//
	// List all possible authentication methods of a user like password, passwordless, (T)OTP and more..
	ListAuthenticationMethodTypes(ctx context.Context, in *ListAuthenticationMethodTypesRequest, opts ...grpc.CallOption) (*ListAuthenticationMethodTypesResponse, error)
	ListAuthenticationFactors(ctx context.Context, in *ListAuthenticationFactorsRequest, opts ...grpc.CallOption) (*ListAuthenticationFactorsResponse, error)
	// Create an invite code for a user
	//
	// Create an invite code for a user to initialize their first authentication method (password, passkeys, IdP) depending on the organization's available methods.
	// If an invite code has been created previously, it's url template and application name will be used as defaults for the new code.
	// The new code will overwrite the previous one and make it invalid.
	// Note: It is possible to reissue a new code only when the previous code has expired, or when the user provides a wrong code three or more times during verification.
	CreateInviteCode(ctx context.Context, in *CreateInviteCodeRequest, opts ...grpc.CallOption) (*CreateInviteCodeResponse, error)
	// Resend an invite code for a user
	//
	// Deprecated: Use [CreateInviteCode](apis/resources/user_service_v2/user-service-create-invite-code.api.mdx) instead.
	//
	// Resend an invite code for a user to initialize their first authentication method (password, passkeys, IdP) depending on the organization's available methods.
	// A resend is only possible if a code has been created previously and sent to the user. If there is no code or it was directly returned, an error will be returned.
	ResendInviteCode(ctx context.Context, in *ResendInviteCodeRequest, opts ...grpc.CallOption) (*ResendInviteCodeResponse, error)
	// Verify an invite code for a user
	//
	// Verify the invite code of a user previously issued. This will set their email to a verified state and
	// allow the user to set up their first authentication method (password, passkeys, IdP) depending on the organization's available methods.
	VerifyInviteCode(ctx context.Context, in *VerifyInviteCodeRequest, opts ...grpc.CallOption) (*VerifyInviteCodeResponse, error)
	// MFA Init Skipped
	//
	// Update the last time the user has skipped MFA initialization. The server timestamp is used.
	HumanMFAInitSkipped(ctx context.Context, in *HumanMFAInitSkippedRequest, opts ...grpc.CallOption) (*HumanMFAInitSkippedResponse, error)
	// Set User Metadata
	//
	// Sets a list of key value pairs. Existing metadata entries with matching keys are overwritten. Existing metadata entries without matching keys are untouched. To remove metadata entries, use [DeleteUserMetadata](apis/resources/user_service_v2/user-service-delete-user-metadata.api.mdx). For HTTP requests, make sure the bytes array value is base64 encoded.
	//
	// Required permission:
	//   - `user.write`
	SetUserMetadata(ctx context.Context, in *SetUserMetadataRequest, opts ...grpc.CallOption) (*SetUserMetadataResponse, error)
	// List User Metadata
	//
	// List metadata of an user filtered by query.
	//
	// Required permission:
	//   - `user.read`
	ListUserMetadata(ctx context.Context, in *ListUserMetadataRequest, opts ...grpc.CallOption) (*ListUserMetadataResponse, error)
	// Delete User Metadata
	//
	// Delete metadata objects from an user with a specific key.
	//
	// Required permission:
	//   - `user.write`
	DeleteUserMetadata(ctx context.Context, in *DeleteUserMetadataRequest, opts ...grpc.CallOption) (*DeleteUserMetadataResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddHumanUser(ctx context.Context, in *AddHumanUserRequest, opts ...grpc.CallOption) (*AddHumanUserResponse, error) {
	out := new(AddHumanUserResponse)
	err := c.cc.Invoke(ctx, UserService_AddHumanUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error) {
	out := new(GetUserByIDResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, UserService_ListUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetEmail(ctx context.Context, in *SetEmailRequest, opts ...grpc.CallOption) (*SetEmailResponse, error) {
	out := new(SetEmailResponse)
	err := c.cc.Invoke(ctx, UserService_SetEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResendEmailCode(ctx context.Context, in *ResendEmailCodeRequest, opts ...grpc.CallOption) (*ResendEmailCodeResponse, error) {
	out := new(ResendEmailCodeResponse)
	err := c.cc.Invoke(ctx, UserService_ResendEmailCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SendEmailCode(ctx context.Context, in *SendEmailCodeRequest, opts ...grpc.CallOption) (*SendEmailCodeResponse, error) {
	out := new(SendEmailCodeResponse)
	err := c.cc.Invoke(ctx, UserService_SendEmailCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, UserService_VerifyEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetPhone(ctx context.Context, in *SetPhoneRequest, opts ...grpc.CallOption) (*SetPhoneResponse, error) {
	out := new(SetPhoneResponse)
	err := c.cc.Invoke(ctx, UserService_SetPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemovePhone(ctx context.Context, in *RemovePhoneRequest, opts ...grpc.CallOption) (*RemovePhoneResponse, error) {
	out := new(RemovePhoneResponse)
	err := c.cc.Invoke(ctx, UserService_RemovePhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResendPhoneCode(ctx context.Context, in *ResendPhoneCodeRequest, opts ...grpc.CallOption) (*ResendPhoneCodeResponse, error) {
	out := new(ResendPhoneCodeResponse)
	err := c.cc.Invoke(ctx, UserService_ResendPhoneCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyPhone(ctx context.Context, in *VerifyPhoneRequest, opts ...grpc.CallOption) (*VerifyPhoneResponse, error) {
	out := new(VerifyPhoneResponse)
	err := c.cc.Invoke(ctx, UserService_VerifyPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateHumanUser(ctx context.Context, in *UpdateHumanUserRequest, opts ...grpc.CallOption) (*UpdateHumanUserResponse, error) {
	out := new(UpdateHumanUserResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateHumanUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeactivateUser(ctx context.Context, in *DeactivateUserRequest, opts ...grpc.CallOption) (*DeactivateUserResponse, error) {
	out := new(DeactivateUserResponse)
	err := c.cc.Invoke(ctx, UserService_DeactivateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ReactivateUser(ctx context.Context, in *ReactivateUserRequest, opts ...grpc.CallOption) (*ReactivateUserResponse, error) {
	out := new(ReactivateUserResponse)
	err := c.cc.Invoke(ctx, UserService_ReactivateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LockUser(ctx context.Context, in *LockUserRequest, opts ...grpc.CallOption) (*LockUserResponse, error) {
	out := new(LockUserResponse)
	err := c.cc.Invoke(ctx, UserService_LockUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UnlockUser(ctx context.Context, in *UnlockUserRequest, opts ...grpc.CallOption) (*UnlockUserResponse, error) {
	out := new(UnlockUserResponse)
	err := c.cc.Invoke(ctx, UserService_UnlockUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RegisterPasskey(ctx context.Context, in *RegisterPasskeyRequest, opts ...grpc.CallOption) (*RegisterPasskeyResponse, error) {
	out := new(RegisterPasskeyResponse)
	err := c.cc.Invoke(ctx, UserService_RegisterPasskey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyPasskeyRegistration(ctx context.Context, in *VerifyPasskeyRegistrationRequest, opts ...grpc.CallOption) (*VerifyPasskeyRegistrationResponse, error) {
	out := new(VerifyPasskeyRegistrationResponse)
	err := c.cc.Invoke(ctx, UserService_VerifyPasskeyRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreatePasskeyRegistrationLink(ctx context.Context, in *CreatePasskeyRegistrationLinkRequest, opts ...grpc.CallOption) (*CreatePasskeyRegistrationLinkResponse, error) {
	out := new(CreatePasskeyRegistrationLinkResponse)
	err := c.cc.Invoke(ctx, UserService_CreatePasskeyRegistrationLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListPasskeys(ctx context.Context, in *ListPasskeysRequest, opts ...grpc.CallOption) (*ListPasskeysResponse, error) {
	out := new(ListPasskeysResponse)
	err := c.cc.Invoke(ctx, UserService_ListPasskeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemovePasskey(ctx context.Context, in *RemovePasskeyRequest, opts ...grpc.CallOption) (*RemovePasskeyResponse, error) {
	out := new(RemovePasskeyResponse)
	err := c.cc.Invoke(ctx, UserService_RemovePasskey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RegisterU2F(ctx context.Context, in *RegisterU2FRequest, opts ...grpc.CallOption) (*RegisterU2FResponse, error) {
	out := new(RegisterU2FResponse)
	err := c.cc.Invoke(ctx, UserService_RegisterU2F_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyU2FRegistration(ctx context.Context, in *VerifyU2FRegistrationRequest, opts ...grpc.CallOption) (*VerifyU2FRegistrationResponse, error) {
	out := new(VerifyU2FRegistrationResponse)
	err := c.cc.Invoke(ctx, UserService_VerifyU2FRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveU2F(ctx context.Context, in *RemoveU2FRequest, opts ...grpc.CallOption) (*RemoveU2FResponse, error) {
	out := new(RemoveU2FResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveU2F_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RegisterTOTP(ctx context.Context, in *RegisterTOTPRequest, opts ...grpc.CallOption) (*RegisterTOTPResponse, error) {
	out := new(RegisterTOTPResponse)
	err := c.cc.Invoke(ctx, UserService_RegisterTOTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyTOTPRegistration(ctx context.Context, in *VerifyTOTPRegistrationRequest, opts ...grpc.CallOption) (*VerifyTOTPRegistrationResponse, error) {
	out := new(VerifyTOTPRegistrationResponse)
	err := c.cc.Invoke(ctx, UserService_VerifyTOTPRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveTOTP(ctx context.Context, in *RemoveTOTPRequest, opts ...grpc.CallOption) (*RemoveTOTPResponse, error) {
	out := new(RemoveTOTPResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveTOTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddOTPSMS(ctx context.Context, in *AddOTPSMSRequest, opts ...grpc.CallOption) (*AddOTPSMSResponse, error) {
	out := new(AddOTPSMSResponse)
	err := c.cc.Invoke(ctx, UserService_AddOTPSMS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveOTPSMS(ctx context.Context, in *RemoveOTPSMSRequest, opts ...grpc.CallOption) (*RemoveOTPSMSResponse, error) {
	out := new(RemoveOTPSMSResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveOTPSMS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddOTPEmail(ctx context.Context, in *AddOTPEmailRequest, opts ...grpc.CallOption) (*AddOTPEmailResponse, error) {
	out := new(AddOTPEmailResponse)
	err := c.cc.Invoke(ctx, UserService_AddOTPEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveOTPEmail(ctx context.Context, in *RemoveOTPEmailRequest, opts ...grpc.CallOption) (*RemoveOTPEmailResponse, error) {
	out := new(RemoveOTPEmailResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveOTPEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) StartIdentityProviderIntent(ctx context.Context, in *StartIdentityProviderIntentRequest, opts ...grpc.CallOption) (*StartIdentityProviderIntentResponse, error) {
	out := new(StartIdentityProviderIntentResponse)
	err := c.cc.Invoke(ctx, UserService_StartIdentityProviderIntent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RetrieveIdentityProviderIntent(ctx context.Context, in *RetrieveIdentityProviderIntentRequest, opts ...grpc.CallOption) (*RetrieveIdentityProviderIntentResponse, error) {
	out := new(RetrieveIdentityProviderIntentResponse)
	err := c.cc.Invoke(ctx, UserService_RetrieveIdentityProviderIntent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddIDPLink(ctx context.Context, in *AddIDPLinkRequest, opts ...grpc.CallOption) (*AddIDPLinkResponse, error) {
	out := new(AddIDPLinkResponse)
	err := c.cc.Invoke(ctx, UserService_AddIDPLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListIDPLinks(ctx context.Context, in *ListIDPLinksRequest, opts ...grpc.CallOption) (*ListIDPLinksResponse, error) {
	out := new(ListIDPLinksResponse)
	err := c.cc.Invoke(ctx, UserService_ListIDPLinks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveIDPLink(ctx context.Context, in *RemoveIDPLinkRequest, opts ...grpc.CallOption) (*RemoveIDPLinkResponse, error) {
	out := new(RemoveIDPLinkResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveIDPLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) PasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...grpc.CallOption) (*PasswordResetResponse, error) {
	out := new(PasswordResetResponse)
	err := c.cc.Invoke(ctx, UserService_PasswordReset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...grpc.CallOption) (*SetPasswordResponse, error) {
	out := new(SetPasswordResponse)
	err := c.cc.Invoke(ctx, UserService_SetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddSecret(ctx context.Context, in *AddSecretRequest, opts ...grpc.CallOption) (*AddSecretResponse, error) {
	out := new(AddSecretResponse)
	err := c.cc.Invoke(ctx, UserService_AddSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveSecret(ctx context.Context, in *RemoveSecretRequest, opts ...grpc.CallOption) (*RemoveSecretResponse, error) {
	out := new(RemoveSecretResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddKey(ctx context.Context, in *AddKeyRequest, opts ...grpc.CallOption) (*AddKeyResponse, error) {
	out := new(AddKeyResponse)
	err := c.cc.Invoke(ctx, UserService_AddKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveKey(ctx context.Context, in *RemoveKeyRequest, opts ...grpc.CallOption) (*RemoveKeyResponse, error) {
	out := new(RemoveKeyResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListKeys(ctx context.Context, in *ListKeysRequest, opts ...grpc.CallOption) (*ListKeysResponse, error) {
	out := new(ListKeysResponse)
	err := c.cc.Invoke(ctx, UserService_ListKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddPersonalAccessToken(ctx context.Context, in *AddPersonalAccessTokenRequest, opts ...grpc.CallOption) (*AddPersonalAccessTokenResponse, error) {
	out := new(AddPersonalAccessTokenResponse)
	err := c.cc.Invoke(ctx, UserService_AddPersonalAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemovePersonalAccessToken(ctx context.Context, in *RemovePersonalAccessTokenRequest, opts ...grpc.CallOption) (*RemovePersonalAccessTokenResponse, error) {
	out := new(RemovePersonalAccessTokenResponse)
	err := c.cc.Invoke(ctx, UserService_RemovePersonalAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListPersonalAccessTokens(ctx context.Context, in *ListPersonalAccessTokensRequest, opts ...grpc.CallOption) (*ListPersonalAccessTokensResponse, error) {
	out := new(ListPersonalAccessTokensResponse)
	err := c.cc.Invoke(ctx, UserService_ListPersonalAccessTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListAuthenticationMethodTypes(ctx context.Context, in *ListAuthenticationMethodTypesRequest, opts ...grpc.CallOption) (*ListAuthenticationMethodTypesResponse, error) {
	out := new(ListAuthenticationMethodTypesResponse)
	err := c.cc.Invoke(ctx, UserService_ListAuthenticationMethodTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListAuthenticationFactors(ctx context.Context, in *ListAuthenticationFactorsRequest, opts ...grpc.CallOption) (*ListAuthenticationFactorsResponse, error) {
	out := new(ListAuthenticationFactorsResponse)
	err := c.cc.Invoke(ctx, UserService_ListAuthenticationFactors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateInviteCode(ctx context.Context, in *CreateInviteCodeRequest, opts ...grpc.CallOption) (*CreateInviteCodeResponse, error) {
	out := new(CreateInviteCodeResponse)
	err := c.cc.Invoke(ctx, UserService_CreateInviteCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResendInviteCode(ctx context.Context, in *ResendInviteCodeRequest, opts ...grpc.CallOption) (*ResendInviteCodeResponse, error) {
	out := new(ResendInviteCodeResponse)
	err := c.cc.Invoke(ctx, UserService_ResendInviteCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyInviteCode(ctx context.Context, in *VerifyInviteCodeRequest, opts ...grpc.CallOption) (*VerifyInviteCodeResponse, error) {
	out := new(VerifyInviteCodeResponse)
	err := c.cc.Invoke(ctx, UserService_VerifyInviteCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) HumanMFAInitSkipped(ctx context.Context, in *HumanMFAInitSkippedRequest, opts ...grpc.CallOption) (*HumanMFAInitSkippedResponse, error) {
	out := new(HumanMFAInitSkippedResponse)
	err := c.cc.Invoke(ctx, UserService_HumanMFAInitSkipped_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetUserMetadata(ctx context.Context, in *SetUserMetadataRequest, opts ...grpc.CallOption) (*SetUserMetadataResponse, error) {
	out := new(SetUserMetadataResponse)
	err := c.cc.Invoke(ctx, UserService_SetUserMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUserMetadata(ctx context.Context, in *ListUserMetadataRequest, opts ...grpc.CallOption) (*ListUserMetadataResponse, error) {
	out := new(ListUserMetadataResponse)
	err := c.cc.Invoke(ctx, UserService_ListUserMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserMetadata(ctx context.Context, in *DeleteUserMetadataRequest, opts ...grpc.CallOption) (*DeleteUserMetadataResponse, error) {
	out := new(DeleteUserMetadataResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUserMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// Create a User
	//
	// Create a new human or machine user in the specified organization.
	//
	// Required permission:
	//   - user.write
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// Create a new human user
	//
	// Deprecated: Use [CreateUser](apis/resources/user_service_v2/user-service-create-user.api.mdx) to create a new user of type human instead.
	//
	// Create/import a new user with the type human. The newly created user will get a verification email if either the email address is not marked as verified and you did not request the verification to be returned.
	AddHumanUser(context.Context, *AddHumanUserRequest) (*AddHumanUserResponse, error)
	// User by ID
	//
	// Returns the full user object (human or machine) including the profile, email, etc..
	GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error)
	// Search Users
	//
	// Search for users. By default, we will return all users of your instance that you have permission to read. Make sure to include a limit and sorting for pagination.
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// Change the user email
	//
	// Deprecated: [Update the users email field](apis/resources/user_service_v2/user-service-update-user.api.mdx).
	//
	// Change the email address of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by email..
	SetEmail(context.Context, *SetEmailRequest) (*SetEmailResponse, error)
	// Resend code to verify user email
	ResendEmailCode(context.Context, *ResendEmailCodeRequest) (*ResendEmailCodeResponse, error)
	// Send code to verify user email
	SendEmailCode(context.Context, *SendEmailCodeRequest) (*SendEmailCodeResponse, error)
	// Verify the email
	//
	// Verify the email with the generated code.
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	// Set the user phone
	//
	// Deprecated: [Update the users phone field](apis/resources/user_service_v2/user-service-update-user.api.mdx).
	//
	// Set the phone number of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by sms..
	SetPhone(context.Context, *SetPhoneRequest) (*SetPhoneResponse, error)
	// Delete the user phone
	//
	// Deprecated: [Update the users phone field](apis/resources/user_service_v2/user-service-update-user.api.mdx) to remove the phone number.
	//
	// Delete the phone number of a user.
	RemovePhone(context.Context, *RemovePhoneRequest) (*RemovePhoneResponse, error)
	// Resend code to verify user phone number
	//
	// Resend code to verify user phone number.
	ResendPhoneCode(context.Context, *ResendPhoneCodeRequest) (*ResendPhoneCodeResponse, error)
	// Verify the phone number
	//
	// Verify the phone number with the generated code.
	VerifyPhone(context.Context, *VerifyPhoneRequest) (*VerifyPhoneResponse, error)
	// Update a User
	//
	// Partially update an existing user.
	// If you change the users email or phone, you can specify how the ownership should be verified.
	// If you change the users password, you can specify if the password should be changed again on the users next login.
	//
	// Required permission:
	//   - user.write
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// Update Human User
	//
	// Deprecated: Use [UpdateUser](apis/resources/user_service_v2/user-service-update-user.api.mdx) to update a user of type human instead.
	//
	// Update all information from a user.
	UpdateHumanUser(context.Context, *UpdateHumanUserRequest) (*UpdateHumanUserResponse, error)
	// Deactivate user
	//
	// The state of the user will be changed to 'deactivated'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'deactivated'. Use deactivate user when the user should not be able to use the account anymore, but you still need access to the user data..
	DeactivateUser(context.Context, *DeactivateUserRequest) (*DeactivateUserResponse, error)
	// Reactivate user
	//
	// Reactivate a user with the state 'deactivated'. The user will be able to log in again afterward. The endpoint returns an error if the user is not in the state 'deactivated'..
	ReactivateUser(context.Context, *ReactivateUserRequest) (*ReactivateUserResponse, error)
	// Lock user
	//
	// The state of the user will be changed to 'locked'. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state 'locked'. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.)..
	LockUser(context.Context, *LockUserRequest) (*LockUserResponse, error)
	// Unlock user
	//
	// The state of the user will be changed to 'active'. The user will be able to log in again. The endpoint returns an error if the user is not in the state 'locked'.
	UnlockUser(context.Context, *UnlockUserRequest) (*UnlockUserResponse, error)
	// Delete user
	//
	// The state of the user will be changed to 'deleted'. The user will not be able to log in anymore. Endpoints requesting this user will return an error 'User not found..
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// Start the registration of passkey for a user
	//
	// Start the registration of a passkey for a user, as a response the public key credential creation options are returned, which are used to verify the passkey..
	RegisterPasskey(context.Context, *RegisterPasskeyRequest) (*RegisterPasskeyResponse, error)
	// Verify a passkey for a user
	//
	// Verify the passkey registration with the public key credential..
	VerifyPasskeyRegistration(context.Context, *VerifyPasskeyRegistrationRequest) (*VerifyPasskeyRegistrationResponse, error)
	// Create a passkey registration link for a user
	//
	// Create a passkey registration link which includes a code and either return it or send it to the user..
	CreatePasskeyRegistrationLink(context.Context, *CreatePasskeyRegistrationLinkRequest) (*CreatePasskeyRegistrationLinkResponse, error)
	// List passkeys of an user
	//
	// List passkeys of an user
	ListPasskeys(context.Context, *ListPasskeysRequest) (*ListPasskeysResponse, error)
	// Remove passkey from a user
	//
	// Remove passkey from a user.
	RemovePasskey(context.Context, *RemovePasskeyRequest) (*RemovePasskeyResponse, error)
	// Start the registration of a u2f token for a user
	//
	// Start the registration of a u2f token for a user, as a response the public key credential creation options are returned, which are used to verify the u2f token..
	RegisterU2F(context.Context, *RegisterU2FRequest) (*RegisterU2FResponse, error)
	// Verify a u2f token for a user
	//
	// Verify the u2f token registration with the public key credential..
	VerifyU2FRegistration(context.Context, *VerifyU2FRegistrationRequest) (*VerifyU2FRegistrationResponse, error)
	// Remove u2f token from a user
	//
	// Remove u2f token from a user.
	RemoveU2F(context.Context, *RemoveU2FRequest) (*RemoveU2FResponse, error)
	// Start the registration of a TOTP generator for a user
	//
	// Start the registration of a TOTP generator for a user, as a response a secret returned, which is used to initialize a TOTP app or device..
	RegisterTOTP(context.Context, *RegisterTOTPRequest) (*RegisterTOTPResponse, error)
	// Verify a TOTP generator for a user
	//
	// Verify the TOTP registration with a generated code..
	VerifyTOTPRegistration(context.Context, *VerifyTOTPRegistrationRequest) (*VerifyTOTPRegistrationResponse, error)
	// Remove TOTP generator from a user
	//
	// Remove the configured TOTP generator of a user. As only one TOTP generator per user is allowed, the user will not have TOTP as a second factor afterward.
	RemoveTOTP(context.Context, *RemoveTOTPRequest) (*RemoveTOTPResponse, error)
	// Add OTP SMS for a user
	//
	// Add a new One-Time Password (OTP) SMS factor to the authenticated user. OTP SMS will enable the user to verify a OTP with the latest verified phone number. The phone number has to be verified to add the second factor..
	AddOTPSMS(context.Context, *AddOTPSMSRequest) (*AddOTPSMSResponse, error)
	// Remove One-Time Password (OTP) SMS from a user
	//
	// Remove the configured One-Time Password (OTP) SMS factor of a user. As only one OTP SMS per user is allowed, the user will not have OTP SMS as a second factor afterward.
	RemoveOTPSMS(context.Context, *RemoveOTPSMSRequest) (*RemoveOTPSMSResponse, error)
	// Add OTP Email for a user
	//
	// Add a new One-Time Password (OTP) Email factor to the authenticated user. OTP Email will enable the user to verify a OTP with the latest verified email. The email has to be verified to add the second factor..
	AddOTPEmail(context.Context, *AddOTPEmailRequest) (*AddOTPEmailResponse, error)
	// Remove One-Time Password (OTP) Email from a user
	//
	// Remove the configured One-Time Password (OTP) Email factor of a user. As only one OTP Email per user is allowed, the user will not have OTP Email as a second factor afterward.
	RemoveOTPEmail(context.Context, *RemoveOTPEmailRequest) (*RemoveOTPEmailResponse, error)
	// Start flow with an identity provider
	//
	// Start a flow with an identity provider, for external login, registration or linking..
	StartIdentityProviderIntent(context.Context, *StartIdentityProviderIntentRequest) (*StartIdentityProviderIntentResponse, error)
	// Retrieve the information returned by the identity provider
	//
	// Retrieve the information returned by the identity provider for registration or updating an existing user with new information..
	RetrieveIdentityProviderIntent(context.Context, *RetrieveIdentityProviderIntentRequest) (*RetrieveIdentityProviderIntentResponse, error)
	// Add link to an identity provider to an user
	//
	// Add link to an identity provider to an user..
	AddIDPLink(context.Context, *AddIDPLinkRequest) (*AddIDPLinkResponse, error)
	// List links to an identity provider of an user
	//
	// List links to an identity provider of an user.
	ListIDPLinks(context.Context, *ListIDPLinksRequest) (*ListIDPLinksResponse, error)
	// Remove link of an identity provider to an user
	//
	// Remove link of an identity provider to an user.
	RemoveIDPLink(context.Context, *RemoveIDPLinkRequest) (*RemoveIDPLinkResponse, error)
	// Request a code to reset a password
	//
	// Request a code to reset a password..
	PasswordReset(context.Context, *PasswordResetRequest) (*PasswordResetResponse, error)
	// Change password
	//
	// Deprecated: [Update the users password](apis/resources/user_service_v2/user-service-update-user.api.mdx) instead.
	//
	// Change the password of a user with either a verification code or the current password..
	SetPassword(context.Context, *SetPasswordRequest) (*SetPasswordResponse, error)
	// Add a Users Secret
	//
	// Generates a client secret for the user.
	// The client id is the users username.
	// If the user already has a secret, it is overwritten.
	// Only users of type machine can have a secret.
	//
	// Required permission:
	//   - user.write
	AddSecret(context.Context, *AddSecretRequest) (*AddSecretResponse, error)
	// Remove a Users Secret
	//
	// Remove the current client ID and client secret from a machine user.
	//
	// Required permission:
	//   - user.write
	RemoveSecret(context.Context, *RemoveSecretRequest) (*RemoveSecretResponse, error)
	// Add a Key
	//
	// Add a keys that can be used to securely authenticate at the Zitadel APIs using JWT profile authentication using short-lived tokens.
	// Make sure you store the returned key safely, as you won't be able to read it from the Zitadel API anymore.
	// Only users of type machine can have keys.
	//
	// Required permission:
	//   - user.write
	AddKey(context.Context, *AddKeyRequest) (*AddKeyResponse, error)
	// Remove a Key
	//
	// Remove a machine users key by the given key ID and an optionally given user ID.
	//
	// Required permission:
	//   - user.write
	RemoveKey(context.Context, *RemoveKeyRequest) (*RemoveKeyResponse, error)
	// Search Keys
	//
	// List all matching keys. By default all keys of the instance on which the caller has permission to read the owning users are returned.
	// Make sure to include a limit and sorting for pagination.
	//
	// Required permission:
	//   - user.read
	ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error)
	// Add a Personal Access Token
	//
	// Personal access tokens (PAT) are the easiest way to authenticate to the Zitadel APIs.
	// Make sure you store the returned PAT safely, as you won't be able to read it from the Zitadel API anymore.
	// Only users of type machine can have personal access tokens.
	//
	// Required permission:
	//   - user.write
	AddPersonalAccessToken(context.Context, *AddPersonalAccessTokenRequest) (*AddPersonalAccessTokenResponse, error)
	// Remove a Personal Access Token
	//
	// Removes a machine users personal access token by the given token ID and an optionally given user ID.
	//
	// Required permission:
	//   - user.write
	RemovePersonalAccessToken(context.Context, *RemovePersonalAccessTokenRequest) (*RemovePersonalAccessTokenResponse, error)
	// Search Personal Access Tokens
	//
	// List all personal access tokens. By default all personal access tokens of the instance on which the caller has permission to read the owning users are returned.
	// Make sure to include a limit and sorting for pagination.
	//
	// Required permission:
	//   - user.read
	ListPersonalAccessTokens(context.Context, *ListPersonalAccessTokensRequest) (*ListPersonalAccessTokensResponse, error)
	// List all possible authentication methods of a user
	//
	// List all possible authentication methods of a user like password, passwordless, (T)OTP and more..
	ListAuthenticationMethodTypes(context.Context, *ListAuthenticationMethodTypesRequest) (*ListAuthenticationMethodTypesResponse, error)
	ListAuthenticationFactors(context.Context, *ListAuthenticationFactorsRequest) (*ListAuthenticationFactorsResponse, error)
	// Create an invite code for a user
	//
	// Create an invite code for a user to initialize their first authentication method (password, passkeys, IdP) depending on the organization's available methods.
	// If an invite code has been created previously, it's url template and application name will be used as defaults for the new code.
	// The new code will overwrite the previous one and make it invalid.
	// Note: It is possible to reissue a new code only when the previous code has expired, or when the user provides a wrong code three or more times during verification.
	CreateInviteCode(context.Context, *CreateInviteCodeRequest) (*CreateInviteCodeResponse, error)
	// Resend an invite code for a user
	//
	// Deprecated: Use [CreateInviteCode](apis/resources/user_service_v2/user-service-create-invite-code.api.mdx) instead.
	//
	// Resend an invite code for a user to initialize their first authentication method (password, passkeys, IdP) depending on the organization's available methods.
	// A resend is only possible if a code has been created previously and sent to the user. If there is no code or it was directly returned, an error will be returned.
	ResendInviteCode(context.Context, *ResendInviteCodeRequest) (*ResendInviteCodeResponse, error)
	// Verify an invite code for a user
	//
	// Verify the invite code of a user previously issued. This will set their email to a verified state and
	// allow the user to set up their first authentication method (password, passkeys, IdP) depending on the organization's available methods.
	VerifyInviteCode(context.Context, *VerifyInviteCodeRequest) (*VerifyInviteCodeResponse, error)
	// MFA Init Skipped
	//
	// Update the last time the user has skipped MFA initialization. The server timestamp is used.
	HumanMFAInitSkipped(context.Context, *HumanMFAInitSkippedRequest) (*HumanMFAInitSkippedResponse, error)
	// Set User Metadata
	//
	// Sets a list of key value pairs. Existing metadata entries with matching keys are overwritten. Existing metadata entries without matching keys are untouched. To remove metadata entries, use [DeleteUserMetadata](apis/resources/user_service_v2/user-service-delete-user-metadata.api.mdx). For HTTP requests, make sure the bytes array value is base64 encoded.
	//
	// Required permission:
	//   - `user.write`
	SetUserMetadata(context.Context, *SetUserMetadataRequest) (*SetUserMetadataResponse, error)
	// List User Metadata
	//
	// List metadata of an user filtered by query.
	//
	// Required permission:
	//   - `user.read`
	ListUserMetadata(context.Context, *ListUserMetadataRequest) (*ListUserMetadataResponse, error)
	// Delete User Metadata
	//
	// Delete metadata objects from an user with a specific key.
	//
	// Required permission:
	//   - `user.write`
	DeleteUserMetadata(context.Context, *DeleteUserMetadataRequest) (*DeleteUserMetadataResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) AddHumanUser(context.Context, *AddHumanUserRequest) (*AddHumanUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHumanUser not implemented")
}
func (UnimplementedUserServiceServer) GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedUserServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedUserServiceServer) SetEmail(context.Context, *SetEmailRequest) (*SetEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEmail not implemented")
}
func (UnimplementedUserServiceServer) ResendEmailCode(context.Context, *ResendEmailCodeRequest) (*ResendEmailCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendEmailCode not implemented")
}
func (UnimplementedUserServiceServer) SendEmailCode(context.Context, *SendEmailCodeRequest) (*SendEmailCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailCode not implemented")
}
func (UnimplementedUserServiceServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedUserServiceServer) SetPhone(context.Context, *SetPhoneRequest) (*SetPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPhone not implemented")
}
func (UnimplementedUserServiceServer) RemovePhone(context.Context, *RemovePhoneRequest) (*RemovePhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePhone not implemented")
}
func (UnimplementedUserServiceServer) ResendPhoneCode(context.Context, *ResendPhoneCodeRequest) (*ResendPhoneCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendPhoneCode not implemented")
}
func (UnimplementedUserServiceServer) VerifyPhone(context.Context, *VerifyPhoneRequest) (*VerifyPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPhone not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateHumanUser(context.Context, *UpdateHumanUserRequest) (*UpdateHumanUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHumanUser not implemented")
}
func (UnimplementedUserServiceServer) DeactivateUser(context.Context, *DeactivateUserRequest) (*DeactivateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateUser not implemented")
}
func (UnimplementedUserServiceServer) ReactivateUser(context.Context, *ReactivateUserRequest) (*ReactivateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateUser not implemented")
}
func (UnimplementedUserServiceServer) LockUser(context.Context, *LockUserRequest) (*LockUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockUser not implemented")
}
func (UnimplementedUserServiceServer) UnlockUser(context.Context, *UnlockUserRequest) (*UnlockUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) RegisterPasskey(context.Context, *RegisterPasskeyRequest) (*RegisterPasskeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPasskey not implemented")
}
func (UnimplementedUserServiceServer) VerifyPasskeyRegistration(context.Context, *VerifyPasskeyRegistrationRequest) (*VerifyPasskeyRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPasskeyRegistration not implemented")
}
func (UnimplementedUserServiceServer) CreatePasskeyRegistrationLink(context.Context, *CreatePasskeyRegistrationLinkRequest) (*CreatePasskeyRegistrationLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePasskeyRegistrationLink not implemented")
}
func (UnimplementedUserServiceServer) ListPasskeys(context.Context, *ListPasskeysRequest) (*ListPasskeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPasskeys not implemented")
}
func (UnimplementedUserServiceServer) RemovePasskey(context.Context, *RemovePasskeyRequest) (*RemovePasskeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePasskey not implemented")
}
func (UnimplementedUserServiceServer) RegisterU2F(context.Context, *RegisterU2FRequest) (*RegisterU2FResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterU2F not implemented")
}
func (UnimplementedUserServiceServer) VerifyU2FRegistration(context.Context, *VerifyU2FRegistrationRequest) (*VerifyU2FRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyU2FRegistration not implemented")
}
func (UnimplementedUserServiceServer) RemoveU2F(context.Context, *RemoveU2FRequest) (*RemoveU2FResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveU2F not implemented")
}
func (UnimplementedUserServiceServer) RegisterTOTP(context.Context, *RegisterTOTPRequest) (*RegisterTOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTOTP not implemented")
}
func (UnimplementedUserServiceServer) VerifyTOTPRegistration(context.Context, *VerifyTOTPRegistrationRequest) (*VerifyTOTPRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTOTPRegistration not implemented")
}
func (UnimplementedUserServiceServer) RemoveTOTP(context.Context, *RemoveTOTPRequest) (*RemoveTOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTOTP not implemented")
}
func (UnimplementedUserServiceServer) AddOTPSMS(context.Context, *AddOTPSMSRequest) (*AddOTPSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOTPSMS not implemented")
}
func (UnimplementedUserServiceServer) RemoveOTPSMS(context.Context, *RemoveOTPSMSRequest) (*RemoveOTPSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOTPSMS not implemented")
}
func (UnimplementedUserServiceServer) AddOTPEmail(context.Context, *AddOTPEmailRequest) (*AddOTPEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOTPEmail not implemented")
}
func (UnimplementedUserServiceServer) RemoveOTPEmail(context.Context, *RemoveOTPEmailRequest) (*RemoveOTPEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOTPEmail not implemented")
}
func (UnimplementedUserServiceServer) StartIdentityProviderIntent(context.Context, *StartIdentityProviderIntentRequest) (*StartIdentityProviderIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartIdentityProviderIntent not implemented")
}
func (UnimplementedUserServiceServer) RetrieveIdentityProviderIntent(context.Context, *RetrieveIdentityProviderIntentRequest) (*RetrieveIdentityProviderIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveIdentityProviderIntent not implemented")
}
func (UnimplementedUserServiceServer) AddIDPLink(context.Context, *AddIDPLinkRequest) (*AddIDPLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIDPLink not implemented")
}
func (UnimplementedUserServiceServer) ListIDPLinks(context.Context, *ListIDPLinksRequest) (*ListIDPLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIDPLinks not implemented")
}
func (UnimplementedUserServiceServer) RemoveIDPLink(context.Context, *RemoveIDPLinkRequest) (*RemoveIDPLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIDPLink not implemented")
}
func (UnimplementedUserServiceServer) PasswordReset(context.Context, *PasswordResetRequest) (*PasswordResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordReset not implemented")
}
func (UnimplementedUserServiceServer) SetPassword(context.Context, *SetPasswordRequest) (*SetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPassword not implemented")
}
func (UnimplementedUserServiceServer) AddSecret(context.Context, *AddSecretRequest) (*AddSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSecret not implemented")
}
func (UnimplementedUserServiceServer) RemoveSecret(context.Context, *RemoveSecretRequest) (*RemoveSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSecret not implemented")
}
func (UnimplementedUserServiceServer) AddKey(context.Context, *AddKeyRequest) (*AddKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKey not implemented")
}
func (UnimplementedUserServiceServer) RemoveKey(context.Context, *RemoveKeyRequest) (*RemoveKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveKey not implemented")
}
func (UnimplementedUserServiceServer) ListKeys(context.Context, *ListKeysRequest) (*ListKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeys not implemented")
}
func (UnimplementedUserServiceServer) AddPersonalAccessToken(context.Context, *AddPersonalAccessTokenRequest) (*AddPersonalAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPersonalAccessToken not implemented")
}
func (UnimplementedUserServiceServer) RemovePersonalAccessToken(context.Context, *RemovePersonalAccessTokenRequest) (*RemovePersonalAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePersonalAccessToken not implemented")
}
func (UnimplementedUserServiceServer) ListPersonalAccessTokens(context.Context, *ListPersonalAccessTokensRequest) (*ListPersonalAccessTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPersonalAccessTokens not implemented")
}
func (UnimplementedUserServiceServer) ListAuthenticationMethodTypes(context.Context, *ListAuthenticationMethodTypesRequest) (*ListAuthenticationMethodTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthenticationMethodTypes not implemented")
}
func (UnimplementedUserServiceServer) ListAuthenticationFactors(context.Context, *ListAuthenticationFactorsRequest) (*ListAuthenticationFactorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthenticationFactors not implemented")
}
func (UnimplementedUserServiceServer) CreateInviteCode(context.Context, *CreateInviteCodeRequest) (*CreateInviteCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInviteCode not implemented")
}
func (UnimplementedUserServiceServer) ResendInviteCode(context.Context, *ResendInviteCodeRequest) (*ResendInviteCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendInviteCode not implemented")
}
func (UnimplementedUserServiceServer) VerifyInviteCode(context.Context, *VerifyInviteCodeRequest) (*VerifyInviteCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyInviteCode not implemented")
}
func (UnimplementedUserServiceServer) HumanMFAInitSkipped(context.Context, *HumanMFAInitSkippedRequest) (*HumanMFAInitSkippedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HumanMFAInitSkipped not implemented")
}
func (UnimplementedUserServiceServer) SetUserMetadata(context.Context, *SetUserMetadataRequest) (*SetUserMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserMetadata not implemented")
}
func (UnimplementedUserServiceServer) ListUserMetadata(context.Context, *ListUserMetadataRequest) (*ListUserMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserMetadata not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserMetadata(context.Context, *DeleteUserMetadataRequest) (*DeleteUserMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserMetadata not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddHumanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHumanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddHumanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddHumanUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddHumanUser(ctx, req.(*AddHumanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByID(ctx, req.(*GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SetEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetEmail(ctx, req.(*SetEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResendEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendEmailCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResendEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResendEmailCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResendEmailCode(ctx, req.(*ResendEmailCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SendEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SendEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SendEmailCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SendEmailCode(ctx, req.(*SendEmailCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SetPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetPhone(ctx, req.(*SetPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemovePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemovePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemovePhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemovePhone(ctx, req.(*RemovePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResendPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendPhoneCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResendPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResendPhoneCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResendPhoneCode(ctx, req.(*ResendPhoneCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyPhone(ctx, req.(*VerifyPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateHumanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHumanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateHumanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateHumanUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateHumanUser(ctx, req.(*UpdateHumanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeactivateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeactivateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeactivateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeactivateUser(ctx, req.(*DeactivateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ReactivateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ReactivateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ReactivateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ReactivateUser(ctx, req.(*ReactivateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_LockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LockUser(ctx, req.(*LockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UnlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UnlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UnlockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UnlockUser(ctx, req.(*UnlockUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RegisterPasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPasskeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterPasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RegisterPasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterPasskey(ctx, req.(*RegisterPasskeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyPasskeyRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPasskeyRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyPasskeyRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyPasskeyRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyPasskeyRegistration(ctx, req.(*VerifyPasskeyRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreatePasskeyRegistrationLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePasskeyRegistrationLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreatePasskeyRegistrationLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreatePasskeyRegistrationLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreatePasskeyRegistrationLink(ctx, req.(*CreatePasskeyRegistrationLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListPasskeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPasskeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListPasskeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListPasskeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListPasskeys(ctx, req.(*ListPasskeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemovePasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePasskeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemovePasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemovePasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemovePasskey(ctx, req.(*RemovePasskeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RegisterU2F_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterU2FRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterU2F(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RegisterU2F_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterU2F(ctx, req.(*RegisterU2FRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyU2FRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyU2FRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyU2FRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyU2FRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyU2FRegistration(ctx, req.(*VerifyU2FRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveU2F_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveU2FRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveU2F(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveU2F_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveU2F(ctx, req.(*RemoveU2FRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RegisterTOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterTOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RegisterTOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterTOTP(ctx, req.(*RegisterTOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyTOTPRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTOTPRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyTOTPRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyTOTPRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyTOTPRegistration(ctx, req.(*VerifyTOTPRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveTOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveTOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveTOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveTOTP(ctx, req.(*RemoveTOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddOTPSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOTPSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddOTPSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddOTPSMS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddOTPSMS(ctx, req.(*AddOTPSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveOTPSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOTPSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveOTPSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveOTPSMS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveOTPSMS(ctx, req.(*RemoveOTPSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddOTPEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOTPEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddOTPEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddOTPEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddOTPEmail(ctx, req.(*AddOTPEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveOTPEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOTPEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveOTPEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveOTPEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveOTPEmail(ctx, req.(*RemoveOTPEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_StartIdentityProviderIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartIdentityProviderIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).StartIdentityProviderIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_StartIdentityProviderIntent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).StartIdentityProviderIntent(ctx, req.(*StartIdentityProviderIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RetrieveIdentityProviderIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveIdentityProviderIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RetrieveIdentityProviderIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RetrieveIdentityProviderIntent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RetrieveIdentityProviderIntent(ctx, req.(*RetrieveIdentityProviderIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddIDPLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIDPLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddIDPLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddIDPLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddIDPLink(ctx, req.(*AddIDPLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListIDPLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIDPLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListIDPLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListIDPLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListIDPLinks(ctx, req.(*ListIDPLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveIDPLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIDPLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveIDPLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveIDPLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveIDPLink(ctx, req.(*RemoveIDPLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_PasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).PasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_PasswordReset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).PasswordReset(ctx, req.(*PasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetPassword(ctx, req.(*SetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddSecret(ctx, req.(*AddSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveSecret(ctx, req.(*RemoveSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddKey(ctx, req.(*AddKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveKey(ctx, req.(*RemoveKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListKeys(ctx, req.(*ListKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddPersonalAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPersonalAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddPersonalAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddPersonalAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddPersonalAccessToken(ctx, req.(*AddPersonalAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemovePersonalAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePersonalAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemovePersonalAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemovePersonalAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemovePersonalAccessToken(ctx, req.(*RemovePersonalAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListPersonalAccessTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersonalAccessTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListPersonalAccessTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListPersonalAccessTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListPersonalAccessTokens(ctx, req.(*ListPersonalAccessTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListAuthenticationMethodTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthenticationMethodTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListAuthenticationMethodTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListAuthenticationMethodTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListAuthenticationMethodTypes(ctx, req.(*ListAuthenticationMethodTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListAuthenticationFactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthenticationFactorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListAuthenticationFactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListAuthenticationFactors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListAuthenticationFactors(ctx, req.(*ListAuthenticationFactorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateInviteCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInviteCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateInviteCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateInviteCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateInviteCode(ctx, req.(*CreateInviteCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResendInviteCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendInviteCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResendInviteCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResendInviteCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResendInviteCode(ctx, req.(*ResendInviteCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyInviteCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyInviteCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyInviteCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyInviteCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyInviteCode(ctx, req.(*VerifyInviteCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_HumanMFAInitSkipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HumanMFAInitSkippedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).HumanMFAInitSkipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_HumanMFAInitSkipped_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).HumanMFAInitSkipped(ctx, req.(*HumanMFAInitSkippedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetUserMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetUserMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SetUserMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetUserMetadata(ctx, req.(*SetUserMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUserMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUserMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListUserMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUserMetadata(ctx, req.(*ListUserMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUserMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserMetadata(ctx, req.(*DeleteUserMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zitadel.user.v2.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "AddHumanUser",
			Handler:    _UserService_AddHumanUser_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _UserService_GetUserByID_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _UserService_ListUsers_Handler,
		},
		{
			MethodName: "SetEmail",
			Handler:    _UserService_SetEmail_Handler,
		},
		{
			MethodName: "ResendEmailCode",
			Handler:    _UserService_ResendEmailCode_Handler,
		},
		{
			MethodName: "SendEmailCode",
			Handler:    _UserService_SendEmailCode_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _UserService_VerifyEmail_Handler,
		},
		{
			MethodName: "SetPhone",
			Handler:    _UserService_SetPhone_Handler,
		},
		{
			MethodName: "RemovePhone",
			Handler:    _UserService_RemovePhone_Handler,
		},
		{
			MethodName: "ResendPhoneCode",
			Handler:    _UserService_ResendPhoneCode_Handler,
		},
		{
			MethodName: "VerifyPhone",
			Handler:    _UserService_VerifyPhone_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateHumanUser",
			Handler:    _UserService_UpdateHumanUser_Handler,
		},
		{
			MethodName: "DeactivateUser",
			Handler:    _UserService_DeactivateUser_Handler,
		},
		{
			MethodName: "ReactivateUser",
			Handler:    _UserService_ReactivateUser_Handler,
		},
		{
			MethodName: "LockUser",
			Handler:    _UserService_LockUser_Handler,
		},
		{
			MethodName: "UnlockUser",
			Handler:    _UserService_UnlockUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "RegisterPasskey",
			Handler:    _UserService_RegisterPasskey_Handler,
		},
		{
			MethodName: "VerifyPasskeyRegistration",
			Handler:    _UserService_VerifyPasskeyRegistration_Handler,
		},
		{
			MethodName: "CreatePasskeyRegistrationLink",
			Handler:    _UserService_CreatePasskeyRegistrationLink_Handler,
		},
		{
			MethodName: "ListPasskeys",
			Handler:    _UserService_ListPasskeys_Handler,
		},
		{
			MethodName: "RemovePasskey",
			Handler:    _UserService_RemovePasskey_Handler,
		},
		{
			MethodName: "RegisterU2F",
			Handler:    _UserService_RegisterU2F_Handler,
		},
		{
			MethodName: "VerifyU2FRegistration",
			Handler:    _UserService_VerifyU2FRegistration_Handler,
		},
		{
			MethodName: "RemoveU2F",
			Handler:    _UserService_RemoveU2F_Handler,
		},
		{
			MethodName: "RegisterTOTP",
			Handler:    _UserService_RegisterTOTP_Handler,
		},
		{
			MethodName: "VerifyTOTPRegistration",
			Handler:    _UserService_VerifyTOTPRegistration_Handler,
		},
		{
			MethodName: "RemoveTOTP",
			Handler:    _UserService_RemoveTOTP_Handler,
		},
		{
			MethodName: "AddOTPSMS",
			Handler:    _UserService_AddOTPSMS_Handler,
		},
		{
			MethodName: "RemoveOTPSMS",
			Handler:    _UserService_RemoveOTPSMS_Handler,
		},
		{
			MethodName: "AddOTPEmail",
			Handler:    _UserService_AddOTPEmail_Handler,
		},
		{
			MethodName: "RemoveOTPEmail",
			Handler:    _UserService_RemoveOTPEmail_Handler,
		},
		{
			MethodName: "StartIdentityProviderIntent",
			Handler:    _UserService_StartIdentityProviderIntent_Handler,
		},
		{
			MethodName: "RetrieveIdentityProviderIntent",
			Handler:    _UserService_RetrieveIdentityProviderIntent_Handler,
		},
		{
			MethodName: "AddIDPLink",
			Handler:    _UserService_AddIDPLink_Handler,
		},
		{
			MethodName: "ListIDPLinks",
			Handler:    _UserService_ListIDPLinks_Handler,
		},
		{
			MethodName: "RemoveIDPLink",
			Handler:    _UserService_RemoveIDPLink_Handler,
		},
		{
			MethodName: "PasswordReset",
			Handler:    _UserService_PasswordReset_Handler,
		},
		{
			MethodName: "SetPassword",
			Handler:    _UserService_SetPassword_Handler,
		},
		{
			MethodName: "AddSecret",
			Handler:    _UserService_AddSecret_Handler,
		},
		{
			MethodName: "RemoveSecret",
			Handler:    _UserService_RemoveSecret_Handler,
		},
		{
			MethodName: "AddKey",
			Handler:    _UserService_AddKey_Handler,
		},
		{
			MethodName: "RemoveKey",
			Handler:    _UserService_RemoveKey_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _UserService_ListKeys_Handler,
		},
		{
			MethodName: "AddPersonalAccessToken",
			Handler:    _UserService_AddPersonalAccessToken_Handler,
		},
		{
			MethodName: "RemovePersonalAccessToken",
			Handler:    _UserService_RemovePersonalAccessToken_Handler,
		},
		{
			MethodName: "ListPersonalAccessTokens",
			Handler:    _UserService_ListPersonalAccessTokens_Handler,
		},
		{
			MethodName: "ListAuthenticationMethodTypes",
			Handler:    _UserService_ListAuthenticationMethodTypes_Handler,
		},
		{
			MethodName: "ListAuthenticationFactors",
			Handler:    _UserService_ListAuthenticationFactors_Handler,
		},
		{
			MethodName: "CreateInviteCode",
			Handler:    _UserService_CreateInviteCode_Handler,
		},
		{
			MethodName: "ResendInviteCode",
			Handler:    _UserService_ResendInviteCode_Handler,
		},
		{
			MethodName: "VerifyInviteCode",
			Handler:    _UserService_VerifyInviteCode_Handler,
		},
		{
			MethodName: "HumanMFAInitSkipped",
			Handler:    _UserService_HumanMFAInitSkipped_Handler,
		},
		{
			MethodName: "SetUserMetadata",
			Handler:    _UserService_SetUserMetadata_Handler,
		},
		{
			MethodName: "ListUserMetadata",
			Handler:    _UserService_ListUserMetadata_Handler,
		},
		{
			MethodName: "DeleteUserMetadata",
			Handler:    _UserService_DeleteUserMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zitadel/user/v2/user_service.proto",
}
