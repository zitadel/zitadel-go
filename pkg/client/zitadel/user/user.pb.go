// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/user.proto

package user

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	object "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/object"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserState int32

const (
	UserState_USER_STATE_UNSPECIFIED UserState = 0
	UserState_USER_STATE_ACTIVE      UserState = 1
	UserState_USER_STATE_INACTIVE    UserState = 2
	UserState_USER_STATE_DELETED     UserState = 3
	UserState_USER_STATE_LOCKED      UserState = 4
	UserState_USER_STATE_SUSPEND     UserState = 5
	UserState_USER_STATE_INITIAL     UserState = 6
)

// Enum value maps for UserState.
var (
	UserState_name = map[int32]string{
		0: "USER_STATE_UNSPECIFIED",
		1: "USER_STATE_ACTIVE",
		2: "USER_STATE_INACTIVE",
		3: "USER_STATE_DELETED",
		4: "USER_STATE_LOCKED",
		5: "USER_STATE_SUSPEND",
		6: "USER_STATE_INITIAL",
	}
	UserState_value = map[string]int32{
		"USER_STATE_UNSPECIFIED": 0,
		"USER_STATE_ACTIVE":      1,
		"USER_STATE_INACTIVE":    2,
		"USER_STATE_DELETED":     3,
		"USER_STATE_LOCKED":      4,
		"USER_STATE_SUSPEND":     5,
		"USER_STATE_INITIAL":     6,
	}
)

func (x UserState) Enum() *UserState {
	p := new(UserState)
	*p = x
	return p
}

func (x UserState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserState) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_user_proto_enumTypes[0].Descriptor()
}

func (UserState) Type() protoreflect.EnumType {
	return &file_zitadel_user_proto_enumTypes[0]
}

func (x UserState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserState.Descriptor instead.
func (UserState) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{0}
}

type Gender int32

const (
	Gender_GENDER_UNSPECIFIED Gender = 0
	Gender_GENDER_FEMALE      Gender = 1
	Gender_GENDER_MALE        Gender = 2
	Gender_GENDER_DIVERSE     Gender = 3
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "GENDER_UNSPECIFIED",
		1: "GENDER_FEMALE",
		2: "GENDER_MALE",
		3: "GENDER_DIVERSE",
	}
	Gender_value = map[string]int32{
		"GENDER_UNSPECIFIED": 0,
		"GENDER_FEMALE":      1,
		"GENDER_MALE":        2,
		"GENDER_DIVERSE":     3,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_user_proto_enumTypes[1].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_zitadel_user_proto_enumTypes[1]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{1}
}

type AccessTokenType int32

const (
	AccessTokenType_ACCESS_TOKEN_TYPE_BEARER AccessTokenType = 0
	AccessTokenType_ACCESS_TOKEN_TYPE_JWT    AccessTokenType = 1
)

// Enum value maps for AccessTokenType.
var (
	AccessTokenType_name = map[int32]string{
		0: "ACCESS_TOKEN_TYPE_BEARER",
		1: "ACCESS_TOKEN_TYPE_JWT",
	}
	AccessTokenType_value = map[string]int32{
		"ACCESS_TOKEN_TYPE_BEARER": 0,
		"ACCESS_TOKEN_TYPE_JWT":    1,
	}
)

func (x AccessTokenType) Enum() *AccessTokenType {
	p := new(AccessTokenType)
	*p = x
	return p
}

func (x AccessTokenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessTokenType) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_user_proto_enumTypes[2].Descriptor()
}

func (AccessTokenType) Type() protoreflect.EnumType {
	return &file_zitadel_user_proto_enumTypes[2]
}

func (x AccessTokenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessTokenType.Descriptor instead.
func (AccessTokenType) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{2}
}

type Type int32

const (
	Type_TYPE_UNSPECIFIED Type = 0
	Type_TYPE_HUMAN       Type = 1
	Type_TYPE_MACHINE     Type = 2
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_HUMAN",
		2: "TYPE_MACHINE",
	}
	Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_HUMAN":       1,
		"TYPE_MACHINE":     2,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_user_proto_enumTypes[3].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_zitadel_user_proto_enumTypes[3]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{3}
}

type UserFieldName int32

const (
	UserFieldName_USER_FIELD_NAME_UNSPECIFIED   UserFieldName = 0
	UserFieldName_USER_FIELD_NAME_USER_NAME     UserFieldName = 1
	UserFieldName_USER_FIELD_NAME_FIRST_NAME    UserFieldName = 2
	UserFieldName_USER_FIELD_NAME_LAST_NAME     UserFieldName = 3
	UserFieldName_USER_FIELD_NAME_NICK_NAME     UserFieldName = 4
	UserFieldName_USER_FIELD_NAME_DISPLAY_NAME  UserFieldName = 5
	UserFieldName_USER_FIELD_NAME_EMAIL         UserFieldName = 6
	UserFieldName_USER_FIELD_NAME_STATE         UserFieldName = 7
	UserFieldName_USER_FIELD_NAME_TYPE          UserFieldName = 8
	UserFieldName_USER_FIELD_NAME_CREATION_DATE UserFieldName = 9
)

// Enum value maps for UserFieldName.
var (
	UserFieldName_name = map[int32]string{
		0: "USER_FIELD_NAME_UNSPECIFIED",
		1: "USER_FIELD_NAME_USER_NAME",
		2: "USER_FIELD_NAME_FIRST_NAME",
		3: "USER_FIELD_NAME_LAST_NAME",
		4: "USER_FIELD_NAME_NICK_NAME",
		5: "USER_FIELD_NAME_DISPLAY_NAME",
		6: "USER_FIELD_NAME_EMAIL",
		7: "USER_FIELD_NAME_STATE",
		8: "USER_FIELD_NAME_TYPE",
		9: "USER_FIELD_NAME_CREATION_DATE",
	}
	UserFieldName_value = map[string]int32{
		"USER_FIELD_NAME_UNSPECIFIED":   0,
		"USER_FIELD_NAME_USER_NAME":     1,
		"USER_FIELD_NAME_FIRST_NAME":    2,
		"USER_FIELD_NAME_LAST_NAME":     3,
		"USER_FIELD_NAME_NICK_NAME":     4,
		"USER_FIELD_NAME_DISPLAY_NAME":  5,
		"USER_FIELD_NAME_EMAIL":         6,
		"USER_FIELD_NAME_STATE":         7,
		"USER_FIELD_NAME_TYPE":          8,
		"USER_FIELD_NAME_CREATION_DATE": 9,
	}
)

func (x UserFieldName) Enum() *UserFieldName {
	p := new(UserFieldName)
	*p = x
	return p
}

func (x UserFieldName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserFieldName) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_user_proto_enumTypes[4].Descriptor()
}

func (UserFieldName) Type() protoreflect.EnumType {
	return &file_zitadel_user_proto_enumTypes[4]
}

func (x UserFieldName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserFieldName.Descriptor instead.
func (UserFieldName) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{4}
}

type AuthFactorState int32

const (
	AuthFactorState_AUTH_FACTOR_STATE_UNSPECIFIED AuthFactorState = 0
	AuthFactorState_AUTH_FACTOR_STATE_NOT_READY   AuthFactorState = 1
	AuthFactorState_AUTH_FACTOR_STATE_READY       AuthFactorState = 2
	AuthFactorState_AUTH_FACTOR_STATE_REMOVED     AuthFactorState = 3
)

// Enum value maps for AuthFactorState.
var (
	AuthFactorState_name = map[int32]string{
		0: "AUTH_FACTOR_STATE_UNSPECIFIED",
		1: "AUTH_FACTOR_STATE_NOT_READY",
		2: "AUTH_FACTOR_STATE_READY",
		3: "AUTH_FACTOR_STATE_REMOVED",
	}
	AuthFactorState_value = map[string]int32{
		"AUTH_FACTOR_STATE_UNSPECIFIED": 0,
		"AUTH_FACTOR_STATE_NOT_READY":   1,
		"AUTH_FACTOR_STATE_READY":       2,
		"AUTH_FACTOR_STATE_REMOVED":     3,
	}
)

func (x AuthFactorState) Enum() *AuthFactorState {
	p := new(AuthFactorState)
	*p = x
	return p
}

func (x AuthFactorState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthFactorState) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_user_proto_enumTypes[5].Descriptor()
}

func (AuthFactorState) Type() protoreflect.EnumType {
	return &file_zitadel_user_proto_enumTypes[5]
}

func (x AuthFactorState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthFactorState.Descriptor instead.
func (AuthFactorState) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{5}
}

type SessionState int32

const (
	SessionState_SESSION_STATE_UNSPECIFIED SessionState = 0
	SessionState_SESSION_STATE_ACTIVE      SessionState = 1
	SessionState_SESSION_STATE_TERMINATED  SessionState = 2
)

// Enum value maps for SessionState.
var (
	SessionState_name = map[int32]string{
		0: "SESSION_STATE_UNSPECIFIED",
		1: "SESSION_STATE_ACTIVE",
		2: "SESSION_STATE_TERMINATED",
	}
	SessionState_value = map[string]int32{
		"SESSION_STATE_UNSPECIFIED": 0,
		"SESSION_STATE_ACTIVE":      1,
		"SESSION_STATE_TERMINATED":  2,
	}
)

func (x SessionState) Enum() *SessionState {
	p := new(SessionState)
	*p = x
	return p
}

func (x SessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_user_proto_enumTypes[6].Descriptor()
}

func (SessionState) Type() protoreflect.EnumType {
	return &file_zitadel_user_proto_enumTypes[6]
}

func (x SessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionState.Descriptor instead.
func (SessionState) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{6}
}

type UserGrantState int32

const (
	UserGrantState_USER_GRANT_STATE_UNSPECIFIED UserGrantState = 0
	UserGrantState_USER_GRANT_STATE_ACTIVE      UserGrantState = 1
	UserGrantState_USER_GRANT_STATE_INACTIVE    UserGrantState = 2
)

// Enum value maps for UserGrantState.
var (
	UserGrantState_name = map[int32]string{
		0: "USER_GRANT_STATE_UNSPECIFIED",
		1: "USER_GRANT_STATE_ACTIVE",
		2: "USER_GRANT_STATE_INACTIVE",
	}
	UserGrantState_value = map[string]int32{
		"USER_GRANT_STATE_UNSPECIFIED": 0,
		"USER_GRANT_STATE_ACTIVE":      1,
		"USER_GRANT_STATE_INACTIVE":    2,
	}
)

func (x UserGrantState) Enum() *UserGrantState {
	p := new(UserGrantState)
	*p = x
	return p
}

func (x UserGrantState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserGrantState) Descriptor() protoreflect.EnumDescriptor {
	return file_zitadel_user_proto_enumTypes[7].Descriptor()
}

func (UserGrantState) Type() protoreflect.EnumType {
	return &file_zitadel_user_proto_enumTypes[7]
}

func (x UserGrantState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserGrantState.Descriptor instead.
func (UserGrantState) EnumDescriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{7}
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Details            *object.ObjectDetails `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	State              UserState             `protobuf:"varint,3,opt,name=state,proto3,enum=zitadel.user.v1.UserState" json:"state,omitempty"`
	UserName           string                `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	LoginNames         []string              `protobuf:"bytes,5,rep,name=login_names,json=loginNames,proto3" json:"login_names,omitempty"`
	PreferredLoginName string                `protobuf:"bytes,6,opt,name=preferred_login_name,json=preferredLoginName,proto3" json:"preferred_login_name,omitempty"`
	// Types that are assignable to Type:
	//
	//	*User_Human
	//	*User_Machine
	Type isUser_Type `protobuf_oneof:"type"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *User) GetState() UserState {
	if x != nil {
		return x.State
	}
	return UserState_USER_STATE_UNSPECIFIED
}

func (x *User) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *User) GetLoginNames() []string {
	if x != nil {
		return x.LoginNames
	}
	return nil
}

func (x *User) GetPreferredLoginName() string {
	if x != nil {
		return x.PreferredLoginName
	}
	return ""
}

func (m *User) GetType() isUser_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *User) GetHuman() *Human {
	if x, ok := x.GetType().(*User_Human); ok {
		return x.Human
	}
	return nil
}

func (x *User) GetMachine() *Machine {
	if x, ok := x.GetType().(*User_Machine); ok {
		return x.Machine
	}
	return nil
}

type isUser_Type interface {
	isUser_Type()
}

type User_Human struct {
	Human *Human `protobuf:"bytes,7,opt,name=human,proto3,oneof"`
}

type User_Machine struct {
	Machine *Machine `protobuf:"bytes,8,opt,name=machine,proto3,oneof"`
}

func (*User_Human) isUser_Type() {}

func (*User_Machine) isUser_Type() {}

type Human struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *Profile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	Email   *Email   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Phone   *Phone   `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	// The time the user last changed their password.
	PasswordChanged *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=password_changed,json=passwordChanged,proto3" json:"password_changed,omitempty"`
}

func (x *Human) Reset() {
	*x = Human{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Human) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Human) ProtoMessage() {}

func (x *Human) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Human.ProtoReflect.Descriptor instead.
func (*Human) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{1}
}

func (x *Human) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *Human) GetEmail() *Email {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *Human) GetPhone() *Phone {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *Human) GetPasswordChanged() *timestamppb.Timestamp {
	if x != nil {
		return x.PasswordChanged
	}
	return nil
}

type Machine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description     string          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	HasSecret       bool            `protobuf:"varint,3,opt,name=has_secret,json=hasSecret,proto3" json:"has_secret,omitempty"`
	AccessTokenType AccessTokenType `protobuf:"varint,4,opt,name=access_token_type,json=accessTokenType,proto3,enum=zitadel.user.v1.AccessTokenType" json:"access_token_type,omitempty"`
}

func (x *Machine) Reset() {
	*x = Machine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Machine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine) ProtoMessage() {}

func (x *Machine) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machine.ProtoReflect.Descriptor instead.
func (*Machine) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{2}
}

func (x *Machine) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Machine) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Machine) GetHasSecret() bool {
	if x != nil {
		return x.HasSecret
	}
	return false
}

func (x *Machine) GetAccessTokenType() AccessTokenType {
	if x != nil {
		return x.AccessTokenType
	}
	return AccessTokenType_ACCESS_TOKEN_TYPE_BEARER
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName         string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName          string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	NickName          string `protobuf:"bytes,3,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	DisplayName       string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	PreferredLanguage string `protobuf:"bytes,5,opt,name=preferred_language,json=preferredLanguage,proto3" json:"preferred_language,omitempty"`
	Gender            Gender `protobuf:"varint,6,opt,name=gender,proto3,enum=zitadel.user.v1.Gender" json:"gender,omitempty"`
	AvatarUrl         string `protobuf:"bytes,7,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{3}
}

func (x *Profile) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Profile) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Profile) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *Profile) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Profile) GetPreferredLanguage() string {
	if x != nil {
		return x.PreferredLanguage
	}
	return ""
}

func (x *Profile) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_GENDER_UNSPECIFIED
}

func (x *Profile) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

type Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email           string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	IsEmailVerified bool   `protobuf:"varint,2,opt,name=is_email_verified,json=isEmailVerified,proto3" json:"is_email_verified,omitempty"`
}

func (x *Email) Reset() {
	*x = Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Email) ProtoMessage() {}

func (x *Email) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Email.ProtoReflect.Descriptor instead.
func (*Email) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{4}
}

func (x *Email) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Email) GetIsEmailVerified() bool {
	if x != nil {
		return x.IsEmailVerified
	}
	return false
}

type Phone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone           string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	IsPhoneVerified bool   `protobuf:"varint,2,opt,name=is_phone_verified,json=isPhoneVerified,proto3" json:"is_phone_verified,omitempty"`
}

func (x *Phone) Reset() {
	*x = Phone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Phone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Phone) ProtoMessage() {}

func (x *Phone) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Phone.ProtoReflect.Descriptor instead.
func (*Phone) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{5}
}

func (x *Phone) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Phone) GetIsPhoneVerified() bool {
	if x != nil {
		return x.IsPhoneVerified
	}
	return false
}

type SearchQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*SearchQuery_UserNameQuery
	//	*SearchQuery_FirstNameQuery
	//	*SearchQuery_LastNameQuery
	//	*SearchQuery_NickNameQuery
	//	*SearchQuery_DisplayNameQuery
	//	*SearchQuery_EmailQuery
	//	*SearchQuery_StateQuery
	//	*SearchQuery_TypeQuery
	//	*SearchQuery_LoginNameQuery
	//	*SearchQuery_InUserIdsQuery
	//	*SearchQuery_OrQuery
	//	*SearchQuery_AndQuery
	//	*SearchQuery_NotQuery
	//	*SearchQuery_InUserEmailsQuery
	Query isSearchQuery_Query `protobuf_oneof:"query"`
}

func (x *SearchQuery) Reset() {
	*x = SearchQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery) ProtoMessage() {}

func (x *SearchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery.ProtoReflect.Descriptor instead.
func (*SearchQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{6}
}

func (m *SearchQuery) GetQuery() isSearchQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *SearchQuery) GetUserNameQuery() *UserNameQuery {
	if x, ok := x.GetQuery().(*SearchQuery_UserNameQuery); ok {
		return x.UserNameQuery
	}
	return nil
}

func (x *SearchQuery) GetFirstNameQuery() *FirstNameQuery {
	if x, ok := x.GetQuery().(*SearchQuery_FirstNameQuery); ok {
		return x.FirstNameQuery
	}
	return nil
}

func (x *SearchQuery) GetLastNameQuery() *LastNameQuery {
	if x, ok := x.GetQuery().(*SearchQuery_LastNameQuery); ok {
		return x.LastNameQuery
	}
	return nil
}

func (x *SearchQuery) GetNickNameQuery() *NickNameQuery {
	if x, ok := x.GetQuery().(*SearchQuery_NickNameQuery); ok {
		return x.NickNameQuery
	}
	return nil
}

func (x *SearchQuery) GetDisplayNameQuery() *DisplayNameQuery {
	if x, ok := x.GetQuery().(*SearchQuery_DisplayNameQuery); ok {
		return x.DisplayNameQuery
	}
	return nil
}

func (x *SearchQuery) GetEmailQuery() *EmailQuery {
	if x, ok := x.GetQuery().(*SearchQuery_EmailQuery); ok {
		return x.EmailQuery
	}
	return nil
}

func (x *SearchQuery) GetStateQuery() *StateQuery {
	if x, ok := x.GetQuery().(*SearchQuery_StateQuery); ok {
		return x.StateQuery
	}
	return nil
}

func (x *SearchQuery) GetTypeQuery() *TypeQuery {
	if x, ok := x.GetQuery().(*SearchQuery_TypeQuery); ok {
		return x.TypeQuery
	}
	return nil
}

func (x *SearchQuery) GetLoginNameQuery() *LoginNameQuery {
	if x, ok := x.GetQuery().(*SearchQuery_LoginNameQuery); ok {
		return x.LoginNameQuery
	}
	return nil
}

func (x *SearchQuery) GetInUserIdsQuery() *InUserIDQuery {
	if x, ok := x.GetQuery().(*SearchQuery_InUserIdsQuery); ok {
		return x.InUserIdsQuery
	}
	return nil
}

func (x *SearchQuery) GetOrQuery() *OrQuery {
	if x, ok := x.GetQuery().(*SearchQuery_OrQuery); ok {
		return x.OrQuery
	}
	return nil
}

func (x *SearchQuery) GetAndQuery() *AndQuery {
	if x, ok := x.GetQuery().(*SearchQuery_AndQuery); ok {
		return x.AndQuery
	}
	return nil
}

func (x *SearchQuery) GetNotQuery() *NotQuery {
	if x, ok := x.GetQuery().(*SearchQuery_NotQuery); ok {
		return x.NotQuery
	}
	return nil
}

func (x *SearchQuery) GetInUserEmailsQuery() *InUserEmailsQuery {
	if x, ok := x.GetQuery().(*SearchQuery_InUserEmailsQuery); ok {
		return x.InUserEmailsQuery
	}
	return nil
}

type isSearchQuery_Query interface {
	isSearchQuery_Query()
}

type SearchQuery_UserNameQuery struct {
	UserNameQuery *UserNameQuery `protobuf:"bytes,1,opt,name=user_name_query,json=userNameQuery,proto3,oneof"`
}

type SearchQuery_FirstNameQuery struct {
	FirstNameQuery *FirstNameQuery `protobuf:"bytes,2,opt,name=first_name_query,json=firstNameQuery,proto3,oneof"`
}

type SearchQuery_LastNameQuery struct {
	LastNameQuery *LastNameQuery `protobuf:"bytes,3,opt,name=last_name_query,json=lastNameQuery,proto3,oneof"`
}

type SearchQuery_NickNameQuery struct {
	NickNameQuery *NickNameQuery `protobuf:"bytes,4,opt,name=nick_name_query,json=nickNameQuery,proto3,oneof"`
}

type SearchQuery_DisplayNameQuery struct {
	DisplayNameQuery *DisplayNameQuery `protobuf:"bytes,5,opt,name=display_name_query,json=displayNameQuery,proto3,oneof"`
}

type SearchQuery_EmailQuery struct {
	EmailQuery *EmailQuery `protobuf:"bytes,6,opt,name=email_query,json=emailQuery,proto3,oneof"`
}

type SearchQuery_StateQuery struct {
	StateQuery *StateQuery `protobuf:"bytes,7,opt,name=state_query,json=stateQuery,proto3,oneof"`
}

type SearchQuery_TypeQuery struct {
	TypeQuery *TypeQuery `protobuf:"bytes,8,opt,name=type_query,json=typeQuery,proto3,oneof"`
}

type SearchQuery_LoginNameQuery struct {
	LoginNameQuery *LoginNameQuery `protobuf:"bytes,9,opt,name=login_name_query,json=loginNameQuery,proto3,oneof"`
}

type SearchQuery_InUserIdsQuery struct {
	InUserIdsQuery *InUserIDQuery `protobuf:"bytes,10,opt,name=in_user_ids_query,json=inUserIdsQuery,proto3,oneof"`
}

type SearchQuery_OrQuery struct {
	OrQuery *OrQuery `protobuf:"bytes,11,opt,name=or_query,json=orQuery,proto3,oneof"`
}

type SearchQuery_AndQuery struct {
	AndQuery *AndQuery `protobuf:"bytes,12,opt,name=and_query,json=andQuery,proto3,oneof"`
}

type SearchQuery_NotQuery struct {
	NotQuery *NotQuery `protobuf:"bytes,13,opt,name=not_query,json=notQuery,proto3,oneof"`
}

type SearchQuery_InUserEmailsQuery struct {
	InUserEmailsQuery *InUserEmailsQuery `protobuf:"bytes,14,opt,name=in_user_emails_query,json=inUserEmailsQuery,proto3,oneof"`
}

func (*SearchQuery_UserNameQuery) isSearchQuery_Query() {}

func (*SearchQuery_FirstNameQuery) isSearchQuery_Query() {}

func (*SearchQuery_LastNameQuery) isSearchQuery_Query() {}

func (*SearchQuery_NickNameQuery) isSearchQuery_Query() {}

func (*SearchQuery_DisplayNameQuery) isSearchQuery_Query() {}

func (*SearchQuery_EmailQuery) isSearchQuery_Query() {}

func (*SearchQuery_StateQuery) isSearchQuery_Query() {}

func (*SearchQuery_TypeQuery) isSearchQuery_Query() {}

func (*SearchQuery_LoginNameQuery) isSearchQuery_Query() {}

func (*SearchQuery_InUserIdsQuery) isSearchQuery_Query() {}

func (*SearchQuery_OrQuery) isSearchQuery_Query() {}

func (*SearchQuery_AndQuery) isSearchQuery_Query() {}

func (*SearchQuery_NotQuery) isSearchQuery_Query() {}

func (*SearchQuery_InUserEmailsQuery) isSearchQuery_Query() {}

type OrQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*SearchQuery `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *OrQuery) Reset() {
	*x = OrQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrQuery) ProtoMessage() {}

func (x *OrQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrQuery.ProtoReflect.Descriptor instead.
func (*OrQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{7}
}

func (x *OrQuery) GetQueries() []*SearchQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

type AndQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*SearchQuery `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *AndQuery) Reset() {
	*x = AndQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndQuery) ProtoMessage() {}

func (x *AndQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndQuery.ProtoReflect.Descriptor instead.
func (*AndQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{8}
}

func (x *AndQuery) GetQueries() []*SearchQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

type NotQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *SearchQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *NotQuery) Reset() {
	*x = NotQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotQuery) ProtoMessage() {}

func (x *NotQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotQuery.ProtoReflect.Descriptor instead.
func (*NotQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{9}
}

func (x *NotQuery) GetQuery() *SearchQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type InUserIDQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *InUserIDQuery) Reset() {
	*x = InUserIDQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InUserIDQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InUserIDQuery) ProtoMessage() {}

func (x *InUserIDQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InUserIDQuery.ProtoReflect.Descriptor instead.
func (*InUserIDQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{10}
}

func (x *InUserIDQuery) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type InUserEmailsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserEmails []string `protobuf:"bytes,1,rep,name=user_emails,json=userEmails,proto3" json:"user_emails,omitempty"`
}

func (x *InUserEmailsQuery) Reset() {
	*x = InUserEmailsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InUserEmailsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InUserEmailsQuery) ProtoMessage() {}

func (x *InUserEmailsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InUserEmailsQuery.ProtoReflect.Descriptor instead.
func (*InUserEmailsQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{11}
}

func (x *InUserEmailsQuery) GetUserEmails() []string {
	if x != nil {
		return x.UserEmails
	}
	return nil
}

type UserNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string                 `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Method   object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *UserNameQuery) Reset() {
	*x = UserNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNameQuery) ProtoMessage() {}

func (x *UserNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNameQuery.ProtoReflect.Descriptor instead.
func (*UserNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{12}
}

func (x *UserNameQuery) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserNameQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type FirstNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName string                 `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	Method    object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *FirstNameQuery) Reset() {
	*x = FirstNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstNameQuery) ProtoMessage() {}

func (x *FirstNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstNameQuery.ProtoReflect.Descriptor instead.
func (*FirstNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{13}
}

func (x *FirstNameQuery) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *FirstNameQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type LastNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastName string                 `protobuf:"bytes,1,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Method   object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *LastNameQuery) Reset() {
	*x = LastNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastNameQuery) ProtoMessage() {}

func (x *LastNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastNameQuery.ProtoReflect.Descriptor instead.
func (*LastNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{14}
}

func (x *LastNameQuery) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *LastNameQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type NickNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NickName string                 `protobuf:"bytes,1,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	Method   object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *NickNameQuery) Reset() {
	*x = NickNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NickNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NickNameQuery) ProtoMessage() {}

func (x *NickNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NickNameQuery.ProtoReflect.Descriptor instead.
func (*NickNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{15}
}

func (x *NickNameQuery) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *NickNameQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type DisplayNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string                 `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Method      object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *DisplayNameQuery) Reset() {
	*x = DisplayNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayNameQuery) ProtoMessage() {}

func (x *DisplayNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayNameQuery.ProtoReflect.Descriptor instead.
func (*DisplayNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{16}
}

func (x *DisplayNameQuery) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *DisplayNameQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type EmailQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmailAddress string                 `protobuf:"bytes,1,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	Method       object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *EmailQuery) Reset() {
	*x = EmailQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailQuery) ProtoMessage() {}

func (x *EmailQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailQuery.ProtoReflect.Descriptor instead.
func (*EmailQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{17}
}

func (x *EmailQuery) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *EmailQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type LoginNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginName string                 `protobuf:"bytes,1,opt,name=login_name,json=loginName,proto3" json:"login_name,omitempty"`
	Method    object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *LoginNameQuery) Reset() {
	*x = LoginNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginNameQuery) ProtoMessage() {}

func (x *LoginNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginNameQuery.ProtoReflect.Descriptor instead.
func (*LoginNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{18}
}

func (x *LoginNameQuery) GetLoginName() string {
	if x != nil {
		return x.LoginName
	}
	return ""
}

func (x *LoginNameQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

// UserStateQuery always equals
type StateQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State UserState `protobuf:"varint,1,opt,name=state,proto3,enum=zitadel.user.v1.UserState" json:"state,omitempty"`
}

func (x *StateQuery) Reset() {
	*x = StateQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateQuery) ProtoMessage() {}

func (x *StateQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateQuery.ProtoReflect.Descriptor instead.
func (*StateQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{19}
}

func (x *StateQuery) GetState() UserState {
	if x != nil {
		return x.State
	}
	return UserState_USER_STATE_UNSPECIFIED
}

// UserTypeQuery always equals
type TypeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Type `protobuf:"varint,1,opt,name=type,proto3,enum=zitadel.user.v1.Type" json:"type,omitempty"`
}

func (x *TypeQuery) Reset() {
	*x = TypeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeQuery) ProtoMessage() {}

func (x *TypeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeQuery.ProtoReflect.Descriptor instead.
func (*TypeQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{20}
}

func (x *TypeQuery) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_TYPE_UNSPECIFIED
}

type AuthFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State AuthFactorState `protobuf:"varint,1,opt,name=state,proto3,enum=zitadel.user.v1.AuthFactorState" json:"state,omitempty"`
	// Types that are assignable to Type:
	//
	//	*AuthFactor_Otp
	//	*AuthFactor_U2F
	//	*AuthFactor_OtpSms
	//	*AuthFactor_OtpEmail
	Type isAuthFactor_Type `protobuf_oneof:"type"`
}

func (x *AuthFactor) Reset() {
	*x = AuthFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthFactor) ProtoMessage() {}

func (x *AuthFactor) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthFactor.ProtoReflect.Descriptor instead.
func (*AuthFactor) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{21}
}

func (x *AuthFactor) GetState() AuthFactorState {
	if x != nil {
		return x.State
	}
	return AuthFactorState_AUTH_FACTOR_STATE_UNSPECIFIED
}

func (m *AuthFactor) GetType() isAuthFactor_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *AuthFactor) GetOtp() *AuthFactorOTP {
	if x, ok := x.GetType().(*AuthFactor_Otp); ok {
		return x.Otp
	}
	return nil
}

func (x *AuthFactor) GetU2F() *AuthFactorU2F {
	if x, ok := x.GetType().(*AuthFactor_U2F); ok {
		return x.U2F
	}
	return nil
}

func (x *AuthFactor) GetOtpSms() *AuthFactorOTPSMS {
	if x, ok := x.GetType().(*AuthFactor_OtpSms); ok {
		return x.OtpSms
	}
	return nil
}

func (x *AuthFactor) GetOtpEmail() *AuthFactorOTPEmail {
	if x, ok := x.GetType().(*AuthFactor_OtpEmail); ok {
		return x.OtpEmail
	}
	return nil
}

type isAuthFactor_Type interface {
	isAuthFactor_Type()
}

type AuthFactor_Otp struct {
	Otp *AuthFactorOTP `protobuf:"bytes,2,opt,name=otp,proto3,oneof"`
}

type AuthFactor_U2F struct {
	U2F *AuthFactorU2F `protobuf:"bytes,3,opt,name=u2f,proto3,oneof"`
}

type AuthFactor_OtpSms struct {
	OtpSms *AuthFactorOTPSMS `protobuf:"bytes,4,opt,name=otp_sms,json=otpSms,proto3,oneof"`
}

type AuthFactor_OtpEmail struct {
	OtpEmail *AuthFactorOTPEmail `protobuf:"bytes,5,opt,name=otp_email,json=otpEmail,proto3,oneof"`
}

func (*AuthFactor_Otp) isAuthFactor_Type() {}

func (*AuthFactor_U2F) isAuthFactor_Type() {}

func (*AuthFactor_OtpSms) isAuthFactor_Type() {}

func (*AuthFactor_OtpEmail) isAuthFactor_Type() {}

type AuthFactorOTP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthFactorOTP) Reset() {
	*x = AuthFactorOTP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthFactorOTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthFactorOTP) ProtoMessage() {}

func (x *AuthFactorOTP) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthFactorOTP.ProtoReflect.Descriptor instead.
func (*AuthFactorOTP) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{22}
}

type AuthFactorOTPSMS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthFactorOTPSMS) Reset() {
	*x = AuthFactorOTPSMS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthFactorOTPSMS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthFactorOTPSMS) ProtoMessage() {}

func (x *AuthFactorOTPSMS) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthFactorOTPSMS.ProtoReflect.Descriptor instead.
func (*AuthFactorOTPSMS) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{23}
}

type AuthFactorOTPEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthFactorOTPEmail) Reset() {
	*x = AuthFactorOTPEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthFactorOTPEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthFactorOTPEmail) ProtoMessage() {}

func (x *AuthFactorOTPEmail) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthFactorOTPEmail.ProtoReflect.Descriptor instead.
func (*AuthFactorOTPEmail) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{24}
}

type AuthFactorU2F struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AuthFactorU2F) Reset() {
	*x = AuthFactorU2F{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthFactorU2F) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthFactorU2F) ProtoMessage() {}

func (x *AuthFactorU2F) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthFactorU2F.ProtoReflect.Descriptor instead.
func (*AuthFactorU2F) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{25}
}

func (x *AuthFactorU2F) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuthFactorU2F) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type WebAuthNKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *WebAuthNKey) Reset() {
	*x = WebAuthNKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebAuthNKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebAuthNKey) ProtoMessage() {}

func (x *WebAuthNKey) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebAuthNKey.ProtoReflect.Descriptor instead.
func (*WebAuthNKey) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{26}
}

func (x *WebAuthNKey) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type WebAuthNVerification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKeyCredential []byte `protobuf:"bytes,1,opt,name=public_key_credential,json=publicKeyCredential,proto3" json:"public_key_credential,omitempty"`
	TokenName           string `protobuf:"bytes,2,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
}

func (x *WebAuthNVerification) Reset() {
	*x = WebAuthNVerification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebAuthNVerification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebAuthNVerification) ProtoMessage() {}

func (x *WebAuthNVerification) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebAuthNVerification.ProtoReflect.Descriptor instead.
func (*WebAuthNVerification) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{27}
}

func (x *WebAuthNVerification) GetPublicKeyCredential() []byte {
	if x != nil {
		return x.PublicKeyCredential
	}
	return nil
}

func (x *WebAuthNVerification) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

type WebAuthNToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State AuthFactorState `protobuf:"varint,2,opt,name=state,proto3,enum=zitadel.user.v1.AuthFactorState" json:"state,omitempty"`
	Name  string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *WebAuthNToken) Reset() {
	*x = WebAuthNToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebAuthNToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebAuthNToken) ProtoMessage() {}

func (x *WebAuthNToken) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebAuthNToken.ProtoReflect.Descriptor instead.
func (*WebAuthNToken) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{28}
}

func (x *WebAuthNToken) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WebAuthNToken) GetState() AuthFactorState {
	if x != nil {
		return x.State
	}
	return AuthFactorState_AUTH_FACTOR_STATE_UNSPECIFIED
}

func (x *WebAuthNToken) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Membership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string                `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Details     *object.ObjectDetails `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	Roles       []string              `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	DisplayName string                `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Types that are assignable to Type:
	//
	//	*Membership_Iam
	//	*Membership_OrgId
	//	*Membership_ProjectId
	//	*Membership_ProjectGrantId
	Type isMembership_Type `protobuf_oneof:"type"`
}

func (x *Membership) Reset() {
	*x = Membership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Membership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Membership) ProtoMessage() {}

func (x *Membership) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Membership.ProtoReflect.Descriptor instead.
func (*Membership) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{29}
}

func (x *Membership) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Membership) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Membership) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Membership) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (m *Membership) GetType() isMembership_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Membership) GetIam() bool {
	if x, ok := x.GetType().(*Membership_Iam); ok {
		return x.Iam
	}
	return false
}

func (x *Membership) GetOrgId() string {
	if x, ok := x.GetType().(*Membership_OrgId); ok {
		return x.OrgId
	}
	return ""
}

func (x *Membership) GetProjectId() string {
	if x, ok := x.GetType().(*Membership_ProjectId); ok {
		return x.ProjectId
	}
	return ""
}

func (x *Membership) GetProjectGrantId() string {
	if x, ok := x.GetType().(*Membership_ProjectGrantId); ok {
		return x.ProjectGrantId
	}
	return ""
}

type isMembership_Type interface {
	isMembership_Type()
}

type Membership_Iam struct {
	Iam bool `protobuf:"varint,5,opt,name=iam,proto3,oneof"`
}

type Membership_OrgId struct {
	OrgId string `protobuf:"bytes,6,opt,name=org_id,json=orgId,proto3,oneof"`
}

type Membership_ProjectId struct {
	ProjectId string `protobuf:"bytes,7,opt,name=project_id,json=projectId,proto3,oneof"`
}

type Membership_ProjectGrantId struct {
	ProjectGrantId string `protobuf:"bytes,8,opt,name=project_grant_id,json=projectGrantId,proto3,oneof"`
}

func (*Membership_Iam) isMembership_Type() {}

func (*Membership_OrgId) isMembership_Type() {}

func (*Membership_ProjectId) isMembership_Type() {}

func (*Membership_ProjectGrantId) isMembership_Type() {}

type MembershipQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*MembershipQuery_OrgQuery
	//	*MembershipQuery_ProjectQuery
	//	*MembershipQuery_ProjectGrantQuery
	//	*MembershipQuery_IamQuery
	Query isMembershipQuery_Query `protobuf_oneof:"query"`
}

func (x *MembershipQuery) Reset() {
	*x = MembershipQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MembershipQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipQuery) ProtoMessage() {}

func (x *MembershipQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipQuery.ProtoReflect.Descriptor instead.
func (*MembershipQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{30}
}

func (m *MembershipQuery) GetQuery() isMembershipQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *MembershipQuery) GetOrgQuery() *MembershipOrgQuery {
	if x, ok := x.GetQuery().(*MembershipQuery_OrgQuery); ok {
		return x.OrgQuery
	}
	return nil
}

func (x *MembershipQuery) GetProjectQuery() *MembershipProjectQuery {
	if x, ok := x.GetQuery().(*MembershipQuery_ProjectQuery); ok {
		return x.ProjectQuery
	}
	return nil
}

func (x *MembershipQuery) GetProjectGrantQuery() *MembershipProjectGrantQuery {
	if x, ok := x.GetQuery().(*MembershipQuery_ProjectGrantQuery); ok {
		return x.ProjectGrantQuery
	}
	return nil
}

func (x *MembershipQuery) GetIamQuery() *MembershipIAMQuery {
	if x, ok := x.GetQuery().(*MembershipQuery_IamQuery); ok {
		return x.IamQuery
	}
	return nil
}

type isMembershipQuery_Query interface {
	isMembershipQuery_Query()
}

type MembershipQuery_OrgQuery struct {
	OrgQuery *MembershipOrgQuery `protobuf:"bytes,1,opt,name=org_query,json=orgQuery,proto3,oneof"`
}

type MembershipQuery_ProjectQuery struct {
	ProjectQuery *MembershipProjectQuery `protobuf:"bytes,2,opt,name=project_query,json=projectQuery,proto3,oneof"`
}

type MembershipQuery_ProjectGrantQuery struct {
	ProjectGrantQuery *MembershipProjectGrantQuery `protobuf:"bytes,3,opt,name=project_grant_query,json=projectGrantQuery,proto3,oneof"`
}

type MembershipQuery_IamQuery struct {
	IamQuery *MembershipIAMQuery `protobuf:"bytes,4,opt,name=iam_query,json=iamQuery,proto3,oneof"`
}

func (*MembershipQuery_OrgQuery) isMembershipQuery_Query() {}

func (*MembershipQuery_ProjectQuery) isMembershipQuery_Query() {}

func (*MembershipQuery_ProjectGrantQuery) isMembershipQuery_Query() {}

func (*MembershipQuery_IamQuery) isMembershipQuery_Query() {}

// this query always equals
type MembershipOrgQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *MembershipOrgQuery) Reset() {
	*x = MembershipOrgQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MembershipOrgQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipOrgQuery) ProtoMessage() {}

func (x *MembershipOrgQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipOrgQuery.ProtoReflect.Descriptor instead.
func (*MembershipOrgQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{31}
}

func (x *MembershipOrgQuery) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

// this query always equals
type MembershipProjectQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *MembershipProjectQuery) Reset() {
	*x = MembershipProjectQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MembershipProjectQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipProjectQuery) ProtoMessage() {}

func (x *MembershipProjectQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipProjectQuery.ProtoReflect.Descriptor instead.
func (*MembershipProjectQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{32}
}

func (x *MembershipProjectQuery) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// this query always equals
type MembershipProjectGrantQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectGrantId string `protobuf:"bytes,1,opt,name=project_grant_id,json=projectGrantId,proto3" json:"project_grant_id,omitempty"`
}

func (x *MembershipProjectGrantQuery) Reset() {
	*x = MembershipProjectGrantQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MembershipProjectGrantQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipProjectGrantQuery) ProtoMessage() {}

func (x *MembershipProjectGrantQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipProjectGrantQuery.ProtoReflect.Descriptor instead.
func (*MembershipProjectGrantQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{33}
}

func (x *MembershipProjectGrantQuery) GetProjectGrantId() string {
	if x != nil {
		return x.ProjectGrantId
	}
	return ""
}

// this query always equals
type MembershipIAMQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iam bool `protobuf:"varint,1,opt,name=iam,proto3" json:"iam,omitempty"`
}

func (x *MembershipIAMQuery) Reset() {
	*x = MembershipIAMQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MembershipIAMQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MembershipIAMQuery) ProtoMessage() {}

func (x *MembershipIAMQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MembershipIAMQuery.ProtoReflect.Descriptor instead.
func (*MembershipIAMQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{34}
}

func (x *MembershipIAMQuery) GetIam() bool {
	if x != nil {
		return x.Iam
	}
	return false
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   string                `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AgentId     string                `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	AuthState   SessionState          `protobuf:"varint,3,opt,name=auth_state,json=authState,proto3,enum=zitadel.user.v1.SessionState" json:"auth_state,omitempty"`
	UserId      string                `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName    string                `protobuf:"bytes,5,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	LoginName   string                `protobuf:"bytes,7,opt,name=login_name,json=loginName,proto3" json:"login_name,omitempty"`
	DisplayName string                `protobuf:"bytes,8,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Details     *object.ObjectDetails `protobuf:"bytes,9,opt,name=details,proto3" json:"details,omitempty"`
	AvatarUrl   string                `protobuf:"bytes,10,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{35}
}

func (x *Session) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Session) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *Session) GetAuthState() SessionState {
	if x != nil {
		return x.AuthState
	}
	return SessionState_SESSION_STATE_UNSPECIFIED
}

func (x *Session) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Session) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Session) GetLoginName() string {
	if x != nil {
		return x.LoginName
	}
	return ""
}

func (x *Session) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Session) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Session) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

type RefreshToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Details        *object.ObjectDetails  `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	ClientId       string                 `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	AuthTime       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=auth_time,json=authTime,proto3" json:"auth_time,omitempty"`
	IdleExpiration *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=idle_expiration,json=idleExpiration,proto3" json:"idle_expiration,omitempty"`
	Expiration     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Scopes         []string               `protobuf:"bytes,7,rep,name=scopes,proto3" json:"scopes,omitempty"`
	Audience       []string               `protobuf:"bytes,8,rep,name=audience,proto3" json:"audience,omitempty"`
}

func (x *RefreshToken) Reset() {
	*x = RefreshToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshToken) ProtoMessage() {}

func (x *RefreshToken) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshToken.ProtoReflect.Descriptor instead.
func (*RefreshToken) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{36}
}

func (x *RefreshToken) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RefreshToken) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *RefreshToken) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *RefreshToken) GetAuthTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AuthTime
	}
	return nil
}

func (x *RefreshToken) GetIdleExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.IdleExpiration
	}
	return nil
}

func (x *RefreshToken) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *RefreshToken) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *RefreshToken) GetAudience() []string {
	if x != nil {
		return x.Audience
	}
	return nil
}

type PersonalAccessToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Details        *object.ObjectDetails  `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	ExpirationDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	Scopes         []string               `protobuf:"bytes,4,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *PersonalAccessToken) Reset() {
	*x = PersonalAccessToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalAccessToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalAccessToken) ProtoMessage() {}

func (x *PersonalAccessToken) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalAccessToken.ProtoReflect.Descriptor instead.
func (*PersonalAccessToken) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{37}
}

func (x *PersonalAccessToken) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PersonalAccessToken) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *PersonalAccessToken) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *PersonalAccessToken) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type UserGrant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Details            *object.ObjectDetails `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	RoleKeys           []string              `protobuf:"bytes,3,rep,name=role_keys,json=roleKeys,proto3" json:"role_keys,omitempty"`
	State              UserGrantState        `protobuf:"varint,4,opt,name=state,proto3,enum=zitadel.user.v1.UserGrantState" json:"state,omitempty"`
	UserId             string                `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName           string                `protobuf:"bytes,6,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	FirstName          string                `protobuf:"bytes,7,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName           string                `protobuf:"bytes,8,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email              string                `protobuf:"bytes,9,opt,name=email,proto3" json:"email,omitempty"`
	DisplayName        string                `protobuf:"bytes,10,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	OrgId              string                `protobuf:"bytes,11,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	OrgName            string                `protobuf:"bytes,12,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	OrgDomain          string                `protobuf:"bytes,13,opt,name=org_domain,json=orgDomain,proto3" json:"org_domain,omitempty"`
	ProjectId          string                `protobuf:"bytes,14,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ProjectName        string                `protobuf:"bytes,15,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	ProjectGrantId     string                `protobuf:"bytes,16,opt,name=project_grant_id,json=projectGrantId,proto3" json:"project_grant_id,omitempty"`
	AvatarUrl          string                `protobuf:"bytes,17,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	PreferredLoginName string                `protobuf:"bytes,18,opt,name=preferred_login_name,json=preferredLoginName,proto3" json:"preferred_login_name,omitempty"`
	UserType           Type                  `protobuf:"varint,19,opt,name=user_type,json=userType,proto3,enum=zitadel.user.v1.Type" json:"user_type,omitempty"`
	GrantedOrgId       string                `protobuf:"bytes,20,opt,name=granted_org_id,json=grantedOrgId,proto3" json:"granted_org_id,omitempty"`
	GrantedOrgName     string                `protobuf:"bytes,21,opt,name=granted_org_name,json=grantedOrgName,proto3" json:"granted_org_name,omitempty"`
	GrantedOrgDomain   string                `protobuf:"bytes,22,opt,name=granted_org_domain,json=grantedOrgDomain,proto3" json:"granted_org_domain,omitempty"`
}

func (x *UserGrant) Reset() {
	*x = UserGrant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGrant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGrant) ProtoMessage() {}

func (x *UserGrant) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGrant.ProtoReflect.Descriptor instead.
func (*UserGrant) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{38}
}

func (x *UserGrant) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserGrant) GetDetails() *object.ObjectDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *UserGrant) GetRoleKeys() []string {
	if x != nil {
		return x.RoleKeys
	}
	return nil
}

func (x *UserGrant) GetState() UserGrantState {
	if x != nil {
		return x.State
	}
	return UserGrantState_USER_GRANT_STATE_UNSPECIFIED
}

func (x *UserGrant) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserGrant) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserGrant) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UserGrant) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UserGrant) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserGrant) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UserGrant) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *UserGrant) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *UserGrant) GetOrgDomain() string {
	if x != nil {
		return x.OrgDomain
	}
	return ""
}

func (x *UserGrant) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UserGrant) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *UserGrant) GetProjectGrantId() string {
	if x != nil {
		return x.ProjectGrantId
	}
	return ""
}

func (x *UserGrant) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *UserGrant) GetPreferredLoginName() string {
	if x != nil {
		return x.PreferredLoginName
	}
	return ""
}

func (x *UserGrant) GetUserType() Type {
	if x != nil {
		return x.UserType
	}
	return Type_TYPE_UNSPECIFIED
}

func (x *UserGrant) GetGrantedOrgId() string {
	if x != nil {
		return x.GrantedOrgId
	}
	return ""
}

func (x *UserGrant) GetGrantedOrgName() string {
	if x != nil {
		return x.GrantedOrgName
	}
	return ""
}

func (x *UserGrant) GetGrantedOrgDomain() string {
	if x != nil {
		return x.GrantedOrgDomain
	}
	return ""
}

type UserGrantQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//
	//	*UserGrantQuery_ProjectIdQuery
	//	*UserGrantQuery_UserIdQuery
	//	*UserGrantQuery_WithGrantedQuery
	//	*UserGrantQuery_RoleKeyQuery
	//	*UserGrantQuery_ProjectGrantIdQuery
	//	*UserGrantQuery_UserNameQuery
	//	*UserGrantQuery_FirstNameQuery
	//	*UserGrantQuery_LastNameQuery
	//	*UserGrantQuery_EmailQuery
	//	*UserGrantQuery_OrgNameQuery
	//	*UserGrantQuery_OrgDomainQuery
	//	*UserGrantQuery_ProjectNameQuery
	//	*UserGrantQuery_DisplayNameQuery
	//	*UserGrantQuery_UserTypeQuery
	Query isUserGrantQuery_Query `protobuf_oneof:"query"`
}

func (x *UserGrantQuery) Reset() {
	*x = UserGrantQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGrantQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGrantQuery) ProtoMessage() {}

func (x *UserGrantQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGrantQuery.ProtoReflect.Descriptor instead.
func (*UserGrantQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{39}
}

func (m *UserGrantQuery) GetQuery() isUserGrantQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *UserGrantQuery) GetProjectIdQuery() *UserGrantProjectIDQuery {
	if x, ok := x.GetQuery().(*UserGrantQuery_ProjectIdQuery); ok {
		return x.ProjectIdQuery
	}
	return nil
}

func (x *UserGrantQuery) GetUserIdQuery() *UserGrantUserIDQuery {
	if x, ok := x.GetQuery().(*UserGrantQuery_UserIdQuery); ok {
		return x.UserIdQuery
	}
	return nil
}

func (x *UserGrantQuery) GetWithGrantedQuery() *UserGrantWithGrantedQuery {
	if x, ok := x.GetQuery().(*UserGrantQuery_WithGrantedQuery); ok {
		return x.WithGrantedQuery
	}
	return nil
}

func (x *UserGrantQuery) GetRoleKeyQuery() *UserGrantRoleKeyQuery {
	if x, ok := x.GetQuery().(*UserGrantQuery_RoleKeyQuery); ok {
		return x.RoleKeyQuery
	}
	return nil
}

func (x *UserGrantQuery) GetProjectGrantIdQuery() *UserGrantProjectGrantIDQuery {
	if x, ok := x.GetQuery().(*UserGrantQuery_ProjectGrantIdQuery); ok {
		return x.ProjectGrantIdQuery
	}
	return nil
}

func (x *UserGrantQuery) GetUserNameQuery() *UserGrantUserNameQuery {
	if x, ok := x.GetQuery().(*UserGrantQuery_UserNameQuery); ok {
		return x.UserNameQuery
	}
	return nil
}

func (x *UserGrantQuery) GetFirstNameQuery() *UserGrantFirstNameQuery {
	if x, ok := x.GetQuery().(*UserGrantQuery_FirstNameQuery); ok {
		return x.FirstNameQuery
	}
	return nil
}

func (x *UserGrantQuery) GetLastNameQuery() *UserGrantLastNameQuery {
	if x, ok := x.GetQuery().(*UserGrantQuery_LastNameQuery); ok {
		return x.LastNameQuery
	}
	return nil
}

func (x *UserGrantQuery) GetEmailQuery() *UserGrantEmailQuery {
	if x, ok := x.GetQuery().(*UserGrantQuery_EmailQuery); ok {
		return x.EmailQuery
	}
	return nil
}

func (x *UserGrantQuery) GetOrgNameQuery() *UserGrantOrgNameQuery {
	if x, ok := x.GetQuery().(*UserGrantQuery_OrgNameQuery); ok {
		return x.OrgNameQuery
	}
	return nil
}

func (x *UserGrantQuery) GetOrgDomainQuery() *UserGrantOrgDomainQuery {
	if x, ok := x.GetQuery().(*UserGrantQuery_OrgDomainQuery); ok {
		return x.OrgDomainQuery
	}
	return nil
}

func (x *UserGrantQuery) GetProjectNameQuery() *UserGrantProjectNameQuery {
	if x, ok := x.GetQuery().(*UserGrantQuery_ProjectNameQuery); ok {
		return x.ProjectNameQuery
	}
	return nil
}

func (x *UserGrantQuery) GetDisplayNameQuery() *UserGrantDisplayNameQuery {
	if x, ok := x.GetQuery().(*UserGrantQuery_DisplayNameQuery); ok {
		return x.DisplayNameQuery
	}
	return nil
}

func (x *UserGrantQuery) GetUserTypeQuery() *UserGrantUserTypeQuery {
	if x, ok := x.GetQuery().(*UserGrantQuery_UserTypeQuery); ok {
		return x.UserTypeQuery
	}
	return nil
}

type isUserGrantQuery_Query interface {
	isUserGrantQuery_Query()
}

type UserGrantQuery_ProjectIdQuery struct {
	ProjectIdQuery *UserGrantProjectIDQuery `protobuf:"bytes,1,opt,name=project_id_query,json=projectIdQuery,proto3,oneof"`
}

type UserGrantQuery_UserIdQuery struct {
	UserIdQuery *UserGrantUserIDQuery `protobuf:"bytes,2,opt,name=user_id_query,json=userIdQuery,proto3,oneof"`
}

type UserGrantQuery_WithGrantedQuery struct {
	WithGrantedQuery *UserGrantWithGrantedQuery `protobuf:"bytes,3,opt,name=with_granted_query,json=withGrantedQuery,proto3,oneof"`
}

type UserGrantQuery_RoleKeyQuery struct {
	RoleKeyQuery *UserGrantRoleKeyQuery `protobuf:"bytes,4,opt,name=role_key_query,json=roleKeyQuery,proto3,oneof"`
}

type UserGrantQuery_ProjectGrantIdQuery struct {
	ProjectGrantIdQuery *UserGrantProjectGrantIDQuery `protobuf:"bytes,5,opt,name=project_grant_id_query,json=projectGrantIdQuery,proto3,oneof"`
}

type UserGrantQuery_UserNameQuery struct {
	UserNameQuery *UserGrantUserNameQuery `protobuf:"bytes,6,opt,name=user_name_query,json=userNameQuery,proto3,oneof"`
}

type UserGrantQuery_FirstNameQuery struct {
	FirstNameQuery *UserGrantFirstNameQuery `protobuf:"bytes,7,opt,name=first_name_query,json=firstNameQuery,proto3,oneof"`
}

type UserGrantQuery_LastNameQuery struct {
	LastNameQuery *UserGrantLastNameQuery `protobuf:"bytes,8,opt,name=last_name_query,json=lastNameQuery,proto3,oneof"`
}

type UserGrantQuery_EmailQuery struct {
	EmailQuery *UserGrantEmailQuery `protobuf:"bytes,9,opt,name=email_query,json=emailQuery,proto3,oneof"`
}

type UserGrantQuery_OrgNameQuery struct {
	OrgNameQuery *UserGrantOrgNameQuery `protobuf:"bytes,10,opt,name=org_name_query,json=orgNameQuery,proto3,oneof"`
}

type UserGrantQuery_OrgDomainQuery struct {
	OrgDomainQuery *UserGrantOrgDomainQuery `protobuf:"bytes,11,opt,name=org_domain_query,json=orgDomainQuery,proto3,oneof"`
}

type UserGrantQuery_ProjectNameQuery struct {
	ProjectNameQuery *UserGrantProjectNameQuery `protobuf:"bytes,12,opt,name=project_name_query,json=projectNameQuery,proto3,oneof"`
}

type UserGrantQuery_DisplayNameQuery struct {
	DisplayNameQuery *UserGrantDisplayNameQuery `protobuf:"bytes,13,opt,name=display_name_query,json=displayNameQuery,proto3,oneof"`
}

type UserGrantQuery_UserTypeQuery struct {
	UserTypeQuery *UserGrantUserTypeQuery `protobuf:"bytes,14,opt,name=user_type_query,json=userTypeQuery,proto3,oneof"`
}

func (*UserGrantQuery_ProjectIdQuery) isUserGrantQuery_Query() {}

func (*UserGrantQuery_UserIdQuery) isUserGrantQuery_Query() {}

func (*UserGrantQuery_WithGrantedQuery) isUserGrantQuery_Query() {}

func (*UserGrantQuery_RoleKeyQuery) isUserGrantQuery_Query() {}

func (*UserGrantQuery_ProjectGrantIdQuery) isUserGrantQuery_Query() {}

func (*UserGrantQuery_UserNameQuery) isUserGrantQuery_Query() {}

func (*UserGrantQuery_FirstNameQuery) isUserGrantQuery_Query() {}

func (*UserGrantQuery_LastNameQuery) isUserGrantQuery_Query() {}

func (*UserGrantQuery_EmailQuery) isUserGrantQuery_Query() {}

func (*UserGrantQuery_OrgNameQuery) isUserGrantQuery_Query() {}

func (*UserGrantQuery_OrgDomainQuery) isUserGrantQuery_Query() {}

func (*UserGrantQuery_ProjectNameQuery) isUserGrantQuery_Query() {}

func (*UserGrantQuery_DisplayNameQuery) isUserGrantQuery_Query() {}

func (*UserGrantQuery_UserTypeQuery) isUserGrantQuery_Query() {}

type UserGrantProjectIDQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *UserGrantProjectIDQuery) Reset() {
	*x = UserGrantProjectIDQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGrantProjectIDQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGrantProjectIDQuery) ProtoMessage() {}

func (x *UserGrantProjectIDQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGrantProjectIDQuery.ProtoReflect.Descriptor instead.
func (*UserGrantProjectIDQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{40}
}

func (x *UserGrantProjectIDQuery) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type UserGrantUserIDQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserGrantUserIDQuery) Reset() {
	*x = UserGrantUserIDQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGrantUserIDQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGrantUserIDQuery) ProtoMessage() {}

func (x *UserGrantUserIDQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGrantUserIDQuery.ProtoReflect.Descriptor instead.
func (*UserGrantUserIDQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{41}
}

func (x *UserGrantUserIDQuery) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserGrantWithGrantedQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithGranted bool `protobuf:"varint,1,opt,name=with_granted,json=withGranted,proto3" json:"with_granted,omitempty"`
}

func (x *UserGrantWithGrantedQuery) Reset() {
	*x = UserGrantWithGrantedQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGrantWithGrantedQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGrantWithGrantedQuery) ProtoMessage() {}

func (x *UserGrantWithGrantedQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGrantWithGrantedQuery.ProtoReflect.Descriptor instead.
func (*UserGrantWithGrantedQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{42}
}

func (x *UserGrantWithGrantedQuery) GetWithGranted() bool {
	if x != nil {
		return x.WithGranted
	}
	return false
}

type UserGrantRoleKeyQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleKey string                 `protobuf:"bytes,1,opt,name=role_key,json=roleKey,proto3" json:"role_key,omitempty"`
	Method  object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *UserGrantRoleKeyQuery) Reset() {
	*x = UserGrantRoleKeyQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGrantRoleKeyQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGrantRoleKeyQuery) ProtoMessage() {}

func (x *UserGrantRoleKeyQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGrantRoleKeyQuery.ProtoReflect.Descriptor instead.
func (*UserGrantRoleKeyQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{43}
}

func (x *UserGrantRoleKeyQuery) GetRoleKey() string {
	if x != nil {
		return x.RoleKey
	}
	return ""
}

func (x *UserGrantRoleKeyQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type UserGrantProjectGrantIDQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectGrantId string `protobuf:"bytes,1,opt,name=project_grant_id,json=projectGrantId,proto3" json:"project_grant_id,omitempty"`
}

func (x *UserGrantProjectGrantIDQuery) Reset() {
	*x = UserGrantProjectGrantIDQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGrantProjectGrantIDQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGrantProjectGrantIDQuery) ProtoMessage() {}

func (x *UserGrantProjectGrantIDQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGrantProjectGrantIDQuery.ProtoReflect.Descriptor instead.
func (*UserGrantProjectGrantIDQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{44}
}

func (x *UserGrantProjectGrantIDQuery) GetProjectGrantId() string {
	if x != nil {
		return x.ProjectGrantId
	}
	return ""
}

type UserGrantUserNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string                 `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Method   object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *UserGrantUserNameQuery) Reset() {
	*x = UserGrantUserNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGrantUserNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGrantUserNameQuery) ProtoMessage() {}

func (x *UserGrantUserNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGrantUserNameQuery.ProtoReflect.Descriptor instead.
func (*UserGrantUserNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{45}
}

func (x *UserGrantUserNameQuery) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserGrantUserNameQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type UserGrantFirstNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstName string                 `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	Method    object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *UserGrantFirstNameQuery) Reset() {
	*x = UserGrantFirstNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGrantFirstNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGrantFirstNameQuery) ProtoMessage() {}

func (x *UserGrantFirstNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGrantFirstNameQuery.ProtoReflect.Descriptor instead.
func (*UserGrantFirstNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{46}
}

func (x *UserGrantFirstNameQuery) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UserGrantFirstNameQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type UserGrantLastNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastName string                 `protobuf:"bytes,1,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Method   object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *UserGrantLastNameQuery) Reset() {
	*x = UserGrantLastNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGrantLastNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGrantLastNameQuery) ProtoMessage() {}

func (x *UserGrantLastNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGrantLastNameQuery.ProtoReflect.Descriptor instead.
func (*UserGrantLastNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{47}
}

func (x *UserGrantLastNameQuery) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UserGrantLastNameQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type UserGrantEmailQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email  string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Method object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *UserGrantEmailQuery) Reset() {
	*x = UserGrantEmailQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGrantEmailQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGrantEmailQuery) ProtoMessage() {}

func (x *UserGrantEmailQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGrantEmailQuery.ProtoReflect.Descriptor instead.
func (*UserGrantEmailQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{48}
}

func (x *UserGrantEmailQuery) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserGrantEmailQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type UserGrantOrgNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgName string                 `protobuf:"bytes,1,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	Method  object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *UserGrantOrgNameQuery) Reset() {
	*x = UserGrantOrgNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGrantOrgNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGrantOrgNameQuery) ProtoMessage() {}

func (x *UserGrantOrgNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGrantOrgNameQuery.ProtoReflect.Descriptor instead.
func (*UserGrantOrgNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{49}
}

func (x *UserGrantOrgNameQuery) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *UserGrantOrgNameQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type UserGrantOrgDomainQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgDomain string                 `protobuf:"bytes,1,opt,name=org_domain,json=orgDomain,proto3" json:"org_domain,omitempty"`
	Method    object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *UserGrantOrgDomainQuery) Reset() {
	*x = UserGrantOrgDomainQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGrantOrgDomainQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGrantOrgDomainQuery) ProtoMessage() {}

func (x *UserGrantOrgDomainQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGrantOrgDomainQuery.ProtoReflect.Descriptor instead.
func (*UserGrantOrgDomainQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{50}
}

func (x *UserGrantOrgDomainQuery) GetOrgDomain() string {
	if x != nil {
		return x.OrgDomain
	}
	return ""
}

func (x *UserGrantOrgDomainQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type UserGrantProjectNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName string                 `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	Method      object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *UserGrantProjectNameQuery) Reset() {
	*x = UserGrantProjectNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGrantProjectNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGrantProjectNameQuery) ProtoMessage() {}

func (x *UserGrantProjectNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGrantProjectNameQuery.ProtoReflect.Descriptor instead.
func (*UserGrantProjectNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{51}
}

func (x *UserGrantProjectNameQuery) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *UserGrantProjectNameQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type UserGrantDisplayNameQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string                 `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Method      object.TextQueryMethod `protobuf:"varint,2,opt,name=method,proto3,enum=zitadel.v1.TextQueryMethod" json:"method,omitempty"`
}

func (x *UserGrantDisplayNameQuery) Reset() {
	*x = UserGrantDisplayNameQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGrantDisplayNameQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGrantDisplayNameQuery) ProtoMessage() {}

func (x *UserGrantDisplayNameQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGrantDisplayNameQuery.ProtoReflect.Descriptor instead.
func (*UserGrantDisplayNameQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{52}
}

func (x *UserGrantDisplayNameQuery) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UserGrantDisplayNameQuery) GetMethod() object.TextQueryMethod {
	if x != nil {
		return x.Method
	}
	return object.TextQueryMethod(0)
}

type UserGrantUserTypeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Type `protobuf:"varint,1,opt,name=type,proto3,enum=zitadel.user.v1.Type" json:"type,omitempty"`
}

func (x *UserGrantUserTypeQuery) Reset() {
	*x = UserGrantUserTypeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_user_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGrantUserTypeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGrantUserTypeQuery) ProtoMessage() {}

func (x *UserGrantUserTypeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_user_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGrantUserTypeQuery.ProtoReflect.Descriptor instead.
func (*UserGrantUserTypeQuery) Descriptor() ([]byte, []int) {
	return file_zitadel_user_proto_rawDescGZIP(), []int{53}
}

func (x *UserGrantUserTypeQuery) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_TYPE_UNSPECIFIED
}

var File_zitadel_user_proto protoreflect.FileDescriptor

var file_zitadel_user_proto_rawDesc = []byte{
	0x0a, 0x12, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x04, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a,
	0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38,
	0x33, 0x33, 0x34, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x50, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x30, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x4a, 0x0e, 0x22, 0x67, 0x69, 0x67, 0x69, 0x2d, 0x67,
	0x69, 0x72, 0x61, 0x66, 0x66, 0x65, 0x22, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x55, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x4a, 0x2f, 0x5b, 0x22, 0x67,
	0x69, 0x67, 0x69, 0x40, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22,
	0x2c, 0x20, 0x22, 0x67, 0x69, 0x67, 0x69, 0x40, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x22, 0x5d, 0x52, 0x0a, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x4a, 0x12, 0x22, 0x67, 0x69,
	0x67, 0x69, 0x40, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x52,
	0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x05, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32,
	0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x20, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x5b, 0x0a, 0x07, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x6f, 0x6e, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20, 0x68, 0x75, 0x6d, 0x61,
	0x6e, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xde, 0x01, 0x0a, 0x05, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x22, 0x8c, 0x02, 0x0a, 0x07, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x4a,
	0x09, 0x22, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x4a, 0x16, 0x22, 0x54, 0x68, 0x65,
	0x20, 0x6f, 0x6e, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x49, 0x41,
	0x4d, 0x22, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x4a, 0x06, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22,
	0x52, 0x09, 0x68, 0x61, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x72, 0x0a, 0x11, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1f, 0x54,
	0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x0f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xe0, 0x04, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0x92, 0x41, 0x08, 0x4a, 0x06, 0x22, 0x47, 0x69, 0x67, 0x69, 0x22, 0x52, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x4a,
	0x09, 0x22, 0x47, 0x69, 0x72, 0x61, 0x66, 0x66, 0x65, 0x22, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x4a, 0x0e, 0x22, 0x67,
	0x69, 0x67, 0x69, 0x2d, 0x67, 0x69, 0x72, 0x61, 0x66, 0x66, 0x65, 0x22, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6f, 0x92,
	0x41, 0x6c, 0x32, 0x5a, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x73,
	0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20,
	0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x20, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x73, 0x20, 0x22, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4a, 0x0e,
	0x22, 0x47, 0x69, 0x67, 0x69, 0x20, 0x47, 0x69, 0x72, 0x61, 0x66, 0x66, 0x65, 0x22, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x71, 0x0a, 0x12, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x32, 0x37, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x74, 0x61, 0x67, 0x20, 0x61, 0x6e, 0x61, 0x6c, 0x6f,
	0x67, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e,
	0x69, 0x65, 0x74, 0x66, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x2f, 0x72, 0x66,
	0x63, 0x33, 0x30, 0x36, 0x36, 0x4a, 0x04, 0x22, 0x65, 0x6e, 0x22, 0x52, 0x11, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x4d,
	0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0x74, 0x68,
	0x65, 0x20, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x68, 0x75, 0x6d, 0x61, 0x6e, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x73, 0x0a,
	0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x54, 0x92, 0x41, 0x51, 0x32, 0x16, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x20, 0x55,
	0x52, 0x4c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x37,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2d, 0x33, 0x32, 0x34, 0x33, 0x32, 0x6a, 0x6b,
	0x68, 0x34, 0x6b, 0x6a, 0x33, 0x32, 0x22, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55,
	0x72, 0x6c, 0x22, 0x92, 0x02, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x83, 0x01, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6d, 0x92, 0x41,
	0x6a, 0x32, 0x54, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x20, 0x28, 0x73,
	0x70, 0x65, 0x63, 0x3a, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x2e, 0x69, 0x65, 0x74, 0x66, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x68, 0x74, 0x6d, 0x6c,
	0x2f, 0x72, 0x66, 0x63, 0x32, 0x38, 0x32, 0x32, 0x23, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x33, 0x2e, 0x34, 0x2e, 0x31, 0x29, 0x4a, 0x12, 0x22, 0x67, 0x69, 0x67, 0x69, 0x40, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x56,
	0x92, 0x41, 0x53, 0x32, 0x51, 0x49, 0x73, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x69,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x69, 0x73, 0x20, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x20, 0x5a,
	0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x52, 0x0f, 0x69, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x9f, 0x02, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x90, 0x01, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x7a, 0x92, 0x41, 0x77, 0x32, 0x61, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x20, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x20, 0x28, 0x75, 0x73, 0x65, 0x20, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x20, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x20, 0x6f, 0x66, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x2e, 0x69, 0x65, 0x74, 0x66, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x68, 0x74, 0x6d, 0x6c,
	0x2f, 0x72, 0x66, 0x63, 0x33, 0x39, 0x36, 0x36, 0x29, 0x4a, 0x12, 0x22, 0x2b, 0x34, 0x31, 0x20,
	0x37, 0x31, 0x20, 0x30, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x22, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x56, 0x92, 0x41, 0x53, 0x32, 0x51, 0x49, 0x73, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x69,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x72,
	0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x69, 0x73,
	0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x20, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,
	0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x52, 0x0f, 0x69, 0x73, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0xf2, 0x07, 0x0a, 0x0b, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x0f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x48, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x0f, 0x6e, 0x69,
	0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x51, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x4b, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e,
	0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x35,
	0x0a, 0x08, 0x6f, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x72,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x64, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x38, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x08, 0x6e, 0x6f, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x14, 0x69, 0x6e, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x11, 0x69,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x0c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x5f,
	0x0a, 0x07, 0x4f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x07, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x74,
	0x6f, 0x20, 0x27, 0x4f, 0x52, 0x27, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x61, 0x0a, 0x08, 0x41, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x07, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32,
	0x18, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x27, 0x41, 0x4e, 0x44, 0x27, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x22, 0x62, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x56,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x22, 0x92, 0x41, 0x1f,
	0x32, 0x1d, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20,
	0x74, 0x6f, 0x20, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x20, 0x28, 0x4e, 0x4f, 0x54, 0x29, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x7b, 0x0a, 0x0d, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x6a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x4f, 0x92, 0x41, 0x4c, 0x32, 0x1f,
	0x74, 0x68, 0x65, 0x20, 0x69, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4a,
	0x29, 0x5b, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38,
	0x38, 0x33, 0x33, 0x34, 0x22, 0x2c, 0x22, 0x36, 0x39, 0x36, 0x32, 0x32, 0x33, 0x36, 0x36, 0x30,
	0x31, 0x32, 0x33, 0x35, 0x35, 0x36, 0x36, 0x32, 0x22, 0x5d, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x71, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x50,
	0x92, 0x41, 0x4d, 0x32, 0x22, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4a, 0x27, 0x5b, 0x22, 0x74, 0x65, 0x73, 0x74, 0x40,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x2c, 0x22, 0x74, 0x65,
	0x73, 0x74, 0x40, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x22, 0x5d,
	0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xba, 0x01, 0x0a,
	0x0d, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1e, 0x92, 0x41, 0x13, 0x4a, 0x0e, 0x22, 0x67, 0x69, 0x67, 0x69, 0x2d, 0x67, 0x69,
	0x72, 0x61, 0x66, 0x66, 0x65, 0x22, 0x78, 0xc8, 0x01, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8,
	0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x65, 0x78,
	0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x0e, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0x92, 0x41, 0x0b, 0x4a, 0x06, 0x22, 0x47, 0x69, 0x67, 0x69, 0x22, 0x78, 0xc8, 0x01,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x42, 0x37, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77,
	0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65,
	0x64, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x22, 0xb5, 0x01, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x0e, 0x4a, 0x09, 0x22, 0x47, 0x69,
	0x72, 0x61, 0x66, 0x66, 0x65, 0x22, 0x78, 0xc8, 0x01, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8,
	0x01, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x65, 0x78,
	0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x0d, 0x4e, 0x69,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x09, 0x6e,
	0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42,
	0x37, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68,
	0x69, 0x63, 0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x22, 0xc3, 0x01, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x13,
	0x4a, 0x0e, 0x22, 0x47, 0x69, 0x67, 0x69, 0x20, 0x47, 0x69, 0x72, 0x61, 0x66, 0x66, 0x65, 0x22,
	0x78, 0xc8, 0x01, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x65,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69,
	0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xde, 0x01, 0x0a, 0x0a, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x62, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x92, 0x41,
	0x32, 0x32, 0x19, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x12, 0x22, 0x67,
	0x69, 0x67, 0x69, 0x40, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22,
	0x78, 0xc8, 0x01, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0c, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x6c, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20,
	0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20,
	0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x0a, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24,
	0x92, 0x41, 0x19, 0x4a, 0x14, 0x22, 0x67, 0x69, 0x67, 0x69, 0x40, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x22, 0x78, 0xc8, 0x01, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x6c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92, 0x41,
	0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
	0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x66, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x58, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x26, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x59, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x21, 0x92, 0x41, 0x16, 0x32, 0x14, 0x74, 0x68,
	0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x9d, 0x04, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x5d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x25, 0x92, 0x41, 0x22, 0x32, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68,
	0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x62,
	0x0a, 0x03, 0x6f, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x54, 0x50, 0x42, 0x2e, 0x92, 0x41, 0x2b,
	0x32, 0x29, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20, 0x4f,
	0x54, 0x50, 0x2c, 0x20, 0x4f, 0x54, 0x50, 0x53, 0x4d, 0x53, 0x2c, 0x20, 0x4f, 0x54, 0x50, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x55, 0x32, 0x46, 0x48, 0x00, 0x52, 0x03, 0x6f,
	0x74, 0x70, 0x12, 0x62, 0x0a, 0x03, 0x75, 0x32, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x32, 0x46, 0x42,
	0x2e, 0x92, 0x41, 0x2b, 0x32, 0x29, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x20, 0x4f, 0x54, 0x50, 0x2c, 0x20, 0x4f, 0x54, 0x50, 0x53, 0x4d, 0x53, 0x2c, 0x20,
	0x4f, 0x54, 0x50, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x55, 0x32, 0x46, 0x48,
	0x00, 0x52, 0x03, 0x75, 0x32, 0x66, 0x12, 0x6c, 0x0a, 0x07, 0x6f, 0x74, 0x70, 0x5f, 0x73, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x4f, 0x54, 0x50, 0x53, 0x4d, 0x53, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32,
	0x29, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20, 0x4f, 0x54,
	0x50, 0x2c, 0x20, 0x4f, 0x54, 0x50, 0x53, 0x4d, 0x53, 0x2c, 0x20, 0x4f, 0x54, 0x50, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x55, 0x32, 0x46, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x74,
	0x70, 0x53, 0x6d, 0x73, 0x12, 0x72, 0x0a, 0x09, 0x6f, 0x74, 0x70, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x4f, 0x54, 0x50, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x2e, 0x92, 0x41,
	0x2b, 0x32, 0x29, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20,
	0x4f, 0x54, 0x50, 0x2c, 0x20, 0x4f, 0x54, 0x50, 0x53, 0x4d, 0x53, 0x2c, 0x20, 0x4f, 0x54, 0x50,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x55, 0x32, 0x46, 0x48, 0x00, 0x52, 0x08,
	0x6f, 0x74, 0x70, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x0f, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x54,
	0x50, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4f,
	0x54, 0x50, 0x53, 0x4d, 0x53, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x4f, 0x54, 0x50, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x5e, 0x0a, 0x0d, 0x41,
	0x75, 0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x32, 0x46, 0x12, 0x28, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22,
	0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33,
	0x34, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x4a, 0x0a, 0x22, 0x66, 0x69, 0x64, 0x6f,
	0x20, 0x6b, 0x65, 0x79, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9d, 0x08, 0x0a, 0x0b,
	0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x4e, 0x4b, 0x65, 0x79, 0x12, 0x8d, 0x08, 0x0a, 0x0a,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0xed, 0x07, 0x92, 0x41, 0xe9, 0x07, 0x32, 0x59, 0x6a, 0x73, 0x6f, 0x6e, 0x20, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x20, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4a, 0x8b, 0x07, 0x22, 0x65, 0x79, 0x4a, 0x77, 0x64, 0x57, 0x4a, 0x73, 0x61, 0x57,
	0x4e, 0x4c, 0x5a, 0x58, 0x6b, 0x69, 0x4f, 0x6e, 0x73, 0x69, 0x59, 0x32, 0x68, 0x68, 0x62, 0x47,
	0x78, 0x6c, 0x62, 0x6d, 0x64, 0x6c, 0x49, 0x6f, 0x70, 0x6c, 0x66, 0x5a, 0x6d, 0x34, 0x76, 0x4d,
	0x32, 0x31, 0x71, 0x53, 0x7a, 0x42, 0x50, 0x64, 0x6a, 0x6c, 0x74, 0x4e, 0x32, 0x78, 0x36, 0x56,
	0x57, 0x68, 0x6e, 0x63, 0x6c, 0x59, 0x79, 0x65, 0x6a, 0x46, 0x4a, 0x53, 0x6c, 0x56, 0x7a, 0x5a,
	0x6e, 0x70, 0x4c, 0x64, 0x30, 0x5a, 0x31, 0x54, 0x79, 0x74, 0x57, 0x54, 0x57, 0x74, 0x7a, 0x52,
	0x57, 0x31, 0x49, 0x63, 0x7a, 0x30, 0x69, 0x4c, 0x43, 0x4a, 0x79, 0x63, 0x43, 0x49, 0x36, 0x65,
	0x79, 0x4a, 0x75, 0x59, 0x57, 0x31, 0x6c, 0x49, 0x6a, 0x6f, 0x69, 0x57, 0x6b, 0x6c, 0x55, 0x51,
	0x55, 0x52, 0x46, 0x54, 0x43, 0x49, 0x73, 0x49, 0x6d, 0x6c, 0x6b, 0x49, 0x6a, 0x6f, 0x69, 0x59,
	0x57, 0x4e, 0x74, 0x5a, 0x53, 0x31, 0x6e, 0x65, 0x6d, 0x39, 0x6c, 0x4e, 0x48, 0x67, 0x75, 0x65,
	0x6d, 0x6c, 0x30, 0x59, 0x57, 0x52, 0x6c, 0x62, 0x43, 0x35, 0x6a, 0x62, 0x47, 0x39, 0x31, 0x5a,
	0x43, 0x4a, 0x39, 0x4c, 0x43, 0x4a, 0x31, 0x63, 0x32, 0x56, 0x79, 0x49, 0x6a, 0x70, 0x37, 0x49,
	0x6d, 0x35, 0x68, 0x62, 0x57, 0x55, 0x69, 0x4f, 0x69, 0x4a, 0x30, 0x5a, 0x58, 0x4e, 0x30, 0x64,
	0x58, 0x4e, 0x6c, 0x63, 0x6a, 0x55, 0x31, 0x51, 0x47, 0x46, 0x6a, 0x62, 0x57, 0x55, 0x75, 0x65,
	0x6d, 0x6c, 0x30, 0x59, 0x57, 0x52, 0x6c, 0x62, 0x43, 0x35, 0x6a, 0x62, 0x47, 0x39, 0x31, 0x5a,
	0x43, 0x49, 0x73, 0x49, 0x6d, 0x52, 0x70, 0x63, 0x33, 0x42, 0x73, 0x59, 0x58, 0x6c, 0x4f, 0x59,
	0x57, 0x31, 0x6c, 0x49, 0x6a, 0x6f, 0x69, 0x56, 0x47, 0x56, 0x7a, 0x64, 0x43, 0x42, 0x55, 0x5a,
	0x58, 0x4e, 0x30, 0x49, 0x69, 0x77, 0x69, 0x61, 0x57, 0x51, 0x69, 0x4f, 0x69, 0x4a, 0x4e, 0x56,
	0x47, 0x64, 0x35, 0x54, 0x56, 0x52, 0x56, 0x4d, 0x6b, 0x31, 0x71, 0x57, 0x54, 0x42, 0x4e, 0x61,
	0x6b, 0x6b, 0x31, 0x54, 0x58, 0x70, 0x42, 0x4d, 0x6b, 0x35, 0x71, 0x53, 0x54, 0x45, 0x69, 0x66,
	0x53, 0x77, 0x69, 0x63, 0x48, 0x56, 0x69, 0x53, 0x32, 0x56, 0x35, 0x51, 0x33, 0x4a, 0x6c, 0x5a,
	0x46, 0x42, 0x68, 0x63, 0x6d, 0x46, 0x74, 0x63, 0x79, 0x49, 0x36, 0x57, 0x33, 0x73, 0x69, 0x64,
	0x48, 0x6c, 0x77, 0x5a, 0x53, 0x49, 0x36, 0x49, 0x6e, 0x42, 0x31, 0x59, 0x6d, 0x78, 0x70, 0x59,
	0x79, 0x31, 0x72, 0x5a, 0x58, 0x6b, 0x69, 0x4c, 0x43, 0x4a, 0x68, 0x62, 0x47, 0x63, 0x69, 0x4f,
	0x69, 0x30, 0x33, 0x66, 0x53, 0x78, 0x37, 0x49, 0x6e, 0x52, 0x35, 0x63, 0x47, 0x55, 0x69, 0x4f,
	0x69, 0x4a, 0x77, 0x64, 0x57, 0x4a, 0x73, 0x61, 0x57, 0x4d, 0x74, 0x61, 0x32, 0x56, 0x35, 0x49,
	0x69, 0x77, 0x69, 0x59, 0x57, 0x78, 0x6e, 0x49, 0x6a, 0x6f, 0x74, 0x4d, 0x7a, 0x56, 0x39, 0x4c,
	0x48, 0x73, 0x69, 0x64, 0x48, 0x6c, 0x77, 0x5a, 0x53, 0x49, 0x36, 0x49, 0x6e, 0x42, 0x31, 0x59,
	0x6d, 0x78, 0x70, 0x59, 0x79, 0x31, 0x72, 0x5a, 0x58, 0x6b, 0x69, 0x4c, 0x43, 0x4a, 0x68, 0x62,
	0x47, 0x63, 0x69, 0x4f, 0x69, 0x30, 0x7a, 0x4e, 0x6e, 0x30, 0x73, 0x65, 0x79, 0x4a, 0x30, 0x65,
	0x58, 0x42, 0x6c, 0x49, 0x6a, 0x6f, 0x69, 0x63, 0x48, 0x56, 0x69, 0x62, 0x47, 0x6c, 0x6a, 0x4c,
	0x57, 0x74, 0x6c, 0x65, 0x53, 0x49, 0x73, 0x49, 0x6d, 0x46, 0x73, 0x5a, 0x79, 0x49, 0x36, 0x4c,
	0x54, 0x49, 0x31, 0x4e, 0x33, 0x30, 0x73, 0x65, 0x79, 0x4a, 0x30, 0x65, 0x58, 0x42, 0x6c, 0x49,
	0x6a, 0x6f, 0x69, 0x63, 0x48, 0x56, 0x69, 0x62, 0x47, 0x6c, 0x6a, 0x4c, 0x57, 0x74, 0x6c, 0x65,
	0x53, 0x49, 0x73, 0x49, 0x6d, 0x46, 0x73, 0x5a, 0x79, 0x49, 0x36, 0x4c, 0x54, 0x49, 0x31, 0x4f,
	0x48, 0x30, 0x73, 0x65, 0x79, 0x4a, 0x30, 0x65, 0x58, 0x42, 0x6c, 0x49, 0x6a, 0x6f, 0x69, 0x63,
	0x48, 0x56, 0x69, 0x62, 0x47, 0x6c, 0x6a, 0x4c, 0x57, 0x74, 0x6c, 0x65, 0x53, 0x49, 0x73, 0x49,
	0x6d, 0x46, 0x73, 0x5a, 0x79, 0x49, 0x36, 0x4c, 0x54, 0x49, 0x31, 0x4f, 0x58, 0x30, 0x73, 0x65,
	0x79, 0x4a, 0x30, 0x65, 0x58, 0x42, 0x6c, 0x49, 0x6a, 0x6f, 0x69, 0x63, 0x48, 0x56, 0x69, 0x62,
	0x47, 0x6c, 0x6a, 0x4c, 0x57, 0x74, 0x6c, 0x65, 0x53, 0x49, 0x73, 0x49, 0x6d, 0x46, 0x73, 0x5a,
	0x79, 0x49, 0x36, 0x4c, 0x54, 0x4d, 0x33, 0x66, 0x53, 0x78, 0x37, 0x49, 0x6e, 0x52, 0x35, 0x63,
	0x47, 0x55, 0x69, 0x4f, 0x69, 0x4a, 0x77, 0x64, 0x57, 0x4a, 0x73, 0x61, 0x57, 0x4d, 0x74, 0x61,
	0x32, 0x56, 0x35, 0x49, 0x69, 0x77, 0x69, 0x59, 0x57, 0x78, 0x6e, 0x49, 0x6a, 0x6f, 0x74, 0x4d,
	0x7a, 0x68, 0x39, 0x4c, 0x48, 0x73, 0x69, 0x64, 0x48, 0x6c, 0x77, 0x5a, 0x53, 0x49, 0x36, 0x49,
	0x6e, 0x42, 0x31, 0x59, 0x6d, 0x78, 0x70, 0x59, 0x79, 0x31, 0x72, 0x5a, 0x58, 0x6b, 0x69, 0x4c,
	0x43, 0x4a, 0x68, 0x62, 0x47, 0x63, 0x69, 0x4f, 0x69, 0x30, 0x7a, 0x4f, 0x58, 0x30, 0x73, 0x65,
	0x79, 0x4a, 0x30, 0x65, 0x58, 0x42, 0x6c, 0x49, 0x6a, 0x6f, 0x69, 0x63, 0x48, 0x56, 0x69, 0x62,
	0x47, 0x6c, 0x6a, 0x4c, 0x57, 0x74, 0x6c, 0x65, 0x53, 0x49, 0x73, 0x49, 0x6d, 0x46, 0x73, 0x5a,
	0x79, 0x49, 0x36, 0x4c, 0x54, 0x68, 0x39, 0x58, 0x53, 0x77, 0x69, 0x59, 0x58, 0x56, 0x30, 0x61,
	0x47, 0x56, 0x75, 0x64, 0x47, 0x6c, 0x6a, 0x59, 0x58, 0x52, 0x76, 0x63, 0x6c, 0x4e, 0x6c, 0x62,
	0x47, 0x56, 0x6a, 0x64, 0x47, 0x6c, 0x76, 0x62, 0x69, 0x49, 0x36, 0x65, 0x79, 0x4a, 0x31, 0x63,
	0x32, 0x56, 0x79, 0x56, 0x6d, 0x56, 0x79, 0x61, 0x57, 0x5a, 0x70, 0x59, 0x32, 0x46, 0x30, 0x61,
	0x57, 0x39, 0x75, 0x49, 0x6a, 0x6f, 0x69, 0x5a, 0x47, 0x6c, 0x7a, 0x59, 0x32, 0x39, 0x31, 0x63,
	0x6d, 0x46, 0x6e, 0x5a, 0x57, 0x51, 0x69, 0x66, 0x6e, 0x32, 0x69, 0x6c, 0x47, 0x6c, 0x74, 0x5a,
	0x57, 0x39, 0x31, 0x64, 0x43, 0x49, 0x36, 0x4e, 0x6a, 0x41, 0x77, 0x4d, 0x44, 0x41, 0x73, 0x49,
	0x6d, 0x46, 0x30, 0x64, 0x47, 0x56, 0x7a, 0x64, 0x47, 0x46, 0x30, 0x61, 0x57, 0x39, 0x75, 0x49,
	0x6a, 0x6f, 0x69, 0x62, 0x6d, 0x39, 0x75, 0x5a, 0x53, 0x4a, 0x39, 0x66, 0x51, 0x3d, 0x3d, 0x22,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0xea, 0x01, 0x0a, 0x14,
	0x57, 0x65, 0x62, 0x41, 0x75, 0x74, 0x68, 0x4e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x91, 0x01, 0x0a, 0x15, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x5d, 0x92, 0x41, 0x53, 0x32, 0x4a, 0x4a, 0x53, 0x4f, 0x4e, 0x20,
	0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x66, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x20, 0x62,
	0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x65, 0x62, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x20, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x78, 0x80, 0x80, 0x40, 0x80, 0x01, 0x37, 0xfa, 0x42, 0x04, 0x7a,
	0x02, 0x10, 0x37, 0x52, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41,
	0x12, 0x4a, 0x0a, 0x22, 0x66, 0x69, 0x64, 0x6f, 0x20, 0x6b, 0x65, 0x79, 0x22, 0x78, 0xc8, 0x01,
	0x80, 0x01, 0x01, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x0d, 0x57, 0x65, 0x62,
	0x41, 0x75, 0x74, 0x68, 0x4e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39,
	0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12,
	0x4a, 0x0a, 0x22, 0x66, 0x69, 0x64, 0x6f, 0x20, 0x6b, 0x65, 0x79, 0x22, 0x78, 0xc8, 0x01, 0x80,
	0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfa, 0x04, 0x0a, 0x0a, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x31, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22,
	0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33,
	0x34, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x28, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x12,
	0x92, 0x41, 0x0f, 0x4a, 0x0d, 0x5b, 0x22, 0x49, 0x41, 0x4d, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52,
	0x22, 0x5d, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2d, 0x92, 0x41, 0x2a, 0x32, 0x18, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x0e,
	0x22, 0x47, 0x69, 0x67, 0x69, 0x20, 0x47, 0x69, 0x72, 0x61, 0x66, 0x66, 0x65, 0x22, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x03, 0x69,
	0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0x6f,
	0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20, 0x69,
	0x61, 0x6d, 0x2c, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x64, 0x2c, 0x20, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x48, 0x00, 0x52, 0x03, 0x69, 0x61,
	0x6d, 0x12, 0x59, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x79, 0x70, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20, 0x69, 0x61, 0x6d, 0x2c, 0x20, 0x6f, 0x72, 0x67,
	0x20, 0x69, 0x64, 0x2c, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x64, 0x20,
	0x6f, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x20, 0x69, 0x64, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x79,
	0x70, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20, 0x69, 0x61, 0x6d, 0x2c, 0x20, 0x6f, 0x72, 0x67, 0x20,
	0x69, 0x64, 0x2c, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x64, 0x20, 0x6f,
	0x72, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x20,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x6c, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x32, 0x3b,
	0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20,
	0x69, 0x61, 0x6d, 0x2c, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x69, 0x64, 0x2c, 0x20, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd7, 0x02, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x09, 0x6f, 0x72, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4f, 0x72, 0x67, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x72, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4e, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x5e, 0x0a,
	0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x42, 0x0a,
	0x09, 0x69, 0x61, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x41, 0x4d,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x69, 0x61, 0x6d, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x42, 0x0c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22,
	0x4d, 0x0a, 0x12, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4f, 0x72, 0x67,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36,
	0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x59,
	0x0a, 0x16, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41,
	0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34,
	0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x1b, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30,
	0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0xc8, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x26, 0x0a, 0x12, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x49, 0x41, 0x4d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x61,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x69, 0x61, 0x6d, 0x22, 0xf5, 0x04, 0x0a,
	0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41,
	0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34,
	0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39,
	0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x07, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22,
	0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33,
	0x34, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92,
	0x41, 0x10, 0x4a, 0x0e, 0x22, 0x67, 0x69, 0x67, 0x69, 0x2d, 0x67, 0x69, 0x72, 0x61, 0x66, 0x66,
	0x65, 0x22, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x17, 0x92, 0x41, 0x14, 0x4a, 0x12, 0x22, 0x67, 0x69, 0x67, 0x69, 0x40, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32,
	0x1c, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x0e, 0x22,
	0x47, 0x69, 0x67, 0x69, 0x20, 0x47, 0x69, 0x72, 0x61, 0x66, 0x66, 0x65, 0x22, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x73, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x54, 0x92, 0x41, 0x51, 0x32, 0x16, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x20, 0x55, 0x52, 0x4c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x4a, 0x37, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x68, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2d, 0x33, 0x32, 0x34, 0x33, 0x32,
	0x6a, 0x6b, 0x68, 0x34, 0x6b, 0x6a, 0x33, 0x32, 0x22, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x55, 0x72, 0x6c, 0x22, 0x82, 0x09, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32,
	0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x72, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x55, 0x92, 0x41, 0x52, 0x32, 0x33, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x32, 0x2f, 0x6f, 0x69, 0x64, 0x63, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x1b, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34,
	0x38, 0x38, 0x33, 0x33, 0x34, 0x40, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x22, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0xb8, 0x01, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x7f, 0x92, 0x41, 0x7c, 0x32, 0x5b, 0x22,
	0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x2c, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20,
	0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x77, 0x61,
	0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x4a, 0x1d, 0x22, 0x32, 0x30, 0x32,
	0x33, 0x2d, 0x30, 0x32, 0x2d, 0x31, 0x33, 0x54, 0x30, 0x38, 0x3a, 0x34, 0x35, 0x3a, 0x30, 0x30,
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x0f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x7a, 0x92, 0x41, 0x77, 0x32, 0x56,
	0x22, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x20, 0x69, 0x66, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x75, 0x73, 0x65, 0x64, 0x2c,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x68,
	0x61, 0x76, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x4a, 0x1d, 0x22, 0x32, 0x30, 0x32, 0x33, 0x2d, 0x30, 0x32,
	0x2d, 0x31, 0x34, 0x54, 0x30, 0x38, 0x3a, 0x34, 0x35, 0x3a, 0x30, 0x30, 0x2e, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x0e, 0x69, 0x64, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xaa, 0x01, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x6e, 0x92, 0x41, 0x6b, 0x32, 0x4a, 0x22, 0x74, 0x69,
	0x6d, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x20, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20,
	0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x4a, 0x1d, 0x22, 0x32, 0x30, 0x32, 0x33, 0x2d, 0x30,
	0x32, 0x2d, 0x31, 0x34, 0x54, 0x30, 0x38, 0x3a, 0x34, 0x35, 0x3a, 0x30, 0x30, 0x2e, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0xbf, 0x01, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x42, 0xa6, 0x01, 0x92, 0x41, 0xa2, 0x01, 0x32, 0x71, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x20, 0x61, 0x75, 0x74, 0x68, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2c, 0x20,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x20, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x63, 0x61, 0x6e, 0x20,
	0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x4a, 0x2d, 0x5b,
	0x22, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0x2c, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22,
	0x2c, 0x22, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x2c, 0x22, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x5d, 0x52, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x12, 0xb2, 0x01, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x95, 0x01, 0x92, 0x41, 0x91, 0x01, 0x32, 0x5b,
	0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x61, 0x75, 0x74, 0x68, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x20, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4a, 0x32, 0x5b, 0x22, 0x36,
	0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34,
	0x40, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x22, 0x2c, 0x20, 0x22, 0x36, 0x39, 0x36, 0x32,
	0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x31, 0x32, 0x35, 0x36, 0x22, 0x5d, 0x52,
	0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x13, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92,
	0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36,
	0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x87, 0x01, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x32, 0x1e, 0x74, 0x68, 0x65,
	0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20,
	0x77, 0x69, 0x6c, 0x6c, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4a, 0x1d, 0x22, 0x33, 0x30,
	0x31, 0x39, 0x2d, 0x30, 0x34, 0x2d, 0x30, 0x31, 0x54, 0x30, 0x38, 0x3a, 0x34, 0x35, 0x3a, 0x30,
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32,
	0x1b, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4a, 0x0a, 0x5b, 0x22,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0x5d, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x22, 0xaf, 0x0b, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a,
	0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38,
	0x33, 0x33, 0x34, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x34, 0x0a,
	0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x17, 0x92, 0x41, 0x14, 0x4a, 0x12, 0x5b, 0x22, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x22, 0x5d, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x55, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38,
	0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0x92, 0x41, 0x10, 0x4a, 0x0e, 0x22, 0x67, 0x69, 0x67, 0x69, 0x2d, 0x67, 0x69, 0x72,
	0x61, 0x66, 0x66, 0x65, 0x22, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x4a, 0x06, 0x22, 0x47, 0x69, 0x67, 0x69, 0x22,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e,
	0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x47, 0x69, 0x72, 0x61, 0x66, 0x66, 0x65, 0x22, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x74, 0x92, 0x41, 0x6a, 0x32, 0x54, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x20, 0x28, 0x73, 0x70, 0x65, 0x63, 0x3a,
	0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69,
	0x65, 0x74, 0x66, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x2f, 0x72, 0x66, 0x63,
	0x32, 0x38, 0x32, 0x32, 0x23, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x33, 0x2e, 0x34,
	0x2e, 0x31, 0x29, 0x4a, 0x12, 0x22, 0x67, 0x69, 0x67, 0x69, 0x40, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60, 0x01, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x58, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x2a,
	0x32, 0x18, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x0e, 0x22, 0x47, 0x69, 0x67,
	0x69, 0x20, 0x47, 0x69, 0x72, 0x61, 0x66, 0x66, 0x65, 0x22, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0xc8, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39,
	0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45,
	0x4c, 0x22, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x6f,
	0x72, 0x67, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0x92, 0x41, 0x11, 0x4a, 0x0f, 0x22, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x22, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32,
	0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0e, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x22, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39,
	0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x6a, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0x92, 0x41, 0x48, 0x32, 0x16, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x20, 0x55, 0x52, 0x4c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x4a, 0x2e, 0x22, 0x7b, 0x79, 0x6f, 0x75, 0x72, 0x2d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x7d, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x2d, 0x33, 0x32, 0x34, 0x33, 0x32, 0x6a, 0x6b, 0x68, 0x34, 0x6b, 0x6a, 0x33, 0x32,
	0x22, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x49, 0x0a, 0x14,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x14, 0x4a,
	0x12, 0x22, 0x67, 0x69, 0x67, 0x69, 0x40, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63,
	0x6f, 0x6d, 0x22, 0x52, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x28, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x20,
	0x2f, 0x20, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x29, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41,
	0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34,
	0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e,
	0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x22, 0x52, 0x0e,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42,
	0x0a, 0x12, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x4a,
	0x0f, 0x22, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x22,
	0x52, 0x10, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x22, 0xc9, 0x09, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x0e, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x64, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x54, 0x0a,
	0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x4e, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x54, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x5a, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x10, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x51, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x0c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x5a,
	0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92,
	0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36,
	0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x14, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x39, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32, 0x39,
	0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33, 0x33, 0x34, 0x22, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3e, 0x0a,
	0x19, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x22, 0xbf, 0x01,
	0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x12, 0x4a, 0x10,
	0x22, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x22,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x6c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37,
	0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69,
	0x63, 0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22,
	0x6a, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x4a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x15, 0x4a, 0x13,
	0x22, 0x36, 0x39, 0x36, 0x32, 0x39, 0x30, 0x32, 0x33, 0x39, 0x30, 0x36, 0x34, 0x38, 0x38, 0x33,
	0x33, 0x34, 0x22, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x16,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x10, 0x4a, 0x0e,
	0x22, 0x67, 0x69, 0x67, 0x69, 0x2d, 0x67, 0x69, 0x72, 0x61, 0x66, 0x66, 0x65, 0x22, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x6c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92,
	0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63,
	0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xbb,
	0x01, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x0a, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0x92, 0x41, 0x08, 0x4a, 0x06, 0x22, 0x47, 0x69, 0x67, 0x69, 0x22, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xc8, 0x01, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6c,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92, 0x41, 0x2c,
	0x32, 0x2a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20,
	0x74, 0x65, 0x78, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05, 0x82,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xbb, 0x01, 0x0a,
	0x16, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x0b, 0x4a,
	0x09, 0x22, 0x47, 0x69, 0x72, 0x61, 0x66, 0x66, 0x65, 0x22, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0xc8, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92, 0x41, 0x2c, 0x32, 0x2a,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x65,
	0x78, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x13, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0x92, 0x41, 0x14, 0x4a, 0x12, 0x22, 0x67, 0x69, 0x67, 0x69, 0x40, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0xc8, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x6c, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20,
	0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20,
	0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x2d, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x12, 0x92, 0x41, 0x07, 0x4a, 0x05, 0x22, 0x63, 0x61, 0x6f, 0x22, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x6c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92,
	0x41, 0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63,
	0x68, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xbc,
	0x01, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x6f, 0x72,
	0x67, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0x92, 0x41, 0x09, 0x4a, 0x07, 0x22, 0x4f, 0x53, 0x20, 0x41, 0x47, 0x22, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0xc8, 0x01, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x6c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x37, 0x92, 0x41,
	0x2c, 0x32, 0x2a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
	0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0xfa, 0x42, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x99, 0x01,
	0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0x92, 0x41, 0x09, 0x4a, 0x07, 0x22, 0x49, 0x54, 0x41, 0x44, 0x45, 0x22, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x42, 0x0e, 0x92, 0x41, 0x03, 0x4a, 0x01, 0x33, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x19, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92,
	0x41, 0x28, 0x32, 0x16, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x4a, 0x0e, 0x22, 0x47, 0x69, 0x67,
	0x69, 0x20, 0x47, 0x69, 0x72, 0x61, 0x66, 0x66, 0x65, 0x22, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x67, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x42, 0x32, 0x92, 0x41, 0x27, 0x32, 0x25, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x22, 0x64, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x1f, 0x92, 0x41, 0x1c, 0x32, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x4a, 0x0c, 0x22, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x55, 0x4d, 0x41, 0x4e, 0x22,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0xb6, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55,
	0x53, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x06, 0x2a,
	0x58, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x45, 0x4e,
	0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x4d, 0x41,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d,
	0x41, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f,
	0x44, 0x49, 0x56, 0x45, 0x52, 0x53, 0x45, 0x10, 0x03, 0x2a, 0x4a, 0x0a, 0x0f, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x45, 0x41, 0x52, 0x45, 0x52, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4a, 0x57, 0x54, 0x10, 0x01, 0x2a, 0x3e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x55, 0x4d, 0x41,
	0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x48,
	0x49, 0x4e, 0x45, 0x10, 0x02, 0x2a, 0xc2, 0x02, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x49, 0x43, 0x4b, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x18, 0x0a,
	0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x09, 0x2a, 0x91, 0x01, 0x0a, 0x0f, 0x41,
	0x75, 0x74, 0x68, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x1d, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x65,
	0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x6e, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x61,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47,
	0x52, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x02, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_user_proto_rawDescOnce sync.Once
	file_zitadel_user_proto_rawDescData = file_zitadel_user_proto_rawDesc
)

func file_zitadel_user_proto_rawDescGZIP() []byte {
	file_zitadel_user_proto_rawDescOnce.Do(func() {
		file_zitadel_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_user_proto_rawDescData)
	})
	return file_zitadel_user_proto_rawDescData
}

var file_zitadel_user_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_zitadel_user_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_zitadel_user_proto_goTypes = []interface{}{
	(UserState)(0),                       // 0: zitadel.user.v1.UserState
	(Gender)(0),                          // 1: zitadel.user.v1.Gender
	(AccessTokenType)(0),                 // 2: zitadel.user.v1.AccessTokenType
	(Type)(0),                            // 3: zitadel.user.v1.Type
	(UserFieldName)(0),                   // 4: zitadel.user.v1.UserFieldName
	(AuthFactorState)(0),                 // 5: zitadel.user.v1.AuthFactorState
	(SessionState)(0),                    // 6: zitadel.user.v1.SessionState
	(UserGrantState)(0),                  // 7: zitadel.user.v1.UserGrantState
	(*User)(nil),                         // 8: zitadel.user.v1.User
	(*Human)(nil),                        // 9: zitadel.user.v1.Human
	(*Machine)(nil),                      // 10: zitadel.user.v1.Machine
	(*Profile)(nil),                      // 11: zitadel.user.v1.Profile
	(*Email)(nil),                        // 12: zitadel.user.v1.Email
	(*Phone)(nil),                        // 13: zitadel.user.v1.Phone
	(*SearchQuery)(nil),                  // 14: zitadel.user.v1.SearchQuery
	(*OrQuery)(nil),                      // 15: zitadel.user.v1.OrQuery
	(*AndQuery)(nil),                     // 16: zitadel.user.v1.AndQuery
	(*NotQuery)(nil),                     // 17: zitadel.user.v1.NotQuery
	(*InUserIDQuery)(nil),                // 18: zitadel.user.v1.InUserIDQuery
	(*InUserEmailsQuery)(nil),            // 19: zitadel.user.v1.InUserEmailsQuery
	(*UserNameQuery)(nil),                // 20: zitadel.user.v1.UserNameQuery
	(*FirstNameQuery)(nil),               // 21: zitadel.user.v1.FirstNameQuery
	(*LastNameQuery)(nil),                // 22: zitadel.user.v1.LastNameQuery
	(*NickNameQuery)(nil),                // 23: zitadel.user.v1.NickNameQuery
	(*DisplayNameQuery)(nil),             // 24: zitadel.user.v1.DisplayNameQuery
	(*EmailQuery)(nil),                   // 25: zitadel.user.v1.EmailQuery
	(*LoginNameQuery)(nil),               // 26: zitadel.user.v1.LoginNameQuery
	(*StateQuery)(nil),                   // 27: zitadel.user.v1.StateQuery
	(*TypeQuery)(nil),                    // 28: zitadel.user.v1.TypeQuery
	(*AuthFactor)(nil),                   // 29: zitadel.user.v1.AuthFactor
	(*AuthFactorOTP)(nil),                // 30: zitadel.user.v1.AuthFactorOTP
	(*AuthFactorOTPSMS)(nil),             // 31: zitadel.user.v1.AuthFactorOTPSMS
	(*AuthFactorOTPEmail)(nil),           // 32: zitadel.user.v1.AuthFactorOTPEmail
	(*AuthFactorU2F)(nil),                // 33: zitadel.user.v1.AuthFactorU2F
	(*WebAuthNKey)(nil),                  // 34: zitadel.user.v1.WebAuthNKey
	(*WebAuthNVerification)(nil),         // 35: zitadel.user.v1.WebAuthNVerification
	(*WebAuthNToken)(nil),                // 36: zitadel.user.v1.WebAuthNToken
	(*Membership)(nil),                   // 37: zitadel.user.v1.Membership
	(*MembershipQuery)(nil),              // 38: zitadel.user.v1.MembershipQuery
	(*MembershipOrgQuery)(nil),           // 39: zitadel.user.v1.MembershipOrgQuery
	(*MembershipProjectQuery)(nil),       // 40: zitadel.user.v1.MembershipProjectQuery
	(*MembershipProjectGrantQuery)(nil),  // 41: zitadel.user.v1.MembershipProjectGrantQuery
	(*MembershipIAMQuery)(nil),           // 42: zitadel.user.v1.MembershipIAMQuery
	(*Session)(nil),                      // 43: zitadel.user.v1.Session
	(*RefreshToken)(nil),                 // 44: zitadel.user.v1.RefreshToken
	(*PersonalAccessToken)(nil),          // 45: zitadel.user.v1.PersonalAccessToken
	(*UserGrant)(nil),                    // 46: zitadel.user.v1.UserGrant
	(*UserGrantQuery)(nil),               // 47: zitadel.user.v1.UserGrantQuery
	(*UserGrantProjectIDQuery)(nil),      // 48: zitadel.user.v1.UserGrantProjectIDQuery
	(*UserGrantUserIDQuery)(nil),         // 49: zitadel.user.v1.UserGrantUserIDQuery
	(*UserGrantWithGrantedQuery)(nil),    // 50: zitadel.user.v1.UserGrantWithGrantedQuery
	(*UserGrantRoleKeyQuery)(nil),        // 51: zitadel.user.v1.UserGrantRoleKeyQuery
	(*UserGrantProjectGrantIDQuery)(nil), // 52: zitadel.user.v1.UserGrantProjectGrantIDQuery
	(*UserGrantUserNameQuery)(nil),       // 53: zitadel.user.v1.UserGrantUserNameQuery
	(*UserGrantFirstNameQuery)(nil),      // 54: zitadel.user.v1.UserGrantFirstNameQuery
	(*UserGrantLastNameQuery)(nil),       // 55: zitadel.user.v1.UserGrantLastNameQuery
	(*UserGrantEmailQuery)(nil),          // 56: zitadel.user.v1.UserGrantEmailQuery
	(*UserGrantOrgNameQuery)(nil),        // 57: zitadel.user.v1.UserGrantOrgNameQuery
	(*UserGrantOrgDomainQuery)(nil),      // 58: zitadel.user.v1.UserGrantOrgDomainQuery
	(*UserGrantProjectNameQuery)(nil),    // 59: zitadel.user.v1.UserGrantProjectNameQuery
	(*UserGrantDisplayNameQuery)(nil),    // 60: zitadel.user.v1.UserGrantDisplayNameQuery
	(*UserGrantUserTypeQuery)(nil),       // 61: zitadel.user.v1.UserGrantUserTypeQuery
	(*object.ObjectDetails)(nil),         // 62: zitadel.v1.ObjectDetails
	(*timestamppb.Timestamp)(nil),        // 63: google.protobuf.Timestamp
	(object.TextQueryMethod)(0),          // 64: zitadel.v1.TextQueryMethod
}
var file_zitadel_user_proto_depIdxs = []int32{
	62, // 0: zitadel.user.v1.User.details:type_name -> zitadel.v1.ObjectDetails
	0,  // 1: zitadel.user.v1.User.state:type_name -> zitadel.user.v1.UserState
	9,  // 2: zitadel.user.v1.User.human:type_name -> zitadel.user.v1.Human
	10, // 3: zitadel.user.v1.User.machine:type_name -> zitadel.user.v1.Machine
	11, // 4: zitadel.user.v1.Human.profile:type_name -> zitadel.user.v1.Profile
	12, // 5: zitadel.user.v1.Human.email:type_name -> zitadel.user.v1.Email
	13, // 6: zitadel.user.v1.Human.phone:type_name -> zitadel.user.v1.Phone
	63, // 7: zitadel.user.v1.Human.password_changed:type_name -> google.protobuf.Timestamp
	2,  // 8: zitadel.user.v1.Machine.access_token_type:type_name -> zitadel.user.v1.AccessTokenType
	1,  // 9: zitadel.user.v1.Profile.gender:type_name -> zitadel.user.v1.Gender
	20, // 10: zitadel.user.v1.SearchQuery.user_name_query:type_name -> zitadel.user.v1.UserNameQuery
	21, // 11: zitadel.user.v1.SearchQuery.first_name_query:type_name -> zitadel.user.v1.FirstNameQuery
	22, // 12: zitadel.user.v1.SearchQuery.last_name_query:type_name -> zitadel.user.v1.LastNameQuery
	23, // 13: zitadel.user.v1.SearchQuery.nick_name_query:type_name -> zitadel.user.v1.NickNameQuery
	24, // 14: zitadel.user.v1.SearchQuery.display_name_query:type_name -> zitadel.user.v1.DisplayNameQuery
	25, // 15: zitadel.user.v1.SearchQuery.email_query:type_name -> zitadel.user.v1.EmailQuery
	27, // 16: zitadel.user.v1.SearchQuery.state_query:type_name -> zitadel.user.v1.StateQuery
	28, // 17: zitadel.user.v1.SearchQuery.type_query:type_name -> zitadel.user.v1.TypeQuery
	26, // 18: zitadel.user.v1.SearchQuery.login_name_query:type_name -> zitadel.user.v1.LoginNameQuery
	18, // 19: zitadel.user.v1.SearchQuery.in_user_ids_query:type_name -> zitadel.user.v1.InUserIDQuery
	15, // 20: zitadel.user.v1.SearchQuery.or_query:type_name -> zitadel.user.v1.OrQuery
	16, // 21: zitadel.user.v1.SearchQuery.and_query:type_name -> zitadel.user.v1.AndQuery
	17, // 22: zitadel.user.v1.SearchQuery.not_query:type_name -> zitadel.user.v1.NotQuery
	19, // 23: zitadel.user.v1.SearchQuery.in_user_emails_query:type_name -> zitadel.user.v1.InUserEmailsQuery
	14, // 24: zitadel.user.v1.OrQuery.queries:type_name -> zitadel.user.v1.SearchQuery
	14, // 25: zitadel.user.v1.AndQuery.queries:type_name -> zitadel.user.v1.SearchQuery
	14, // 26: zitadel.user.v1.NotQuery.query:type_name -> zitadel.user.v1.SearchQuery
	64, // 27: zitadel.user.v1.UserNameQuery.method:type_name -> zitadel.v1.TextQueryMethod
	64, // 28: zitadel.user.v1.FirstNameQuery.method:type_name -> zitadel.v1.TextQueryMethod
	64, // 29: zitadel.user.v1.LastNameQuery.method:type_name -> zitadel.v1.TextQueryMethod
	64, // 30: zitadel.user.v1.NickNameQuery.method:type_name -> zitadel.v1.TextQueryMethod
	64, // 31: zitadel.user.v1.DisplayNameQuery.method:type_name -> zitadel.v1.TextQueryMethod
	64, // 32: zitadel.user.v1.EmailQuery.method:type_name -> zitadel.v1.TextQueryMethod
	64, // 33: zitadel.user.v1.LoginNameQuery.method:type_name -> zitadel.v1.TextQueryMethod
	0,  // 34: zitadel.user.v1.StateQuery.state:type_name -> zitadel.user.v1.UserState
	3,  // 35: zitadel.user.v1.TypeQuery.type:type_name -> zitadel.user.v1.Type
	5,  // 36: zitadel.user.v1.AuthFactor.state:type_name -> zitadel.user.v1.AuthFactorState
	30, // 37: zitadel.user.v1.AuthFactor.otp:type_name -> zitadel.user.v1.AuthFactorOTP
	33, // 38: zitadel.user.v1.AuthFactor.u2f:type_name -> zitadel.user.v1.AuthFactorU2F
	31, // 39: zitadel.user.v1.AuthFactor.otp_sms:type_name -> zitadel.user.v1.AuthFactorOTPSMS
	32, // 40: zitadel.user.v1.AuthFactor.otp_email:type_name -> zitadel.user.v1.AuthFactorOTPEmail
	5,  // 41: zitadel.user.v1.WebAuthNToken.state:type_name -> zitadel.user.v1.AuthFactorState
	62, // 42: zitadel.user.v1.Membership.details:type_name -> zitadel.v1.ObjectDetails
	39, // 43: zitadel.user.v1.MembershipQuery.org_query:type_name -> zitadel.user.v1.MembershipOrgQuery
	40, // 44: zitadel.user.v1.MembershipQuery.project_query:type_name -> zitadel.user.v1.MembershipProjectQuery
	41, // 45: zitadel.user.v1.MembershipQuery.project_grant_query:type_name -> zitadel.user.v1.MembershipProjectGrantQuery
	42, // 46: zitadel.user.v1.MembershipQuery.iam_query:type_name -> zitadel.user.v1.MembershipIAMQuery
	6,  // 47: zitadel.user.v1.Session.auth_state:type_name -> zitadel.user.v1.SessionState
	62, // 48: zitadel.user.v1.Session.details:type_name -> zitadel.v1.ObjectDetails
	62, // 49: zitadel.user.v1.RefreshToken.details:type_name -> zitadel.v1.ObjectDetails
	63, // 50: zitadel.user.v1.RefreshToken.auth_time:type_name -> google.protobuf.Timestamp
	63, // 51: zitadel.user.v1.RefreshToken.idle_expiration:type_name -> google.protobuf.Timestamp
	63, // 52: zitadel.user.v1.RefreshToken.expiration:type_name -> google.protobuf.Timestamp
	62, // 53: zitadel.user.v1.PersonalAccessToken.details:type_name -> zitadel.v1.ObjectDetails
	63, // 54: zitadel.user.v1.PersonalAccessToken.expiration_date:type_name -> google.protobuf.Timestamp
	62, // 55: zitadel.user.v1.UserGrant.details:type_name -> zitadel.v1.ObjectDetails
	7,  // 56: zitadel.user.v1.UserGrant.state:type_name -> zitadel.user.v1.UserGrantState
	3,  // 57: zitadel.user.v1.UserGrant.user_type:type_name -> zitadel.user.v1.Type
	48, // 58: zitadel.user.v1.UserGrantQuery.project_id_query:type_name -> zitadel.user.v1.UserGrantProjectIDQuery
	49, // 59: zitadel.user.v1.UserGrantQuery.user_id_query:type_name -> zitadel.user.v1.UserGrantUserIDQuery
	50, // 60: zitadel.user.v1.UserGrantQuery.with_granted_query:type_name -> zitadel.user.v1.UserGrantWithGrantedQuery
	51, // 61: zitadel.user.v1.UserGrantQuery.role_key_query:type_name -> zitadel.user.v1.UserGrantRoleKeyQuery
	52, // 62: zitadel.user.v1.UserGrantQuery.project_grant_id_query:type_name -> zitadel.user.v1.UserGrantProjectGrantIDQuery
	53, // 63: zitadel.user.v1.UserGrantQuery.user_name_query:type_name -> zitadel.user.v1.UserGrantUserNameQuery
	54, // 64: zitadel.user.v1.UserGrantQuery.first_name_query:type_name -> zitadel.user.v1.UserGrantFirstNameQuery
	55, // 65: zitadel.user.v1.UserGrantQuery.last_name_query:type_name -> zitadel.user.v1.UserGrantLastNameQuery
	56, // 66: zitadel.user.v1.UserGrantQuery.email_query:type_name -> zitadel.user.v1.UserGrantEmailQuery
	57, // 67: zitadel.user.v1.UserGrantQuery.org_name_query:type_name -> zitadel.user.v1.UserGrantOrgNameQuery
	58, // 68: zitadel.user.v1.UserGrantQuery.org_domain_query:type_name -> zitadel.user.v1.UserGrantOrgDomainQuery
	59, // 69: zitadel.user.v1.UserGrantQuery.project_name_query:type_name -> zitadel.user.v1.UserGrantProjectNameQuery
	60, // 70: zitadel.user.v1.UserGrantQuery.display_name_query:type_name -> zitadel.user.v1.UserGrantDisplayNameQuery
	61, // 71: zitadel.user.v1.UserGrantQuery.user_type_query:type_name -> zitadel.user.v1.UserGrantUserTypeQuery
	64, // 72: zitadel.user.v1.UserGrantRoleKeyQuery.method:type_name -> zitadel.v1.TextQueryMethod
	64, // 73: zitadel.user.v1.UserGrantUserNameQuery.method:type_name -> zitadel.v1.TextQueryMethod
	64, // 74: zitadel.user.v1.UserGrantFirstNameQuery.method:type_name -> zitadel.v1.TextQueryMethod
	64, // 75: zitadel.user.v1.UserGrantLastNameQuery.method:type_name -> zitadel.v1.TextQueryMethod
	64, // 76: zitadel.user.v1.UserGrantEmailQuery.method:type_name -> zitadel.v1.TextQueryMethod
	64, // 77: zitadel.user.v1.UserGrantOrgNameQuery.method:type_name -> zitadel.v1.TextQueryMethod
	64, // 78: zitadel.user.v1.UserGrantOrgDomainQuery.method:type_name -> zitadel.v1.TextQueryMethod
	64, // 79: zitadel.user.v1.UserGrantProjectNameQuery.method:type_name -> zitadel.v1.TextQueryMethod
	64, // 80: zitadel.user.v1.UserGrantDisplayNameQuery.method:type_name -> zitadel.v1.TextQueryMethod
	3,  // 81: zitadel.user.v1.UserGrantUserTypeQuery.type:type_name -> zitadel.user.v1.Type
	82, // [82:82] is the sub-list for method output_type
	82, // [82:82] is the sub-list for method input_type
	82, // [82:82] is the sub-list for extension type_name
	82, // [82:82] is the sub-list for extension extendee
	0,  // [0:82] is the sub-list for field type_name
}

func init() { file_zitadel_user_proto_init() }
func file_zitadel_user_proto_init() {
	if File_zitadel_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zitadel_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Human); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Machine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Phone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InUserIDQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InUserEmailsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NickNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthFactorOTP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthFactorOTPSMS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthFactorOTPEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthFactorU2F); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebAuthNKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebAuthNVerification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebAuthNToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Membership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MembershipQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MembershipOrgQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MembershipProjectQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MembershipProjectGrantQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MembershipIAMQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonalAccessToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGrant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGrantQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGrantProjectIDQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGrantUserIDQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGrantWithGrantedQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGrantRoleKeyQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGrantProjectGrantIDQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGrantUserNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGrantFirstNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGrantLastNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGrantEmailQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGrantOrgNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGrantOrgDomainQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGrantProjectNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGrantDisplayNameQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_user_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGrantUserTypeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_user_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*User_Human)(nil),
		(*User_Machine)(nil),
	}
	file_zitadel_user_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*SearchQuery_UserNameQuery)(nil),
		(*SearchQuery_FirstNameQuery)(nil),
		(*SearchQuery_LastNameQuery)(nil),
		(*SearchQuery_NickNameQuery)(nil),
		(*SearchQuery_DisplayNameQuery)(nil),
		(*SearchQuery_EmailQuery)(nil),
		(*SearchQuery_StateQuery)(nil),
		(*SearchQuery_TypeQuery)(nil),
		(*SearchQuery_LoginNameQuery)(nil),
		(*SearchQuery_InUserIdsQuery)(nil),
		(*SearchQuery_OrQuery)(nil),
		(*SearchQuery_AndQuery)(nil),
		(*SearchQuery_NotQuery)(nil),
		(*SearchQuery_InUserEmailsQuery)(nil),
	}
	file_zitadel_user_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*AuthFactor_Otp)(nil),
		(*AuthFactor_U2F)(nil),
		(*AuthFactor_OtpSms)(nil),
		(*AuthFactor_OtpEmail)(nil),
	}
	file_zitadel_user_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*Membership_Iam)(nil),
		(*Membership_OrgId)(nil),
		(*Membership_ProjectId)(nil),
		(*Membership_ProjectGrantId)(nil),
	}
	file_zitadel_user_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*MembershipQuery_OrgQuery)(nil),
		(*MembershipQuery_ProjectQuery)(nil),
		(*MembershipQuery_ProjectGrantQuery)(nil),
		(*MembershipQuery_IamQuery)(nil),
	}
	file_zitadel_user_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*UserGrantQuery_ProjectIdQuery)(nil),
		(*UserGrantQuery_UserIdQuery)(nil),
		(*UserGrantQuery_WithGrantedQuery)(nil),
		(*UserGrantQuery_RoleKeyQuery)(nil),
		(*UserGrantQuery_ProjectGrantIdQuery)(nil),
		(*UserGrantQuery_UserNameQuery)(nil),
		(*UserGrantQuery_FirstNameQuery)(nil),
		(*UserGrantQuery_LastNameQuery)(nil),
		(*UserGrantQuery_EmailQuery)(nil),
		(*UserGrantQuery_OrgNameQuery)(nil),
		(*UserGrantQuery_OrgDomainQuery)(nil),
		(*UserGrantQuery_ProjectNameQuery)(nil),
		(*UserGrantQuery_DisplayNameQuery)(nil),
		(*UserGrantQuery_UserTypeQuery)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_user_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_user_proto_goTypes,
		DependencyIndexes: file_zitadel_user_proto_depIdxs,
		EnumInfos:         file_zitadel_user_proto_enumTypes,
		MessageInfos:      file_zitadel_user_proto_msgTypes,
	}.Build()
	File_zitadel_user_proto = out.File
	file_zitadel_user_proto_rawDesc = nil
	file_zitadel_user_proto_goTypes = nil
	file_zitadel_user_proto_depIdxs = nil
}
