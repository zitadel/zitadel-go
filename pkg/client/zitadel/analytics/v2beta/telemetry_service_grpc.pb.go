// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: zitadel/analytics/v2beta/telemetry_service.proto

package analytics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TelemetryService_ReportBaseInformation_FullMethodName = "/zitadel.analytics.v2beta.TelemetryService/ReportBaseInformation"
	TelemetryService_ReportResourceCounts_FullMethodName  = "/zitadel.analytics.v2beta.TelemetryService/ReportResourceCounts"
)

// TelemetryServiceClient is the client API for TelemetryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemetryServiceClient interface {
	// ReportBaseInformation is used to report the base information of the ZITADEL system,
	// including the version, instances, their creation date and domains.
	// The response contains a report ID to link it to the resource counts or other reports.
	// The report ID is only valid for the same system ID.
	ReportBaseInformation(ctx context.Context, in *ReportBaseInformationRequest, opts ...grpc.CallOption) (*ReportBaseInformationResponse, error)
	// ReportResourceCounts is used to report the resource counts such as amount of organizations
	// or users per organization and much more.
	// Since the resource counts can be reported in multiple batches,
	// the response contains a report ID to continue reporting.
	// The report ID is only valid for the same system ID.
	ReportResourceCounts(ctx context.Context, in *ReportResourceCountsRequest, opts ...grpc.CallOption) (*ReportResourceCountsResponse, error)
}

type telemetryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryServiceClient(cc grpc.ClientConnInterface) TelemetryServiceClient {
	return &telemetryServiceClient{cc}
}

func (c *telemetryServiceClient) ReportBaseInformation(ctx context.Context, in *ReportBaseInformationRequest, opts ...grpc.CallOption) (*ReportBaseInformationResponse, error) {
	out := new(ReportBaseInformationResponse)
	err := c.cc.Invoke(ctx, TelemetryService_ReportBaseInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) ReportResourceCounts(ctx context.Context, in *ReportResourceCountsRequest, opts ...grpc.CallOption) (*ReportResourceCountsResponse, error) {
	out := new(ReportResourceCountsResponse)
	err := c.cc.Invoke(ctx, TelemetryService_ReportResourceCounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemetryServiceServer is the server API for TelemetryService service.
// All implementations must embed UnimplementedTelemetryServiceServer
// for forward compatibility
type TelemetryServiceServer interface {
	// ReportBaseInformation is used to report the base information of the ZITADEL system,
	// including the version, instances, their creation date and domains.
	// The response contains a report ID to link it to the resource counts or other reports.
	// The report ID is only valid for the same system ID.
	ReportBaseInformation(context.Context, *ReportBaseInformationRequest) (*ReportBaseInformationResponse, error)
	// ReportResourceCounts is used to report the resource counts such as amount of organizations
	// or users per organization and much more.
	// Since the resource counts can be reported in multiple batches,
	// the response contains a report ID to continue reporting.
	// The report ID is only valid for the same system ID.
	ReportResourceCounts(context.Context, *ReportResourceCountsRequest) (*ReportResourceCountsResponse, error)
	mustEmbedUnimplementedTelemetryServiceServer()
}

// UnimplementedTelemetryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTelemetryServiceServer struct {
}

func (UnimplementedTelemetryServiceServer) ReportBaseInformation(context.Context, *ReportBaseInformationRequest) (*ReportBaseInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportBaseInformation not implemented")
}
func (UnimplementedTelemetryServiceServer) ReportResourceCounts(context.Context, *ReportResourceCountsRequest) (*ReportResourceCountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportResourceCounts not implemented")
}
func (UnimplementedTelemetryServiceServer) mustEmbedUnimplementedTelemetryServiceServer() {}

// UnsafeTelemetryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryServiceServer will
// result in compilation errors.
type UnsafeTelemetryServiceServer interface {
	mustEmbedUnimplementedTelemetryServiceServer()
}

func RegisterTelemetryServiceServer(s grpc.ServiceRegistrar, srv TelemetryServiceServer) {
	s.RegisterService(&TelemetryService_ServiceDesc, srv)
}

func _TelemetryService_ReportBaseInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportBaseInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).ReportBaseInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_ReportBaseInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).ReportBaseInformation(ctx, req.(*ReportBaseInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_ReportResourceCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportResourceCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).ReportResourceCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_ReportResourceCounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).ReportResourceCounts(ctx, req.(*ReportResourceCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TelemetryService_ServiceDesc is the grpc.ServiceDesc for TelemetryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelemetryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zitadel.analytics.v2beta.TelemetryService",
	HandlerType: (*TelemetryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportBaseInformation",
			Handler:    _TelemetryService_ReportBaseInformation_Handler,
		},
		{
			MethodName: "ReportResourceCounts",
			Handler:    _TelemetryService_ReportResourceCounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zitadel/analytics/v2beta/telemetry_service.proto",
}
