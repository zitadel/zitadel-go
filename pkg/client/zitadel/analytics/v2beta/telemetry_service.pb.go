// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/analytics/v2beta/telemetry_service.proto

package analytics

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReportBaseInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The system ID is a unique identifier for the ZITADEL system.
	SystemId string `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	// The current version of the ZITADEL system.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// A list of instances in the ZITADEL system and their information.
	Instances []*InstanceInformation `protobuf:"bytes,3,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *ReportBaseInformationRequest) Reset() {
	*x = ReportBaseInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_analytics_v2beta_telemetry_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportBaseInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportBaseInformationRequest) ProtoMessage() {}

func (x *ReportBaseInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_analytics_v2beta_telemetry_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportBaseInformationRequest.ProtoReflect.Descriptor instead.
func (*ReportBaseInformationRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_analytics_v2beta_telemetry_service_proto_rawDescGZIP(), []int{0}
}

func (x *ReportBaseInformationRequest) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *ReportBaseInformationRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ReportBaseInformationRequest) GetInstances() []*InstanceInformation {
	if x != nil {
		return x.Instances
	}
	return nil
}

type ReportBaseInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The report ID is a unique identifier for the report.
	// It is used to identify the report to be able to link it to the resource counts or other reports.
	// Note that the report ID is only valid for the same system ID.
	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
}

func (x *ReportBaseInformationResponse) Reset() {
	*x = ReportBaseInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_analytics_v2beta_telemetry_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportBaseInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportBaseInformationResponse) ProtoMessage() {}

func (x *ReportBaseInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_analytics_v2beta_telemetry_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportBaseInformationResponse.ProtoReflect.Descriptor instead.
func (*ReportBaseInformationResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_analytics_v2beta_telemetry_service_proto_rawDescGZIP(), []int{1}
}

func (x *ReportBaseInformationResponse) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

type ReportResourceCountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The system ID is a unique identifier for the ZITADEL system.
	SystemId string `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	// The previously returned report ID from the server to continue reporting.
	// Note that the report ID is only valid for the same system ID.
	ReportId *string `protobuf:"bytes,2,opt,name=report_id,json=reportId,proto3,oneof" json:"report_id,omitempty"`
	// A list of resource counts to report.
	ResourceCounts []*ResourceCount `protobuf:"bytes,3,rep,name=resource_counts,json=resourceCounts,proto3" json:"resource_counts,omitempty"`
}

func (x *ReportResourceCountsRequest) Reset() {
	*x = ReportResourceCountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_analytics_v2beta_telemetry_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportResourceCountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportResourceCountsRequest) ProtoMessage() {}

func (x *ReportResourceCountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_analytics_v2beta_telemetry_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportResourceCountsRequest.ProtoReflect.Descriptor instead.
func (*ReportResourceCountsRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_analytics_v2beta_telemetry_service_proto_rawDescGZIP(), []int{2}
}

func (x *ReportResourceCountsRequest) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *ReportResourceCountsRequest) GetReportId() string {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return ""
}

func (x *ReportResourceCountsRequest) GetResourceCounts() []*ResourceCount {
	if x != nil {
		return x.ResourceCounts
	}
	return nil
}

type ReportResourceCountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The report ID is a unique identifier for the report.
	// It is used to identify the report in case of additional data / pagination.
	// Note that the report ID is only valid for the same system ID.
	ReportId string `protobuf:"bytes,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
}

func (x *ReportResourceCountsResponse) Reset() {
	*x = ReportResourceCountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_analytics_v2beta_telemetry_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportResourceCountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportResourceCountsResponse) ProtoMessage() {}

func (x *ReportResourceCountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_analytics_v2beta_telemetry_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportResourceCountsResponse.ProtoReflect.Descriptor instead.
func (*ReportResourceCountsResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_analytics_v2beta_telemetry_service_proto_rawDescGZIP(), []int{3}
}

func (x *ReportResourceCountsResponse) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

var File_zitadel_analytics_v2beta_telemetry_service_proto protoreflect.FileDescriptor

var file_zitadel_analytics_v2beta_telemetry_service_proto_rawDesc = []byte{
	0x0a, 0x30, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x18, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4b, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x3c, 0x0a, 0x1d,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x1b, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x1c, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x32, 0xa9, 0x02, 0x0a, 0x10, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x15,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x35, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x32, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2f, 0x76, 0x32, 0x62, 0x65, 0x74, 0x61, 0x3b, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_analytics_v2beta_telemetry_service_proto_rawDescOnce sync.Once
	file_zitadel_analytics_v2beta_telemetry_service_proto_rawDescData = file_zitadel_analytics_v2beta_telemetry_service_proto_rawDesc
)

func file_zitadel_analytics_v2beta_telemetry_service_proto_rawDescGZIP() []byte {
	file_zitadel_analytics_v2beta_telemetry_service_proto_rawDescOnce.Do(func() {
		file_zitadel_analytics_v2beta_telemetry_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_analytics_v2beta_telemetry_service_proto_rawDescData)
	})
	return file_zitadel_analytics_v2beta_telemetry_service_proto_rawDescData
}

var file_zitadel_analytics_v2beta_telemetry_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_zitadel_analytics_v2beta_telemetry_service_proto_goTypes = []interface{}{
	(*ReportBaseInformationRequest)(nil),  // 0: zitadel.analytics.v2beta.ReportBaseInformationRequest
	(*ReportBaseInformationResponse)(nil), // 1: zitadel.analytics.v2beta.ReportBaseInformationResponse
	(*ReportResourceCountsRequest)(nil),   // 2: zitadel.analytics.v2beta.ReportResourceCountsRequest
	(*ReportResourceCountsResponse)(nil),  // 3: zitadel.analytics.v2beta.ReportResourceCountsResponse
	(*InstanceInformation)(nil),           // 4: zitadel.analytics.v2beta.InstanceInformation
	(*ResourceCount)(nil),                 // 5: zitadel.analytics.v2beta.ResourceCount
}
var file_zitadel_analytics_v2beta_telemetry_service_proto_depIdxs = []int32{
	4, // 0: zitadel.analytics.v2beta.ReportBaseInformationRequest.instances:type_name -> zitadel.analytics.v2beta.InstanceInformation
	5, // 1: zitadel.analytics.v2beta.ReportResourceCountsRequest.resource_counts:type_name -> zitadel.analytics.v2beta.ResourceCount
	0, // 2: zitadel.analytics.v2beta.TelemetryService.ReportBaseInformation:input_type -> zitadel.analytics.v2beta.ReportBaseInformationRequest
	2, // 3: zitadel.analytics.v2beta.TelemetryService.ReportResourceCounts:input_type -> zitadel.analytics.v2beta.ReportResourceCountsRequest
	1, // 4: zitadel.analytics.v2beta.TelemetryService.ReportBaseInformation:output_type -> zitadel.analytics.v2beta.ReportBaseInformationResponse
	3, // 5: zitadel.analytics.v2beta.TelemetryService.ReportResourceCounts:output_type -> zitadel.analytics.v2beta.ReportResourceCountsResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_zitadel_analytics_v2beta_telemetry_service_proto_init() }
func file_zitadel_analytics_v2beta_telemetry_service_proto_init() {
	if File_zitadel_analytics_v2beta_telemetry_service_proto != nil {
		return
	}
	file_zitadel_analytics_v2beta_telemetry_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zitadel_analytics_v2beta_telemetry_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportBaseInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_analytics_v2beta_telemetry_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportBaseInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_analytics_v2beta_telemetry_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportResourceCountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_analytics_v2beta_telemetry_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportResourceCountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_analytics_v2beta_telemetry_service_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_analytics_v2beta_telemetry_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zitadel_analytics_v2beta_telemetry_service_proto_goTypes,
		DependencyIndexes: file_zitadel_analytics_v2beta_telemetry_service_proto_depIdxs,
		MessageInfos:      file_zitadel_analytics_v2beta_telemetry_service_proto_msgTypes,
	}.Build()
	File_zitadel_analytics_v2beta_telemetry_service_proto = out.File
	file_zitadel_analytics_v2beta_telemetry_service_proto_rawDesc = nil
	file_zitadel_analytics_v2beta_telemetry_service_proto_goTypes = nil
	file_zitadel_analytics_v2beta_telemetry_service_proto_depIdxs = nil
}
