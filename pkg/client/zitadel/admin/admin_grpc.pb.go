// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: zitadel/admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdminService_Healthz_FullMethodName                                                 = "/zitadel.admin.v1.AdminService/Healthz"
	AdminService_GetSupportedLanguages_FullMethodName                                   = "/zitadel.admin.v1.AdminService/GetSupportedLanguages"
	AdminService_GetAllowedLanguages_FullMethodName                                     = "/zitadel.admin.v1.AdminService/GetAllowedLanguages"
	AdminService_SetDefaultLanguage_FullMethodName                                      = "/zitadel.admin.v1.AdminService/SetDefaultLanguage"
	AdminService_GetDefaultLanguage_FullMethodName                                      = "/zitadel.admin.v1.AdminService/GetDefaultLanguage"
	AdminService_GetMyInstance_FullMethodName                                           = "/zitadel.admin.v1.AdminService/GetMyInstance"
	AdminService_ListInstanceDomains_FullMethodName                                     = "/zitadel.admin.v1.AdminService/ListInstanceDomains"
	AdminService_ListInstanceTrustedDomains_FullMethodName                              = "/zitadel.admin.v1.AdminService/ListInstanceTrustedDomains"
	AdminService_AddInstanceTrustedDomain_FullMethodName                                = "/zitadel.admin.v1.AdminService/AddInstanceTrustedDomain"
	AdminService_RemoveInstanceTrustedDomain_FullMethodName                             = "/zitadel.admin.v1.AdminService/RemoveInstanceTrustedDomain"
	AdminService_ListSecretGenerators_FullMethodName                                    = "/zitadel.admin.v1.AdminService/ListSecretGenerators"
	AdminService_GetSecretGenerator_FullMethodName                                      = "/zitadel.admin.v1.AdminService/GetSecretGenerator"
	AdminService_UpdateSecretGenerator_FullMethodName                                   = "/zitadel.admin.v1.AdminService/UpdateSecretGenerator"
	AdminService_GetSMTPConfig_FullMethodName                                           = "/zitadel.admin.v1.AdminService/GetSMTPConfig"
	AdminService_GetSMTPConfigById_FullMethodName                                       = "/zitadel.admin.v1.AdminService/GetSMTPConfigById"
	AdminService_AddSMTPConfig_FullMethodName                                           = "/zitadel.admin.v1.AdminService/AddSMTPConfig"
	AdminService_UpdateSMTPConfig_FullMethodName                                        = "/zitadel.admin.v1.AdminService/UpdateSMTPConfig"
	AdminService_UpdateSMTPConfigPassword_FullMethodName                                = "/zitadel.admin.v1.AdminService/UpdateSMTPConfigPassword"
	AdminService_ActivateSMTPConfig_FullMethodName                                      = "/zitadel.admin.v1.AdminService/ActivateSMTPConfig"
	AdminService_DeactivateSMTPConfig_FullMethodName                                    = "/zitadel.admin.v1.AdminService/DeactivateSMTPConfig"
	AdminService_RemoveSMTPConfig_FullMethodName                                        = "/zitadel.admin.v1.AdminService/RemoveSMTPConfig"
	AdminService_TestSMTPConfigById_FullMethodName                                      = "/zitadel.admin.v1.AdminService/TestSMTPConfigById"
	AdminService_TestSMTPConfig_FullMethodName                                          = "/zitadel.admin.v1.AdminService/TestSMTPConfig"
	AdminService_ListSMTPConfigs_FullMethodName                                         = "/zitadel.admin.v1.AdminService/ListSMTPConfigs"
	AdminService_ListEmailProviders_FullMethodName                                      = "/zitadel.admin.v1.AdminService/ListEmailProviders"
	AdminService_GetEmailProvider_FullMethodName                                        = "/zitadel.admin.v1.AdminService/GetEmailProvider"
	AdminService_GetEmailProviderById_FullMethodName                                    = "/zitadel.admin.v1.AdminService/GetEmailProviderById"
	AdminService_AddEmailProviderSMTP_FullMethodName                                    = "/zitadel.admin.v1.AdminService/AddEmailProviderSMTP"
	AdminService_UpdateEmailProviderSMTP_FullMethodName                                 = "/zitadel.admin.v1.AdminService/UpdateEmailProviderSMTP"
	AdminService_AddEmailProviderHTTP_FullMethodName                                    = "/zitadel.admin.v1.AdminService/AddEmailProviderHTTP"
	AdminService_UpdateEmailProviderHTTP_FullMethodName                                 = "/zitadel.admin.v1.AdminService/UpdateEmailProviderHTTP"
	AdminService_UpdateEmailProviderSMTPPassword_FullMethodName                         = "/zitadel.admin.v1.AdminService/UpdateEmailProviderSMTPPassword"
	AdminService_ActivateEmailProvider_FullMethodName                                   = "/zitadel.admin.v1.AdminService/ActivateEmailProvider"
	AdminService_DeactivateEmailProvider_FullMethodName                                 = "/zitadel.admin.v1.AdminService/DeactivateEmailProvider"
	AdminService_RemoveEmailProvider_FullMethodName                                     = "/zitadel.admin.v1.AdminService/RemoveEmailProvider"
	AdminService_TestEmailProviderSMTPById_FullMethodName                               = "/zitadel.admin.v1.AdminService/TestEmailProviderSMTPById"
	AdminService_TestEmailProviderSMTP_FullMethodName                                   = "/zitadel.admin.v1.AdminService/TestEmailProviderSMTP"
	AdminService_ListSMSProviders_FullMethodName                                        = "/zitadel.admin.v1.AdminService/ListSMSProviders"
	AdminService_GetSMSProvider_FullMethodName                                          = "/zitadel.admin.v1.AdminService/GetSMSProvider"
	AdminService_AddSMSProviderTwilio_FullMethodName                                    = "/zitadel.admin.v1.AdminService/AddSMSProviderTwilio"
	AdminService_UpdateSMSProviderTwilio_FullMethodName                                 = "/zitadel.admin.v1.AdminService/UpdateSMSProviderTwilio"
	AdminService_UpdateSMSProviderTwilioToken_FullMethodName                            = "/zitadel.admin.v1.AdminService/UpdateSMSProviderTwilioToken"
	AdminService_AddSMSProviderHTTP_FullMethodName                                      = "/zitadel.admin.v1.AdminService/AddSMSProviderHTTP"
	AdminService_UpdateSMSProviderHTTP_FullMethodName                                   = "/zitadel.admin.v1.AdminService/UpdateSMSProviderHTTP"
	AdminService_ActivateSMSProvider_FullMethodName                                     = "/zitadel.admin.v1.AdminService/ActivateSMSProvider"
	AdminService_DeactivateSMSProvider_FullMethodName                                   = "/zitadel.admin.v1.AdminService/DeactivateSMSProvider"
	AdminService_RemoveSMSProvider_FullMethodName                                       = "/zitadel.admin.v1.AdminService/RemoveSMSProvider"
	AdminService_GetOIDCSettings_FullMethodName                                         = "/zitadel.admin.v1.AdminService/GetOIDCSettings"
	AdminService_AddOIDCSettings_FullMethodName                                         = "/zitadel.admin.v1.AdminService/AddOIDCSettings"
	AdminService_UpdateOIDCSettings_FullMethodName                                      = "/zitadel.admin.v1.AdminService/UpdateOIDCSettings"
	AdminService_GetFileSystemNotificationProvider_FullMethodName                       = "/zitadel.admin.v1.AdminService/GetFileSystemNotificationProvider"
	AdminService_GetLogNotificationProvider_FullMethodName                              = "/zitadel.admin.v1.AdminService/GetLogNotificationProvider"
	AdminService_GetSecurityPolicy_FullMethodName                                       = "/zitadel.admin.v1.AdminService/GetSecurityPolicy"
	AdminService_SetSecurityPolicy_FullMethodName                                       = "/zitadel.admin.v1.AdminService/SetSecurityPolicy"
	AdminService_GetOrgByID_FullMethodName                                              = "/zitadel.admin.v1.AdminService/GetOrgByID"
	AdminService_IsOrgUnique_FullMethodName                                             = "/zitadel.admin.v1.AdminService/IsOrgUnique"
	AdminService_SetDefaultOrg_FullMethodName                                           = "/zitadel.admin.v1.AdminService/SetDefaultOrg"
	AdminService_GetDefaultOrg_FullMethodName                                           = "/zitadel.admin.v1.AdminService/GetDefaultOrg"
	AdminService_ListOrgs_FullMethodName                                                = "/zitadel.admin.v1.AdminService/ListOrgs"
	AdminService_SetUpOrg_FullMethodName                                                = "/zitadel.admin.v1.AdminService/SetUpOrg"
	AdminService_RemoveOrg_FullMethodName                                               = "/zitadel.admin.v1.AdminService/RemoveOrg"
	AdminService_GetIDPByID_FullMethodName                                              = "/zitadel.admin.v1.AdminService/GetIDPByID"
	AdminService_ListIDPs_FullMethodName                                                = "/zitadel.admin.v1.AdminService/ListIDPs"
	AdminService_AddOIDCIDP_FullMethodName                                              = "/zitadel.admin.v1.AdminService/AddOIDCIDP"
	AdminService_AddJWTIDP_FullMethodName                                               = "/zitadel.admin.v1.AdminService/AddJWTIDP"
	AdminService_UpdateIDP_FullMethodName                                               = "/zitadel.admin.v1.AdminService/UpdateIDP"
	AdminService_DeactivateIDP_FullMethodName                                           = "/zitadel.admin.v1.AdminService/DeactivateIDP"
	AdminService_ReactivateIDP_FullMethodName                                           = "/zitadel.admin.v1.AdminService/ReactivateIDP"
	AdminService_RemoveIDP_FullMethodName                                               = "/zitadel.admin.v1.AdminService/RemoveIDP"
	AdminService_UpdateIDPOIDCConfig_FullMethodName                                     = "/zitadel.admin.v1.AdminService/UpdateIDPOIDCConfig"
	AdminService_UpdateIDPJWTConfig_FullMethodName                                      = "/zitadel.admin.v1.AdminService/UpdateIDPJWTConfig"
	AdminService_ListProviders_FullMethodName                                           = "/zitadel.admin.v1.AdminService/ListProviders"
	AdminService_GetProviderByID_FullMethodName                                         = "/zitadel.admin.v1.AdminService/GetProviderByID"
	AdminService_AddGenericOAuthProvider_FullMethodName                                 = "/zitadel.admin.v1.AdminService/AddGenericOAuthProvider"
	AdminService_UpdateGenericOAuthProvider_FullMethodName                              = "/zitadel.admin.v1.AdminService/UpdateGenericOAuthProvider"
	AdminService_AddGenericOIDCProvider_FullMethodName                                  = "/zitadel.admin.v1.AdminService/AddGenericOIDCProvider"
	AdminService_UpdateGenericOIDCProvider_FullMethodName                               = "/zitadel.admin.v1.AdminService/UpdateGenericOIDCProvider"
	AdminService_MigrateGenericOIDCProvider_FullMethodName                              = "/zitadel.admin.v1.AdminService/MigrateGenericOIDCProvider"
	AdminService_AddJWTProvider_FullMethodName                                          = "/zitadel.admin.v1.AdminService/AddJWTProvider"
	AdminService_UpdateJWTProvider_FullMethodName                                       = "/zitadel.admin.v1.AdminService/UpdateJWTProvider"
	AdminService_AddAzureADProvider_FullMethodName                                      = "/zitadel.admin.v1.AdminService/AddAzureADProvider"
	AdminService_UpdateAzureADProvider_FullMethodName                                   = "/zitadel.admin.v1.AdminService/UpdateAzureADProvider"
	AdminService_AddGitHubProvider_FullMethodName                                       = "/zitadel.admin.v1.AdminService/AddGitHubProvider"
	AdminService_UpdateGitHubProvider_FullMethodName                                    = "/zitadel.admin.v1.AdminService/UpdateGitHubProvider"
	AdminService_AddGitHubEnterpriseServerProvider_FullMethodName                       = "/zitadel.admin.v1.AdminService/AddGitHubEnterpriseServerProvider"
	AdminService_UpdateGitHubEnterpriseServerProvider_FullMethodName                    = "/zitadel.admin.v1.AdminService/UpdateGitHubEnterpriseServerProvider"
	AdminService_AddGitLabProvider_FullMethodName                                       = "/zitadel.admin.v1.AdminService/AddGitLabProvider"
	AdminService_UpdateGitLabProvider_FullMethodName                                    = "/zitadel.admin.v1.AdminService/UpdateGitLabProvider"
	AdminService_AddGitLabSelfHostedProvider_FullMethodName                             = "/zitadel.admin.v1.AdminService/AddGitLabSelfHostedProvider"
	AdminService_UpdateGitLabSelfHostedProvider_FullMethodName                          = "/zitadel.admin.v1.AdminService/UpdateGitLabSelfHostedProvider"
	AdminService_AddGoogleProvider_FullMethodName                                       = "/zitadel.admin.v1.AdminService/AddGoogleProvider"
	AdminService_UpdateGoogleProvider_FullMethodName                                    = "/zitadel.admin.v1.AdminService/UpdateGoogleProvider"
	AdminService_AddLDAPProvider_FullMethodName                                         = "/zitadel.admin.v1.AdminService/AddLDAPProvider"
	AdminService_UpdateLDAPProvider_FullMethodName                                      = "/zitadel.admin.v1.AdminService/UpdateLDAPProvider"
	AdminService_AddAppleProvider_FullMethodName                                        = "/zitadel.admin.v1.AdminService/AddAppleProvider"
	AdminService_UpdateAppleProvider_FullMethodName                                     = "/zitadel.admin.v1.AdminService/UpdateAppleProvider"
	AdminService_AddSAMLProvider_FullMethodName                                         = "/zitadel.admin.v1.AdminService/AddSAMLProvider"
	AdminService_UpdateSAMLProvider_FullMethodName                                      = "/zitadel.admin.v1.AdminService/UpdateSAMLProvider"
	AdminService_RegenerateSAMLProviderCertificate_FullMethodName                       = "/zitadel.admin.v1.AdminService/RegenerateSAMLProviderCertificate"
	AdminService_DeleteProvider_FullMethodName                                          = "/zitadel.admin.v1.AdminService/DeleteProvider"
	AdminService_GetOrgIAMPolicy_FullMethodName                                         = "/zitadel.admin.v1.AdminService/GetOrgIAMPolicy"
	AdminService_UpdateOrgIAMPolicy_FullMethodName                                      = "/zitadel.admin.v1.AdminService/UpdateOrgIAMPolicy"
	AdminService_GetCustomOrgIAMPolicy_FullMethodName                                   = "/zitadel.admin.v1.AdminService/GetCustomOrgIAMPolicy"
	AdminService_AddCustomOrgIAMPolicy_FullMethodName                                   = "/zitadel.admin.v1.AdminService/AddCustomOrgIAMPolicy"
	AdminService_UpdateCustomOrgIAMPolicy_FullMethodName                                = "/zitadel.admin.v1.AdminService/UpdateCustomOrgIAMPolicy"
	AdminService_ResetCustomOrgIAMPolicyToDefault_FullMethodName                        = "/zitadel.admin.v1.AdminService/ResetCustomOrgIAMPolicyToDefault"
	AdminService_GetDomainPolicy_FullMethodName                                         = "/zitadel.admin.v1.AdminService/GetDomainPolicy"
	AdminService_UpdateDomainPolicy_FullMethodName                                      = "/zitadel.admin.v1.AdminService/UpdateDomainPolicy"
	AdminService_GetCustomDomainPolicy_FullMethodName                                   = "/zitadel.admin.v1.AdminService/GetCustomDomainPolicy"
	AdminService_AddCustomDomainPolicy_FullMethodName                                   = "/zitadel.admin.v1.AdminService/AddCustomDomainPolicy"
	AdminService_UpdateCustomDomainPolicy_FullMethodName                                = "/zitadel.admin.v1.AdminService/UpdateCustomDomainPolicy"
	AdminService_ResetCustomDomainPolicyToDefault_FullMethodName                        = "/zitadel.admin.v1.AdminService/ResetCustomDomainPolicyToDefault"
	AdminService_GetLabelPolicy_FullMethodName                                          = "/zitadel.admin.v1.AdminService/GetLabelPolicy"
	AdminService_GetPreviewLabelPolicy_FullMethodName                                   = "/zitadel.admin.v1.AdminService/GetPreviewLabelPolicy"
	AdminService_UpdateLabelPolicy_FullMethodName                                       = "/zitadel.admin.v1.AdminService/UpdateLabelPolicy"
	AdminService_ActivateLabelPolicy_FullMethodName                                     = "/zitadel.admin.v1.AdminService/ActivateLabelPolicy"
	AdminService_RemoveLabelPolicyLogo_FullMethodName                                   = "/zitadel.admin.v1.AdminService/RemoveLabelPolicyLogo"
	AdminService_RemoveLabelPolicyLogoDark_FullMethodName                               = "/zitadel.admin.v1.AdminService/RemoveLabelPolicyLogoDark"
	AdminService_RemoveLabelPolicyIcon_FullMethodName                                   = "/zitadel.admin.v1.AdminService/RemoveLabelPolicyIcon"
	AdminService_RemoveLabelPolicyIconDark_FullMethodName                               = "/zitadel.admin.v1.AdminService/RemoveLabelPolicyIconDark"
	AdminService_RemoveLabelPolicyFont_FullMethodName                                   = "/zitadel.admin.v1.AdminService/RemoveLabelPolicyFont"
	AdminService_GetLoginPolicy_FullMethodName                                          = "/zitadel.admin.v1.AdminService/GetLoginPolicy"
	AdminService_UpdateLoginPolicy_FullMethodName                                       = "/zitadel.admin.v1.AdminService/UpdateLoginPolicy"
	AdminService_ListLoginPolicyIDPs_FullMethodName                                     = "/zitadel.admin.v1.AdminService/ListLoginPolicyIDPs"
	AdminService_AddIDPToLoginPolicy_FullMethodName                                     = "/zitadel.admin.v1.AdminService/AddIDPToLoginPolicy"
	AdminService_RemoveIDPFromLoginPolicy_FullMethodName                                = "/zitadel.admin.v1.AdminService/RemoveIDPFromLoginPolicy"
	AdminService_ListLoginPolicySecondFactors_FullMethodName                            = "/zitadel.admin.v1.AdminService/ListLoginPolicySecondFactors"
	AdminService_AddSecondFactorToLoginPolicy_FullMethodName                            = "/zitadel.admin.v1.AdminService/AddSecondFactorToLoginPolicy"
	AdminService_RemoveSecondFactorFromLoginPolicy_FullMethodName                       = "/zitadel.admin.v1.AdminService/RemoveSecondFactorFromLoginPolicy"
	AdminService_ListLoginPolicyMultiFactors_FullMethodName                             = "/zitadel.admin.v1.AdminService/ListLoginPolicyMultiFactors"
	AdminService_AddMultiFactorToLoginPolicy_FullMethodName                             = "/zitadel.admin.v1.AdminService/AddMultiFactorToLoginPolicy"
	AdminService_RemoveMultiFactorFromLoginPolicy_FullMethodName                        = "/zitadel.admin.v1.AdminService/RemoveMultiFactorFromLoginPolicy"
	AdminService_GetPasswordComplexityPolicy_FullMethodName                             = "/zitadel.admin.v1.AdminService/GetPasswordComplexityPolicy"
	AdminService_UpdatePasswordComplexityPolicy_FullMethodName                          = "/zitadel.admin.v1.AdminService/UpdatePasswordComplexityPolicy"
	AdminService_GetPasswordAgePolicy_FullMethodName                                    = "/zitadel.admin.v1.AdminService/GetPasswordAgePolicy"
	AdminService_UpdatePasswordAgePolicy_FullMethodName                                 = "/zitadel.admin.v1.AdminService/UpdatePasswordAgePolicy"
	AdminService_GetLockoutPolicy_FullMethodName                                        = "/zitadel.admin.v1.AdminService/GetLockoutPolicy"
	AdminService_UpdateLockoutPolicy_FullMethodName                                     = "/zitadel.admin.v1.AdminService/UpdateLockoutPolicy"
	AdminService_GetPrivacyPolicy_FullMethodName                                        = "/zitadel.admin.v1.AdminService/GetPrivacyPolicy"
	AdminService_UpdatePrivacyPolicy_FullMethodName                                     = "/zitadel.admin.v1.AdminService/UpdatePrivacyPolicy"
	AdminService_AddNotificationPolicy_FullMethodName                                   = "/zitadel.admin.v1.AdminService/AddNotificationPolicy"
	AdminService_GetNotificationPolicy_FullMethodName                                   = "/zitadel.admin.v1.AdminService/GetNotificationPolicy"
	AdminService_UpdateNotificationPolicy_FullMethodName                                = "/zitadel.admin.v1.AdminService/UpdateNotificationPolicy"
	AdminService_GetDefaultInitMessageText_FullMethodName                               = "/zitadel.admin.v1.AdminService/GetDefaultInitMessageText"
	AdminService_GetCustomInitMessageText_FullMethodName                                = "/zitadel.admin.v1.AdminService/GetCustomInitMessageText"
	AdminService_SetDefaultInitMessageText_FullMethodName                               = "/zitadel.admin.v1.AdminService/SetDefaultInitMessageText"
	AdminService_ResetCustomInitMessageTextToDefault_FullMethodName                     = "/zitadel.admin.v1.AdminService/ResetCustomInitMessageTextToDefault"
	AdminService_GetDefaultPasswordResetMessageText_FullMethodName                      = "/zitadel.admin.v1.AdminService/GetDefaultPasswordResetMessageText"
	AdminService_GetCustomPasswordResetMessageText_FullMethodName                       = "/zitadel.admin.v1.AdminService/GetCustomPasswordResetMessageText"
	AdminService_SetDefaultPasswordResetMessageText_FullMethodName                      = "/zitadel.admin.v1.AdminService/SetDefaultPasswordResetMessageText"
	AdminService_ResetCustomPasswordResetMessageTextToDefault_FullMethodName            = "/zitadel.admin.v1.AdminService/ResetCustomPasswordResetMessageTextToDefault"
	AdminService_GetDefaultVerifyEmailMessageText_FullMethodName                        = "/zitadel.admin.v1.AdminService/GetDefaultVerifyEmailMessageText"
	AdminService_GetCustomVerifyEmailMessageText_FullMethodName                         = "/zitadel.admin.v1.AdminService/GetCustomVerifyEmailMessageText"
	AdminService_SetDefaultVerifyEmailMessageText_FullMethodName                        = "/zitadel.admin.v1.AdminService/SetDefaultVerifyEmailMessageText"
	AdminService_ResetCustomVerifyEmailMessageTextToDefault_FullMethodName              = "/zitadel.admin.v1.AdminService/ResetCustomVerifyEmailMessageTextToDefault"
	AdminService_GetDefaultVerifyPhoneMessageText_FullMethodName                        = "/zitadel.admin.v1.AdminService/GetDefaultVerifyPhoneMessageText"
	AdminService_GetCustomVerifyPhoneMessageText_FullMethodName                         = "/zitadel.admin.v1.AdminService/GetCustomVerifyPhoneMessageText"
	AdminService_SetDefaultVerifyPhoneMessageText_FullMethodName                        = "/zitadel.admin.v1.AdminService/SetDefaultVerifyPhoneMessageText"
	AdminService_ResetCustomVerifyPhoneMessageTextToDefault_FullMethodName              = "/zitadel.admin.v1.AdminService/ResetCustomVerifyPhoneMessageTextToDefault"
	AdminService_GetDefaultVerifySMSOTPMessageText_FullMethodName                       = "/zitadel.admin.v1.AdminService/GetDefaultVerifySMSOTPMessageText"
	AdminService_GetCustomVerifySMSOTPMessageText_FullMethodName                        = "/zitadel.admin.v1.AdminService/GetCustomVerifySMSOTPMessageText"
	AdminService_SetDefaultVerifySMSOTPMessageText_FullMethodName                       = "/zitadel.admin.v1.AdminService/SetDefaultVerifySMSOTPMessageText"
	AdminService_ResetCustomVerifySMSOTPMessageTextToDefault_FullMethodName             = "/zitadel.admin.v1.AdminService/ResetCustomVerifySMSOTPMessageTextToDefault"
	AdminService_GetDefaultVerifyEmailOTPMessageText_FullMethodName                     = "/zitadel.admin.v1.AdminService/GetDefaultVerifyEmailOTPMessageText"
	AdminService_GetCustomVerifyEmailOTPMessageText_FullMethodName                      = "/zitadel.admin.v1.AdminService/GetCustomVerifyEmailOTPMessageText"
	AdminService_SetDefaultVerifyEmailOTPMessageText_FullMethodName                     = "/zitadel.admin.v1.AdminService/SetDefaultVerifyEmailOTPMessageText"
	AdminService_ResetCustomVerifyEmailOTPMessageTextToDefault_FullMethodName           = "/zitadel.admin.v1.AdminService/ResetCustomVerifyEmailOTPMessageTextToDefault"
	AdminService_GetDefaultDomainClaimedMessageText_FullMethodName                      = "/zitadel.admin.v1.AdminService/GetDefaultDomainClaimedMessageText"
	AdminService_GetCustomDomainClaimedMessageText_FullMethodName                       = "/zitadel.admin.v1.AdminService/GetCustomDomainClaimedMessageText"
	AdminService_SetDefaultDomainClaimedMessageText_FullMethodName                      = "/zitadel.admin.v1.AdminService/SetDefaultDomainClaimedMessageText"
	AdminService_ResetCustomDomainClaimedMessageTextToDefault_FullMethodName            = "/zitadel.admin.v1.AdminService/ResetCustomDomainClaimedMessageTextToDefault"
	AdminService_GetDefaultPasswordlessRegistrationMessageText_FullMethodName           = "/zitadel.admin.v1.AdminService/GetDefaultPasswordlessRegistrationMessageText"
	AdminService_GetCustomPasswordlessRegistrationMessageText_FullMethodName            = "/zitadel.admin.v1.AdminService/GetCustomPasswordlessRegistrationMessageText"
	AdminService_SetDefaultPasswordlessRegistrationMessageText_FullMethodName           = "/zitadel.admin.v1.AdminService/SetDefaultPasswordlessRegistrationMessageText"
	AdminService_ResetCustomPasswordlessRegistrationMessageTextToDefault_FullMethodName = "/zitadel.admin.v1.AdminService/ResetCustomPasswordlessRegistrationMessageTextToDefault"
	AdminService_GetDefaultPasswordChangeMessageText_FullMethodName                     = "/zitadel.admin.v1.AdminService/GetDefaultPasswordChangeMessageText"
	AdminService_GetCustomPasswordChangeMessageText_FullMethodName                      = "/zitadel.admin.v1.AdminService/GetCustomPasswordChangeMessageText"
	AdminService_SetDefaultPasswordChangeMessageText_FullMethodName                     = "/zitadel.admin.v1.AdminService/SetDefaultPasswordChangeMessageText"
	AdminService_ResetCustomPasswordChangeMessageTextToDefault_FullMethodName           = "/zitadel.admin.v1.AdminService/ResetCustomPasswordChangeMessageTextToDefault"
	AdminService_GetDefaultInviteUserMessageText_FullMethodName                         = "/zitadel.admin.v1.AdminService/GetDefaultInviteUserMessageText"
	AdminService_GetCustomInviteUserMessageText_FullMethodName                          = "/zitadel.admin.v1.AdminService/GetCustomInviteUserMessageText"
	AdminService_SetDefaultInviteUserMessageText_FullMethodName                         = "/zitadel.admin.v1.AdminService/SetDefaultInviteUserMessageText"
	AdminService_ResetCustomInviteUserMessageTextToDefault_FullMethodName               = "/zitadel.admin.v1.AdminService/ResetCustomInviteUserMessageTextToDefault"
	AdminService_GetDefaultLoginTexts_FullMethodName                                    = "/zitadel.admin.v1.AdminService/GetDefaultLoginTexts"
	AdminService_GetCustomLoginTexts_FullMethodName                                     = "/zitadel.admin.v1.AdminService/GetCustomLoginTexts"
	AdminService_SetCustomLoginText_FullMethodName                                      = "/zitadel.admin.v1.AdminService/SetCustomLoginText"
	AdminService_ResetCustomLoginTextToDefault_FullMethodName                           = "/zitadel.admin.v1.AdminService/ResetCustomLoginTextToDefault"
	AdminService_ListIAMMemberRoles_FullMethodName                                      = "/zitadel.admin.v1.AdminService/ListIAMMemberRoles"
	AdminService_ListIAMMembers_FullMethodName                                          = "/zitadel.admin.v1.AdminService/ListIAMMembers"
	AdminService_AddIAMMember_FullMethodName                                            = "/zitadel.admin.v1.AdminService/AddIAMMember"
	AdminService_UpdateIAMMember_FullMethodName                                         = "/zitadel.admin.v1.AdminService/UpdateIAMMember"
	AdminService_RemoveIAMMember_FullMethodName                                         = "/zitadel.admin.v1.AdminService/RemoveIAMMember"
	AdminService_ListViews_FullMethodName                                               = "/zitadel.admin.v1.AdminService/ListViews"
	AdminService_ListFailedEvents_FullMethodName                                        = "/zitadel.admin.v1.AdminService/ListFailedEvents"
	AdminService_RemoveFailedEvent_FullMethodName                                       = "/zitadel.admin.v1.AdminService/RemoveFailedEvent"
	AdminService_ImportData_FullMethodName                                              = "/zitadel.admin.v1.AdminService/ImportData"
	AdminService_ExportData_FullMethodName                                              = "/zitadel.admin.v1.AdminService/ExportData"
	AdminService_ListEventTypes_FullMethodName                                          = "/zitadel.admin.v1.AdminService/ListEventTypes"
	AdminService_ListEvents_FullMethodName                                              = "/zitadel.admin.v1.AdminService/ListEvents"
	AdminService_ListAggregateTypes_FullMethodName                                      = "/zitadel.admin.v1.AdminService/ListAggregateTypes"
	AdminService_ActivateFeatureLoginDefaultOrg_FullMethodName                          = "/zitadel.admin.v1.AdminService/ActivateFeatureLoginDefaultOrg"
	AdminService_ListMilestones_FullMethodName                                          = "/zitadel.admin.v1.AdminService/ListMilestones"
	AdminService_SetRestrictions_FullMethodName                                         = "/zitadel.admin.v1.AdminService/SetRestrictions"
	AdminService_GetRestrictions_FullMethodName                                         = "/zitadel.admin.v1.AdminService/GetRestrictions"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
	GetSupportedLanguages(ctx context.Context, in *GetSupportedLanguagesRequest, opts ...grpc.CallOption) (*GetSupportedLanguagesResponse, error)
	GetAllowedLanguages(ctx context.Context, in *GetAllowedLanguagesRequest, opts ...grpc.CallOption) (*GetAllowedLanguagesResponse, error)
	SetDefaultLanguage(ctx context.Context, in *SetDefaultLanguageRequest, opts ...grpc.CallOption) (*SetDefaultLanguageResponse, error)
	GetDefaultLanguage(ctx context.Context, in *GetDefaultLanguageRequest, opts ...grpc.CallOption) (*GetDefaultLanguageResponse, error)
	GetMyInstance(ctx context.Context, in *GetMyInstanceRequest, opts ...grpc.CallOption) (*GetMyInstanceResponse, error)
	ListInstanceDomains(ctx context.Context, in *ListInstanceDomainsRequest, opts ...grpc.CallOption) (*ListInstanceDomainsResponse, error)
	ListInstanceTrustedDomains(ctx context.Context, in *ListInstanceTrustedDomainsRequest, opts ...grpc.CallOption) (*ListInstanceTrustedDomainsResponse, error)
	AddInstanceTrustedDomain(ctx context.Context, in *AddInstanceTrustedDomainRequest, opts ...grpc.CallOption) (*AddInstanceTrustedDomainResponse, error)
	RemoveInstanceTrustedDomain(ctx context.Context, in *RemoveInstanceTrustedDomainRequest, opts ...grpc.CallOption) (*RemoveInstanceTrustedDomainResponse, error)
	ListSecretGenerators(ctx context.Context, in *ListSecretGeneratorsRequest, opts ...grpc.CallOption) (*ListSecretGeneratorsResponse, error)
	GetSecretGenerator(ctx context.Context, in *GetSecretGeneratorRequest, opts ...grpc.CallOption) (*GetSecretGeneratorResponse, error)
	UpdateSecretGenerator(ctx context.Context, in *UpdateSecretGeneratorRequest, opts ...grpc.CallOption) (*UpdateSecretGeneratorResponse, error)
	// Deprecated: Get active SMTP Configuration
	//
	// Returns the active SMTP configuration from the system. This is used to send E-Mails to the users.
	//
	// Deprecated: please move to the new endpoint GetEmailProvider.
	GetSMTPConfig(ctx context.Context, in *GetSMTPConfigRequest, opts ...grpc.CallOption) (*GetSMTPConfigResponse, error)
	// Deprecated: Get SMTP provider configuration by its id
	//
	// Get a specific SMTP provider configuration by its ID.
	//
	// Deprecated: please move to the new endpoint GetEmailProviderById.
	GetSMTPConfigById(ctx context.Context, in *GetSMTPConfigByIdRequest, opts ...grpc.CallOption) (*GetSMTPConfigByIdResponse, error)
	// Deprecated: Add SMTP Configuration
	//
	// Add a new SMTP configuration if nothing is set yet.
	//
	// Deprecated: please move to the new endpoint AddEmailProviderSMTP.
	AddSMTPConfig(ctx context.Context, in *AddSMTPConfigRequest, opts ...grpc.CallOption) (*AddSMTPConfigResponse, error)
	// Deprecated: Update SMTP Configuration
	//
	// Update the SMTP configuration, be aware that this will be activated as soon as it is saved. So the users will get notifications from the newly configured SMTP.
	//
	// Deprecated: please move to the new endpoint UpdateEmailProviderSMTP.
	UpdateSMTPConfig(ctx context.Context, in *UpdateSMTPConfigRequest, opts ...grpc.CallOption) (*UpdateSMTPConfigResponse, error)
	// Deprecated: Update SMTP Password
	//
	// Update the SMTP password that is used for the host, be aware that this will be activated as soon as it is saved. So the users will get notifications from the newly configured SMTP.
	//
	// Deprecated: please move to the new endpoint UpdateEmailProviderSMTPPassword.
	UpdateSMTPConfigPassword(ctx context.Context, in *UpdateSMTPConfigPasswordRequest, opts ...grpc.CallOption) (*UpdateSMTPConfigPasswordResponse, error)
	// Deprecated: Activate SMTP Provider
	//
	// Activate an SMTP provider.
	//
	// Deprecated: please move to the new endpoint ActivateEmailProvider.
	ActivateSMTPConfig(ctx context.Context, in *ActivateSMTPConfigRequest, opts ...grpc.CallOption) (*ActivateSMTPConfigResponse, error)
	// Deprecated: Deactivate SMTP Provider
	//
	// Deactivate an SMTP provider. After deactivating the provider, the users will not be able to receive SMTP notifications from that provider anymore.
	//
	// Deprecated: please move to the new endpoint DeactivateEmailProvider.
	DeactivateSMTPConfig(ctx context.Context, in *DeactivateSMTPConfigRequest, opts ...grpc.CallOption) (*DeactivateSMTPConfigResponse, error)
	// Deprecated: Remove SMTP Configuration
	//
	// Remove the SMTP configuration, be aware that the users will not get an E-Mail if no SMTP is set.
	//
	// Deprecated: please move to the new endpoint RemoveEmailProvider.
	RemoveSMTPConfig(ctx context.Context, in *RemoveSMTPConfigRequest, opts ...grpc.CallOption) (*RemoveSMTPConfigResponse, error)
	// Deprecated: Test SMTP Provider
	//
	// Test an SMTP provider identified by its ID. After testing the provider, the users will receive information about the test results.
	//
	// Deprecated: please move to the new endpoint TestEmailProviderSMTPById.
	TestSMTPConfigById(ctx context.Context, in *TestSMTPConfigByIdRequest, opts ...grpc.CallOption) (*TestSMTPConfigByIdResponse, error)
	// Deprecated: Test SMTP Provider
	//
	// Test an SMTP provider. After testing the provider, the users will receive information about the test results.
	//
	// Deprecated: please move to the new endpoint TestEmailProviderSMTP.
	TestSMTPConfig(ctx context.Context, in *TestSMTPConfigRequest, opts ...grpc.CallOption) (*TestSMTPConfigResponse, error)
	// Deprecated: List SMTP Configs
	//
	// Returns a list of SMTP configurations.
	//
	// Deprecated: please move to the new endpoint ListEmailProviders.
	ListSMTPConfigs(ctx context.Context, in *ListSMTPConfigsRequest, opts ...grpc.CallOption) (*ListSMTPConfigsResponse, error)
	ListEmailProviders(ctx context.Context, in *ListEmailProvidersRequest, opts ...grpc.CallOption) (*ListEmailProvidersResponse, error)
	GetEmailProvider(ctx context.Context, in *GetEmailProviderRequest, opts ...grpc.CallOption) (*GetEmailProviderResponse, error)
	GetEmailProviderById(ctx context.Context, in *GetEmailProviderByIdRequest, opts ...grpc.CallOption) (*GetEmailProviderByIdResponse, error)
	AddEmailProviderSMTP(ctx context.Context, in *AddEmailProviderSMTPRequest, opts ...grpc.CallOption) (*AddEmailProviderSMTPResponse, error)
	UpdateEmailProviderSMTP(ctx context.Context, in *UpdateEmailProviderSMTPRequest, opts ...grpc.CallOption) (*UpdateEmailProviderSMTPResponse, error)
	AddEmailProviderHTTP(ctx context.Context, in *AddEmailProviderHTTPRequest, opts ...grpc.CallOption) (*AddEmailProviderHTTPResponse, error)
	UpdateEmailProviderHTTP(ctx context.Context, in *UpdateEmailProviderHTTPRequest, opts ...grpc.CallOption) (*UpdateEmailProviderHTTPResponse, error)
	UpdateEmailProviderSMTPPassword(ctx context.Context, in *UpdateEmailProviderSMTPPasswordRequest, opts ...grpc.CallOption) (*UpdateEmailProviderSMTPPasswordResponse, error)
	ActivateEmailProvider(ctx context.Context, in *ActivateEmailProviderRequest, opts ...grpc.CallOption) (*ActivateEmailProviderResponse, error)
	DeactivateEmailProvider(ctx context.Context, in *DeactivateEmailProviderRequest, opts ...grpc.CallOption) (*DeactivateEmailProviderResponse, error)
	RemoveEmailProvider(ctx context.Context, in *RemoveEmailProviderRequest, opts ...grpc.CallOption) (*RemoveEmailProviderResponse, error)
	TestEmailProviderSMTPById(ctx context.Context, in *TestEmailProviderSMTPByIdRequest, opts ...grpc.CallOption) (*TestEmailProviderSMTPByIdResponse, error)
	TestEmailProviderSMTP(ctx context.Context, in *TestEmailProviderSMTPRequest, opts ...grpc.CallOption) (*TestEmailProviderSMTPResponse, error)
	ListSMSProviders(ctx context.Context, in *ListSMSProvidersRequest, opts ...grpc.CallOption) (*ListSMSProvidersResponse, error)
	GetSMSProvider(ctx context.Context, in *GetSMSProviderRequest, opts ...grpc.CallOption) (*GetSMSProviderResponse, error)
	AddSMSProviderTwilio(ctx context.Context, in *AddSMSProviderTwilioRequest, opts ...grpc.CallOption) (*AddSMSProviderTwilioResponse, error)
	UpdateSMSProviderTwilio(ctx context.Context, in *UpdateSMSProviderTwilioRequest, opts ...grpc.CallOption) (*UpdateSMSProviderTwilioResponse, error)
	UpdateSMSProviderTwilioToken(ctx context.Context, in *UpdateSMSProviderTwilioTokenRequest, opts ...grpc.CallOption) (*UpdateSMSProviderTwilioTokenResponse, error)
	AddSMSProviderHTTP(ctx context.Context, in *AddSMSProviderHTTPRequest, opts ...grpc.CallOption) (*AddSMSProviderHTTPResponse, error)
	UpdateSMSProviderHTTP(ctx context.Context, in *UpdateSMSProviderHTTPRequest, opts ...grpc.CallOption) (*UpdateSMSProviderHTTPResponse, error)
	ActivateSMSProvider(ctx context.Context, in *ActivateSMSProviderRequest, opts ...grpc.CallOption) (*ActivateSMSProviderResponse, error)
	DeactivateSMSProvider(ctx context.Context, in *DeactivateSMSProviderRequest, opts ...grpc.CallOption) (*DeactivateSMSProviderResponse, error)
	RemoveSMSProvider(ctx context.Context, in *RemoveSMSProviderRequest, opts ...grpc.CallOption) (*RemoveSMSProviderResponse, error)
	GetOIDCSettings(ctx context.Context, in *GetOIDCSettingsRequest, opts ...grpc.CallOption) (*GetOIDCSettingsResponse, error)
	AddOIDCSettings(ctx context.Context, in *AddOIDCSettingsRequest, opts ...grpc.CallOption) (*AddOIDCSettingsResponse, error)
	UpdateOIDCSettings(ctx context.Context, in *UpdateOIDCSettingsRequest, opts ...grpc.CallOption) (*UpdateOIDCSettingsResponse, error)
	GetFileSystemNotificationProvider(ctx context.Context, in *GetFileSystemNotificationProviderRequest, opts ...grpc.CallOption) (*GetFileSystemNotificationProviderResponse, error)
	GetLogNotificationProvider(ctx context.Context, in *GetLogNotificationProviderRequest, opts ...grpc.CallOption) (*GetLogNotificationProviderResponse, error)
	GetSecurityPolicy(ctx context.Context, in *GetSecurityPolicyRequest, opts ...grpc.CallOption) (*GetSecurityPolicyResponse, error)
	SetSecurityPolicy(ctx context.Context, in *SetSecurityPolicyRequest, opts ...grpc.CallOption) (*SetSecurityPolicyResponse, error)
	GetOrgByID(ctx context.Context, in *GetOrgByIDRequest, opts ...grpc.CallOption) (*GetOrgByIDResponse, error)
	IsOrgUnique(ctx context.Context, in *IsOrgUniqueRequest, opts ...grpc.CallOption) (*IsOrgUniqueResponse, error)
	SetDefaultOrg(ctx context.Context, in *SetDefaultOrgRequest, opts ...grpc.CallOption) (*SetDefaultOrgResponse, error)
	GetDefaultOrg(ctx context.Context, in *GetDefaultOrgRequest, opts ...grpc.CallOption) (*GetDefaultOrgResponse, error)
	ListOrgs(ctx context.Context, in *ListOrgsRequest, opts ...grpc.CallOption) (*ListOrgsResponse, error)
	SetUpOrg(ctx context.Context, in *SetUpOrgRequest, opts ...grpc.CallOption) (*SetUpOrgResponse, error)
	RemoveOrg(ctx context.Context, in *RemoveOrgRequest, opts ...grpc.CallOption) (*RemoveOrgResponse, error)
	GetIDPByID(ctx context.Context, in *GetIDPByIDRequest, opts ...grpc.CallOption) (*GetIDPByIDResponse, error)
	ListIDPs(ctx context.Context, in *ListIDPsRequest, opts ...grpc.CallOption) (*ListIDPsResponse, error)
	AddOIDCIDP(ctx context.Context, in *AddOIDCIDPRequest, opts ...grpc.CallOption) (*AddOIDCIDPResponse, error)
	AddJWTIDP(ctx context.Context, in *AddJWTIDPRequest, opts ...grpc.CallOption) (*AddJWTIDPResponse, error)
	UpdateIDP(ctx context.Context, in *UpdateIDPRequest, opts ...grpc.CallOption) (*UpdateIDPResponse, error)
	DeactivateIDP(ctx context.Context, in *DeactivateIDPRequest, opts ...grpc.CallOption) (*DeactivateIDPResponse, error)
	ReactivateIDP(ctx context.Context, in *ReactivateIDPRequest, opts ...grpc.CallOption) (*ReactivateIDPResponse, error)
	RemoveIDP(ctx context.Context, in *RemoveIDPRequest, opts ...grpc.CallOption) (*RemoveIDPResponse, error)
	UpdateIDPOIDCConfig(ctx context.Context, in *UpdateIDPOIDCConfigRequest, opts ...grpc.CallOption) (*UpdateIDPOIDCConfigResponse, error)
	UpdateIDPJWTConfig(ctx context.Context, in *UpdateIDPJWTConfigRequest, opts ...grpc.CallOption) (*UpdateIDPJWTConfigResponse, error)
	// Returns all identity providers, which match the query
	// Limit should always be set, there is a default limit set by the service
	ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error)
	// Returns an identity provider of the instance
	GetProviderByID(ctx context.Context, in *GetProviderByIDRequest, opts ...grpc.CallOption) (*GetProviderByIDResponse, error)
	// Add a new OAuth2 identity provider on the instance
	AddGenericOAuthProvider(ctx context.Context, in *AddGenericOAuthProviderRequest, opts ...grpc.CallOption) (*AddGenericOAuthProviderResponse, error)
	// Change an existing OAuth2 identity provider on the instance
	UpdateGenericOAuthProvider(ctx context.Context, in *UpdateGenericOAuthProviderRequest, opts ...grpc.CallOption) (*UpdateGenericOAuthProviderResponse, error)
	// Add a new OIDC identity provider on the instance
	AddGenericOIDCProvider(ctx context.Context, in *AddGenericOIDCProviderRequest, opts ...grpc.CallOption) (*AddGenericOIDCProviderResponse, error)
	// Change an existing OIDC identity provider on the instance
	UpdateGenericOIDCProvider(ctx context.Context, in *UpdateGenericOIDCProviderRequest, opts ...grpc.CallOption) (*UpdateGenericOIDCProviderResponse, error)
	// Migrate an existing OIDC identity provider on the instance
	MigrateGenericOIDCProvider(ctx context.Context, in *MigrateGenericOIDCProviderRequest, opts ...grpc.CallOption) (*MigrateGenericOIDCProviderResponse, error)
	// Add a new JWT identity provider on the instance
	AddJWTProvider(ctx context.Context, in *AddJWTProviderRequest, opts ...grpc.CallOption) (*AddJWTProviderResponse, error)
	// Change an existing JWT identity provider on the instance
	UpdateJWTProvider(ctx context.Context, in *UpdateJWTProviderRequest, opts ...grpc.CallOption) (*UpdateJWTProviderResponse, error)
	// Add a new Azure AD identity provider on the instance
	AddAzureADProvider(ctx context.Context, in *AddAzureADProviderRequest, opts ...grpc.CallOption) (*AddAzureADProviderResponse, error)
	// Change an existing Azure AD identity provider on the instance
	UpdateAzureADProvider(ctx context.Context, in *UpdateAzureADProviderRequest, opts ...grpc.CallOption) (*UpdateAzureADProviderResponse, error)
	// Add a new GitHub identity provider on the instance
	AddGitHubProvider(ctx context.Context, in *AddGitHubProviderRequest, opts ...grpc.CallOption) (*AddGitHubProviderResponse, error)
	// Change an existing GitHub identity provider on the instance
	UpdateGitHubProvider(ctx context.Context, in *UpdateGitHubProviderRequest, opts ...grpc.CallOption) (*UpdateGitHubProviderResponse, error)
	// Add a new GitHub Enterprise Server identity provider on the instance
	AddGitHubEnterpriseServerProvider(ctx context.Context, in *AddGitHubEnterpriseServerProviderRequest, opts ...grpc.CallOption) (*AddGitHubEnterpriseServerProviderResponse, error)
	// Change an existing GitHub Enterprise Server identity provider on the instance
	UpdateGitHubEnterpriseServerProvider(ctx context.Context, in *UpdateGitHubEnterpriseServerProviderRequest, opts ...grpc.CallOption) (*UpdateGitHubEnterpriseServerProviderResponse, error)
	// Add a new GitLab identity provider on the instance
	AddGitLabProvider(ctx context.Context, in *AddGitLabProviderRequest, opts ...grpc.CallOption) (*AddGitLabProviderResponse, error)
	// Change an existing GitLab identity provider on the instance
	UpdateGitLabProvider(ctx context.Context, in *UpdateGitLabProviderRequest, opts ...grpc.CallOption) (*UpdateGitLabProviderResponse, error)
	// Add a new self hosted GitLab identity provider on the instance
	AddGitLabSelfHostedProvider(ctx context.Context, in *AddGitLabSelfHostedProviderRequest, opts ...grpc.CallOption) (*AddGitLabSelfHostedProviderResponse, error)
	// Change an existing self hosted GitLab identity provider on the instance
	UpdateGitLabSelfHostedProvider(ctx context.Context, in *UpdateGitLabSelfHostedProviderRequest, opts ...grpc.CallOption) (*UpdateGitLabSelfHostedProviderResponse, error)
	// Add a new Google identity provider on the instance
	AddGoogleProvider(ctx context.Context, in *AddGoogleProviderRequest, opts ...grpc.CallOption) (*AddGoogleProviderResponse, error)
	// Change an existing Google identity provider on the instance
	UpdateGoogleProvider(ctx context.Context, in *UpdateGoogleProviderRequest, opts ...grpc.CallOption) (*UpdateGoogleProviderResponse, error)
	// Add a new LDAP identity provider on the instance
	AddLDAPProvider(ctx context.Context, in *AddLDAPProviderRequest, opts ...grpc.CallOption) (*AddLDAPProviderResponse, error)
	// Change an existing LDAP identity provider on the instance
	UpdateLDAPProvider(ctx context.Context, in *UpdateLDAPProviderRequest, opts ...grpc.CallOption) (*UpdateLDAPProviderResponse, error)
	// Add a new Apple identity provider on the instance
	AddAppleProvider(ctx context.Context, in *AddAppleProviderRequest, opts ...grpc.CallOption) (*AddAppleProviderResponse, error)
	// Change an existing Apple identity provider on the instance
	UpdateAppleProvider(ctx context.Context, in *UpdateAppleProviderRequest, opts ...grpc.CallOption) (*UpdateAppleProviderResponse, error)
	// Add a new SAML identity provider on the instance
	AddSAMLProvider(ctx context.Context, in *AddSAMLProviderRequest, opts ...grpc.CallOption) (*AddSAMLProviderResponse, error)
	// Change an existing SAML identity provider on the instance
	UpdateSAMLProvider(ctx context.Context, in *UpdateSAMLProviderRequest, opts ...grpc.CallOption) (*UpdateSAMLProviderResponse, error)
	// Regenerate certificate for an existing SAML identity provider in the organization
	RegenerateSAMLProviderCertificate(ctx context.Context, in *RegenerateSAMLProviderCertificateRequest, opts ...grpc.CallOption) (*RegenerateSAMLProviderCertificateResponse, error)
	// Remove an identity provider
	// Will remove all linked providers of this configuration on the users
	DeleteProvider(ctx context.Context, in *DeleteProviderRequest, opts ...grpc.CallOption) (*DeleteProviderResponse, error)
	GetOrgIAMPolicy(ctx context.Context, in *GetOrgIAMPolicyRequest, opts ...grpc.CallOption) (*GetOrgIAMPolicyResponse, error)
	UpdateOrgIAMPolicy(ctx context.Context, in *UpdateOrgIAMPolicyRequest, opts ...grpc.CallOption) (*UpdateOrgIAMPolicyResponse, error)
	GetCustomOrgIAMPolicy(ctx context.Context, in *GetCustomOrgIAMPolicyRequest, opts ...grpc.CallOption) (*GetCustomOrgIAMPolicyResponse, error)
	AddCustomOrgIAMPolicy(ctx context.Context, in *AddCustomOrgIAMPolicyRequest, opts ...grpc.CallOption) (*AddCustomOrgIAMPolicyResponse, error)
	UpdateCustomOrgIAMPolicy(ctx context.Context, in *UpdateCustomOrgIAMPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomOrgIAMPolicyResponse, error)
	ResetCustomOrgIAMPolicyToDefault(ctx context.Context, in *ResetCustomOrgIAMPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomOrgIAMPolicyToDefaultResponse, error)
	GetDomainPolicy(ctx context.Context, in *GetDomainPolicyRequest, opts ...grpc.CallOption) (*GetDomainPolicyResponse, error)
	UpdateDomainPolicy(ctx context.Context, in *UpdateDomainPolicyRequest, opts ...grpc.CallOption) (*UpdateDomainPolicyResponse, error)
	GetCustomDomainPolicy(ctx context.Context, in *GetCustomDomainPolicyRequest, opts ...grpc.CallOption) (*GetCustomDomainPolicyResponse, error)
	AddCustomDomainPolicy(ctx context.Context, in *AddCustomDomainPolicyRequest, opts ...grpc.CallOption) (*AddCustomDomainPolicyResponse, error)
	UpdateCustomDomainPolicy(ctx context.Context, in *UpdateCustomDomainPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomDomainPolicyResponse, error)
	ResetCustomDomainPolicyToDefault(ctx context.Context, in *ResetCustomDomainPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomDomainPolicyToDefaultResponse, error)
	GetLabelPolicy(ctx context.Context, in *GetLabelPolicyRequest, opts ...grpc.CallOption) (*GetLabelPolicyResponse, error)
	GetPreviewLabelPolicy(ctx context.Context, in *GetPreviewLabelPolicyRequest, opts ...grpc.CallOption) (*GetPreviewLabelPolicyResponse, error)
	UpdateLabelPolicy(ctx context.Context, in *UpdateLabelPolicyRequest, opts ...grpc.CallOption) (*UpdateLabelPolicyResponse, error)
	ActivateLabelPolicy(ctx context.Context, in *ActivateLabelPolicyRequest, opts ...grpc.CallOption) (*ActivateLabelPolicyResponse, error)
	RemoveLabelPolicyLogo(ctx context.Context, in *RemoveLabelPolicyLogoRequest, opts ...grpc.CallOption) (*RemoveLabelPolicyLogoResponse, error)
	RemoveLabelPolicyLogoDark(ctx context.Context, in *RemoveLabelPolicyLogoDarkRequest, opts ...grpc.CallOption) (*RemoveLabelPolicyLogoDarkResponse, error)
	RemoveLabelPolicyIcon(ctx context.Context, in *RemoveLabelPolicyIconRequest, opts ...grpc.CallOption) (*RemoveLabelPolicyIconResponse, error)
	RemoveLabelPolicyIconDark(ctx context.Context, in *RemoveLabelPolicyIconDarkRequest, opts ...grpc.CallOption) (*RemoveLabelPolicyIconDarkResponse, error)
	RemoveLabelPolicyFont(ctx context.Context, in *RemoveLabelPolicyFontRequest, opts ...grpc.CallOption) (*RemoveLabelPolicyFontResponse, error)
	GetLoginPolicy(ctx context.Context, in *GetLoginPolicyRequest, opts ...grpc.CallOption) (*GetLoginPolicyResponse, error)
	UpdateLoginPolicy(ctx context.Context, in *UpdateLoginPolicyRequest, opts ...grpc.CallOption) (*UpdateLoginPolicyResponse, error)
	ListLoginPolicyIDPs(ctx context.Context, in *ListLoginPolicyIDPsRequest, opts ...grpc.CallOption) (*ListLoginPolicyIDPsResponse, error)
	AddIDPToLoginPolicy(ctx context.Context, in *AddIDPToLoginPolicyRequest, opts ...grpc.CallOption) (*AddIDPToLoginPolicyResponse, error)
	RemoveIDPFromLoginPolicy(ctx context.Context, in *RemoveIDPFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveIDPFromLoginPolicyResponse, error)
	ListLoginPolicySecondFactors(ctx context.Context, in *ListLoginPolicySecondFactorsRequest, opts ...grpc.CallOption) (*ListLoginPolicySecondFactorsResponse, error)
	AddSecondFactorToLoginPolicy(ctx context.Context, in *AddSecondFactorToLoginPolicyRequest, opts ...grpc.CallOption) (*AddSecondFactorToLoginPolicyResponse, error)
	RemoveSecondFactorFromLoginPolicy(ctx context.Context, in *RemoveSecondFactorFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveSecondFactorFromLoginPolicyResponse, error)
	ListLoginPolicyMultiFactors(ctx context.Context, in *ListLoginPolicyMultiFactorsRequest, opts ...grpc.CallOption) (*ListLoginPolicyMultiFactorsResponse, error)
	AddMultiFactorToLoginPolicy(ctx context.Context, in *AddMultiFactorToLoginPolicyRequest, opts ...grpc.CallOption) (*AddMultiFactorToLoginPolicyResponse, error)
	RemoveMultiFactorFromLoginPolicy(ctx context.Context, in *RemoveMultiFactorFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveMultiFactorFromLoginPolicyResponse, error)
	GetPasswordComplexityPolicy(ctx context.Context, in *GetPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*GetPasswordComplexityPolicyResponse, error)
	UpdatePasswordComplexityPolicy(ctx context.Context, in *UpdatePasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*UpdatePasswordComplexityPolicyResponse, error)
	GetPasswordAgePolicy(ctx context.Context, in *GetPasswordAgePolicyRequest, opts ...grpc.CallOption) (*GetPasswordAgePolicyResponse, error)
	UpdatePasswordAgePolicy(ctx context.Context, in *UpdatePasswordAgePolicyRequest, opts ...grpc.CallOption) (*UpdatePasswordAgePolicyResponse, error)
	GetLockoutPolicy(ctx context.Context, in *GetLockoutPolicyRequest, opts ...grpc.CallOption) (*GetLockoutPolicyResponse, error)
	UpdateLockoutPolicy(ctx context.Context, in *UpdateLockoutPolicyRequest, opts ...grpc.CallOption) (*UpdateLockoutPolicyResponse, error)
	GetPrivacyPolicy(ctx context.Context, in *GetPrivacyPolicyRequest, opts ...grpc.CallOption) (*GetPrivacyPolicyResponse, error)
	UpdatePrivacyPolicy(ctx context.Context, in *UpdatePrivacyPolicyRequest, opts ...grpc.CallOption) (*UpdatePrivacyPolicyResponse, error)
	AddNotificationPolicy(ctx context.Context, in *AddNotificationPolicyRequest, opts ...grpc.CallOption) (*AddNotificationPolicyResponse, error)
	GetNotificationPolicy(ctx context.Context, in *GetNotificationPolicyRequest, opts ...grpc.CallOption) (*GetNotificationPolicyResponse, error)
	UpdateNotificationPolicy(ctx context.Context, in *UpdateNotificationPolicyRequest, opts ...grpc.CallOption) (*UpdateNotificationPolicyResponse, error)
	GetDefaultInitMessageText(ctx context.Context, in *GetDefaultInitMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultInitMessageTextResponse, error)
	GetCustomInitMessageText(ctx context.Context, in *GetCustomInitMessageTextRequest, opts ...grpc.CallOption) (*GetCustomInitMessageTextResponse, error)
	SetDefaultInitMessageText(ctx context.Context, in *SetDefaultInitMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultInitMessageTextResponse, error)
	ResetCustomInitMessageTextToDefault(ctx context.Context, in *ResetCustomInitMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomInitMessageTextToDefaultResponse, error)
	GetDefaultPasswordResetMessageText(ctx context.Context, in *GetDefaultPasswordResetMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultPasswordResetMessageTextResponse, error)
	GetCustomPasswordResetMessageText(ctx context.Context, in *GetCustomPasswordResetMessageTextRequest, opts ...grpc.CallOption) (*GetCustomPasswordResetMessageTextResponse, error)
	SetDefaultPasswordResetMessageText(ctx context.Context, in *SetDefaultPasswordResetMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultPasswordResetMessageTextResponse, error)
	ResetCustomPasswordResetMessageTextToDefault(ctx context.Context, in *ResetCustomPasswordResetMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomPasswordResetMessageTextToDefaultResponse, error)
	GetDefaultVerifyEmailMessageText(ctx context.Context, in *GetDefaultVerifyEmailMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultVerifyEmailMessageTextResponse, error)
	GetCustomVerifyEmailMessageText(ctx context.Context, in *GetCustomVerifyEmailMessageTextRequest, opts ...grpc.CallOption) (*GetCustomVerifyEmailMessageTextResponse, error)
	SetDefaultVerifyEmailMessageText(ctx context.Context, in *SetDefaultVerifyEmailMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultVerifyEmailMessageTextResponse, error)
	ResetCustomVerifyEmailMessageTextToDefault(ctx context.Context, in *ResetCustomVerifyEmailMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomVerifyEmailMessageTextToDefaultResponse, error)
	GetDefaultVerifyPhoneMessageText(ctx context.Context, in *GetDefaultVerifyPhoneMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultVerifyPhoneMessageTextResponse, error)
	GetCustomVerifyPhoneMessageText(ctx context.Context, in *GetCustomVerifyPhoneMessageTextRequest, opts ...grpc.CallOption) (*GetCustomVerifyPhoneMessageTextResponse, error)
	SetDefaultVerifyPhoneMessageText(ctx context.Context, in *SetDefaultVerifyPhoneMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultVerifyPhoneMessageTextResponse, error)
	ResetCustomVerifyPhoneMessageTextToDefault(ctx context.Context, in *ResetCustomVerifyPhoneMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomVerifyPhoneMessageTextToDefaultResponse, error)
	GetDefaultVerifySMSOTPMessageText(ctx context.Context, in *GetDefaultVerifySMSOTPMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultVerifySMSOTPMessageTextResponse, error)
	GetCustomVerifySMSOTPMessageText(ctx context.Context, in *GetCustomVerifySMSOTPMessageTextRequest, opts ...grpc.CallOption) (*GetCustomVerifySMSOTPMessageTextResponse, error)
	SetDefaultVerifySMSOTPMessageText(ctx context.Context, in *SetDefaultVerifySMSOTPMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultVerifySMSOTPMessageTextResponse, error)
	ResetCustomVerifySMSOTPMessageTextToDefault(ctx context.Context, in *ResetCustomVerifySMSOTPMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomVerifySMSOTPMessageTextToDefaultResponse, error)
	GetDefaultVerifyEmailOTPMessageText(ctx context.Context, in *GetDefaultVerifyEmailOTPMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultVerifyEmailOTPMessageTextResponse, error)
	GetCustomVerifyEmailOTPMessageText(ctx context.Context, in *GetCustomVerifyEmailOTPMessageTextRequest, opts ...grpc.CallOption) (*GetCustomVerifyEmailOTPMessageTextResponse, error)
	SetDefaultVerifyEmailOTPMessageText(ctx context.Context, in *SetDefaultVerifyEmailOTPMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultVerifyEmailOTPMessageTextResponse, error)
	ResetCustomVerifyEmailOTPMessageTextToDefault(ctx context.Context, in *ResetCustomVerifyEmailOTPMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomVerifyEmailOTPMessageTextToDefaultResponse, error)
	GetDefaultDomainClaimedMessageText(ctx context.Context, in *GetDefaultDomainClaimedMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultDomainClaimedMessageTextResponse, error)
	GetCustomDomainClaimedMessageText(ctx context.Context, in *GetCustomDomainClaimedMessageTextRequest, opts ...grpc.CallOption) (*GetCustomDomainClaimedMessageTextResponse, error)
	SetDefaultDomainClaimedMessageText(ctx context.Context, in *SetDefaultDomainClaimedMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultDomainClaimedMessageTextResponse, error)
	ResetCustomDomainClaimedMessageTextToDefault(ctx context.Context, in *ResetCustomDomainClaimedMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomDomainClaimedMessageTextToDefaultResponse, error)
	GetDefaultPasswordlessRegistrationMessageText(ctx context.Context, in *GetDefaultPasswordlessRegistrationMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultPasswordlessRegistrationMessageTextResponse, error)
	GetCustomPasswordlessRegistrationMessageText(ctx context.Context, in *GetCustomPasswordlessRegistrationMessageTextRequest, opts ...grpc.CallOption) (*GetCustomPasswordlessRegistrationMessageTextResponse, error)
	SetDefaultPasswordlessRegistrationMessageText(ctx context.Context, in *SetDefaultPasswordlessRegistrationMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultPasswordlessRegistrationMessageTextResponse, error)
	ResetCustomPasswordlessRegistrationMessageTextToDefault(ctx context.Context, in *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse, error)
	GetDefaultPasswordChangeMessageText(ctx context.Context, in *GetDefaultPasswordChangeMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultPasswordChangeMessageTextResponse, error)
	GetCustomPasswordChangeMessageText(ctx context.Context, in *GetCustomPasswordChangeMessageTextRequest, opts ...grpc.CallOption) (*GetCustomPasswordChangeMessageTextResponse, error)
	SetDefaultPasswordChangeMessageText(ctx context.Context, in *SetDefaultPasswordChangeMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultPasswordChangeMessageTextResponse, error)
	ResetCustomPasswordChangeMessageTextToDefault(ctx context.Context, in *ResetCustomPasswordChangeMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomPasswordChangeMessageTextToDefaultResponse, error)
	GetDefaultInviteUserMessageText(ctx context.Context, in *GetDefaultInviteUserMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultInviteUserMessageTextResponse, error)
	GetCustomInviteUserMessageText(ctx context.Context, in *GetCustomInviteUserMessageTextRequest, opts ...grpc.CallOption) (*GetCustomInviteUserMessageTextResponse, error)
	SetDefaultInviteUserMessageText(ctx context.Context, in *SetDefaultInviteUserMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultInviteUserMessageTextResponse, error)
	ResetCustomInviteUserMessageTextToDefault(ctx context.Context, in *ResetCustomInviteUserMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomInviteUserMessageTextToDefaultResponse, error)
	GetDefaultLoginTexts(ctx context.Context, in *GetDefaultLoginTextsRequest, opts ...grpc.CallOption) (*GetDefaultLoginTextsResponse, error)
	GetCustomLoginTexts(ctx context.Context, in *GetCustomLoginTextsRequest, opts ...grpc.CallOption) (*GetCustomLoginTextsResponse, error)
	SetCustomLoginText(ctx context.Context, in *SetCustomLoginTextsRequest, opts ...grpc.CallOption) (*SetCustomLoginTextsResponse, error)
	ResetCustomLoginTextToDefault(ctx context.Context, in *ResetCustomLoginTextsToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomLoginTextsToDefaultResponse, error)
	ListIAMMemberRoles(ctx context.Context, in *ListIAMMemberRolesRequest, opts ...grpc.CallOption) (*ListIAMMemberRolesResponse, error)
	ListIAMMembers(ctx context.Context, in *ListIAMMembersRequest, opts ...grpc.CallOption) (*ListIAMMembersResponse, error)
	// Adds a user to the membership list of ZITADEL with the given roles
	// undefined roles will be dropped
	AddIAMMember(ctx context.Context, in *AddIAMMemberRequest, opts ...grpc.CallOption) (*AddIAMMemberResponse, error)
	UpdateIAMMember(ctx context.Context, in *UpdateIAMMemberRequest, opts ...grpc.CallOption) (*UpdateIAMMemberResponse, error)
	RemoveIAMMember(ctx context.Context, in *RemoveIAMMemberRequest, opts ...grpc.CallOption) (*RemoveIAMMemberResponse, error)
	ListViews(ctx context.Context, in *ListViewsRequest, opts ...grpc.CallOption) (*ListViewsResponse, error)
	ListFailedEvents(ctx context.Context, in *ListFailedEventsRequest, opts ...grpc.CallOption) (*ListFailedEventsResponse, error)
	RemoveFailedEvent(ctx context.Context, in *RemoveFailedEventRequest, opts ...grpc.CallOption) (*RemoveFailedEventResponse, error)
	// Imports data into an instance and creates different objects
	ImportData(ctx context.Context, in *ImportDataRequest, opts ...grpc.CallOption) (*ImportDataResponse, error)
	ExportData(ctx context.Context, in *ExportDataRequest, opts ...grpc.CallOption) (*ExportDataResponse, error)
	ListEventTypes(ctx context.Context, in *ListEventTypesRequest, opts ...grpc.CallOption) (*ListEventTypesResponse, error)
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	ListAggregateTypes(ctx context.Context, in *ListAggregateTypesRequest, opts ...grpc.CallOption) (*ListAggregateTypesResponse, error)
	// Activates the "LoginDefaultOrg" feature by setting the flag to "true"
	// This is irreversible!
	// Once activated, the login UI will use the settings of the default org (and not from the instance) if not organization context is set
	ActivateFeatureLoginDefaultOrg(ctx context.Context, in *ActivateFeatureLoginDefaultOrgRequest, opts ...grpc.CallOption) (*ActivateFeatureLoginDefaultOrgResponse, error)
	ListMilestones(ctx context.Context, in *ListMilestonesRequest, opts ...grpc.CallOption) (*ListMilestonesResponse, error)
	// Sets restrictions
	SetRestrictions(ctx context.Context, in *SetRestrictionsRequest, opts ...grpc.CallOption) (*SetRestrictionsResponse, error)
	// Gets restrictions
	GetRestrictions(ctx context.Context, in *GetRestrictionsRequest, opts ...grpc.CallOption) (*GetRestrictionsResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, AdminService_Healthz_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetSupportedLanguages(ctx context.Context, in *GetSupportedLanguagesRequest, opts ...grpc.CallOption) (*GetSupportedLanguagesResponse, error) {
	out := new(GetSupportedLanguagesResponse)
	err := c.cc.Invoke(ctx, AdminService_GetSupportedLanguages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetAllowedLanguages(ctx context.Context, in *GetAllowedLanguagesRequest, opts ...grpc.CallOption) (*GetAllowedLanguagesResponse, error) {
	out := new(GetAllowedLanguagesResponse)
	err := c.cc.Invoke(ctx, AdminService_GetAllowedLanguages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultLanguage(ctx context.Context, in *SetDefaultLanguageRequest, opts ...grpc.CallOption) (*SetDefaultLanguageResponse, error) {
	out := new(SetDefaultLanguageResponse)
	err := c.cc.Invoke(ctx, AdminService_SetDefaultLanguage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultLanguage(ctx context.Context, in *GetDefaultLanguageRequest, opts ...grpc.CallOption) (*GetDefaultLanguageResponse, error) {
	out := new(GetDefaultLanguageResponse)
	err := c.cc.Invoke(ctx, AdminService_GetDefaultLanguage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetMyInstance(ctx context.Context, in *GetMyInstanceRequest, opts ...grpc.CallOption) (*GetMyInstanceResponse, error) {
	out := new(GetMyInstanceResponse)
	err := c.cc.Invoke(ctx, AdminService_GetMyInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListInstanceDomains(ctx context.Context, in *ListInstanceDomainsRequest, opts ...grpc.CallOption) (*ListInstanceDomainsResponse, error) {
	out := new(ListInstanceDomainsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListInstanceDomains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListInstanceTrustedDomains(ctx context.Context, in *ListInstanceTrustedDomainsRequest, opts ...grpc.CallOption) (*ListInstanceTrustedDomainsResponse, error) {
	out := new(ListInstanceTrustedDomainsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListInstanceTrustedDomains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddInstanceTrustedDomain(ctx context.Context, in *AddInstanceTrustedDomainRequest, opts ...grpc.CallOption) (*AddInstanceTrustedDomainResponse, error) {
	out := new(AddInstanceTrustedDomainResponse)
	err := c.cc.Invoke(ctx, AdminService_AddInstanceTrustedDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveInstanceTrustedDomain(ctx context.Context, in *RemoveInstanceTrustedDomainRequest, opts ...grpc.CallOption) (*RemoveInstanceTrustedDomainResponse, error) {
	out := new(RemoveInstanceTrustedDomainResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveInstanceTrustedDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListSecretGenerators(ctx context.Context, in *ListSecretGeneratorsRequest, opts ...grpc.CallOption) (*ListSecretGeneratorsResponse, error) {
	out := new(ListSecretGeneratorsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListSecretGenerators_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetSecretGenerator(ctx context.Context, in *GetSecretGeneratorRequest, opts ...grpc.CallOption) (*GetSecretGeneratorResponse, error) {
	out := new(GetSecretGeneratorResponse)
	err := c.cc.Invoke(ctx, AdminService_GetSecretGenerator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateSecretGenerator(ctx context.Context, in *UpdateSecretGeneratorRequest, opts ...grpc.CallOption) (*UpdateSecretGeneratorResponse, error) {
	out := new(UpdateSecretGeneratorResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateSecretGenerator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetSMTPConfig(ctx context.Context, in *GetSMTPConfigRequest, opts ...grpc.CallOption) (*GetSMTPConfigResponse, error) {
	out := new(GetSMTPConfigResponse)
	err := c.cc.Invoke(ctx, AdminService_GetSMTPConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetSMTPConfigById(ctx context.Context, in *GetSMTPConfigByIdRequest, opts ...grpc.CallOption) (*GetSMTPConfigByIdResponse, error) {
	out := new(GetSMTPConfigByIdResponse)
	err := c.cc.Invoke(ctx, AdminService_GetSMTPConfigById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddSMTPConfig(ctx context.Context, in *AddSMTPConfigRequest, opts ...grpc.CallOption) (*AddSMTPConfigResponse, error) {
	out := new(AddSMTPConfigResponse)
	err := c.cc.Invoke(ctx, AdminService_AddSMTPConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateSMTPConfig(ctx context.Context, in *UpdateSMTPConfigRequest, opts ...grpc.CallOption) (*UpdateSMTPConfigResponse, error) {
	out := new(UpdateSMTPConfigResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateSMTPConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateSMTPConfigPassword(ctx context.Context, in *UpdateSMTPConfigPasswordRequest, opts ...grpc.CallOption) (*UpdateSMTPConfigPasswordResponse, error) {
	out := new(UpdateSMTPConfigPasswordResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateSMTPConfigPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ActivateSMTPConfig(ctx context.Context, in *ActivateSMTPConfigRequest, opts ...grpc.CallOption) (*ActivateSMTPConfigResponse, error) {
	out := new(ActivateSMTPConfigResponse)
	err := c.cc.Invoke(ctx, AdminService_ActivateSMTPConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeactivateSMTPConfig(ctx context.Context, in *DeactivateSMTPConfigRequest, opts ...grpc.CallOption) (*DeactivateSMTPConfigResponse, error) {
	out := new(DeactivateSMTPConfigResponse)
	err := c.cc.Invoke(ctx, AdminService_DeactivateSMTPConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveSMTPConfig(ctx context.Context, in *RemoveSMTPConfigRequest, opts ...grpc.CallOption) (*RemoveSMTPConfigResponse, error) {
	out := new(RemoveSMTPConfigResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveSMTPConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) TestSMTPConfigById(ctx context.Context, in *TestSMTPConfigByIdRequest, opts ...grpc.CallOption) (*TestSMTPConfigByIdResponse, error) {
	out := new(TestSMTPConfigByIdResponse)
	err := c.cc.Invoke(ctx, AdminService_TestSMTPConfigById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) TestSMTPConfig(ctx context.Context, in *TestSMTPConfigRequest, opts ...grpc.CallOption) (*TestSMTPConfigResponse, error) {
	out := new(TestSMTPConfigResponse)
	err := c.cc.Invoke(ctx, AdminService_TestSMTPConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListSMTPConfigs(ctx context.Context, in *ListSMTPConfigsRequest, opts ...grpc.CallOption) (*ListSMTPConfigsResponse, error) {
	out := new(ListSMTPConfigsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListSMTPConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListEmailProviders(ctx context.Context, in *ListEmailProvidersRequest, opts ...grpc.CallOption) (*ListEmailProvidersResponse, error) {
	out := new(ListEmailProvidersResponse)
	err := c.cc.Invoke(ctx, AdminService_ListEmailProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetEmailProvider(ctx context.Context, in *GetEmailProviderRequest, opts ...grpc.CallOption) (*GetEmailProviderResponse, error) {
	out := new(GetEmailProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_GetEmailProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetEmailProviderById(ctx context.Context, in *GetEmailProviderByIdRequest, opts ...grpc.CallOption) (*GetEmailProviderByIdResponse, error) {
	out := new(GetEmailProviderByIdResponse)
	err := c.cc.Invoke(ctx, AdminService_GetEmailProviderById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddEmailProviderSMTP(ctx context.Context, in *AddEmailProviderSMTPRequest, opts ...grpc.CallOption) (*AddEmailProviderSMTPResponse, error) {
	out := new(AddEmailProviderSMTPResponse)
	err := c.cc.Invoke(ctx, AdminService_AddEmailProviderSMTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateEmailProviderSMTP(ctx context.Context, in *UpdateEmailProviderSMTPRequest, opts ...grpc.CallOption) (*UpdateEmailProviderSMTPResponse, error) {
	out := new(UpdateEmailProviderSMTPResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateEmailProviderSMTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddEmailProviderHTTP(ctx context.Context, in *AddEmailProviderHTTPRequest, opts ...grpc.CallOption) (*AddEmailProviderHTTPResponse, error) {
	out := new(AddEmailProviderHTTPResponse)
	err := c.cc.Invoke(ctx, AdminService_AddEmailProviderHTTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateEmailProviderHTTP(ctx context.Context, in *UpdateEmailProviderHTTPRequest, opts ...grpc.CallOption) (*UpdateEmailProviderHTTPResponse, error) {
	out := new(UpdateEmailProviderHTTPResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateEmailProviderHTTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateEmailProviderSMTPPassword(ctx context.Context, in *UpdateEmailProviderSMTPPasswordRequest, opts ...grpc.CallOption) (*UpdateEmailProviderSMTPPasswordResponse, error) {
	out := new(UpdateEmailProviderSMTPPasswordResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateEmailProviderSMTPPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ActivateEmailProvider(ctx context.Context, in *ActivateEmailProviderRequest, opts ...grpc.CallOption) (*ActivateEmailProviderResponse, error) {
	out := new(ActivateEmailProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_ActivateEmailProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeactivateEmailProvider(ctx context.Context, in *DeactivateEmailProviderRequest, opts ...grpc.CallOption) (*DeactivateEmailProviderResponse, error) {
	out := new(DeactivateEmailProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_DeactivateEmailProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveEmailProvider(ctx context.Context, in *RemoveEmailProviderRequest, opts ...grpc.CallOption) (*RemoveEmailProviderResponse, error) {
	out := new(RemoveEmailProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveEmailProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) TestEmailProviderSMTPById(ctx context.Context, in *TestEmailProviderSMTPByIdRequest, opts ...grpc.CallOption) (*TestEmailProviderSMTPByIdResponse, error) {
	out := new(TestEmailProviderSMTPByIdResponse)
	err := c.cc.Invoke(ctx, AdminService_TestEmailProviderSMTPById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) TestEmailProviderSMTP(ctx context.Context, in *TestEmailProviderSMTPRequest, opts ...grpc.CallOption) (*TestEmailProviderSMTPResponse, error) {
	out := new(TestEmailProviderSMTPResponse)
	err := c.cc.Invoke(ctx, AdminService_TestEmailProviderSMTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListSMSProviders(ctx context.Context, in *ListSMSProvidersRequest, opts ...grpc.CallOption) (*ListSMSProvidersResponse, error) {
	out := new(ListSMSProvidersResponse)
	err := c.cc.Invoke(ctx, AdminService_ListSMSProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetSMSProvider(ctx context.Context, in *GetSMSProviderRequest, opts ...grpc.CallOption) (*GetSMSProviderResponse, error) {
	out := new(GetSMSProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_GetSMSProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddSMSProviderTwilio(ctx context.Context, in *AddSMSProviderTwilioRequest, opts ...grpc.CallOption) (*AddSMSProviderTwilioResponse, error) {
	out := new(AddSMSProviderTwilioResponse)
	err := c.cc.Invoke(ctx, AdminService_AddSMSProviderTwilio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateSMSProviderTwilio(ctx context.Context, in *UpdateSMSProviderTwilioRequest, opts ...grpc.CallOption) (*UpdateSMSProviderTwilioResponse, error) {
	out := new(UpdateSMSProviderTwilioResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateSMSProviderTwilio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateSMSProviderTwilioToken(ctx context.Context, in *UpdateSMSProviderTwilioTokenRequest, opts ...grpc.CallOption) (*UpdateSMSProviderTwilioTokenResponse, error) {
	out := new(UpdateSMSProviderTwilioTokenResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateSMSProviderTwilioToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddSMSProviderHTTP(ctx context.Context, in *AddSMSProviderHTTPRequest, opts ...grpc.CallOption) (*AddSMSProviderHTTPResponse, error) {
	out := new(AddSMSProviderHTTPResponse)
	err := c.cc.Invoke(ctx, AdminService_AddSMSProviderHTTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateSMSProviderHTTP(ctx context.Context, in *UpdateSMSProviderHTTPRequest, opts ...grpc.CallOption) (*UpdateSMSProviderHTTPResponse, error) {
	out := new(UpdateSMSProviderHTTPResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateSMSProviderHTTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ActivateSMSProvider(ctx context.Context, in *ActivateSMSProviderRequest, opts ...grpc.CallOption) (*ActivateSMSProviderResponse, error) {
	out := new(ActivateSMSProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_ActivateSMSProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeactivateSMSProvider(ctx context.Context, in *DeactivateSMSProviderRequest, opts ...grpc.CallOption) (*DeactivateSMSProviderResponse, error) {
	out := new(DeactivateSMSProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_DeactivateSMSProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveSMSProvider(ctx context.Context, in *RemoveSMSProviderRequest, opts ...grpc.CallOption) (*RemoveSMSProviderResponse, error) {
	out := new(RemoveSMSProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveSMSProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetOIDCSettings(ctx context.Context, in *GetOIDCSettingsRequest, opts ...grpc.CallOption) (*GetOIDCSettingsResponse, error) {
	out := new(GetOIDCSettingsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetOIDCSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddOIDCSettings(ctx context.Context, in *AddOIDCSettingsRequest, opts ...grpc.CallOption) (*AddOIDCSettingsResponse, error) {
	out := new(AddOIDCSettingsResponse)
	err := c.cc.Invoke(ctx, AdminService_AddOIDCSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateOIDCSettings(ctx context.Context, in *UpdateOIDCSettingsRequest, opts ...grpc.CallOption) (*UpdateOIDCSettingsResponse, error) {
	out := new(UpdateOIDCSettingsResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateOIDCSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetFileSystemNotificationProvider(ctx context.Context, in *GetFileSystemNotificationProviderRequest, opts ...grpc.CallOption) (*GetFileSystemNotificationProviderResponse, error) {
	out := new(GetFileSystemNotificationProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_GetFileSystemNotificationProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetLogNotificationProvider(ctx context.Context, in *GetLogNotificationProviderRequest, opts ...grpc.CallOption) (*GetLogNotificationProviderResponse, error) {
	out := new(GetLogNotificationProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_GetLogNotificationProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetSecurityPolicy(ctx context.Context, in *GetSecurityPolicyRequest, opts ...grpc.CallOption) (*GetSecurityPolicyResponse, error) {
	out := new(GetSecurityPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_GetSecurityPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetSecurityPolicy(ctx context.Context, in *SetSecurityPolicyRequest, opts ...grpc.CallOption) (*SetSecurityPolicyResponse, error) {
	out := new(SetSecurityPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_SetSecurityPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetOrgByID(ctx context.Context, in *GetOrgByIDRequest, opts ...grpc.CallOption) (*GetOrgByIDResponse, error) {
	out := new(GetOrgByIDResponse)
	err := c.cc.Invoke(ctx, AdminService_GetOrgByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) IsOrgUnique(ctx context.Context, in *IsOrgUniqueRequest, opts ...grpc.CallOption) (*IsOrgUniqueResponse, error) {
	out := new(IsOrgUniqueResponse)
	err := c.cc.Invoke(ctx, AdminService_IsOrgUnique_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultOrg(ctx context.Context, in *SetDefaultOrgRequest, opts ...grpc.CallOption) (*SetDefaultOrgResponse, error) {
	out := new(SetDefaultOrgResponse)
	err := c.cc.Invoke(ctx, AdminService_SetDefaultOrg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultOrg(ctx context.Context, in *GetDefaultOrgRequest, opts ...grpc.CallOption) (*GetDefaultOrgResponse, error) {
	out := new(GetDefaultOrgResponse)
	err := c.cc.Invoke(ctx, AdminService_GetDefaultOrg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListOrgs(ctx context.Context, in *ListOrgsRequest, opts ...grpc.CallOption) (*ListOrgsResponse, error) {
	out := new(ListOrgsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListOrgs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetUpOrg(ctx context.Context, in *SetUpOrgRequest, opts ...grpc.CallOption) (*SetUpOrgResponse, error) {
	out := new(SetUpOrgResponse)
	err := c.cc.Invoke(ctx, AdminService_SetUpOrg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveOrg(ctx context.Context, in *RemoveOrgRequest, opts ...grpc.CallOption) (*RemoveOrgResponse, error) {
	out := new(RemoveOrgResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveOrg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetIDPByID(ctx context.Context, in *GetIDPByIDRequest, opts ...grpc.CallOption) (*GetIDPByIDResponse, error) {
	out := new(GetIDPByIDResponse)
	err := c.cc.Invoke(ctx, AdminService_GetIDPByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListIDPs(ctx context.Context, in *ListIDPsRequest, opts ...grpc.CallOption) (*ListIDPsResponse, error) {
	out := new(ListIDPsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListIDPs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddOIDCIDP(ctx context.Context, in *AddOIDCIDPRequest, opts ...grpc.CallOption) (*AddOIDCIDPResponse, error) {
	out := new(AddOIDCIDPResponse)
	err := c.cc.Invoke(ctx, AdminService_AddOIDCIDP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddJWTIDP(ctx context.Context, in *AddJWTIDPRequest, opts ...grpc.CallOption) (*AddJWTIDPResponse, error) {
	out := new(AddJWTIDPResponse)
	err := c.cc.Invoke(ctx, AdminService_AddJWTIDP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateIDP(ctx context.Context, in *UpdateIDPRequest, opts ...grpc.CallOption) (*UpdateIDPResponse, error) {
	out := new(UpdateIDPResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateIDP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeactivateIDP(ctx context.Context, in *DeactivateIDPRequest, opts ...grpc.CallOption) (*DeactivateIDPResponse, error) {
	out := new(DeactivateIDPResponse)
	err := c.cc.Invoke(ctx, AdminService_DeactivateIDP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ReactivateIDP(ctx context.Context, in *ReactivateIDPRequest, opts ...grpc.CallOption) (*ReactivateIDPResponse, error) {
	out := new(ReactivateIDPResponse)
	err := c.cc.Invoke(ctx, AdminService_ReactivateIDP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveIDP(ctx context.Context, in *RemoveIDPRequest, opts ...grpc.CallOption) (*RemoveIDPResponse, error) {
	out := new(RemoveIDPResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveIDP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateIDPOIDCConfig(ctx context.Context, in *UpdateIDPOIDCConfigRequest, opts ...grpc.CallOption) (*UpdateIDPOIDCConfigResponse, error) {
	out := new(UpdateIDPOIDCConfigResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateIDPOIDCConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateIDPJWTConfig(ctx context.Context, in *UpdateIDPJWTConfigRequest, opts ...grpc.CallOption) (*UpdateIDPJWTConfigResponse, error) {
	out := new(UpdateIDPJWTConfigResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateIDPJWTConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error) {
	out := new(ListProvidersResponse)
	err := c.cc.Invoke(ctx, AdminService_ListProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetProviderByID(ctx context.Context, in *GetProviderByIDRequest, opts ...grpc.CallOption) (*GetProviderByIDResponse, error) {
	out := new(GetProviderByIDResponse)
	err := c.cc.Invoke(ctx, AdminService_GetProviderByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddGenericOAuthProvider(ctx context.Context, in *AddGenericOAuthProviderRequest, opts ...grpc.CallOption) (*AddGenericOAuthProviderResponse, error) {
	out := new(AddGenericOAuthProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_AddGenericOAuthProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateGenericOAuthProvider(ctx context.Context, in *UpdateGenericOAuthProviderRequest, opts ...grpc.CallOption) (*UpdateGenericOAuthProviderResponse, error) {
	out := new(UpdateGenericOAuthProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateGenericOAuthProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddGenericOIDCProvider(ctx context.Context, in *AddGenericOIDCProviderRequest, opts ...grpc.CallOption) (*AddGenericOIDCProviderResponse, error) {
	out := new(AddGenericOIDCProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_AddGenericOIDCProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateGenericOIDCProvider(ctx context.Context, in *UpdateGenericOIDCProviderRequest, opts ...grpc.CallOption) (*UpdateGenericOIDCProviderResponse, error) {
	out := new(UpdateGenericOIDCProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateGenericOIDCProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) MigrateGenericOIDCProvider(ctx context.Context, in *MigrateGenericOIDCProviderRequest, opts ...grpc.CallOption) (*MigrateGenericOIDCProviderResponse, error) {
	out := new(MigrateGenericOIDCProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_MigrateGenericOIDCProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddJWTProvider(ctx context.Context, in *AddJWTProviderRequest, opts ...grpc.CallOption) (*AddJWTProviderResponse, error) {
	out := new(AddJWTProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_AddJWTProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateJWTProvider(ctx context.Context, in *UpdateJWTProviderRequest, opts ...grpc.CallOption) (*UpdateJWTProviderResponse, error) {
	out := new(UpdateJWTProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateJWTProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddAzureADProvider(ctx context.Context, in *AddAzureADProviderRequest, opts ...grpc.CallOption) (*AddAzureADProviderResponse, error) {
	out := new(AddAzureADProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_AddAzureADProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateAzureADProvider(ctx context.Context, in *UpdateAzureADProviderRequest, opts ...grpc.CallOption) (*UpdateAzureADProviderResponse, error) {
	out := new(UpdateAzureADProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateAzureADProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddGitHubProvider(ctx context.Context, in *AddGitHubProviderRequest, opts ...grpc.CallOption) (*AddGitHubProviderResponse, error) {
	out := new(AddGitHubProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_AddGitHubProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateGitHubProvider(ctx context.Context, in *UpdateGitHubProviderRequest, opts ...grpc.CallOption) (*UpdateGitHubProviderResponse, error) {
	out := new(UpdateGitHubProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateGitHubProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddGitHubEnterpriseServerProvider(ctx context.Context, in *AddGitHubEnterpriseServerProviderRequest, opts ...grpc.CallOption) (*AddGitHubEnterpriseServerProviderResponse, error) {
	out := new(AddGitHubEnterpriseServerProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_AddGitHubEnterpriseServerProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateGitHubEnterpriseServerProvider(ctx context.Context, in *UpdateGitHubEnterpriseServerProviderRequest, opts ...grpc.CallOption) (*UpdateGitHubEnterpriseServerProviderResponse, error) {
	out := new(UpdateGitHubEnterpriseServerProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateGitHubEnterpriseServerProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddGitLabProvider(ctx context.Context, in *AddGitLabProviderRequest, opts ...grpc.CallOption) (*AddGitLabProviderResponse, error) {
	out := new(AddGitLabProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_AddGitLabProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateGitLabProvider(ctx context.Context, in *UpdateGitLabProviderRequest, opts ...grpc.CallOption) (*UpdateGitLabProviderResponse, error) {
	out := new(UpdateGitLabProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateGitLabProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddGitLabSelfHostedProvider(ctx context.Context, in *AddGitLabSelfHostedProviderRequest, opts ...grpc.CallOption) (*AddGitLabSelfHostedProviderResponse, error) {
	out := new(AddGitLabSelfHostedProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_AddGitLabSelfHostedProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateGitLabSelfHostedProvider(ctx context.Context, in *UpdateGitLabSelfHostedProviderRequest, opts ...grpc.CallOption) (*UpdateGitLabSelfHostedProviderResponse, error) {
	out := new(UpdateGitLabSelfHostedProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateGitLabSelfHostedProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddGoogleProvider(ctx context.Context, in *AddGoogleProviderRequest, opts ...grpc.CallOption) (*AddGoogleProviderResponse, error) {
	out := new(AddGoogleProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_AddGoogleProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateGoogleProvider(ctx context.Context, in *UpdateGoogleProviderRequest, opts ...grpc.CallOption) (*UpdateGoogleProviderResponse, error) {
	out := new(UpdateGoogleProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateGoogleProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddLDAPProvider(ctx context.Context, in *AddLDAPProviderRequest, opts ...grpc.CallOption) (*AddLDAPProviderResponse, error) {
	out := new(AddLDAPProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_AddLDAPProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateLDAPProvider(ctx context.Context, in *UpdateLDAPProviderRequest, opts ...grpc.CallOption) (*UpdateLDAPProviderResponse, error) {
	out := new(UpdateLDAPProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateLDAPProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddAppleProvider(ctx context.Context, in *AddAppleProviderRequest, opts ...grpc.CallOption) (*AddAppleProviderResponse, error) {
	out := new(AddAppleProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_AddAppleProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateAppleProvider(ctx context.Context, in *UpdateAppleProviderRequest, opts ...grpc.CallOption) (*UpdateAppleProviderResponse, error) {
	out := new(UpdateAppleProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateAppleProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddSAMLProvider(ctx context.Context, in *AddSAMLProviderRequest, opts ...grpc.CallOption) (*AddSAMLProviderResponse, error) {
	out := new(AddSAMLProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_AddSAMLProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateSAMLProvider(ctx context.Context, in *UpdateSAMLProviderRequest, opts ...grpc.CallOption) (*UpdateSAMLProviderResponse, error) {
	out := new(UpdateSAMLProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateSAMLProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RegenerateSAMLProviderCertificate(ctx context.Context, in *RegenerateSAMLProviderCertificateRequest, opts ...grpc.CallOption) (*RegenerateSAMLProviderCertificateResponse, error) {
	out := new(RegenerateSAMLProviderCertificateResponse)
	err := c.cc.Invoke(ctx, AdminService_RegenerateSAMLProviderCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteProvider(ctx context.Context, in *DeleteProviderRequest, opts ...grpc.CallOption) (*DeleteProviderResponse, error) {
	out := new(DeleteProviderResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetOrgIAMPolicy(ctx context.Context, in *GetOrgIAMPolicyRequest, opts ...grpc.CallOption) (*GetOrgIAMPolicyResponse, error) {
	out := new(GetOrgIAMPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_GetOrgIAMPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateOrgIAMPolicy(ctx context.Context, in *UpdateOrgIAMPolicyRequest, opts ...grpc.CallOption) (*UpdateOrgIAMPolicyResponse, error) {
	out := new(UpdateOrgIAMPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateOrgIAMPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomOrgIAMPolicy(ctx context.Context, in *GetCustomOrgIAMPolicyRequest, opts ...grpc.CallOption) (*GetCustomOrgIAMPolicyResponse, error) {
	out := new(GetCustomOrgIAMPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_GetCustomOrgIAMPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddCustomOrgIAMPolicy(ctx context.Context, in *AddCustomOrgIAMPolicyRequest, opts ...grpc.CallOption) (*AddCustomOrgIAMPolicyResponse, error) {
	out := new(AddCustomOrgIAMPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_AddCustomOrgIAMPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateCustomOrgIAMPolicy(ctx context.Context, in *UpdateCustomOrgIAMPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomOrgIAMPolicyResponse, error) {
	out := new(UpdateCustomOrgIAMPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateCustomOrgIAMPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomOrgIAMPolicyToDefault(ctx context.Context, in *ResetCustomOrgIAMPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomOrgIAMPolicyToDefaultResponse, error) {
	out := new(ResetCustomOrgIAMPolicyToDefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_ResetCustomOrgIAMPolicyToDefault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDomainPolicy(ctx context.Context, in *GetDomainPolicyRequest, opts ...grpc.CallOption) (*GetDomainPolicyResponse, error) {
	out := new(GetDomainPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_GetDomainPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDomainPolicy(ctx context.Context, in *UpdateDomainPolicyRequest, opts ...grpc.CallOption) (*UpdateDomainPolicyResponse, error) {
	out := new(UpdateDomainPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateDomainPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomDomainPolicy(ctx context.Context, in *GetCustomDomainPolicyRequest, opts ...grpc.CallOption) (*GetCustomDomainPolicyResponse, error) {
	out := new(GetCustomDomainPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_GetCustomDomainPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddCustomDomainPolicy(ctx context.Context, in *AddCustomDomainPolicyRequest, opts ...grpc.CallOption) (*AddCustomDomainPolicyResponse, error) {
	out := new(AddCustomDomainPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_AddCustomDomainPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateCustomDomainPolicy(ctx context.Context, in *UpdateCustomDomainPolicyRequest, opts ...grpc.CallOption) (*UpdateCustomDomainPolicyResponse, error) {
	out := new(UpdateCustomDomainPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateCustomDomainPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomDomainPolicyToDefault(ctx context.Context, in *ResetCustomDomainPolicyToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomDomainPolicyToDefaultResponse, error) {
	out := new(ResetCustomDomainPolicyToDefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_ResetCustomDomainPolicyToDefault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetLabelPolicy(ctx context.Context, in *GetLabelPolicyRequest, opts ...grpc.CallOption) (*GetLabelPolicyResponse, error) {
	out := new(GetLabelPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_GetLabelPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPreviewLabelPolicy(ctx context.Context, in *GetPreviewLabelPolicyRequest, opts ...grpc.CallOption) (*GetPreviewLabelPolicyResponse, error) {
	out := new(GetPreviewLabelPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_GetPreviewLabelPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateLabelPolicy(ctx context.Context, in *UpdateLabelPolicyRequest, opts ...grpc.CallOption) (*UpdateLabelPolicyResponse, error) {
	out := new(UpdateLabelPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateLabelPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ActivateLabelPolicy(ctx context.Context, in *ActivateLabelPolicyRequest, opts ...grpc.CallOption) (*ActivateLabelPolicyResponse, error) {
	out := new(ActivateLabelPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_ActivateLabelPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveLabelPolicyLogo(ctx context.Context, in *RemoveLabelPolicyLogoRequest, opts ...grpc.CallOption) (*RemoveLabelPolicyLogoResponse, error) {
	out := new(RemoveLabelPolicyLogoResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveLabelPolicyLogo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveLabelPolicyLogoDark(ctx context.Context, in *RemoveLabelPolicyLogoDarkRequest, opts ...grpc.CallOption) (*RemoveLabelPolicyLogoDarkResponse, error) {
	out := new(RemoveLabelPolicyLogoDarkResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveLabelPolicyLogoDark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveLabelPolicyIcon(ctx context.Context, in *RemoveLabelPolicyIconRequest, opts ...grpc.CallOption) (*RemoveLabelPolicyIconResponse, error) {
	out := new(RemoveLabelPolicyIconResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveLabelPolicyIcon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveLabelPolicyIconDark(ctx context.Context, in *RemoveLabelPolicyIconDarkRequest, opts ...grpc.CallOption) (*RemoveLabelPolicyIconDarkResponse, error) {
	out := new(RemoveLabelPolicyIconDarkResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveLabelPolicyIconDark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveLabelPolicyFont(ctx context.Context, in *RemoveLabelPolicyFontRequest, opts ...grpc.CallOption) (*RemoveLabelPolicyFontResponse, error) {
	out := new(RemoveLabelPolicyFontResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveLabelPolicyFont_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetLoginPolicy(ctx context.Context, in *GetLoginPolicyRequest, opts ...grpc.CallOption) (*GetLoginPolicyResponse, error) {
	out := new(GetLoginPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_GetLoginPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateLoginPolicy(ctx context.Context, in *UpdateLoginPolicyRequest, opts ...grpc.CallOption) (*UpdateLoginPolicyResponse, error) {
	out := new(UpdateLoginPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateLoginPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListLoginPolicyIDPs(ctx context.Context, in *ListLoginPolicyIDPsRequest, opts ...grpc.CallOption) (*ListLoginPolicyIDPsResponse, error) {
	out := new(ListLoginPolicyIDPsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListLoginPolicyIDPs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddIDPToLoginPolicy(ctx context.Context, in *AddIDPToLoginPolicyRequest, opts ...grpc.CallOption) (*AddIDPToLoginPolicyResponse, error) {
	out := new(AddIDPToLoginPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_AddIDPToLoginPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveIDPFromLoginPolicy(ctx context.Context, in *RemoveIDPFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveIDPFromLoginPolicyResponse, error) {
	out := new(RemoveIDPFromLoginPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveIDPFromLoginPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListLoginPolicySecondFactors(ctx context.Context, in *ListLoginPolicySecondFactorsRequest, opts ...grpc.CallOption) (*ListLoginPolicySecondFactorsResponse, error) {
	out := new(ListLoginPolicySecondFactorsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListLoginPolicySecondFactors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddSecondFactorToLoginPolicy(ctx context.Context, in *AddSecondFactorToLoginPolicyRequest, opts ...grpc.CallOption) (*AddSecondFactorToLoginPolicyResponse, error) {
	out := new(AddSecondFactorToLoginPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_AddSecondFactorToLoginPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveSecondFactorFromLoginPolicy(ctx context.Context, in *RemoveSecondFactorFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveSecondFactorFromLoginPolicyResponse, error) {
	out := new(RemoveSecondFactorFromLoginPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveSecondFactorFromLoginPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListLoginPolicyMultiFactors(ctx context.Context, in *ListLoginPolicyMultiFactorsRequest, opts ...grpc.CallOption) (*ListLoginPolicyMultiFactorsResponse, error) {
	out := new(ListLoginPolicyMultiFactorsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListLoginPolicyMultiFactors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddMultiFactorToLoginPolicy(ctx context.Context, in *AddMultiFactorToLoginPolicyRequest, opts ...grpc.CallOption) (*AddMultiFactorToLoginPolicyResponse, error) {
	out := new(AddMultiFactorToLoginPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_AddMultiFactorToLoginPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveMultiFactorFromLoginPolicy(ctx context.Context, in *RemoveMultiFactorFromLoginPolicyRequest, opts ...grpc.CallOption) (*RemoveMultiFactorFromLoginPolicyResponse, error) {
	out := new(RemoveMultiFactorFromLoginPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveMultiFactorFromLoginPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPasswordComplexityPolicy(ctx context.Context, in *GetPasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*GetPasswordComplexityPolicyResponse, error) {
	out := new(GetPasswordComplexityPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_GetPasswordComplexityPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdatePasswordComplexityPolicy(ctx context.Context, in *UpdatePasswordComplexityPolicyRequest, opts ...grpc.CallOption) (*UpdatePasswordComplexityPolicyResponse, error) {
	out := new(UpdatePasswordComplexityPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdatePasswordComplexityPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPasswordAgePolicy(ctx context.Context, in *GetPasswordAgePolicyRequest, opts ...grpc.CallOption) (*GetPasswordAgePolicyResponse, error) {
	out := new(GetPasswordAgePolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_GetPasswordAgePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdatePasswordAgePolicy(ctx context.Context, in *UpdatePasswordAgePolicyRequest, opts ...grpc.CallOption) (*UpdatePasswordAgePolicyResponse, error) {
	out := new(UpdatePasswordAgePolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdatePasswordAgePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetLockoutPolicy(ctx context.Context, in *GetLockoutPolicyRequest, opts ...grpc.CallOption) (*GetLockoutPolicyResponse, error) {
	out := new(GetLockoutPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_GetLockoutPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateLockoutPolicy(ctx context.Context, in *UpdateLockoutPolicyRequest, opts ...grpc.CallOption) (*UpdateLockoutPolicyResponse, error) {
	out := new(UpdateLockoutPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateLockoutPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPrivacyPolicy(ctx context.Context, in *GetPrivacyPolicyRequest, opts ...grpc.CallOption) (*GetPrivacyPolicyResponse, error) {
	out := new(GetPrivacyPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_GetPrivacyPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdatePrivacyPolicy(ctx context.Context, in *UpdatePrivacyPolicyRequest, opts ...grpc.CallOption) (*UpdatePrivacyPolicyResponse, error) {
	out := new(UpdatePrivacyPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdatePrivacyPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddNotificationPolicy(ctx context.Context, in *AddNotificationPolicyRequest, opts ...grpc.CallOption) (*AddNotificationPolicyResponse, error) {
	out := new(AddNotificationPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_AddNotificationPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetNotificationPolicy(ctx context.Context, in *GetNotificationPolicyRequest, opts ...grpc.CallOption) (*GetNotificationPolicyResponse, error) {
	out := new(GetNotificationPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_GetNotificationPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateNotificationPolicy(ctx context.Context, in *UpdateNotificationPolicyRequest, opts ...grpc.CallOption) (*UpdateNotificationPolicyResponse, error) {
	out := new(UpdateNotificationPolicyResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateNotificationPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultInitMessageText(ctx context.Context, in *GetDefaultInitMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultInitMessageTextResponse, error) {
	out := new(GetDefaultInitMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_GetDefaultInitMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomInitMessageText(ctx context.Context, in *GetCustomInitMessageTextRequest, opts ...grpc.CallOption) (*GetCustomInitMessageTextResponse, error) {
	out := new(GetCustomInitMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_GetCustomInitMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultInitMessageText(ctx context.Context, in *SetDefaultInitMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultInitMessageTextResponse, error) {
	out := new(SetDefaultInitMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_SetDefaultInitMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomInitMessageTextToDefault(ctx context.Context, in *ResetCustomInitMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomInitMessageTextToDefaultResponse, error) {
	out := new(ResetCustomInitMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_ResetCustomInitMessageTextToDefault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultPasswordResetMessageText(ctx context.Context, in *GetDefaultPasswordResetMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultPasswordResetMessageTextResponse, error) {
	out := new(GetDefaultPasswordResetMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_GetDefaultPasswordResetMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomPasswordResetMessageText(ctx context.Context, in *GetCustomPasswordResetMessageTextRequest, opts ...grpc.CallOption) (*GetCustomPasswordResetMessageTextResponse, error) {
	out := new(GetCustomPasswordResetMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_GetCustomPasswordResetMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultPasswordResetMessageText(ctx context.Context, in *SetDefaultPasswordResetMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultPasswordResetMessageTextResponse, error) {
	out := new(SetDefaultPasswordResetMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_SetDefaultPasswordResetMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomPasswordResetMessageTextToDefault(ctx context.Context, in *ResetCustomPasswordResetMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomPasswordResetMessageTextToDefaultResponse, error) {
	out := new(ResetCustomPasswordResetMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_ResetCustomPasswordResetMessageTextToDefault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultVerifyEmailMessageText(ctx context.Context, in *GetDefaultVerifyEmailMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultVerifyEmailMessageTextResponse, error) {
	out := new(GetDefaultVerifyEmailMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_GetDefaultVerifyEmailMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomVerifyEmailMessageText(ctx context.Context, in *GetCustomVerifyEmailMessageTextRequest, opts ...grpc.CallOption) (*GetCustomVerifyEmailMessageTextResponse, error) {
	out := new(GetCustomVerifyEmailMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_GetCustomVerifyEmailMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultVerifyEmailMessageText(ctx context.Context, in *SetDefaultVerifyEmailMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultVerifyEmailMessageTextResponse, error) {
	out := new(SetDefaultVerifyEmailMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_SetDefaultVerifyEmailMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomVerifyEmailMessageTextToDefault(ctx context.Context, in *ResetCustomVerifyEmailMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomVerifyEmailMessageTextToDefaultResponse, error) {
	out := new(ResetCustomVerifyEmailMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_ResetCustomVerifyEmailMessageTextToDefault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultVerifyPhoneMessageText(ctx context.Context, in *GetDefaultVerifyPhoneMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultVerifyPhoneMessageTextResponse, error) {
	out := new(GetDefaultVerifyPhoneMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_GetDefaultVerifyPhoneMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomVerifyPhoneMessageText(ctx context.Context, in *GetCustomVerifyPhoneMessageTextRequest, opts ...grpc.CallOption) (*GetCustomVerifyPhoneMessageTextResponse, error) {
	out := new(GetCustomVerifyPhoneMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_GetCustomVerifyPhoneMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultVerifyPhoneMessageText(ctx context.Context, in *SetDefaultVerifyPhoneMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultVerifyPhoneMessageTextResponse, error) {
	out := new(SetDefaultVerifyPhoneMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_SetDefaultVerifyPhoneMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomVerifyPhoneMessageTextToDefault(ctx context.Context, in *ResetCustomVerifyPhoneMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomVerifyPhoneMessageTextToDefaultResponse, error) {
	out := new(ResetCustomVerifyPhoneMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_ResetCustomVerifyPhoneMessageTextToDefault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultVerifySMSOTPMessageText(ctx context.Context, in *GetDefaultVerifySMSOTPMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultVerifySMSOTPMessageTextResponse, error) {
	out := new(GetDefaultVerifySMSOTPMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_GetDefaultVerifySMSOTPMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomVerifySMSOTPMessageText(ctx context.Context, in *GetCustomVerifySMSOTPMessageTextRequest, opts ...grpc.CallOption) (*GetCustomVerifySMSOTPMessageTextResponse, error) {
	out := new(GetCustomVerifySMSOTPMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_GetCustomVerifySMSOTPMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultVerifySMSOTPMessageText(ctx context.Context, in *SetDefaultVerifySMSOTPMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultVerifySMSOTPMessageTextResponse, error) {
	out := new(SetDefaultVerifySMSOTPMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_SetDefaultVerifySMSOTPMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomVerifySMSOTPMessageTextToDefault(ctx context.Context, in *ResetCustomVerifySMSOTPMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomVerifySMSOTPMessageTextToDefaultResponse, error) {
	out := new(ResetCustomVerifySMSOTPMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_ResetCustomVerifySMSOTPMessageTextToDefault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultVerifyEmailOTPMessageText(ctx context.Context, in *GetDefaultVerifyEmailOTPMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultVerifyEmailOTPMessageTextResponse, error) {
	out := new(GetDefaultVerifyEmailOTPMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_GetDefaultVerifyEmailOTPMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomVerifyEmailOTPMessageText(ctx context.Context, in *GetCustomVerifyEmailOTPMessageTextRequest, opts ...grpc.CallOption) (*GetCustomVerifyEmailOTPMessageTextResponse, error) {
	out := new(GetCustomVerifyEmailOTPMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_GetCustomVerifyEmailOTPMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultVerifyEmailOTPMessageText(ctx context.Context, in *SetDefaultVerifyEmailOTPMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultVerifyEmailOTPMessageTextResponse, error) {
	out := new(SetDefaultVerifyEmailOTPMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_SetDefaultVerifyEmailOTPMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomVerifyEmailOTPMessageTextToDefault(ctx context.Context, in *ResetCustomVerifyEmailOTPMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomVerifyEmailOTPMessageTextToDefaultResponse, error) {
	out := new(ResetCustomVerifyEmailOTPMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_ResetCustomVerifyEmailOTPMessageTextToDefault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultDomainClaimedMessageText(ctx context.Context, in *GetDefaultDomainClaimedMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultDomainClaimedMessageTextResponse, error) {
	out := new(GetDefaultDomainClaimedMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_GetDefaultDomainClaimedMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomDomainClaimedMessageText(ctx context.Context, in *GetCustomDomainClaimedMessageTextRequest, opts ...grpc.CallOption) (*GetCustomDomainClaimedMessageTextResponse, error) {
	out := new(GetCustomDomainClaimedMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_GetCustomDomainClaimedMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultDomainClaimedMessageText(ctx context.Context, in *SetDefaultDomainClaimedMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultDomainClaimedMessageTextResponse, error) {
	out := new(SetDefaultDomainClaimedMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_SetDefaultDomainClaimedMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomDomainClaimedMessageTextToDefault(ctx context.Context, in *ResetCustomDomainClaimedMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomDomainClaimedMessageTextToDefaultResponse, error) {
	out := new(ResetCustomDomainClaimedMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_ResetCustomDomainClaimedMessageTextToDefault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultPasswordlessRegistrationMessageText(ctx context.Context, in *GetDefaultPasswordlessRegistrationMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultPasswordlessRegistrationMessageTextResponse, error) {
	out := new(GetDefaultPasswordlessRegistrationMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_GetDefaultPasswordlessRegistrationMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomPasswordlessRegistrationMessageText(ctx context.Context, in *GetCustomPasswordlessRegistrationMessageTextRequest, opts ...grpc.CallOption) (*GetCustomPasswordlessRegistrationMessageTextResponse, error) {
	out := new(GetCustomPasswordlessRegistrationMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_GetCustomPasswordlessRegistrationMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultPasswordlessRegistrationMessageText(ctx context.Context, in *SetDefaultPasswordlessRegistrationMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultPasswordlessRegistrationMessageTextResponse, error) {
	out := new(SetDefaultPasswordlessRegistrationMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_SetDefaultPasswordlessRegistrationMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomPasswordlessRegistrationMessageTextToDefault(ctx context.Context, in *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse, error) {
	out := new(ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_ResetCustomPasswordlessRegistrationMessageTextToDefault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultPasswordChangeMessageText(ctx context.Context, in *GetDefaultPasswordChangeMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultPasswordChangeMessageTextResponse, error) {
	out := new(GetDefaultPasswordChangeMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_GetDefaultPasswordChangeMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomPasswordChangeMessageText(ctx context.Context, in *GetCustomPasswordChangeMessageTextRequest, opts ...grpc.CallOption) (*GetCustomPasswordChangeMessageTextResponse, error) {
	out := new(GetCustomPasswordChangeMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_GetCustomPasswordChangeMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultPasswordChangeMessageText(ctx context.Context, in *SetDefaultPasswordChangeMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultPasswordChangeMessageTextResponse, error) {
	out := new(SetDefaultPasswordChangeMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_SetDefaultPasswordChangeMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomPasswordChangeMessageTextToDefault(ctx context.Context, in *ResetCustomPasswordChangeMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomPasswordChangeMessageTextToDefaultResponse, error) {
	out := new(ResetCustomPasswordChangeMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_ResetCustomPasswordChangeMessageTextToDefault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultInviteUserMessageText(ctx context.Context, in *GetDefaultInviteUserMessageTextRequest, opts ...grpc.CallOption) (*GetDefaultInviteUserMessageTextResponse, error) {
	out := new(GetDefaultInviteUserMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_GetDefaultInviteUserMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomInviteUserMessageText(ctx context.Context, in *GetCustomInviteUserMessageTextRequest, opts ...grpc.CallOption) (*GetCustomInviteUserMessageTextResponse, error) {
	out := new(GetCustomInviteUserMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_GetCustomInviteUserMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetDefaultInviteUserMessageText(ctx context.Context, in *SetDefaultInviteUserMessageTextRequest, opts ...grpc.CallOption) (*SetDefaultInviteUserMessageTextResponse, error) {
	out := new(SetDefaultInviteUserMessageTextResponse)
	err := c.cc.Invoke(ctx, AdminService_SetDefaultInviteUserMessageText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomInviteUserMessageTextToDefault(ctx context.Context, in *ResetCustomInviteUserMessageTextToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomInviteUserMessageTextToDefaultResponse, error) {
	out := new(ResetCustomInviteUserMessageTextToDefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_ResetCustomInviteUserMessageTextToDefault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDefaultLoginTexts(ctx context.Context, in *GetDefaultLoginTextsRequest, opts ...grpc.CallOption) (*GetDefaultLoginTextsResponse, error) {
	out := new(GetDefaultLoginTextsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetDefaultLoginTexts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCustomLoginTexts(ctx context.Context, in *GetCustomLoginTextsRequest, opts ...grpc.CallOption) (*GetCustomLoginTextsResponse, error) {
	out := new(GetCustomLoginTextsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetCustomLoginTexts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetCustomLoginText(ctx context.Context, in *SetCustomLoginTextsRequest, opts ...grpc.CallOption) (*SetCustomLoginTextsResponse, error) {
	out := new(SetCustomLoginTextsResponse)
	err := c.cc.Invoke(ctx, AdminService_SetCustomLoginText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ResetCustomLoginTextToDefault(ctx context.Context, in *ResetCustomLoginTextsToDefaultRequest, opts ...grpc.CallOption) (*ResetCustomLoginTextsToDefaultResponse, error) {
	out := new(ResetCustomLoginTextsToDefaultResponse)
	err := c.cc.Invoke(ctx, AdminService_ResetCustomLoginTextToDefault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListIAMMemberRoles(ctx context.Context, in *ListIAMMemberRolesRequest, opts ...grpc.CallOption) (*ListIAMMemberRolesResponse, error) {
	out := new(ListIAMMemberRolesResponse)
	err := c.cc.Invoke(ctx, AdminService_ListIAMMemberRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListIAMMembers(ctx context.Context, in *ListIAMMembersRequest, opts ...grpc.CallOption) (*ListIAMMembersResponse, error) {
	out := new(ListIAMMembersResponse)
	err := c.cc.Invoke(ctx, AdminService_ListIAMMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddIAMMember(ctx context.Context, in *AddIAMMemberRequest, opts ...grpc.CallOption) (*AddIAMMemberResponse, error) {
	out := new(AddIAMMemberResponse)
	err := c.cc.Invoke(ctx, AdminService_AddIAMMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateIAMMember(ctx context.Context, in *UpdateIAMMemberRequest, opts ...grpc.CallOption) (*UpdateIAMMemberResponse, error) {
	out := new(UpdateIAMMemberResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateIAMMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveIAMMember(ctx context.Context, in *RemoveIAMMemberRequest, opts ...grpc.CallOption) (*RemoveIAMMemberResponse, error) {
	out := new(RemoveIAMMemberResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveIAMMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListViews(ctx context.Context, in *ListViewsRequest, opts ...grpc.CallOption) (*ListViewsResponse, error) {
	out := new(ListViewsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListViews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListFailedEvents(ctx context.Context, in *ListFailedEventsRequest, opts ...grpc.CallOption) (*ListFailedEventsResponse, error) {
	out := new(ListFailedEventsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListFailedEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RemoveFailedEvent(ctx context.Context, in *RemoveFailedEventRequest, opts ...grpc.CallOption) (*RemoveFailedEventResponse, error) {
	out := new(RemoveFailedEventResponse)
	err := c.cc.Invoke(ctx, AdminService_RemoveFailedEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ImportData(ctx context.Context, in *ImportDataRequest, opts ...grpc.CallOption) (*ImportDataResponse, error) {
	out := new(ImportDataResponse)
	err := c.cc.Invoke(ctx, AdminService_ImportData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ExportData(ctx context.Context, in *ExportDataRequest, opts ...grpc.CallOption) (*ExportDataResponse, error) {
	out := new(ExportDataResponse)
	err := c.cc.Invoke(ctx, AdminService_ExportData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListEventTypes(ctx context.Context, in *ListEventTypesRequest, opts ...grpc.CallOption) (*ListEventTypesResponse, error) {
	out := new(ListEventTypesResponse)
	err := c.cc.Invoke(ctx, AdminService_ListEventTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListEvents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListAggregateTypes(ctx context.Context, in *ListAggregateTypesRequest, opts ...grpc.CallOption) (*ListAggregateTypesResponse, error) {
	out := new(ListAggregateTypesResponse)
	err := c.cc.Invoke(ctx, AdminService_ListAggregateTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ActivateFeatureLoginDefaultOrg(ctx context.Context, in *ActivateFeatureLoginDefaultOrgRequest, opts ...grpc.CallOption) (*ActivateFeatureLoginDefaultOrgResponse, error) {
	out := new(ActivateFeatureLoginDefaultOrgResponse)
	err := c.cc.Invoke(ctx, AdminService_ActivateFeatureLoginDefaultOrg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListMilestones(ctx context.Context, in *ListMilestonesRequest, opts ...grpc.CallOption) (*ListMilestonesResponse, error) {
	out := new(ListMilestonesResponse)
	err := c.cc.Invoke(ctx, AdminService_ListMilestones_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetRestrictions(ctx context.Context, in *SetRestrictionsRequest, opts ...grpc.CallOption) (*SetRestrictionsResponse, error) {
	out := new(SetRestrictionsResponse)
	err := c.cc.Invoke(ctx, AdminService_SetRestrictions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetRestrictions(ctx context.Context, in *GetRestrictionsRequest, opts ...grpc.CallOption) (*GetRestrictionsResponse, error) {
	out := new(GetRestrictionsResponse)
	err := c.cc.Invoke(ctx, AdminService_GetRestrictions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
	GetSupportedLanguages(context.Context, *GetSupportedLanguagesRequest) (*GetSupportedLanguagesResponse, error)
	GetAllowedLanguages(context.Context, *GetAllowedLanguagesRequest) (*GetAllowedLanguagesResponse, error)
	SetDefaultLanguage(context.Context, *SetDefaultLanguageRequest) (*SetDefaultLanguageResponse, error)
	GetDefaultLanguage(context.Context, *GetDefaultLanguageRequest) (*GetDefaultLanguageResponse, error)
	GetMyInstance(context.Context, *GetMyInstanceRequest) (*GetMyInstanceResponse, error)
	ListInstanceDomains(context.Context, *ListInstanceDomainsRequest) (*ListInstanceDomainsResponse, error)
	ListInstanceTrustedDomains(context.Context, *ListInstanceTrustedDomainsRequest) (*ListInstanceTrustedDomainsResponse, error)
	AddInstanceTrustedDomain(context.Context, *AddInstanceTrustedDomainRequest) (*AddInstanceTrustedDomainResponse, error)
	RemoveInstanceTrustedDomain(context.Context, *RemoveInstanceTrustedDomainRequest) (*RemoveInstanceTrustedDomainResponse, error)
	ListSecretGenerators(context.Context, *ListSecretGeneratorsRequest) (*ListSecretGeneratorsResponse, error)
	GetSecretGenerator(context.Context, *GetSecretGeneratorRequest) (*GetSecretGeneratorResponse, error)
	UpdateSecretGenerator(context.Context, *UpdateSecretGeneratorRequest) (*UpdateSecretGeneratorResponse, error)
	// Deprecated: Get active SMTP Configuration
	//
	// Returns the active SMTP configuration from the system. This is used to send E-Mails to the users.
	//
	// Deprecated: please move to the new endpoint GetEmailProvider.
	GetSMTPConfig(context.Context, *GetSMTPConfigRequest) (*GetSMTPConfigResponse, error)
	// Deprecated: Get SMTP provider configuration by its id
	//
	// Get a specific SMTP provider configuration by its ID.
	//
	// Deprecated: please move to the new endpoint GetEmailProviderById.
	GetSMTPConfigById(context.Context, *GetSMTPConfigByIdRequest) (*GetSMTPConfigByIdResponse, error)
	// Deprecated: Add SMTP Configuration
	//
	// Add a new SMTP configuration if nothing is set yet.
	//
	// Deprecated: please move to the new endpoint AddEmailProviderSMTP.
	AddSMTPConfig(context.Context, *AddSMTPConfigRequest) (*AddSMTPConfigResponse, error)
	// Deprecated: Update SMTP Configuration
	//
	// Update the SMTP configuration, be aware that this will be activated as soon as it is saved. So the users will get notifications from the newly configured SMTP.
	//
	// Deprecated: please move to the new endpoint UpdateEmailProviderSMTP.
	UpdateSMTPConfig(context.Context, *UpdateSMTPConfigRequest) (*UpdateSMTPConfigResponse, error)
	// Deprecated: Update SMTP Password
	//
	// Update the SMTP password that is used for the host, be aware that this will be activated as soon as it is saved. So the users will get notifications from the newly configured SMTP.
	//
	// Deprecated: please move to the new endpoint UpdateEmailProviderSMTPPassword.
	UpdateSMTPConfigPassword(context.Context, *UpdateSMTPConfigPasswordRequest) (*UpdateSMTPConfigPasswordResponse, error)
	// Deprecated: Activate SMTP Provider
	//
	// Activate an SMTP provider.
	//
	// Deprecated: please move to the new endpoint ActivateEmailProvider.
	ActivateSMTPConfig(context.Context, *ActivateSMTPConfigRequest) (*ActivateSMTPConfigResponse, error)
	// Deprecated: Deactivate SMTP Provider
	//
	// Deactivate an SMTP provider. After deactivating the provider, the users will not be able to receive SMTP notifications from that provider anymore.
	//
	// Deprecated: please move to the new endpoint DeactivateEmailProvider.
	DeactivateSMTPConfig(context.Context, *DeactivateSMTPConfigRequest) (*DeactivateSMTPConfigResponse, error)
	// Deprecated: Remove SMTP Configuration
	//
	// Remove the SMTP configuration, be aware that the users will not get an E-Mail if no SMTP is set.
	//
	// Deprecated: please move to the new endpoint RemoveEmailProvider.
	RemoveSMTPConfig(context.Context, *RemoveSMTPConfigRequest) (*RemoveSMTPConfigResponse, error)
	// Deprecated: Test SMTP Provider
	//
	// Test an SMTP provider identified by its ID. After testing the provider, the users will receive information about the test results.
	//
	// Deprecated: please move to the new endpoint TestEmailProviderSMTPById.
	TestSMTPConfigById(context.Context, *TestSMTPConfigByIdRequest) (*TestSMTPConfigByIdResponse, error)
	// Deprecated: Test SMTP Provider
	//
	// Test an SMTP provider. After testing the provider, the users will receive information about the test results.
	//
	// Deprecated: please move to the new endpoint TestEmailProviderSMTP.
	TestSMTPConfig(context.Context, *TestSMTPConfigRequest) (*TestSMTPConfigResponse, error)
	// Deprecated: List SMTP Configs
	//
	// Returns a list of SMTP configurations.
	//
	// Deprecated: please move to the new endpoint ListEmailProviders.
	ListSMTPConfigs(context.Context, *ListSMTPConfigsRequest) (*ListSMTPConfigsResponse, error)
	ListEmailProviders(context.Context, *ListEmailProvidersRequest) (*ListEmailProvidersResponse, error)
	GetEmailProvider(context.Context, *GetEmailProviderRequest) (*GetEmailProviderResponse, error)
	GetEmailProviderById(context.Context, *GetEmailProviderByIdRequest) (*GetEmailProviderByIdResponse, error)
	AddEmailProviderSMTP(context.Context, *AddEmailProviderSMTPRequest) (*AddEmailProviderSMTPResponse, error)
	UpdateEmailProviderSMTP(context.Context, *UpdateEmailProviderSMTPRequest) (*UpdateEmailProviderSMTPResponse, error)
	AddEmailProviderHTTP(context.Context, *AddEmailProviderHTTPRequest) (*AddEmailProviderHTTPResponse, error)
	UpdateEmailProviderHTTP(context.Context, *UpdateEmailProviderHTTPRequest) (*UpdateEmailProviderHTTPResponse, error)
	UpdateEmailProviderSMTPPassword(context.Context, *UpdateEmailProviderSMTPPasswordRequest) (*UpdateEmailProviderSMTPPasswordResponse, error)
	ActivateEmailProvider(context.Context, *ActivateEmailProviderRequest) (*ActivateEmailProviderResponse, error)
	DeactivateEmailProvider(context.Context, *DeactivateEmailProviderRequest) (*DeactivateEmailProviderResponse, error)
	RemoveEmailProvider(context.Context, *RemoveEmailProviderRequest) (*RemoveEmailProviderResponse, error)
	TestEmailProviderSMTPById(context.Context, *TestEmailProviderSMTPByIdRequest) (*TestEmailProviderSMTPByIdResponse, error)
	TestEmailProviderSMTP(context.Context, *TestEmailProviderSMTPRequest) (*TestEmailProviderSMTPResponse, error)
	ListSMSProviders(context.Context, *ListSMSProvidersRequest) (*ListSMSProvidersResponse, error)
	GetSMSProvider(context.Context, *GetSMSProviderRequest) (*GetSMSProviderResponse, error)
	AddSMSProviderTwilio(context.Context, *AddSMSProviderTwilioRequest) (*AddSMSProviderTwilioResponse, error)
	UpdateSMSProviderTwilio(context.Context, *UpdateSMSProviderTwilioRequest) (*UpdateSMSProviderTwilioResponse, error)
	UpdateSMSProviderTwilioToken(context.Context, *UpdateSMSProviderTwilioTokenRequest) (*UpdateSMSProviderTwilioTokenResponse, error)
	AddSMSProviderHTTP(context.Context, *AddSMSProviderHTTPRequest) (*AddSMSProviderHTTPResponse, error)
	UpdateSMSProviderHTTP(context.Context, *UpdateSMSProviderHTTPRequest) (*UpdateSMSProviderHTTPResponse, error)
	ActivateSMSProvider(context.Context, *ActivateSMSProviderRequest) (*ActivateSMSProviderResponse, error)
	DeactivateSMSProvider(context.Context, *DeactivateSMSProviderRequest) (*DeactivateSMSProviderResponse, error)
	RemoveSMSProvider(context.Context, *RemoveSMSProviderRequest) (*RemoveSMSProviderResponse, error)
	GetOIDCSettings(context.Context, *GetOIDCSettingsRequest) (*GetOIDCSettingsResponse, error)
	AddOIDCSettings(context.Context, *AddOIDCSettingsRequest) (*AddOIDCSettingsResponse, error)
	UpdateOIDCSettings(context.Context, *UpdateOIDCSettingsRequest) (*UpdateOIDCSettingsResponse, error)
	GetFileSystemNotificationProvider(context.Context, *GetFileSystemNotificationProviderRequest) (*GetFileSystemNotificationProviderResponse, error)
	GetLogNotificationProvider(context.Context, *GetLogNotificationProviderRequest) (*GetLogNotificationProviderResponse, error)
	GetSecurityPolicy(context.Context, *GetSecurityPolicyRequest) (*GetSecurityPolicyResponse, error)
	SetSecurityPolicy(context.Context, *SetSecurityPolicyRequest) (*SetSecurityPolicyResponse, error)
	GetOrgByID(context.Context, *GetOrgByIDRequest) (*GetOrgByIDResponse, error)
	IsOrgUnique(context.Context, *IsOrgUniqueRequest) (*IsOrgUniqueResponse, error)
	SetDefaultOrg(context.Context, *SetDefaultOrgRequest) (*SetDefaultOrgResponse, error)
	GetDefaultOrg(context.Context, *GetDefaultOrgRequest) (*GetDefaultOrgResponse, error)
	ListOrgs(context.Context, *ListOrgsRequest) (*ListOrgsResponse, error)
	SetUpOrg(context.Context, *SetUpOrgRequest) (*SetUpOrgResponse, error)
	RemoveOrg(context.Context, *RemoveOrgRequest) (*RemoveOrgResponse, error)
	GetIDPByID(context.Context, *GetIDPByIDRequest) (*GetIDPByIDResponse, error)
	ListIDPs(context.Context, *ListIDPsRequest) (*ListIDPsResponse, error)
	AddOIDCIDP(context.Context, *AddOIDCIDPRequest) (*AddOIDCIDPResponse, error)
	AddJWTIDP(context.Context, *AddJWTIDPRequest) (*AddJWTIDPResponse, error)
	UpdateIDP(context.Context, *UpdateIDPRequest) (*UpdateIDPResponse, error)
	DeactivateIDP(context.Context, *DeactivateIDPRequest) (*DeactivateIDPResponse, error)
	ReactivateIDP(context.Context, *ReactivateIDPRequest) (*ReactivateIDPResponse, error)
	RemoveIDP(context.Context, *RemoveIDPRequest) (*RemoveIDPResponse, error)
	UpdateIDPOIDCConfig(context.Context, *UpdateIDPOIDCConfigRequest) (*UpdateIDPOIDCConfigResponse, error)
	UpdateIDPJWTConfig(context.Context, *UpdateIDPJWTConfigRequest) (*UpdateIDPJWTConfigResponse, error)
	// Returns all identity providers, which match the query
	// Limit should always be set, there is a default limit set by the service
	ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error)
	// Returns an identity provider of the instance
	GetProviderByID(context.Context, *GetProviderByIDRequest) (*GetProviderByIDResponse, error)
	// Add a new OAuth2 identity provider on the instance
	AddGenericOAuthProvider(context.Context, *AddGenericOAuthProviderRequest) (*AddGenericOAuthProviderResponse, error)
	// Change an existing OAuth2 identity provider on the instance
	UpdateGenericOAuthProvider(context.Context, *UpdateGenericOAuthProviderRequest) (*UpdateGenericOAuthProviderResponse, error)
	// Add a new OIDC identity provider on the instance
	AddGenericOIDCProvider(context.Context, *AddGenericOIDCProviderRequest) (*AddGenericOIDCProviderResponse, error)
	// Change an existing OIDC identity provider on the instance
	UpdateGenericOIDCProvider(context.Context, *UpdateGenericOIDCProviderRequest) (*UpdateGenericOIDCProviderResponse, error)
	// Migrate an existing OIDC identity provider on the instance
	MigrateGenericOIDCProvider(context.Context, *MigrateGenericOIDCProviderRequest) (*MigrateGenericOIDCProviderResponse, error)
	// Add a new JWT identity provider on the instance
	AddJWTProvider(context.Context, *AddJWTProviderRequest) (*AddJWTProviderResponse, error)
	// Change an existing JWT identity provider on the instance
	UpdateJWTProvider(context.Context, *UpdateJWTProviderRequest) (*UpdateJWTProviderResponse, error)
	// Add a new Azure AD identity provider on the instance
	AddAzureADProvider(context.Context, *AddAzureADProviderRequest) (*AddAzureADProviderResponse, error)
	// Change an existing Azure AD identity provider on the instance
	UpdateAzureADProvider(context.Context, *UpdateAzureADProviderRequest) (*UpdateAzureADProviderResponse, error)
	// Add a new GitHub identity provider on the instance
	AddGitHubProvider(context.Context, *AddGitHubProviderRequest) (*AddGitHubProviderResponse, error)
	// Change an existing GitHub identity provider on the instance
	UpdateGitHubProvider(context.Context, *UpdateGitHubProviderRequest) (*UpdateGitHubProviderResponse, error)
	// Add a new GitHub Enterprise Server identity provider on the instance
	AddGitHubEnterpriseServerProvider(context.Context, *AddGitHubEnterpriseServerProviderRequest) (*AddGitHubEnterpriseServerProviderResponse, error)
	// Change an existing GitHub Enterprise Server identity provider on the instance
	UpdateGitHubEnterpriseServerProvider(context.Context, *UpdateGitHubEnterpriseServerProviderRequest) (*UpdateGitHubEnterpriseServerProviderResponse, error)
	// Add a new GitLab identity provider on the instance
	AddGitLabProvider(context.Context, *AddGitLabProviderRequest) (*AddGitLabProviderResponse, error)
	// Change an existing GitLab identity provider on the instance
	UpdateGitLabProvider(context.Context, *UpdateGitLabProviderRequest) (*UpdateGitLabProviderResponse, error)
	// Add a new self hosted GitLab identity provider on the instance
	AddGitLabSelfHostedProvider(context.Context, *AddGitLabSelfHostedProviderRequest) (*AddGitLabSelfHostedProviderResponse, error)
	// Change an existing self hosted GitLab identity provider on the instance
	UpdateGitLabSelfHostedProvider(context.Context, *UpdateGitLabSelfHostedProviderRequest) (*UpdateGitLabSelfHostedProviderResponse, error)
	// Add a new Google identity provider on the instance
	AddGoogleProvider(context.Context, *AddGoogleProviderRequest) (*AddGoogleProviderResponse, error)
	// Change an existing Google identity provider on the instance
	UpdateGoogleProvider(context.Context, *UpdateGoogleProviderRequest) (*UpdateGoogleProviderResponse, error)
	// Add a new LDAP identity provider on the instance
	AddLDAPProvider(context.Context, *AddLDAPProviderRequest) (*AddLDAPProviderResponse, error)
	// Change an existing LDAP identity provider on the instance
	UpdateLDAPProvider(context.Context, *UpdateLDAPProviderRequest) (*UpdateLDAPProviderResponse, error)
	// Add a new Apple identity provider on the instance
	AddAppleProvider(context.Context, *AddAppleProviderRequest) (*AddAppleProviderResponse, error)
	// Change an existing Apple identity provider on the instance
	UpdateAppleProvider(context.Context, *UpdateAppleProviderRequest) (*UpdateAppleProviderResponse, error)
	// Add a new SAML identity provider on the instance
	AddSAMLProvider(context.Context, *AddSAMLProviderRequest) (*AddSAMLProviderResponse, error)
	// Change an existing SAML identity provider on the instance
	UpdateSAMLProvider(context.Context, *UpdateSAMLProviderRequest) (*UpdateSAMLProviderResponse, error)
	// Regenerate certificate for an existing SAML identity provider in the organization
	RegenerateSAMLProviderCertificate(context.Context, *RegenerateSAMLProviderCertificateRequest) (*RegenerateSAMLProviderCertificateResponse, error)
	// Remove an identity provider
	// Will remove all linked providers of this configuration on the users
	DeleteProvider(context.Context, *DeleteProviderRequest) (*DeleteProviderResponse, error)
	GetOrgIAMPolicy(context.Context, *GetOrgIAMPolicyRequest) (*GetOrgIAMPolicyResponse, error)
	UpdateOrgIAMPolicy(context.Context, *UpdateOrgIAMPolicyRequest) (*UpdateOrgIAMPolicyResponse, error)
	GetCustomOrgIAMPolicy(context.Context, *GetCustomOrgIAMPolicyRequest) (*GetCustomOrgIAMPolicyResponse, error)
	AddCustomOrgIAMPolicy(context.Context, *AddCustomOrgIAMPolicyRequest) (*AddCustomOrgIAMPolicyResponse, error)
	UpdateCustomOrgIAMPolicy(context.Context, *UpdateCustomOrgIAMPolicyRequest) (*UpdateCustomOrgIAMPolicyResponse, error)
	ResetCustomOrgIAMPolicyToDefault(context.Context, *ResetCustomOrgIAMPolicyToDefaultRequest) (*ResetCustomOrgIAMPolicyToDefaultResponse, error)
	GetDomainPolicy(context.Context, *GetDomainPolicyRequest) (*GetDomainPolicyResponse, error)
	UpdateDomainPolicy(context.Context, *UpdateDomainPolicyRequest) (*UpdateDomainPolicyResponse, error)
	GetCustomDomainPolicy(context.Context, *GetCustomDomainPolicyRequest) (*GetCustomDomainPolicyResponse, error)
	AddCustomDomainPolicy(context.Context, *AddCustomDomainPolicyRequest) (*AddCustomDomainPolicyResponse, error)
	UpdateCustomDomainPolicy(context.Context, *UpdateCustomDomainPolicyRequest) (*UpdateCustomDomainPolicyResponse, error)
	ResetCustomDomainPolicyToDefault(context.Context, *ResetCustomDomainPolicyToDefaultRequest) (*ResetCustomDomainPolicyToDefaultResponse, error)
	GetLabelPolicy(context.Context, *GetLabelPolicyRequest) (*GetLabelPolicyResponse, error)
	GetPreviewLabelPolicy(context.Context, *GetPreviewLabelPolicyRequest) (*GetPreviewLabelPolicyResponse, error)
	UpdateLabelPolicy(context.Context, *UpdateLabelPolicyRequest) (*UpdateLabelPolicyResponse, error)
	ActivateLabelPolicy(context.Context, *ActivateLabelPolicyRequest) (*ActivateLabelPolicyResponse, error)
	RemoveLabelPolicyLogo(context.Context, *RemoveLabelPolicyLogoRequest) (*RemoveLabelPolicyLogoResponse, error)
	RemoveLabelPolicyLogoDark(context.Context, *RemoveLabelPolicyLogoDarkRequest) (*RemoveLabelPolicyLogoDarkResponse, error)
	RemoveLabelPolicyIcon(context.Context, *RemoveLabelPolicyIconRequest) (*RemoveLabelPolicyIconResponse, error)
	RemoveLabelPolicyIconDark(context.Context, *RemoveLabelPolicyIconDarkRequest) (*RemoveLabelPolicyIconDarkResponse, error)
	RemoveLabelPolicyFont(context.Context, *RemoveLabelPolicyFontRequest) (*RemoveLabelPolicyFontResponse, error)
	GetLoginPolicy(context.Context, *GetLoginPolicyRequest) (*GetLoginPolicyResponse, error)
	UpdateLoginPolicy(context.Context, *UpdateLoginPolicyRequest) (*UpdateLoginPolicyResponse, error)
	ListLoginPolicyIDPs(context.Context, *ListLoginPolicyIDPsRequest) (*ListLoginPolicyIDPsResponse, error)
	AddIDPToLoginPolicy(context.Context, *AddIDPToLoginPolicyRequest) (*AddIDPToLoginPolicyResponse, error)
	RemoveIDPFromLoginPolicy(context.Context, *RemoveIDPFromLoginPolicyRequest) (*RemoveIDPFromLoginPolicyResponse, error)
	ListLoginPolicySecondFactors(context.Context, *ListLoginPolicySecondFactorsRequest) (*ListLoginPolicySecondFactorsResponse, error)
	AddSecondFactorToLoginPolicy(context.Context, *AddSecondFactorToLoginPolicyRequest) (*AddSecondFactorToLoginPolicyResponse, error)
	RemoveSecondFactorFromLoginPolicy(context.Context, *RemoveSecondFactorFromLoginPolicyRequest) (*RemoveSecondFactorFromLoginPolicyResponse, error)
	ListLoginPolicyMultiFactors(context.Context, *ListLoginPolicyMultiFactorsRequest) (*ListLoginPolicyMultiFactorsResponse, error)
	AddMultiFactorToLoginPolicy(context.Context, *AddMultiFactorToLoginPolicyRequest) (*AddMultiFactorToLoginPolicyResponse, error)
	RemoveMultiFactorFromLoginPolicy(context.Context, *RemoveMultiFactorFromLoginPolicyRequest) (*RemoveMultiFactorFromLoginPolicyResponse, error)
	GetPasswordComplexityPolicy(context.Context, *GetPasswordComplexityPolicyRequest) (*GetPasswordComplexityPolicyResponse, error)
	UpdatePasswordComplexityPolicy(context.Context, *UpdatePasswordComplexityPolicyRequest) (*UpdatePasswordComplexityPolicyResponse, error)
	GetPasswordAgePolicy(context.Context, *GetPasswordAgePolicyRequest) (*GetPasswordAgePolicyResponse, error)
	UpdatePasswordAgePolicy(context.Context, *UpdatePasswordAgePolicyRequest) (*UpdatePasswordAgePolicyResponse, error)
	GetLockoutPolicy(context.Context, *GetLockoutPolicyRequest) (*GetLockoutPolicyResponse, error)
	UpdateLockoutPolicy(context.Context, *UpdateLockoutPolicyRequest) (*UpdateLockoutPolicyResponse, error)
	GetPrivacyPolicy(context.Context, *GetPrivacyPolicyRequest) (*GetPrivacyPolicyResponse, error)
	UpdatePrivacyPolicy(context.Context, *UpdatePrivacyPolicyRequest) (*UpdatePrivacyPolicyResponse, error)
	AddNotificationPolicy(context.Context, *AddNotificationPolicyRequest) (*AddNotificationPolicyResponse, error)
	GetNotificationPolicy(context.Context, *GetNotificationPolicyRequest) (*GetNotificationPolicyResponse, error)
	UpdateNotificationPolicy(context.Context, *UpdateNotificationPolicyRequest) (*UpdateNotificationPolicyResponse, error)
	GetDefaultInitMessageText(context.Context, *GetDefaultInitMessageTextRequest) (*GetDefaultInitMessageTextResponse, error)
	GetCustomInitMessageText(context.Context, *GetCustomInitMessageTextRequest) (*GetCustomInitMessageTextResponse, error)
	SetDefaultInitMessageText(context.Context, *SetDefaultInitMessageTextRequest) (*SetDefaultInitMessageTextResponse, error)
	ResetCustomInitMessageTextToDefault(context.Context, *ResetCustomInitMessageTextToDefaultRequest) (*ResetCustomInitMessageTextToDefaultResponse, error)
	GetDefaultPasswordResetMessageText(context.Context, *GetDefaultPasswordResetMessageTextRequest) (*GetDefaultPasswordResetMessageTextResponse, error)
	GetCustomPasswordResetMessageText(context.Context, *GetCustomPasswordResetMessageTextRequest) (*GetCustomPasswordResetMessageTextResponse, error)
	SetDefaultPasswordResetMessageText(context.Context, *SetDefaultPasswordResetMessageTextRequest) (*SetDefaultPasswordResetMessageTextResponse, error)
	ResetCustomPasswordResetMessageTextToDefault(context.Context, *ResetCustomPasswordResetMessageTextToDefaultRequest) (*ResetCustomPasswordResetMessageTextToDefaultResponse, error)
	GetDefaultVerifyEmailMessageText(context.Context, *GetDefaultVerifyEmailMessageTextRequest) (*GetDefaultVerifyEmailMessageTextResponse, error)
	GetCustomVerifyEmailMessageText(context.Context, *GetCustomVerifyEmailMessageTextRequest) (*GetCustomVerifyEmailMessageTextResponse, error)
	SetDefaultVerifyEmailMessageText(context.Context, *SetDefaultVerifyEmailMessageTextRequest) (*SetDefaultVerifyEmailMessageTextResponse, error)
	ResetCustomVerifyEmailMessageTextToDefault(context.Context, *ResetCustomVerifyEmailMessageTextToDefaultRequest) (*ResetCustomVerifyEmailMessageTextToDefaultResponse, error)
	GetDefaultVerifyPhoneMessageText(context.Context, *GetDefaultVerifyPhoneMessageTextRequest) (*GetDefaultVerifyPhoneMessageTextResponse, error)
	GetCustomVerifyPhoneMessageText(context.Context, *GetCustomVerifyPhoneMessageTextRequest) (*GetCustomVerifyPhoneMessageTextResponse, error)
	SetDefaultVerifyPhoneMessageText(context.Context, *SetDefaultVerifyPhoneMessageTextRequest) (*SetDefaultVerifyPhoneMessageTextResponse, error)
	ResetCustomVerifyPhoneMessageTextToDefault(context.Context, *ResetCustomVerifyPhoneMessageTextToDefaultRequest) (*ResetCustomVerifyPhoneMessageTextToDefaultResponse, error)
	GetDefaultVerifySMSOTPMessageText(context.Context, *GetDefaultVerifySMSOTPMessageTextRequest) (*GetDefaultVerifySMSOTPMessageTextResponse, error)
	GetCustomVerifySMSOTPMessageText(context.Context, *GetCustomVerifySMSOTPMessageTextRequest) (*GetCustomVerifySMSOTPMessageTextResponse, error)
	SetDefaultVerifySMSOTPMessageText(context.Context, *SetDefaultVerifySMSOTPMessageTextRequest) (*SetDefaultVerifySMSOTPMessageTextResponse, error)
	ResetCustomVerifySMSOTPMessageTextToDefault(context.Context, *ResetCustomVerifySMSOTPMessageTextToDefaultRequest) (*ResetCustomVerifySMSOTPMessageTextToDefaultResponse, error)
	GetDefaultVerifyEmailOTPMessageText(context.Context, *GetDefaultVerifyEmailOTPMessageTextRequest) (*GetDefaultVerifyEmailOTPMessageTextResponse, error)
	GetCustomVerifyEmailOTPMessageText(context.Context, *GetCustomVerifyEmailOTPMessageTextRequest) (*GetCustomVerifyEmailOTPMessageTextResponse, error)
	SetDefaultVerifyEmailOTPMessageText(context.Context, *SetDefaultVerifyEmailOTPMessageTextRequest) (*SetDefaultVerifyEmailOTPMessageTextResponse, error)
	ResetCustomVerifyEmailOTPMessageTextToDefault(context.Context, *ResetCustomVerifyEmailOTPMessageTextToDefaultRequest) (*ResetCustomVerifyEmailOTPMessageTextToDefaultResponse, error)
	GetDefaultDomainClaimedMessageText(context.Context, *GetDefaultDomainClaimedMessageTextRequest) (*GetDefaultDomainClaimedMessageTextResponse, error)
	GetCustomDomainClaimedMessageText(context.Context, *GetCustomDomainClaimedMessageTextRequest) (*GetCustomDomainClaimedMessageTextResponse, error)
	SetDefaultDomainClaimedMessageText(context.Context, *SetDefaultDomainClaimedMessageTextRequest) (*SetDefaultDomainClaimedMessageTextResponse, error)
	ResetCustomDomainClaimedMessageTextToDefault(context.Context, *ResetCustomDomainClaimedMessageTextToDefaultRequest) (*ResetCustomDomainClaimedMessageTextToDefaultResponse, error)
	GetDefaultPasswordlessRegistrationMessageText(context.Context, *GetDefaultPasswordlessRegistrationMessageTextRequest) (*GetDefaultPasswordlessRegistrationMessageTextResponse, error)
	GetCustomPasswordlessRegistrationMessageText(context.Context, *GetCustomPasswordlessRegistrationMessageTextRequest) (*GetCustomPasswordlessRegistrationMessageTextResponse, error)
	SetDefaultPasswordlessRegistrationMessageText(context.Context, *SetDefaultPasswordlessRegistrationMessageTextRequest) (*SetDefaultPasswordlessRegistrationMessageTextResponse, error)
	ResetCustomPasswordlessRegistrationMessageTextToDefault(context.Context, *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest) (*ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse, error)
	GetDefaultPasswordChangeMessageText(context.Context, *GetDefaultPasswordChangeMessageTextRequest) (*GetDefaultPasswordChangeMessageTextResponse, error)
	GetCustomPasswordChangeMessageText(context.Context, *GetCustomPasswordChangeMessageTextRequest) (*GetCustomPasswordChangeMessageTextResponse, error)
	SetDefaultPasswordChangeMessageText(context.Context, *SetDefaultPasswordChangeMessageTextRequest) (*SetDefaultPasswordChangeMessageTextResponse, error)
	ResetCustomPasswordChangeMessageTextToDefault(context.Context, *ResetCustomPasswordChangeMessageTextToDefaultRequest) (*ResetCustomPasswordChangeMessageTextToDefaultResponse, error)
	GetDefaultInviteUserMessageText(context.Context, *GetDefaultInviteUserMessageTextRequest) (*GetDefaultInviteUserMessageTextResponse, error)
	GetCustomInviteUserMessageText(context.Context, *GetCustomInviteUserMessageTextRequest) (*GetCustomInviteUserMessageTextResponse, error)
	SetDefaultInviteUserMessageText(context.Context, *SetDefaultInviteUserMessageTextRequest) (*SetDefaultInviteUserMessageTextResponse, error)
	ResetCustomInviteUserMessageTextToDefault(context.Context, *ResetCustomInviteUserMessageTextToDefaultRequest) (*ResetCustomInviteUserMessageTextToDefaultResponse, error)
	GetDefaultLoginTexts(context.Context, *GetDefaultLoginTextsRequest) (*GetDefaultLoginTextsResponse, error)
	GetCustomLoginTexts(context.Context, *GetCustomLoginTextsRequest) (*GetCustomLoginTextsResponse, error)
	SetCustomLoginText(context.Context, *SetCustomLoginTextsRequest) (*SetCustomLoginTextsResponse, error)
	ResetCustomLoginTextToDefault(context.Context, *ResetCustomLoginTextsToDefaultRequest) (*ResetCustomLoginTextsToDefaultResponse, error)
	ListIAMMemberRoles(context.Context, *ListIAMMemberRolesRequest) (*ListIAMMemberRolesResponse, error)
	ListIAMMembers(context.Context, *ListIAMMembersRequest) (*ListIAMMembersResponse, error)
	// Adds a user to the membership list of ZITADEL with the given roles
	// undefined roles will be dropped
	AddIAMMember(context.Context, *AddIAMMemberRequest) (*AddIAMMemberResponse, error)
	UpdateIAMMember(context.Context, *UpdateIAMMemberRequest) (*UpdateIAMMemberResponse, error)
	RemoveIAMMember(context.Context, *RemoveIAMMemberRequest) (*RemoveIAMMemberResponse, error)
	ListViews(context.Context, *ListViewsRequest) (*ListViewsResponse, error)
	ListFailedEvents(context.Context, *ListFailedEventsRequest) (*ListFailedEventsResponse, error)
	RemoveFailedEvent(context.Context, *RemoveFailedEventRequest) (*RemoveFailedEventResponse, error)
	// Imports data into an instance and creates different objects
	ImportData(context.Context, *ImportDataRequest) (*ImportDataResponse, error)
	ExportData(context.Context, *ExportDataRequest) (*ExportDataResponse, error)
	ListEventTypes(context.Context, *ListEventTypesRequest) (*ListEventTypesResponse, error)
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	ListAggregateTypes(context.Context, *ListAggregateTypesRequest) (*ListAggregateTypesResponse, error)
	// Activates the "LoginDefaultOrg" feature by setting the flag to "true"
	// This is irreversible!
	// Once activated, the login UI will use the settings of the default org (and not from the instance) if not organization context is set
	ActivateFeatureLoginDefaultOrg(context.Context, *ActivateFeatureLoginDefaultOrgRequest) (*ActivateFeatureLoginDefaultOrgResponse, error)
	ListMilestones(context.Context, *ListMilestonesRequest) (*ListMilestonesResponse, error)
	// Sets restrictions
	SetRestrictions(context.Context, *SetRestrictionsRequest) (*SetRestrictionsResponse, error)
	// Gets restrictions
	GetRestrictions(context.Context, *GetRestrictionsRequest) (*GetRestrictionsResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedAdminServiceServer) GetSupportedLanguages(context.Context, *GetSupportedLanguagesRequest) (*GetSupportedLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedLanguages not implemented")
}
func (UnimplementedAdminServiceServer) GetAllowedLanguages(context.Context, *GetAllowedLanguagesRequest) (*GetAllowedLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllowedLanguages not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultLanguage(context.Context, *SetDefaultLanguageRequest) (*SetDefaultLanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultLanguage not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultLanguage(context.Context, *GetDefaultLanguageRequest) (*GetDefaultLanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultLanguage not implemented")
}
func (UnimplementedAdminServiceServer) GetMyInstance(context.Context, *GetMyInstanceRequest) (*GetMyInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyInstance not implemented")
}
func (UnimplementedAdminServiceServer) ListInstanceDomains(context.Context, *ListInstanceDomainsRequest) (*ListInstanceDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstanceDomains not implemented")
}
func (UnimplementedAdminServiceServer) ListInstanceTrustedDomains(context.Context, *ListInstanceTrustedDomainsRequest) (*ListInstanceTrustedDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstanceTrustedDomains not implemented")
}
func (UnimplementedAdminServiceServer) AddInstanceTrustedDomain(context.Context, *AddInstanceTrustedDomainRequest) (*AddInstanceTrustedDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInstanceTrustedDomain not implemented")
}
func (UnimplementedAdminServiceServer) RemoveInstanceTrustedDomain(context.Context, *RemoveInstanceTrustedDomainRequest) (*RemoveInstanceTrustedDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInstanceTrustedDomain not implemented")
}
func (UnimplementedAdminServiceServer) ListSecretGenerators(context.Context, *ListSecretGeneratorsRequest) (*ListSecretGeneratorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecretGenerators not implemented")
}
func (UnimplementedAdminServiceServer) GetSecretGenerator(context.Context, *GetSecretGeneratorRequest) (*GetSecretGeneratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecretGenerator not implemented")
}
func (UnimplementedAdminServiceServer) UpdateSecretGenerator(context.Context, *UpdateSecretGeneratorRequest) (*UpdateSecretGeneratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecretGenerator not implemented")
}
func (UnimplementedAdminServiceServer) GetSMTPConfig(context.Context, *GetSMTPConfigRequest) (*GetSMTPConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSMTPConfig not implemented")
}
func (UnimplementedAdminServiceServer) GetSMTPConfigById(context.Context, *GetSMTPConfigByIdRequest) (*GetSMTPConfigByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSMTPConfigById not implemented")
}
func (UnimplementedAdminServiceServer) AddSMTPConfig(context.Context, *AddSMTPConfigRequest) (*AddSMTPConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSMTPConfig not implemented")
}
func (UnimplementedAdminServiceServer) UpdateSMTPConfig(context.Context, *UpdateSMTPConfigRequest) (*UpdateSMTPConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSMTPConfig not implemented")
}
func (UnimplementedAdminServiceServer) UpdateSMTPConfigPassword(context.Context, *UpdateSMTPConfigPasswordRequest) (*UpdateSMTPConfigPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSMTPConfigPassword not implemented")
}
func (UnimplementedAdminServiceServer) ActivateSMTPConfig(context.Context, *ActivateSMTPConfigRequest) (*ActivateSMTPConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateSMTPConfig not implemented")
}
func (UnimplementedAdminServiceServer) DeactivateSMTPConfig(context.Context, *DeactivateSMTPConfigRequest) (*DeactivateSMTPConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateSMTPConfig not implemented")
}
func (UnimplementedAdminServiceServer) RemoveSMTPConfig(context.Context, *RemoveSMTPConfigRequest) (*RemoveSMTPConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSMTPConfig not implemented")
}
func (UnimplementedAdminServiceServer) TestSMTPConfigById(context.Context, *TestSMTPConfigByIdRequest) (*TestSMTPConfigByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestSMTPConfigById not implemented")
}
func (UnimplementedAdminServiceServer) TestSMTPConfig(context.Context, *TestSMTPConfigRequest) (*TestSMTPConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestSMTPConfig not implemented")
}
func (UnimplementedAdminServiceServer) ListSMTPConfigs(context.Context, *ListSMTPConfigsRequest) (*ListSMTPConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSMTPConfigs not implemented")
}
func (UnimplementedAdminServiceServer) ListEmailProviders(context.Context, *ListEmailProvidersRequest) (*ListEmailProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmailProviders not implemented")
}
func (UnimplementedAdminServiceServer) GetEmailProvider(context.Context, *GetEmailProviderRequest) (*GetEmailProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailProvider not implemented")
}
func (UnimplementedAdminServiceServer) GetEmailProviderById(context.Context, *GetEmailProviderByIdRequest) (*GetEmailProviderByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailProviderById not implemented")
}
func (UnimplementedAdminServiceServer) AddEmailProviderSMTP(context.Context, *AddEmailProviderSMTPRequest) (*AddEmailProviderSMTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmailProviderSMTP not implemented")
}
func (UnimplementedAdminServiceServer) UpdateEmailProviderSMTP(context.Context, *UpdateEmailProviderSMTPRequest) (*UpdateEmailProviderSMTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailProviderSMTP not implemented")
}
func (UnimplementedAdminServiceServer) AddEmailProviderHTTP(context.Context, *AddEmailProviderHTTPRequest) (*AddEmailProviderHTTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmailProviderHTTP not implemented")
}
func (UnimplementedAdminServiceServer) UpdateEmailProviderHTTP(context.Context, *UpdateEmailProviderHTTPRequest) (*UpdateEmailProviderHTTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailProviderHTTP not implemented")
}
func (UnimplementedAdminServiceServer) UpdateEmailProviderSMTPPassword(context.Context, *UpdateEmailProviderSMTPPasswordRequest) (*UpdateEmailProviderSMTPPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailProviderSMTPPassword not implemented")
}
func (UnimplementedAdminServiceServer) ActivateEmailProvider(context.Context, *ActivateEmailProviderRequest) (*ActivateEmailProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateEmailProvider not implemented")
}
func (UnimplementedAdminServiceServer) DeactivateEmailProvider(context.Context, *DeactivateEmailProviderRequest) (*DeactivateEmailProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateEmailProvider not implemented")
}
func (UnimplementedAdminServiceServer) RemoveEmailProvider(context.Context, *RemoveEmailProviderRequest) (*RemoveEmailProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEmailProvider not implemented")
}
func (UnimplementedAdminServiceServer) TestEmailProviderSMTPById(context.Context, *TestEmailProviderSMTPByIdRequest) (*TestEmailProviderSMTPByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestEmailProviderSMTPById not implemented")
}
func (UnimplementedAdminServiceServer) TestEmailProviderSMTP(context.Context, *TestEmailProviderSMTPRequest) (*TestEmailProviderSMTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestEmailProviderSMTP not implemented")
}
func (UnimplementedAdminServiceServer) ListSMSProviders(context.Context, *ListSMSProvidersRequest) (*ListSMSProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSMSProviders not implemented")
}
func (UnimplementedAdminServiceServer) GetSMSProvider(context.Context, *GetSMSProviderRequest) (*GetSMSProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSMSProvider not implemented")
}
func (UnimplementedAdminServiceServer) AddSMSProviderTwilio(context.Context, *AddSMSProviderTwilioRequest) (*AddSMSProviderTwilioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSMSProviderTwilio not implemented")
}
func (UnimplementedAdminServiceServer) UpdateSMSProviderTwilio(context.Context, *UpdateSMSProviderTwilioRequest) (*UpdateSMSProviderTwilioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSMSProviderTwilio not implemented")
}
func (UnimplementedAdminServiceServer) UpdateSMSProviderTwilioToken(context.Context, *UpdateSMSProviderTwilioTokenRequest) (*UpdateSMSProviderTwilioTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSMSProviderTwilioToken not implemented")
}
func (UnimplementedAdminServiceServer) AddSMSProviderHTTP(context.Context, *AddSMSProviderHTTPRequest) (*AddSMSProviderHTTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSMSProviderHTTP not implemented")
}
func (UnimplementedAdminServiceServer) UpdateSMSProviderHTTP(context.Context, *UpdateSMSProviderHTTPRequest) (*UpdateSMSProviderHTTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSMSProviderHTTP not implemented")
}
func (UnimplementedAdminServiceServer) ActivateSMSProvider(context.Context, *ActivateSMSProviderRequest) (*ActivateSMSProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateSMSProvider not implemented")
}
func (UnimplementedAdminServiceServer) DeactivateSMSProvider(context.Context, *DeactivateSMSProviderRequest) (*DeactivateSMSProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateSMSProvider not implemented")
}
func (UnimplementedAdminServiceServer) RemoveSMSProvider(context.Context, *RemoveSMSProviderRequest) (*RemoveSMSProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSMSProvider not implemented")
}
func (UnimplementedAdminServiceServer) GetOIDCSettings(context.Context, *GetOIDCSettingsRequest) (*GetOIDCSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOIDCSettings not implemented")
}
func (UnimplementedAdminServiceServer) AddOIDCSettings(context.Context, *AddOIDCSettingsRequest) (*AddOIDCSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOIDCSettings not implemented")
}
func (UnimplementedAdminServiceServer) UpdateOIDCSettings(context.Context, *UpdateOIDCSettingsRequest) (*UpdateOIDCSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOIDCSettings not implemented")
}
func (UnimplementedAdminServiceServer) GetFileSystemNotificationProvider(context.Context, *GetFileSystemNotificationProviderRequest) (*GetFileSystemNotificationProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileSystemNotificationProvider not implemented")
}
func (UnimplementedAdminServiceServer) GetLogNotificationProvider(context.Context, *GetLogNotificationProviderRequest) (*GetLogNotificationProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogNotificationProvider not implemented")
}
func (UnimplementedAdminServiceServer) GetSecurityPolicy(context.Context, *GetSecurityPolicyRequest) (*GetSecurityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityPolicy not implemented")
}
func (UnimplementedAdminServiceServer) SetSecurityPolicy(context.Context, *SetSecurityPolicyRequest) (*SetSecurityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSecurityPolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetOrgByID(context.Context, *GetOrgByIDRequest) (*GetOrgByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgByID not implemented")
}
func (UnimplementedAdminServiceServer) IsOrgUnique(context.Context, *IsOrgUniqueRequest) (*IsOrgUniqueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsOrgUnique not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultOrg(context.Context, *SetDefaultOrgRequest) (*SetDefaultOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultOrg not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultOrg(context.Context, *GetDefaultOrgRequest) (*GetDefaultOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultOrg not implemented")
}
func (UnimplementedAdminServiceServer) ListOrgs(context.Context, *ListOrgsRequest) (*ListOrgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgs not implemented")
}
func (UnimplementedAdminServiceServer) SetUpOrg(context.Context, *SetUpOrgRequest) (*SetUpOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUpOrg not implemented")
}
func (UnimplementedAdminServiceServer) RemoveOrg(context.Context, *RemoveOrgRequest) (*RemoveOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrg not implemented")
}
func (UnimplementedAdminServiceServer) GetIDPByID(context.Context, *GetIDPByIDRequest) (*GetIDPByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIDPByID not implemented")
}
func (UnimplementedAdminServiceServer) ListIDPs(context.Context, *ListIDPsRequest) (*ListIDPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIDPs not implemented")
}
func (UnimplementedAdminServiceServer) AddOIDCIDP(context.Context, *AddOIDCIDPRequest) (*AddOIDCIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOIDCIDP not implemented")
}
func (UnimplementedAdminServiceServer) AddJWTIDP(context.Context, *AddJWTIDPRequest) (*AddJWTIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJWTIDP not implemented")
}
func (UnimplementedAdminServiceServer) UpdateIDP(context.Context, *UpdateIDPRequest) (*UpdateIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIDP not implemented")
}
func (UnimplementedAdminServiceServer) DeactivateIDP(context.Context, *DeactivateIDPRequest) (*DeactivateIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateIDP not implemented")
}
func (UnimplementedAdminServiceServer) ReactivateIDP(context.Context, *ReactivateIDPRequest) (*ReactivateIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateIDP not implemented")
}
func (UnimplementedAdminServiceServer) RemoveIDP(context.Context, *RemoveIDPRequest) (*RemoveIDPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIDP not implemented")
}
func (UnimplementedAdminServiceServer) UpdateIDPOIDCConfig(context.Context, *UpdateIDPOIDCConfigRequest) (*UpdateIDPOIDCConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIDPOIDCConfig not implemented")
}
func (UnimplementedAdminServiceServer) UpdateIDPJWTConfig(context.Context, *UpdateIDPJWTConfigRequest) (*UpdateIDPJWTConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIDPJWTConfig not implemented")
}
func (UnimplementedAdminServiceServer) ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProviders not implemented")
}
func (UnimplementedAdminServiceServer) GetProviderByID(context.Context, *GetProviderByIDRequest) (*GetProviderByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderByID not implemented")
}
func (UnimplementedAdminServiceServer) AddGenericOAuthProvider(context.Context, *AddGenericOAuthProviderRequest) (*AddGenericOAuthProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGenericOAuthProvider not implemented")
}
func (UnimplementedAdminServiceServer) UpdateGenericOAuthProvider(context.Context, *UpdateGenericOAuthProviderRequest) (*UpdateGenericOAuthProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGenericOAuthProvider not implemented")
}
func (UnimplementedAdminServiceServer) AddGenericOIDCProvider(context.Context, *AddGenericOIDCProviderRequest) (*AddGenericOIDCProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGenericOIDCProvider not implemented")
}
func (UnimplementedAdminServiceServer) UpdateGenericOIDCProvider(context.Context, *UpdateGenericOIDCProviderRequest) (*UpdateGenericOIDCProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGenericOIDCProvider not implemented")
}
func (UnimplementedAdminServiceServer) MigrateGenericOIDCProvider(context.Context, *MigrateGenericOIDCProviderRequest) (*MigrateGenericOIDCProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateGenericOIDCProvider not implemented")
}
func (UnimplementedAdminServiceServer) AddJWTProvider(context.Context, *AddJWTProviderRequest) (*AddJWTProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJWTProvider not implemented")
}
func (UnimplementedAdminServiceServer) UpdateJWTProvider(context.Context, *UpdateJWTProviderRequest) (*UpdateJWTProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJWTProvider not implemented")
}
func (UnimplementedAdminServiceServer) AddAzureADProvider(context.Context, *AddAzureADProviderRequest) (*AddAzureADProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAzureADProvider not implemented")
}
func (UnimplementedAdminServiceServer) UpdateAzureADProvider(context.Context, *UpdateAzureADProviderRequest) (*UpdateAzureADProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAzureADProvider not implemented")
}
func (UnimplementedAdminServiceServer) AddGitHubProvider(context.Context, *AddGitHubProviderRequest) (*AddGitHubProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGitHubProvider not implemented")
}
func (UnimplementedAdminServiceServer) UpdateGitHubProvider(context.Context, *UpdateGitHubProviderRequest) (*UpdateGitHubProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGitHubProvider not implemented")
}
func (UnimplementedAdminServiceServer) AddGitHubEnterpriseServerProvider(context.Context, *AddGitHubEnterpriseServerProviderRequest) (*AddGitHubEnterpriseServerProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGitHubEnterpriseServerProvider not implemented")
}
func (UnimplementedAdminServiceServer) UpdateGitHubEnterpriseServerProvider(context.Context, *UpdateGitHubEnterpriseServerProviderRequest) (*UpdateGitHubEnterpriseServerProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGitHubEnterpriseServerProvider not implemented")
}
func (UnimplementedAdminServiceServer) AddGitLabProvider(context.Context, *AddGitLabProviderRequest) (*AddGitLabProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGitLabProvider not implemented")
}
func (UnimplementedAdminServiceServer) UpdateGitLabProvider(context.Context, *UpdateGitLabProviderRequest) (*UpdateGitLabProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGitLabProvider not implemented")
}
func (UnimplementedAdminServiceServer) AddGitLabSelfHostedProvider(context.Context, *AddGitLabSelfHostedProviderRequest) (*AddGitLabSelfHostedProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGitLabSelfHostedProvider not implemented")
}
func (UnimplementedAdminServiceServer) UpdateGitLabSelfHostedProvider(context.Context, *UpdateGitLabSelfHostedProviderRequest) (*UpdateGitLabSelfHostedProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGitLabSelfHostedProvider not implemented")
}
func (UnimplementedAdminServiceServer) AddGoogleProvider(context.Context, *AddGoogleProviderRequest) (*AddGoogleProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGoogleProvider not implemented")
}
func (UnimplementedAdminServiceServer) UpdateGoogleProvider(context.Context, *UpdateGoogleProviderRequest) (*UpdateGoogleProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoogleProvider not implemented")
}
func (UnimplementedAdminServiceServer) AddLDAPProvider(context.Context, *AddLDAPProviderRequest) (*AddLDAPProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLDAPProvider not implemented")
}
func (UnimplementedAdminServiceServer) UpdateLDAPProvider(context.Context, *UpdateLDAPProviderRequest) (*UpdateLDAPProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLDAPProvider not implemented")
}
func (UnimplementedAdminServiceServer) AddAppleProvider(context.Context, *AddAppleProviderRequest) (*AddAppleProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppleProvider not implemented")
}
func (UnimplementedAdminServiceServer) UpdateAppleProvider(context.Context, *UpdateAppleProviderRequest) (*UpdateAppleProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppleProvider not implemented")
}
func (UnimplementedAdminServiceServer) AddSAMLProvider(context.Context, *AddSAMLProviderRequest) (*AddSAMLProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSAMLProvider not implemented")
}
func (UnimplementedAdminServiceServer) UpdateSAMLProvider(context.Context, *UpdateSAMLProviderRequest) (*UpdateSAMLProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSAMLProvider not implemented")
}
func (UnimplementedAdminServiceServer) RegenerateSAMLProviderCertificate(context.Context, *RegenerateSAMLProviderCertificateRequest) (*RegenerateSAMLProviderCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateSAMLProviderCertificate not implemented")
}
func (UnimplementedAdminServiceServer) DeleteProvider(context.Context, *DeleteProviderRequest) (*DeleteProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProvider not implemented")
}
func (UnimplementedAdminServiceServer) GetOrgIAMPolicy(context.Context, *GetOrgIAMPolicyRequest) (*GetOrgIAMPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgIAMPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateOrgIAMPolicy(context.Context, *UpdateOrgIAMPolicyRequest) (*UpdateOrgIAMPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgIAMPolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomOrgIAMPolicy(context.Context, *GetCustomOrgIAMPolicyRequest) (*GetCustomOrgIAMPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomOrgIAMPolicy not implemented")
}
func (UnimplementedAdminServiceServer) AddCustomOrgIAMPolicy(context.Context, *AddCustomOrgIAMPolicyRequest) (*AddCustomOrgIAMPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomOrgIAMPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateCustomOrgIAMPolicy(context.Context, *UpdateCustomOrgIAMPolicyRequest) (*UpdateCustomOrgIAMPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomOrgIAMPolicy not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomOrgIAMPolicyToDefault(context.Context, *ResetCustomOrgIAMPolicyToDefaultRequest) (*ResetCustomOrgIAMPolicyToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomOrgIAMPolicyToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetDomainPolicy(context.Context, *GetDomainPolicyRequest) (*GetDomainPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDomainPolicy(context.Context, *UpdateDomainPolicyRequest) (*UpdateDomainPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomainPolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomDomainPolicy(context.Context, *GetCustomDomainPolicyRequest) (*GetCustomDomainPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomDomainPolicy not implemented")
}
func (UnimplementedAdminServiceServer) AddCustomDomainPolicy(context.Context, *AddCustomDomainPolicyRequest) (*AddCustomDomainPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomDomainPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateCustomDomainPolicy(context.Context, *UpdateCustomDomainPolicyRequest) (*UpdateCustomDomainPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomDomainPolicy not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomDomainPolicyToDefault(context.Context, *ResetCustomDomainPolicyToDefaultRequest) (*ResetCustomDomainPolicyToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomDomainPolicyToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetLabelPolicy(context.Context, *GetLabelPolicyRequest) (*GetLabelPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelPolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetPreviewLabelPolicy(context.Context, *GetPreviewLabelPolicyRequest) (*GetPreviewLabelPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviewLabelPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateLabelPolicy(context.Context, *UpdateLabelPolicyRequest) (*UpdateLabelPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabelPolicy not implemented")
}
func (UnimplementedAdminServiceServer) ActivateLabelPolicy(context.Context, *ActivateLabelPolicyRequest) (*ActivateLabelPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateLabelPolicy not implemented")
}
func (UnimplementedAdminServiceServer) RemoveLabelPolicyLogo(context.Context, *RemoveLabelPolicyLogoRequest) (*RemoveLabelPolicyLogoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLabelPolicyLogo not implemented")
}
func (UnimplementedAdminServiceServer) RemoveLabelPolicyLogoDark(context.Context, *RemoveLabelPolicyLogoDarkRequest) (*RemoveLabelPolicyLogoDarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLabelPolicyLogoDark not implemented")
}
func (UnimplementedAdminServiceServer) RemoveLabelPolicyIcon(context.Context, *RemoveLabelPolicyIconRequest) (*RemoveLabelPolicyIconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLabelPolicyIcon not implemented")
}
func (UnimplementedAdminServiceServer) RemoveLabelPolicyIconDark(context.Context, *RemoveLabelPolicyIconDarkRequest) (*RemoveLabelPolicyIconDarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLabelPolicyIconDark not implemented")
}
func (UnimplementedAdminServiceServer) RemoveLabelPolicyFont(context.Context, *RemoveLabelPolicyFontRequest) (*RemoveLabelPolicyFontResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLabelPolicyFont not implemented")
}
func (UnimplementedAdminServiceServer) GetLoginPolicy(context.Context, *GetLoginPolicyRequest) (*GetLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateLoginPolicy(context.Context, *UpdateLoginPolicyRequest) (*UpdateLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) ListLoginPolicyIDPs(context.Context, *ListLoginPolicyIDPsRequest) (*ListLoginPolicyIDPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginPolicyIDPs not implemented")
}
func (UnimplementedAdminServiceServer) AddIDPToLoginPolicy(context.Context, *AddIDPToLoginPolicyRequest) (*AddIDPToLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIDPToLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) RemoveIDPFromLoginPolicy(context.Context, *RemoveIDPFromLoginPolicyRequest) (*RemoveIDPFromLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIDPFromLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) ListLoginPolicySecondFactors(context.Context, *ListLoginPolicySecondFactorsRequest) (*ListLoginPolicySecondFactorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginPolicySecondFactors not implemented")
}
func (UnimplementedAdminServiceServer) AddSecondFactorToLoginPolicy(context.Context, *AddSecondFactorToLoginPolicyRequest) (*AddSecondFactorToLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSecondFactorToLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) RemoveSecondFactorFromLoginPolicy(context.Context, *RemoveSecondFactorFromLoginPolicyRequest) (*RemoveSecondFactorFromLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSecondFactorFromLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) ListLoginPolicyMultiFactors(context.Context, *ListLoginPolicyMultiFactorsRequest) (*ListLoginPolicyMultiFactorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginPolicyMultiFactors not implemented")
}
func (UnimplementedAdminServiceServer) AddMultiFactorToLoginPolicy(context.Context, *AddMultiFactorToLoginPolicyRequest) (*AddMultiFactorToLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMultiFactorToLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) RemoveMultiFactorFromLoginPolicy(context.Context, *RemoveMultiFactorFromLoginPolicyRequest) (*RemoveMultiFactorFromLoginPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMultiFactorFromLoginPolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetPasswordComplexityPolicy(context.Context, *GetPasswordComplexityPolicyRequest) (*GetPasswordComplexityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasswordComplexityPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdatePasswordComplexityPolicy(context.Context, *UpdatePasswordComplexityPolicyRequest) (*UpdatePasswordComplexityPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePasswordComplexityPolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetPasswordAgePolicy(context.Context, *GetPasswordAgePolicyRequest) (*GetPasswordAgePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasswordAgePolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdatePasswordAgePolicy(context.Context, *UpdatePasswordAgePolicyRequest) (*UpdatePasswordAgePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePasswordAgePolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetLockoutPolicy(context.Context, *GetLockoutPolicyRequest) (*GetLockoutPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLockoutPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateLockoutPolicy(context.Context, *UpdateLockoutPolicyRequest) (*UpdateLockoutPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLockoutPolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetPrivacyPolicy(context.Context, *GetPrivacyPolicyRequest) (*GetPrivacyPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivacyPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdatePrivacyPolicy(context.Context, *UpdatePrivacyPolicyRequest) (*UpdatePrivacyPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrivacyPolicy not implemented")
}
func (UnimplementedAdminServiceServer) AddNotificationPolicy(context.Context, *AddNotificationPolicyRequest) (*AddNotificationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNotificationPolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetNotificationPolicy(context.Context, *GetNotificationPolicyRequest) (*GetNotificationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationPolicy not implemented")
}
func (UnimplementedAdminServiceServer) UpdateNotificationPolicy(context.Context, *UpdateNotificationPolicyRequest) (*UpdateNotificationPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationPolicy not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultInitMessageText(context.Context, *GetDefaultInitMessageTextRequest) (*GetDefaultInitMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultInitMessageText not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomInitMessageText(context.Context, *GetCustomInitMessageTextRequest) (*GetCustomInitMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomInitMessageText not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultInitMessageText(context.Context, *SetDefaultInitMessageTextRequest) (*SetDefaultInitMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultInitMessageText not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomInitMessageTextToDefault(context.Context, *ResetCustomInitMessageTextToDefaultRequest) (*ResetCustomInitMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomInitMessageTextToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultPasswordResetMessageText(context.Context, *GetDefaultPasswordResetMessageTextRequest) (*GetDefaultPasswordResetMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultPasswordResetMessageText not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomPasswordResetMessageText(context.Context, *GetCustomPasswordResetMessageTextRequest) (*GetCustomPasswordResetMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomPasswordResetMessageText not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultPasswordResetMessageText(context.Context, *SetDefaultPasswordResetMessageTextRequest) (*SetDefaultPasswordResetMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultPasswordResetMessageText not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomPasswordResetMessageTextToDefault(context.Context, *ResetCustomPasswordResetMessageTextToDefaultRequest) (*ResetCustomPasswordResetMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomPasswordResetMessageTextToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultVerifyEmailMessageText(context.Context, *GetDefaultVerifyEmailMessageTextRequest) (*GetDefaultVerifyEmailMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultVerifyEmailMessageText not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomVerifyEmailMessageText(context.Context, *GetCustomVerifyEmailMessageTextRequest) (*GetCustomVerifyEmailMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomVerifyEmailMessageText not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultVerifyEmailMessageText(context.Context, *SetDefaultVerifyEmailMessageTextRequest) (*SetDefaultVerifyEmailMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultVerifyEmailMessageText not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomVerifyEmailMessageTextToDefault(context.Context, *ResetCustomVerifyEmailMessageTextToDefaultRequest) (*ResetCustomVerifyEmailMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomVerifyEmailMessageTextToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultVerifyPhoneMessageText(context.Context, *GetDefaultVerifyPhoneMessageTextRequest) (*GetDefaultVerifyPhoneMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultVerifyPhoneMessageText not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomVerifyPhoneMessageText(context.Context, *GetCustomVerifyPhoneMessageTextRequest) (*GetCustomVerifyPhoneMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomVerifyPhoneMessageText not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultVerifyPhoneMessageText(context.Context, *SetDefaultVerifyPhoneMessageTextRequest) (*SetDefaultVerifyPhoneMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultVerifyPhoneMessageText not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomVerifyPhoneMessageTextToDefault(context.Context, *ResetCustomVerifyPhoneMessageTextToDefaultRequest) (*ResetCustomVerifyPhoneMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomVerifyPhoneMessageTextToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultVerifySMSOTPMessageText(context.Context, *GetDefaultVerifySMSOTPMessageTextRequest) (*GetDefaultVerifySMSOTPMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultVerifySMSOTPMessageText not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomVerifySMSOTPMessageText(context.Context, *GetCustomVerifySMSOTPMessageTextRequest) (*GetCustomVerifySMSOTPMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomVerifySMSOTPMessageText not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultVerifySMSOTPMessageText(context.Context, *SetDefaultVerifySMSOTPMessageTextRequest) (*SetDefaultVerifySMSOTPMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultVerifySMSOTPMessageText not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomVerifySMSOTPMessageTextToDefault(context.Context, *ResetCustomVerifySMSOTPMessageTextToDefaultRequest) (*ResetCustomVerifySMSOTPMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomVerifySMSOTPMessageTextToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultVerifyEmailOTPMessageText(context.Context, *GetDefaultVerifyEmailOTPMessageTextRequest) (*GetDefaultVerifyEmailOTPMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultVerifyEmailOTPMessageText not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomVerifyEmailOTPMessageText(context.Context, *GetCustomVerifyEmailOTPMessageTextRequest) (*GetCustomVerifyEmailOTPMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomVerifyEmailOTPMessageText not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultVerifyEmailOTPMessageText(context.Context, *SetDefaultVerifyEmailOTPMessageTextRequest) (*SetDefaultVerifyEmailOTPMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultVerifyEmailOTPMessageText not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomVerifyEmailOTPMessageTextToDefault(context.Context, *ResetCustomVerifyEmailOTPMessageTextToDefaultRequest) (*ResetCustomVerifyEmailOTPMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomVerifyEmailOTPMessageTextToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultDomainClaimedMessageText(context.Context, *GetDefaultDomainClaimedMessageTextRequest) (*GetDefaultDomainClaimedMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultDomainClaimedMessageText not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomDomainClaimedMessageText(context.Context, *GetCustomDomainClaimedMessageTextRequest) (*GetCustomDomainClaimedMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomDomainClaimedMessageText not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultDomainClaimedMessageText(context.Context, *SetDefaultDomainClaimedMessageTextRequest) (*SetDefaultDomainClaimedMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultDomainClaimedMessageText not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomDomainClaimedMessageTextToDefault(context.Context, *ResetCustomDomainClaimedMessageTextToDefaultRequest) (*ResetCustomDomainClaimedMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomDomainClaimedMessageTextToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultPasswordlessRegistrationMessageText(context.Context, *GetDefaultPasswordlessRegistrationMessageTextRequest) (*GetDefaultPasswordlessRegistrationMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultPasswordlessRegistrationMessageText not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomPasswordlessRegistrationMessageText(context.Context, *GetCustomPasswordlessRegistrationMessageTextRequest) (*GetCustomPasswordlessRegistrationMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomPasswordlessRegistrationMessageText not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultPasswordlessRegistrationMessageText(context.Context, *SetDefaultPasswordlessRegistrationMessageTextRequest) (*SetDefaultPasswordlessRegistrationMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultPasswordlessRegistrationMessageText not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomPasswordlessRegistrationMessageTextToDefault(context.Context, *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest) (*ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomPasswordlessRegistrationMessageTextToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultPasswordChangeMessageText(context.Context, *GetDefaultPasswordChangeMessageTextRequest) (*GetDefaultPasswordChangeMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultPasswordChangeMessageText not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomPasswordChangeMessageText(context.Context, *GetCustomPasswordChangeMessageTextRequest) (*GetCustomPasswordChangeMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomPasswordChangeMessageText not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultPasswordChangeMessageText(context.Context, *SetDefaultPasswordChangeMessageTextRequest) (*SetDefaultPasswordChangeMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultPasswordChangeMessageText not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomPasswordChangeMessageTextToDefault(context.Context, *ResetCustomPasswordChangeMessageTextToDefaultRequest) (*ResetCustomPasswordChangeMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomPasswordChangeMessageTextToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultInviteUserMessageText(context.Context, *GetDefaultInviteUserMessageTextRequest) (*GetDefaultInviteUserMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultInviteUserMessageText not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomInviteUserMessageText(context.Context, *GetCustomInviteUserMessageTextRequest) (*GetCustomInviteUserMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomInviteUserMessageText not implemented")
}
func (UnimplementedAdminServiceServer) SetDefaultInviteUserMessageText(context.Context, *SetDefaultInviteUserMessageTextRequest) (*SetDefaultInviteUserMessageTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultInviteUserMessageText not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomInviteUserMessageTextToDefault(context.Context, *ResetCustomInviteUserMessageTextToDefaultRequest) (*ResetCustomInviteUserMessageTextToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomInviteUserMessageTextToDefault not implemented")
}
func (UnimplementedAdminServiceServer) GetDefaultLoginTexts(context.Context, *GetDefaultLoginTextsRequest) (*GetDefaultLoginTextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultLoginTexts not implemented")
}
func (UnimplementedAdminServiceServer) GetCustomLoginTexts(context.Context, *GetCustomLoginTextsRequest) (*GetCustomLoginTextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomLoginTexts not implemented")
}
func (UnimplementedAdminServiceServer) SetCustomLoginText(context.Context, *SetCustomLoginTextsRequest) (*SetCustomLoginTextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCustomLoginText not implemented")
}
func (UnimplementedAdminServiceServer) ResetCustomLoginTextToDefault(context.Context, *ResetCustomLoginTextsToDefaultRequest) (*ResetCustomLoginTextsToDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCustomLoginTextToDefault not implemented")
}
func (UnimplementedAdminServiceServer) ListIAMMemberRoles(context.Context, *ListIAMMemberRolesRequest) (*ListIAMMemberRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIAMMemberRoles not implemented")
}
func (UnimplementedAdminServiceServer) ListIAMMembers(context.Context, *ListIAMMembersRequest) (*ListIAMMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIAMMembers not implemented")
}
func (UnimplementedAdminServiceServer) AddIAMMember(context.Context, *AddIAMMemberRequest) (*AddIAMMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIAMMember not implemented")
}
func (UnimplementedAdminServiceServer) UpdateIAMMember(context.Context, *UpdateIAMMemberRequest) (*UpdateIAMMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIAMMember not implemented")
}
func (UnimplementedAdminServiceServer) RemoveIAMMember(context.Context, *RemoveIAMMemberRequest) (*RemoveIAMMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIAMMember not implemented")
}
func (UnimplementedAdminServiceServer) ListViews(context.Context, *ListViewsRequest) (*ListViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListViews not implemented")
}
func (UnimplementedAdminServiceServer) ListFailedEvents(context.Context, *ListFailedEventsRequest) (*ListFailedEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFailedEvents not implemented")
}
func (UnimplementedAdminServiceServer) RemoveFailedEvent(context.Context, *RemoveFailedEventRequest) (*RemoveFailedEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFailedEvent not implemented")
}
func (UnimplementedAdminServiceServer) ImportData(context.Context, *ImportDataRequest) (*ImportDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportData not implemented")
}
func (UnimplementedAdminServiceServer) ExportData(context.Context, *ExportDataRequest) (*ExportDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportData not implemented")
}
func (UnimplementedAdminServiceServer) ListEventTypes(context.Context, *ListEventTypesRequest) (*ListEventTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventTypes not implemented")
}
func (UnimplementedAdminServiceServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedAdminServiceServer) ListAggregateTypes(context.Context, *ListAggregateTypesRequest) (*ListAggregateTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAggregateTypes not implemented")
}
func (UnimplementedAdminServiceServer) ActivateFeatureLoginDefaultOrg(context.Context, *ActivateFeatureLoginDefaultOrgRequest) (*ActivateFeatureLoginDefaultOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateFeatureLoginDefaultOrg not implemented")
}
func (UnimplementedAdminServiceServer) ListMilestones(context.Context, *ListMilestonesRequest) (*ListMilestonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMilestones not implemented")
}
func (UnimplementedAdminServiceServer) SetRestrictions(context.Context, *SetRestrictionsRequest) (*SetRestrictionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRestrictions not implemented")
}
func (UnimplementedAdminServiceServer) GetRestrictions(context.Context, *GetRestrictionsRequest) (*GetRestrictionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestrictions not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Healthz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetSupportedLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupportedLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetSupportedLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetSupportedLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetSupportedLanguages(ctx, req.(*GetSupportedLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetAllowedLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllowedLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetAllowedLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetAllowedLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetAllowedLanguages(ctx, req.(*GetAllowedLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetDefaultLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultLanguage(ctx, req.(*SetDefaultLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDefaultLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultLanguage(ctx, req.(*GetDefaultLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetMyInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetMyInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetMyInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetMyInstance(ctx, req.(*GetMyInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListInstanceDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstanceDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListInstanceDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListInstanceDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListInstanceDomains(ctx, req.(*ListInstanceDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListInstanceTrustedDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstanceTrustedDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListInstanceTrustedDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListInstanceTrustedDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListInstanceTrustedDomains(ctx, req.(*ListInstanceTrustedDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddInstanceTrustedDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInstanceTrustedDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddInstanceTrustedDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddInstanceTrustedDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddInstanceTrustedDomain(ctx, req.(*AddInstanceTrustedDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveInstanceTrustedDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveInstanceTrustedDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveInstanceTrustedDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveInstanceTrustedDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveInstanceTrustedDomain(ctx, req.(*RemoveInstanceTrustedDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListSecretGenerators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretGeneratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListSecretGenerators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListSecretGenerators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListSecretGenerators(ctx, req.(*ListSecretGeneratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetSecretGenerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretGeneratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetSecretGenerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetSecretGenerator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetSecretGenerator(ctx, req.(*GetSecretGeneratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateSecretGenerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecretGeneratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateSecretGenerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateSecretGenerator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateSecretGenerator(ctx, req.(*UpdateSecretGeneratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetSMTPConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSMTPConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetSMTPConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetSMTPConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetSMTPConfig(ctx, req.(*GetSMTPConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetSMTPConfigById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSMTPConfigByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetSMTPConfigById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetSMTPConfigById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetSMTPConfigById(ctx, req.(*GetSMTPConfigByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddSMTPConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSMTPConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddSMTPConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddSMTPConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddSMTPConfig(ctx, req.(*AddSMTPConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateSMTPConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSMTPConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateSMTPConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateSMTPConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateSMTPConfig(ctx, req.(*UpdateSMTPConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateSMTPConfigPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSMTPConfigPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateSMTPConfigPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateSMTPConfigPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateSMTPConfigPassword(ctx, req.(*UpdateSMTPConfigPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ActivateSMTPConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateSMTPConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ActivateSMTPConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ActivateSMTPConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ActivateSMTPConfig(ctx, req.(*ActivateSMTPConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeactivateSMTPConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateSMTPConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeactivateSMTPConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeactivateSMTPConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeactivateSMTPConfig(ctx, req.(*DeactivateSMTPConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveSMTPConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSMTPConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveSMTPConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveSMTPConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveSMTPConfig(ctx, req.(*RemoveSMTPConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_TestSMTPConfigById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSMTPConfigByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).TestSMTPConfigById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_TestSMTPConfigById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).TestSMTPConfigById(ctx, req.(*TestSMTPConfigByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_TestSMTPConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSMTPConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).TestSMTPConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_TestSMTPConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).TestSMTPConfig(ctx, req.(*TestSMTPConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListSMTPConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSMTPConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListSMTPConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListSMTPConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListSMTPConfigs(ctx, req.(*ListSMTPConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListEmailProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmailProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListEmailProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListEmailProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListEmailProviders(ctx, req.(*ListEmailProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetEmailProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetEmailProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetEmailProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetEmailProvider(ctx, req.(*GetEmailProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetEmailProviderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailProviderByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetEmailProviderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetEmailProviderById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetEmailProviderById(ctx, req.(*GetEmailProviderByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddEmailProviderSMTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEmailProviderSMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddEmailProviderSMTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddEmailProviderSMTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddEmailProviderSMTP(ctx, req.(*AddEmailProviderSMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateEmailProviderSMTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailProviderSMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateEmailProviderSMTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateEmailProviderSMTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateEmailProviderSMTP(ctx, req.(*UpdateEmailProviderSMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddEmailProviderHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEmailProviderHTTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddEmailProviderHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddEmailProviderHTTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddEmailProviderHTTP(ctx, req.(*AddEmailProviderHTTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateEmailProviderHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailProviderHTTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateEmailProviderHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateEmailProviderHTTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateEmailProviderHTTP(ctx, req.(*UpdateEmailProviderHTTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateEmailProviderSMTPPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailProviderSMTPPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateEmailProviderSMTPPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateEmailProviderSMTPPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateEmailProviderSMTPPassword(ctx, req.(*UpdateEmailProviderSMTPPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ActivateEmailProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateEmailProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ActivateEmailProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ActivateEmailProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ActivateEmailProvider(ctx, req.(*ActivateEmailProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeactivateEmailProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateEmailProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeactivateEmailProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeactivateEmailProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeactivateEmailProvider(ctx, req.(*DeactivateEmailProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveEmailProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEmailProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveEmailProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveEmailProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveEmailProvider(ctx, req.(*RemoveEmailProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_TestEmailProviderSMTPById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestEmailProviderSMTPByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).TestEmailProviderSMTPById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_TestEmailProviderSMTPById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).TestEmailProviderSMTPById(ctx, req.(*TestEmailProviderSMTPByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_TestEmailProviderSMTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestEmailProviderSMTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).TestEmailProviderSMTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_TestEmailProviderSMTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).TestEmailProviderSMTP(ctx, req.(*TestEmailProviderSMTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListSMSProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSMSProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListSMSProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListSMSProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListSMSProviders(ctx, req.(*ListSMSProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetSMSProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSMSProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetSMSProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetSMSProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetSMSProvider(ctx, req.(*GetSMSProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddSMSProviderTwilio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSMSProviderTwilioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddSMSProviderTwilio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddSMSProviderTwilio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddSMSProviderTwilio(ctx, req.(*AddSMSProviderTwilioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateSMSProviderTwilio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSMSProviderTwilioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateSMSProviderTwilio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateSMSProviderTwilio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateSMSProviderTwilio(ctx, req.(*UpdateSMSProviderTwilioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateSMSProviderTwilioToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSMSProviderTwilioTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateSMSProviderTwilioToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateSMSProviderTwilioToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateSMSProviderTwilioToken(ctx, req.(*UpdateSMSProviderTwilioTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddSMSProviderHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSMSProviderHTTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddSMSProviderHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddSMSProviderHTTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddSMSProviderHTTP(ctx, req.(*AddSMSProviderHTTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateSMSProviderHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSMSProviderHTTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateSMSProviderHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateSMSProviderHTTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateSMSProviderHTTP(ctx, req.(*UpdateSMSProviderHTTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ActivateSMSProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateSMSProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ActivateSMSProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ActivateSMSProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ActivateSMSProvider(ctx, req.(*ActivateSMSProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeactivateSMSProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateSMSProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeactivateSMSProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeactivateSMSProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeactivateSMSProvider(ctx, req.(*DeactivateSMSProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveSMSProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSMSProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveSMSProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveSMSProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveSMSProvider(ctx, req.(*RemoveSMSProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetOIDCSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOIDCSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetOIDCSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetOIDCSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetOIDCSettings(ctx, req.(*GetOIDCSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddOIDCSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOIDCSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddOIDCSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddOIDCSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddOIDCSettings(ctx, req.(*AddOIDCSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateOIDCSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOIDCSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateOIDCSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateOIDCSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateOIDCSettings(ctx, req.(*UpdateOIDCSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetFileSystemNotificationProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileSystemNotificationProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetFileSystemNotificationProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetFileSystemNotificationProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetFileSystemNotificationProvider(ctx, req.(*GetFileSystemNotificationProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetLogNotificationProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogNotificationProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetLogNotificationProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetLogNotificationProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetLogNotificationProvider(ctx, req.(*GetLogNotificationProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetSecurityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetSecurityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetSecurityPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetSecurityPolicy(ctx, req.(*GetSecurityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetSecurityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSecurityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetSecurityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetSecurityPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetSecurityPolicy(ctx, req.(*SetSecurityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetOrgByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetOrgByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetOrgByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetOrgByID(ctx, req.(*GetOrgByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_IsOrgUnique_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsOrgUniqueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).IsOrgUnique(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_IsOrgUnique_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).IsOrgUnique(ctx, req.(*IsOrgUniqueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetDefaultOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultOrg(ctx, req.(*SetDefaultOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDefaultOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultOrg(ctx, req.(*GetDefaultOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListOrgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListOrgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListOrgs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListOrgs(ctx, req.(*ListOrgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetUpOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUpOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetUpOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetUpOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetUpOrg(ctx, req.(*SetUpOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveOrg(ctx, req.(*RemoveOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetIDPByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIDPByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetIDPByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetIDPByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetIDPByID(ctx, req.(*GetIDPByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListIDPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIDPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListIDPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListIDPs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListIDPs(ctx, req.(*ListIDPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddOIDCIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOIDCIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddOIDCIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddOIDCIDP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddOIDCIDP(ctx, req.(*AddOIDCIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddJWTIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddJWTIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddJWTIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddJWTIDP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddJWTIDP(ctx, req.(*AddJWTIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateIDP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateIDP(ctx, req.(*UpdateIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeactivateIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeactivateIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeactivateIDP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeactivateIDP(ctx, req.(*DeactivateIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ReactivateIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ReactivateIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ReactivateIDP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ReactivateIDP(ctx, req.(*ReactivateIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveIDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIDPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveIDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveIDP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveIDP(ctx, req.(*RemoveIDPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateIDPOIDCConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIDPOIDCConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateIDPOIDCConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateIDPOIDCConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateIDPOIDCConfig(ctx, req.(*UpdateIDPOIDCConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateIDPJWTConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIDPJWTConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateIDPJWTConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateIDPJWTConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateIDPJWTConfig(ctx, req.(*UpdateIDPJWTConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListProviders(ctx, req.(*ListProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetProviderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetProviderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetProviderByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetProviderByID(ctx, req.(*GetProviderByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddGenericOAuthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGenericOAuthProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddGenericOAuthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddGenericOAuthProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddGenericOAuthProvider(ctx, req.(*AddGenericOAuthProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateGenericOAuthProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGenericOAuthProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateGenericOAuthProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateGenericOAuthProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateGenericOAuthProvider(ctx, req.(*UpdateGenericOAuthProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddGenericOIDCProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGenericOIDCProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddGenericOIDCProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddGenericOIDCProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddGenericOIDCProvider(ctx, req.(*AddGenericOIDCProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateGenericOIDCProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGenericOIDCProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateGenericOIDCProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateGenericOIDCProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateGenericOIDCProvider(ctx, req.(*UpdateGenericOIDCProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_MigrateGenericOIDCProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateGenericOIDCProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).MigrateGenericOIDCProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_MigrateGenericOIDCProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).MigrateGenericOIDCProvider(ctx, req.(*MigrateGenericOIDCProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddJWTProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddJWTProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddJWTProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddJWTProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddJWTProvider(ctx, req.(*AddJWTProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateJWTProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJWTProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateJWTProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateJWTProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateJWTProvider(ctx, req.(*UpdateJWTProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddAzureADProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAzureADProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddAzureADProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddAzureADProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddAzureADProvider(ctx, req.(*AddAzureADProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateAzureADProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAzureADProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateAzureADProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateAzureADProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateAzureADProvider(ctx, req.(*UpdateAzureADProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddGitHubProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGitHubProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddGitHubProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddGitHubProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddGitHubProvider(ctx, req.(*AddGitHubProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateGitHubProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGitHubProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateGitHubProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateGitHubProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateGitHubProvider(ctx, req.(*UpdateGitHubProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddGitHubEnterpriseServerProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGitHubEnterpriseServerProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddGitHubEnterpriseServerProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddGitHubEnterpriseServerProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddGitHubEnterpriseServerProvider(ctx, req.(*AddGitHubEnterpriseServerProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateGitHubEnterpriseServerProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGitHubEnterpriseServerProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateGitHubEnterpriseServerProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateGitHubEnterpriseServerProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateGitHubEnterpriseServerProvider(ctx, req.(*UpdateGitHubEnterpriseServerProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddGitLabProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGitLabProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddGitLabProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddGitLabProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddGitLabProvider(ctx, req.(*AddGitLabProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateGitLabProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGitLabProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateGitLabProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateGitLabProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateGitLabProvider(ctx, req.(*UpdateGitLabProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddGitLabSelfHostedProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGitLabSelfHostedProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddGitLabSelfHostedProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddGitLabSelfHostedProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddGitLabSelfHostedProvider(ctx, req.(*AddGitLabSelfHostedProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateGitLabSelfHostedProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGitLabSelfHostedProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateGitLabSelfHostedProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateGitLabSelfHostedProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateGitLabSelfHostedProvider(ctx, req.(*UpdateGitLabSelfHostedProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddGoogleProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGoogleProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddGoogleProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddGoogleProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddGoogleProvider(ctx, req.(*AddGoogleProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateGoogleProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoogleProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateGoogleProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateGoogleProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateGoogleProvider(ctx, req.(*UpdateGoogleProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddLDAPProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLDAPProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddLDAPProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddLDAPProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddLDAPProvider(ctx, req.(*AddLDAPProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateLDAPProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLDAPProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateLDAPProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateLDAPProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateLDAPProvider(ctx, req.(*UpdateLDAPProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddAppleProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppleProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddAppleProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddAppleProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddAppleProvider(ctx, req.(*AddAppleProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateAppleProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppleProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateAppleProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateAppleProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateAppleProvider(ctx, req.(*UpdateAppleProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddSAMLProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSAMLProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddSAMLProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddSAMLProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddSAMLProvider(ctx, req.(*AddSAMLProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateSAMLProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSAMLProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateSAMLProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateSAMLProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateSAMLProvider(ctx, req.(*UpdateSAMLProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RegenerateSAMLProviderCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateSAMLProviderCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RegenerateSAMLProviderCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RegenerateSAMLProviderCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RegenerateSAMLProviderCertificate(ctx, req.(*RegenerateSAMLProviderCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteProvider(ctx, req.(*DeleteProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetOrgIAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgIAMPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetOrgIAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetOrgIAMPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetOrgIAMPolicy(ctx, req.(*GetOrgIAMPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateOrgIAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgIAMPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateOrgIAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateOrgIAMPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateOrgIAMPolicy(ctx, req.(*UpdateOrgIAMPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomOrgIAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomOrgIAMPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomOrgIAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetCustomOrgIAMPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomOrgIAMPolicy(ctx, req.(*GetCustomOrgIAMPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddCustomOrgIAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomOrgIAMPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddCustomOrgIAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddCustomOrgIAMPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddCustomOrgIAMPolicy(ctx, req.(*AddCustomOrgIAMPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateCustomOrgIAMPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomOrgIAMPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateCustomOrgIAMPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateCustomOrgIAMPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateCustomOrgIAMPolicy(ctx, req.(*UpdateCustomOrgIAMPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomOrgIAMPolicyToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomOrgIAMPolicyToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomOrgIAMPolicyToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ResetCustomOrgIAMPolicyToDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomOrgIAMPolicyToDefault(ctx, req.(*ResetCustomOrgIAMPolicyToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDomainPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDomainPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDomainPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDomainPolicy(ctx, req.(*GetDomainPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDomainPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDomainPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDomainPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDomainPolicy(ctx, req.(*UpdateDomainPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomDomainPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomDomainPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomDomainPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetCustomDomainPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomDomainPolicy(ctx, req.(*GetCustomDomainPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddCustomDomainPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomDomainPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddCustomDomainPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddCustomDomainPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddCustomDomainPolicy(ctx, req.(*AddCustomDomainPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateCustomDomainPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomDomainPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateCustomDomainPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateCustomDomainPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateCustomDomainPolicy(ctx, req.(*UpdateCustomDomainPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomDomainPolicyToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomDomainPolicyToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomDomainPolicyToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ResetCustomDomainPolicyToDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomDomainPolicyToDefault(ctx, req.(*ResetCustomDomainPolicyToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetLabelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetLabelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetLabelPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetLabelPolicy(ctx, req.(*GetLabelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPreviewLabelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviewLabelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPreviewLabelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetPreviewLabelPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPreviewLabelPolicy(ctx, req.(*GetPreviewLabelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateLabelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateLabelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateLabelPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateLabelPolicy(ctx, req.(*UpdateLabelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ActivateLabelPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateLabelPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ActivateLabelPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ActivateLabelPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ActivateLabelPolicy(ctx, req.(*ActivateLabelPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveLabelPolicyLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLabelPolicyLogoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveLabelPolicyLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveLabelPolicyLogo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveLabelPolicyLogo(ctx, req.(*RemoveLabelPolicyLogoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveLabelPolicyLogoDark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLabelPolicyLogoDarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveLabelPolicyLogoDark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveLabelPolicyLogoDark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveLabelPolicyLogoDark(ctx, req.(*RemoveLabelPolicyLogoDarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveLabelPolicyIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLabelPolicyIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveLabelPolicyIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveLabelPolicyIcon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveLabelPolicyIcon(ctx, req.(*RemoveLabelPolicyIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveLabelPolicyIconDark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLabelPolicyIconDarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveLabelPolicyIconDark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveLabelPolicyIconDark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveLabelPolicyIconDark(ctx, req.(*RemoveLabelPolicyIconDarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveLabelPolicyFont_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLabelPolicyFontRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveLabelPolicyFont(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveLabelPolicyFont_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveLabelPolicyFont(ctx, req.(*RemoveLabelPolicyFontRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetLoginPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetLoginPolicy(ctx, req.(*GetLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateLoginPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateLoginPolicy(ctx, req.(*UpdateLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListLoginPolicyIDPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginPolicyIDPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListLoginPolicyIDPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListLoginPolicyIDPs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListLoginPolicyIDPs(ctx, req.(*ListLoginPolicyIDPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddIDPToLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIDPToLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddIDPToLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddIDPToLoginPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddIDPToLoginPolicy(ctx, req.(*AddIDPToLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveIDPFromLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIDPFromLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveIDPFromLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveIDPFromLoginPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveIDPFromLoginPolicy(ctx, req.(*RemoveIDPFromLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListLoginPolicySecondFactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginPolicySecondFactorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListLoginPolicySecondFactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListLoginPolicySecondFactors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListLoginPolicySecondFactors(ctx, req.(*ListLoginPolicySecondFactorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddSecondFactorToLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSecondFactorToLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddSecondFactorToLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddSecondFactorToLoginPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddSecondFactorToLoginPolicy(ctx, req.(*AddSecondFactorToLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveSecondFactorFromLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSecondFactorFromLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveSecondFactorFromLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveSecondFactorFromLoginPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveSecondFactorFromLoginPolicy(ctx, req.(*RemoveSecondFactorFromLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListLoginPolicyMultiFactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginPolicyMultiFactorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListLoginPolicyMultiFactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListLoginPolicyMultiFactors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListLoginPolicyMultiFactors(ctx, req.(*ListLoginPolicyMultiFactorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddMultiFactorToLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMultiFactorToLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddMultiFactorToLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddMultiFactorToLoginPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddMultiFactorToLoginPolicy(ctx, req.(*AddMultiFactorToLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveMultiFactorFromLoginPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMultiFactorFromLoginPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveMultiFactorFromLoginPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveMultiFactorFromLoginPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveMultiFactorFromLoginPolicy(ctx, req.(*RemoveMultiFactorFromLoginPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPasswordComplexityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasswordComplexityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPasswordComplexityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetPasswordComplexityPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPasswordComplexityPolicy(ctx, req.(*GetPasswordComplexityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdatePasswordComplexityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordComplexityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdatePasswordComplexityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdatePasswordComplexityPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdatePasswordComplexityPolicy(ctx, req.(*UpdatePasswordComplexityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPasswordAgePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasswordAgePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPasswordAgePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetPasswordAgePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPasswordAgePolicy(ctx, req.(*GetPasswordAgePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdatePasswordAgePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordAgePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdatePasswordAgePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdatePasswordAgePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdatePasswordAgePolicy(ctx, req.(*UpdatePasswordAgePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetLockoutPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLockoutPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetLockoutPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetLockoutPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetLockoutPolicy(ctx, req.(*GetLockoutPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateLockoutPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLockoutPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateLockoutPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateLockoutPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateLockoutPolicy(ctx, req.(*UpdateLockoutPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPrivacyPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivacyPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPrivacyPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetPrivacyPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPrivacyPolicy(ctx, req.(*GetPrivacyPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdatePrivacyPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrivacyPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdatePrivacyPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdatePrivacyPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdatePrivacyPolicy(ctx, req.(*UpdatePrivacyPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddNotificationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNotificationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddNotificationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddNotificationPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddNotificationPolicy(ctx, req.(*AddNotificationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetNotificationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetNotificationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetNotificationPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetNotificationPolicy(ctx, req.(*GetNotificationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateNotificationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateNotificationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateNotificationPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateNotificationPolicy(ctx, req.(*UpdateNotificationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultInitMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultInitMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultInitMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDefaultInitMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultInitMessageText(ctx, req.(*GetDefaultInitMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomInitMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomInitMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomInitMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetCustomInitMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomInitMessageText(ctx, req.(*GetCustomInitMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultInitMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultInitMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultInitMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetDefaultInitMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultInitMessageText(ctx, req.(*SetDefaultInitMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomInitMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomInitMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomInitMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ResetCustomInitMessageTextToDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomInitMessageTextToDefault(ctx, req.(*ResetCustomInitMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultPasswordResetMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultPasswordResetMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultPasswordResetMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDefaultPasswordResetMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultPasswordResetMessageText(ctx, req.(*GetDefaultPasswordResetMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomPasswordResetMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomPasswordResetMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomPasswordResetMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetCustomPasswordResetMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomPasswordResetMessageText(ctx, req.(*GetCustomPasswordResetMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultPasswordResetMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultPasswordResetMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultPasswordResetMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetDefaultPasswordResetMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultPasswordResetMessageText(ctx, req.(*SetDefaultPasswordResetMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomPasswordResetMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomPasswordResetMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomPasswordResetMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ResetCustomPasswordResetMessageTextToDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomPasswordResetMessageTextToDefault(ctx, req.(*ResetCustomPasswordResetMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultVerifyEmailMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultVerifyEmailMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultVerifyEmailMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDefaultVerifyEmailMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultVerifyEmailMessageText(ctx, req.(*GetDefaultVerifyEmailMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomVerifyEmailMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomVerifyEmailMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomVerifyEmailMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetCustomVerifyEmailMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomVerifyEmailMessageText(ctx, req.(*GetCustomVerifyEmailMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultVerifyEmailMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultVerifyEmailMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultVerifyEmailMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetDefaultVerifyEmailMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultVerifyEmailMessageText(ctx, req.(*SetDefaultVerifyEmailMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomVerifyEmailMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomVerifyEmailMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomVerifyEmailMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ResetCustomVerifyEmailMessageTextToDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomVerifyEmailMessageTextToDefault(ctx, req.(*ResetCustomVerifyEmailMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultVerifyPhoneMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultVerifyPhoneMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultVerifyPhoneMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDefaultVerifyPhoneMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultVerifyPhoneMessageText(ctx, req.(*GetDefaultVerifyPhoneMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomVerifyPhoneMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomVerifyPhoneMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomVerifyPhoneMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetCustomVerifyPhoneMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomVerifyPhoneMessageText(ctx, req.(*GetCustomVerifyPhoneMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultVerifyPhoneMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultVerifyPhoneMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultVerifyPhoneMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetDefaultVerifyPhoneMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultVerifyPhoneMessageText(ctx, req.(*SetDefaultVerifyPhoneMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomVerifyPhoneMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomVerifyPhoneMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomVerifyPhoneMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ResetCustomVerifyPhoneMessageTextToDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomVerifyPhoneMessageTextToDefault(ctx, req.(*ResetCustomVerifyPhoneMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultVerifySMSOTPMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultVerifySMSOTPMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultVerifySMSOTPMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDefaultVerifySMSOTPMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultVerifySMSOTPMessageText(ctx, req.(*GetDefaultVerifySMSOTPMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomVerifySMSOTPMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomVerifySMSOTPMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomVerifySMSOTPMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetCustomVerifySMSOTPMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomVerifySMSOTPMessageText(ctx, req.(*GetCustomVerifySMSOTPMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultVerifySMSOTPMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultVerifySMSOTPMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultVerifySMSOTPMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetDefaultVerifySMSOTPMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultVerifySMSOTPMessageText(ctx, req.(*SetDefaultVerifySMSOTPMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomVerifySMSOTPMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomVerifySMSOTPMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomVerifySMSOTPMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ResetCustomVerifySMSOTPMessageTextToDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomVerifySMSOTPMessageTextToDefault(ctx, req.(*ResetCustomVerifySMSOTPMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultVerifyEmailOTPMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultVerifyEmailOTPMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultVerifyEmailOTPMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDefaultVerifyEmailOTPMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultVerifyEmailOTPMessageText(ctx, req.(*GetDefaultVerifyEmailOTPMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomVerifyEmailOTPMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomVerifyEmailOTPMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomVerifyEmailOTPMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetCustomVerifyEmailOTPMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomVerifyEmailOTPMessageText(ctx, req.(*GetCustomVerifyEmailOTPMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultVerifyEmailOTPMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultVerifyEmailOTPMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultVerifyEmailOTPMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetDefaultVerifyEmailOTPMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultVerifyEmailOTPMessageText(ctx, req.(*SetDefaultVerifyEmailOTPMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomVerifyEmailOTPMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomVerifyEmailOTPMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomVerifyEmailOTPMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ResetCustomVerifyEmailOTPMessageTextToDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomVerifyEmailOTPMessageTextToDefault(ctx, req.(*ResetCustomVerifyEmailOTPMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultDomainClaimedMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultDomainClaimedMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultDomainClaimedMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDefaultDomainClaimedMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultDomainClaimedMessageText(ctx, req.(*GetDefaultDomainClaimedMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomDomainClaimedMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomDomainClaimedMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomDomainClaimedMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetCustomDomainClaimedMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomDomainClaimedMessageText(ctx, req.(*GetCustomDomainClaimedMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultDomainClaimedMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultDomainClaimedMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultDomainClaimedMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetDefaultDomainClaimedMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultDomainClaimedMessageText(ctx, req.(*SetDefaultDomainClaimedMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomDomainClaimedMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomDomainClaimedMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomDomainClaimedMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ResetCustomDomainClaimedMessageTextToDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomDomainClaimedMessageTextToDefault(ctx, req.(*ResetCustomDomainClaimedMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultPasswordlessRegistrationMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultPasswordlessRegistrationMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultPasswordlessRegistrationMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDefaultPasswordlessRegistrationMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultPasswordlessRegistrationMessageText(ctx, req.(*GetDefaultPasswordlessRegistrationMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomPasswordlessRegistrationMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomPasswordlessRegistrationMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomPasswordlessRegistrationMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetCustomPasswordlessRegistrationMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomPasswordlessRegistrationMessageText(ctx, req.(*GetCustomPasswordlessRegistrationMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultPasswordlessRegistrationMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultPasswordlessRegistrationMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultPasswordlessRegistrationMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetDefaultPasswordlessRegistrationMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultPasswordlessRegistrationMessageText(ctx, req.(*SetDefaultPasswordlessRegistrationMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomPasswordlessRegistrationMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomPasswordlessRegistrationMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ResetCustomPasswordlessRegistrationMessageTextToDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomPasswordlessRegistrationMessageTextToDefault(ctx, req.(*ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultPasswordChangeMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultPasswordChangeMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultPasswordChangeMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDefaultPasswordChangeMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultPasswordChangeMessageText(ctx, req.(*GetDefaultPasswordChangeMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomPasswordChangeMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomPasswordChangeMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomPasswordChangeMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetCustomPasswordChangeMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomPasswordChangeMessageText(ctx, req.(*GetCustomPasswordChangeMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultPasswordChangeMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultPasswordChangeMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultPasswordChangeMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetDefaultPasswordChangeMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultPasswordChangeMessageText(ctx, req.(*SetDefaultPasswordChangeMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomPasswordChangeMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomPasswordChangeMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomPasswordChangeMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ResetCustomPasswordChangeMessageTextToDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomPasswordChangeMessageTextToDefault(ctx, req.(*ResetCustomPasswordChangeMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultInviteUserMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultInviteUserMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultInviteUserMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDefaultInviteUserMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultInviteUserMessageText(ctx, req.(*GetDefaultInviteUserMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomInviteUserMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomInviteUserMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomInviteUserMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetCustomInviteUserMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomInviteUserMessageText(ctx, req.(*GetCustomInviteUserMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetDefaultInviteUserMessageText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultInviteUserMessageTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetDefaultInviteUserMessageText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetDefaultInviteUserMessageText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetDefaultInviteUserMessageText(ctx, req.(*SetDefaultInviteUserMessageTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomInviteUserMessageTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomInviteUserMessageTextToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomInviteUserMessageTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ResetCustomInviteUserMessageTextToDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomInviteUserMessageTextToDefault(ctx, req.(*ResetCustomInviteUserMessageTextToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDefaultLoginTexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultLoginTextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDefaultLoginTexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDefaultLoginTexts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDefaultLoginTexts(ctx, req.(*GetDefaultLoginTextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCustomLoginTexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomLoginTextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCustomLoginTexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetCustomLoginTexts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCustomLoginTexts(ctx, req.(*GetCustomLoginTextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetCustomLoginText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCustomLoginTextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetCustomLoginText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetCustomLoginText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetCustomLoginText(ctx, req.(*SetCustomLoginTextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ResetCustomLoginTextToDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCustomLoginTextsToDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ResetCustomLoginTextToDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ResetCustomLoginTextToDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ResetCustomLoginTextToDefault(ctx, req.(*ResetCustomLoginTextsToDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListIAMMemberRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIAMMemberRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListIAMMemberRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListIAMMemberRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListIAMMemberRoles(ctx, req.(*ListIAMMemberRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListIAMMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIAMMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListIAMMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListIAMMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListIAMMembers(ctx, req.(*ListIAMMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddIAMMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIAMMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddIAMMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AddIAMMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddIAMMember(ctx, req.(*AddIAMMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateIAMMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIAMMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateIAMMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateIAMMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateIAMMember(ctx, req.(*UpdateIAMMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveIAMMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIAMMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveIAMMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveIAMMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveIAMMember(ctx, req.(*RemoveIAMMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListViews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListViews(ctx, req.(*ListViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListFailedEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFailedEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListFailedEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListFailedEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListFailedEvents(ctx, req.(*ListFailedEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RemoveFailedEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFailedEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RemoveFailedEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RemoveFailedEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RemoveFailedEvent(ctx, req.(*RemoveFailedEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ImportData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ImportData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ImportData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ImportData(ctx, req.(*ImportDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ExportData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ExportData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ExportData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ExportData(ctx, req.(*ExportDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListEventTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListEventTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListEventTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListEventTypes(ctx, req.(*ListEventTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListAggregateTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAggregateTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListAggregateTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListAggregateTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListAggregateTypes(ctx, req.(*ListAggregateTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ActivateFeatureLoginDefaultOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateFeatureLoginDefaultOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ActivateFeatureLoginDefaultOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ActivateFeatureLoginDefaultOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ActivateFeatureLoginDefaultOrg(ctx, req.(*ActivateFeatureLoginDefaultOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListMilestones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMilestonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListMilestones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListMilestones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListMilestones(ctx, req.(*ListMilestonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetRestrictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRestrictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetRestrictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetRestrictions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetRestrictions(ctx, req.(*SetRestrictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetRestrictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRestrictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetRestrictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetRestrictions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetRestrictions(ctx, req.(*GetRestrictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zitadel.admin.v1.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthz",
			Handler:    _AdminService_Healthz_Handler,
		},
		{
			MethodName: "GetSupportedLanguages",
			Handler:    _AdminService_GetSupportedLanguages_Handler,
		},
		{
			MethodName: "GetAllowedLanguages",
			Handler:    _AdminService_GetAllowedLanguages_Handler,
		},
		{
			MethodName: "SetDefaultLanguage",
			Handler:    _AdminService_SetDefaultLanguage_Handler,
		},
		{
			MethodName: "GetDefaultLanguage",
			Handler:    _AdminService_GetDefaultLanguage_Handler,
		},
		{
			MethodName: "GetMyInstance",
			Handler:    _AdminService_GetMyInstance_Handler,
		},
		{
			MethodName: "ListInstanceDomains",
			Handler:    _AdminService_ListInstanceDomains_Handler,
		},
		{
			MethodName: "ListInstanceTrustedDomains",
			Handler:    _AdminService_ListInstanceTrustedDomains_Handler,
		},
		{
			MethodName: "AddInstanceTrustedDomain",
			Handler:    _AdminService_AddInstanceTrustedDomain_Handler,
		},
		{
			MethodName: "RemoveInstanceTrustedDomain",
			Handler:    _AdminService_RemoveInstanceTrustedDomain_Handler,
		},
		{
			MethodName: "ListSecretGenerators",
			Handler:    _AdminService_ListSecretGenerators_Handler,
		},
		{
			MethodName: "GetSecretGenerator",
			Handler:    _AdminService_GetSecretGenerator_Handler,
		},
		{
			MethodName: "UpdateSecretGenerator",
			Handler:    _AdminService_UpdateSecretGenerator_Handler,
		},
		{
			MethodName: "GetSMTPConfig",
			Handler:    _AdminService_GetSMTPConfig_Handler,
		},
		{
			MethodName: "GetSMTPConfigById",
			Handler:    _AdminService_GetSMTPConfigById_Handler,
		},
		{
			MethodName: "AddSMTPConfig",
			Handler:    _AdminService_AddSMTPConfig_Handler,
		},
		{
			MethodName: "UpdateSMTPConfig",
			Handler:    _AdminService_UpdateSMTPConfig_Handler,
		},
		{
			MethodName: "UpdateSMTPConfigPassword",
			Handler:    _AdminService_UpdateSMTPConfigPassword_Handler,
		},
		{
			MethodName: "ActivateSMTPConfig",
			Handler:    _AdminService_ActivateSMTPConfig_Handler,
		},
		{
			MethodName: "DeactivateSMTPConfig",
			Handler:    _AdminService_DeactivateSMTPConfig_Handler,
		},
		{
			MethodName: "RemoveSMTPConfig",
			Handler:    _AdminService_RemoveSMTPConfig_Handler,
		},
		{
			MethodName: "TestSMTPConfigById",
			Handler:    _AdminService_TestSMTPConfigById_Handler,
		},
		{
			MethodName: "TestSMTPConfig",
			Handler:    _AdminService_TestSMTPConfig_Handler,
		},
		{
			MethodName: "ListSMTPConfigs",
			Handler:    _AdminService_ListSMTPConfigs_Handler,
		},
		{
			MethodName: "ListEmailProviders",
			Handler:    _AdminService_ListEmailProviders_Handler,
		},
		{
			MethodName: "GetEmailProvider",
			Handler:    _AdminService_GetEmailProvider_Handler,
		},
		{
			MethodName: "GetEmailProviderById",
			Handler:    _AdminService_GetEmailProviderById_Handler,
		},
		{
			MethodName: "AddEmailProviderSMTP",
			Handler:    _AdminService_AddEmailProviderSMTP_Handler,
		},
		{
			MethodName: "UpdateEmailProviderSMTP",
			Handler:    _AdminService_UpdateEmailProviderSMTP_Handler,
		},
		{
			MethodName: "AddEmailProviderHTTP",
			Handler:    _AdminService_AddEmailProviderHTTP_Handler,
		},
		{
			MethodName: "UpdateEmailProviderHTTP",
			Handler:    _AdminService_UpdateEmailProviderHTTP_Handler,
		},
		{
			MethodName: "UpdateEmailProviderSMTPPassword",
			Handler:    _AdminService_UpdateEmailProviderSMTPPassword_Handler,
		},
		{
			MethodName: "ActivateEmailProvider",
			Handler:    _AdminService_ActivateEmailProvider_Handler,
		},
		{
			MethodName: "DeactivateEmailProvider",
			Handler:    _AdminService_DeactivateEmailProvider_Handler,
		},
		{
			MethodName: "RemoveEmailProvider",
			Handler:    _AdminService_RemoveEmailProvider_Handler,
		},
		{
			MethodName: "TestEmailProviderSMTPById",
			Handler:    _AdminService_TestEmailProviderSMTPById_Handler,
		},
		{
			MethodName: "TestEmailProviderSMTP",
			Handler:    _AdminService_TestEmailProviderSMTP_Handler,
		},
		{
			MethodName: "ListSMSProviders",
			Handler:    _AdminService_ListSMSProviders_Handler,
		},
		{
			MethodName: "GetSMSProvider",
			Handler:    _AdminService_GetSMSProvider_Handler,
		},
		{
			MethodName: "AddSMSProviderTwilio",
			Handler:    _AdminService_AddSMSProviderTwilio_Handler,
		},
		{
			MethodName: "UpdateSMSProviderTwilio",
			Handler:    _AdminService_UpdateSMSProviderTwilio_Handler,
		},
		{
			MethodName: "UpdateSMSProviderTwilioToken",
			Handler:    _AdminService_UpdateSMSProviderTwilioToken_Handler,
		},
		{
			MethodName: "AddSMSProviderHTTP",
			Handler:    _AdminService_AddSMSProviderHTTP_Handler,
		},
		{
			MethodName: "UpdateSMSProviderHTTP",
			Handler:    _AdminService_UpdateSMSProviderHTTP_Handler,
		},
		{
			MethodName: "ActivateSMSProvider",
			Handler:    _AdminService_ActivateSMSProvider_Handler,
		},
		{
			MethodName: "DeactivateSMSProvider",
			Handler:    _AdminService_DeactivateSMSProvider_Handler,
		},
		{
			MethodName: "RemoveSMSProvider",
			Handler:    _AdminService_RemoveSMSProvider_Handler,
		},
		{
			MethodName: "GetOIDCSettings",
			Handler:    _AdminService_GetOIDCSettings_Handler,
		},
		{
			MethodName: "AddOIDCSettings",
			Handler:    _AdminService_AddOIDCSettings_Handler,
		},
		{
			MethodName: "UpdateOIDCSettings",
			Handler:    _AdminService_UpdateOIDCSettings_Handler,
		},
		{
			MethodName: "GetFileSystemNotificationProvider",
			Handler:    _AdminService_GetFileSystemNotificationProvider_Handler,
		},
		{
			MethodName: "GetLogNotificationProvider",
			Handler:    _AdminService_GetLogNotificationProvider_Handler,
		},
		{
			MethodName: "GetSecurityPolicy",
			Handler:    _AdminService_GetSecurityPolicy_Handler,
		},
		{
			MethodName: "SetSecurityPolicy",
			Handler:    _AdminService_SetSecurityPolicy_Handler,
		},
		{
			MethodName: "GetOrgByID",
			Handler:    _AdminService_GetOrgByID_Handler,
		},
		{
			MethodName: "IsOrgUnique",
			Handler:    _AdminService_IsOrgUnique_Handler,
		},
		{
			MethodName: "SetDefaultOrg",
			Handler:    _AdminService_SetDefaultOrg_Handler,
		},
		{
			MethodName: "GetDefaultOrg",
			Handler:    _AdminService_GetDefaultOrg_Handler,
		},
		{
			MethodName: "ListOrgs",
			Handler:    _AdminService_ListOrgs_Handler,
		},
		{
			MethodName: "SetUpOrg",
			Handler:    _AdminService_SetUpOrg_Handler,
		},
		{
			MethodName: "RemoveOrg",
			Handler:    _AdminService_RemoveOrg_Handler,
		},
		{
			MethodName: "GetIDPByID",
			Handler:    _AdminService_GetIDPByID_Handler,
		},
		{
			MethodName: "ListIDPs",
			Handler:    _AdminService_ListIDPs_Handler,
		},
		{
			MethodName: "AddOIDCIDP",
			Handler:    _AdminService_AddOIDCIDP_Handler,
		},
		{
			MethodName: "AddJWTIDP",
			Handler:    _AdminService_AddJWTIDP_Handler,
		},
		{
			MethodName: "UpdateIDP",
			Handler:    _AdminService_UpdateIDP_Handler,
		},
		{
			MethodName: "DeactivateIDP",
			Handler:    _AdminService_DeactivateIDP_Handler,
		},
		{
			MethodName: "ReactivateIDP",
			Handler:    _AdminService_ReactivateIDP_Handler,
		},
		{
			MethodName: "RemoveIDP",
			Handler:    _AdminService_RemoveIDP_Handler,
		},
		{
			MethodName: "UpdateIDPOIDCConfig",
			Handler:    _AdminService_UpdateIDPOIDCConfig_Handler,
		},
		{
			MethodName: "UpdateIDPJWTConfig",
			Handler:    _AdminService_UpdateIDPJWTConfig_Handler,
		},
		{
			MethodName: "ListProviders",
			Handler:    _AdminService_ListProviders_Handler,
		},
		{
			MethodName: "GetProviderByID",
			Handler:    _AdminService_GetProviderByID_Handler,
		},
		{
			MethodName: "AddGenericOAuthProvider",
			Handler:    _AdminService_AddGenericOAuthProvider_Handler,
		},
		{
			MethodName: "UpdateGenericOAuthProvider",
			Handler:    _AdminService_UpdateGenericOAuthProvider_Handler,
		},
		{
			MethodName: "AddGenericOIDCProvider",
			Handler:    _AdminService_AddGenericOIDCProvider_Handler,
		},
		{
			MethodName: "UpdateGenericOIDCProvider",
			Handler:    _AdminService_UpdateGenericOIDCProvider_Handler,
		},
		{
			MethodName: "MigrateGenericOIDCProvider",
			Handler:    _AdminService_MigrateGenericOIDCProvider_Handler,
		},
		{
			MethodName: "AddJWTProvider",
			Handler:    _AdminService_AddJWTProvider_Handler,
		},
		{
			MethodName: "UpdateJWTProvider",
			Handler:    _AdminService_UpdateJWTProvider_Handler,
		},
		{
			MethodName: "AddAzureADProvider",
			Handler:    _AdminService_AddAzureADProvider_Handler,
		},
		{
			MethodName: "UpdateAzureADProvider",
			Handler:    _AdminService_UpdateAzureADProvider_Handler,
		},
		{
			MethodName: "AddGitHubProvider",
			Handler:    _AdminService_AddGitHubProvider_Handler,
		},
		{
			MethodName: "UpdateGitHubProvider",
			Handler:    _AdminService_UpdateGitHubProvider_Handler,
		},
		{
			MethodName: "AddGitHubEnterpriseServerProvider",
			Handler:    _AdminService_AddGitHubEnterpriseServerProvider_Handler,
		},
		{
			MethodName: "UpdateGitHubEnterpriseServerProvider",
			Handler:    _AdminService_UpdateGitHubEnterpriseServerProvider_Handler,
		},
		{
			MethodName: "AddGitLabProvider",
			Handler:    _AdminService_AddGitLabProvider_Handler,
		},
		{
			MethodName: "UpdateGitLabProvider",
			Handler:    _AdminService_UpdateGitLabProvider_Handler,
		},
		{
			MethodName: "AddGitLabSelfHostedProvider",
			Handler:    _AdminService_AddGitLabSelfHostedProvider_Handler,
		},
		{
			MethodName: "UpdateGitLabSelfHostedProvider",
			Handler:    _AdminService_UpdateGitLabSelfHostedProvider_Handler,
		},
		{
			MethodName: "AddGoogleProvider",
			Handler:    _AdminService_AddGoogleProvider_Handler,
		},
		{
			MethodName: "UpdateGoogleProvider",
			Handler:    _AdminService_UpdateGoogleProvider_Handler,
		},
		{
			MethodName: "AddLDAPProvider",
			Handler:    _AdminService_AddLDAPProvider_Handler,
		},
		{
			MethodName: "UpdateLDAPProvider",
			Handler:    _AdminService_UpdateLDAPProvider_Handler,
		},
		{
			MethodName: "AddAppleProvider",
			Handler:    _AdminService_AddAppleProvider_Handler,
		},
		{
			MethodName: "UpdateAppleProvider",
			Handler:    _AdminService_UpdateAppleProvider_Handler,
		},
		{
			MethodName: "AddSAMLProvider",
			Handler:    _AdminService_AddSAMLProvider_Handler,
		},
		{
			MethodName: "UpdateSAMLProvider",
			Handler:    _AdminService_UpdateSAMLProvider_Handler,
		},
		{
			MethodName: "RegenerateSAMLProviderCertificate",
			Handler:    _AdminService_RegenerateSAMLProviderCertificate_Handler,
		},
		{
			MethodName: "DeleteProvider",
			Handler:    _AdminService_DeleteProvider_Handler,
		},
		{
			MethodName: "GetOrgIAMPolicy",
			Handler:    _AdminService_GetOrgIAMPolicy_Handler,
		},
		{
			MethodName: "UpdateOrgIAMPolicy",
			Handler:    _AdminService_UpdateOrgIAMPolicy_Handler,
		},
		{
			MethodName: "GetCustomOrgIAMPolicy",
			Handler:    _AdminService_GetCustomOrgIAMPolicy_Handler,
		},
		{
			MethodName: "AddCustomOrgIAMPolicy",
			Handler:    _AdminService_AddCustomOrgIAMPolicy_Handler,
		},
		{
			MethodName: "UpdateCustomOrgIAMPolicy",
			Handler:    _AdminService_UpdateCustomOrgIAMPolicy_Handler,
		},
		{
			MethodName: "ResetCustomOrgIAMPolicyToDefault",
			Handler:    _AdminService_ResetCustomOrgIAMPolicyToDefault_Handler,
		},
		{
			MethodName: "GetDomainPolicy",
			Handler:    _AdminService_GetDomainPolicy_Handler,
		},
		{
			MethodName: "UpdateDomainPolicy",
			Handler:    _AdminService_UpdateDomainPolicy_Handler,
		},
		{
			MethodName: "GetCustomDomainPolicy",
			Handler:    _AdminService_GetCustomDomainPolicy_Handler,
		},
		{
			MethodName: "AddCustomDomainPolicy",
			Handler:    _AdminService_AddCustomDomainPolicy_Handler,
		},
		{
			MethodName: "UpdateCustomDomainPolicy",
			Handler:    _AdminService_UpdateCustomDomainPolicy_Handler,
		},
		{
			MethodName: "ResetCustomDomainPolicyToDefault",
			Handler:    _AdminService_ResetCustomDomainPolicyToDefault_Handler,
		},
		{
			MethodName: "GetLabelPolicy",
			Handler:    _AdminService_GetLabelPolicy_Handler,
		},
		{
			MethodName: "GetPreviewLabelPolicy",
			Handler:    _AdminService_GetPreviewLabelPolicy_Handler,
		},
		{
			MethodName: "UpdateLabelPolicy",
			Handler:    _AdminService_UpdateLabelPolicy_Handler,
		},
		{
			MethodName: "ActivateLabelPolicy",
			Handler:    _AdminService_ActivateLabelPolicy_Handler,
		},
		{
			MethodName: "RemoveLabelPolicyLogo",
			Handler:    _AdminService_RemoveLabelPolicyLogo_Handler,
		},
		{
			MethodName: "RemoveLabelPolicyLogoDark",
			Handler:    _AdminService_RemoveLabelPolicyLogoDark_Handler,
		},
		{
			MethodName: "RemoveLabelPolicyIcon",
			Handler:    _AdminService_RemoveLabelPolicyIcon_Handler,
		},
		{
			MethodName: "RemoveLabelPolicyIconDark",
			Handler:    _AdminService_RemoveLabelPolicyIconDark_Handler,
		},
		{
			MethodName: "RemoveLabelPolicyFont",
			Handler:    _AdminService_RemoveLabelPolicyFont_Handler,
		},
		{
			MethodName: "GetLoginPolicy",
			Handler:    _AdminService_GetLoginPolicy_Handler,
		},
		{
			MethodName: "UpdateLoginPolicy",
			Handler:    _AdminService_UpdateLoginPolicy_Handler,
		},
		{
			MethodName: "ListLoginPolicyIDPs",
			Handler:    _AdminService_ListLoginPolicyIDPs_Handler,
		},
		{
			MethodName: "AddIDPToLoginPolicy",
			Handler:    _AdminService_AddIDPToLoginPolicy_Handler,
		},
		{
			MethodName: "RemoveIDPFromLoginPolicy",
			Handler:    _AdminService_RemoveIDPFromLoginPolicy_Handler,
		},
		{
			MethodName: "ListLoginPolicySecondFactors",
			Handler:    _AdminService_ListLoginPolicySecondFactors_Handler,
		},
		{
			MethodName: "AddSecondFactorToLoginPolicy",
			Handler:    _AdminService_AddSecondFactorToLoginPolicy_Handler,
		},
		{
			MethodName: "RemoveSecondFactorFromLoginPolicy",
			Handler:    _AdminService_RemoveSecondFactorFromLoginPolicy_Handler,
		},
		{
			MethodName: "ListLoginPolicyMultiFactors",
			Handler:    _AdminService_ListLoginPolicyMultiFactors_Handler,
		},
		{
			MethodName: "AddMultiFactorToLoginPolicy",
			Handler:    _AdminService_AddMultiFactorToLoginPolicy_Handler,
		},
		{
			MethodName: "RemoveMultiFactorFromLoginPolicy",
			Handler:    _AdminService_RemoveMultiFactorFromLoginPolicy_Handler,
		},
		{
			MethodName: "GetPasswordComplexityPolicy",
			Handler:    _AdminService_GetPasswordComplexityPolicy_Handler,
		},
		{
			MethodName: "UpdatePasswordComplexityPolicy",
			Handler:    _AdminService_UpdatePasswordComplexityPolicy_Handler,
		},
		{
			MethodName: "GetPasswordAgePolicy",
			Handler:    _AdminService_GetPasswordAgePolicy_Handler,
		},
		{
			MethodName: "UpdatePasswordAgePolicy",
			Handler:    _AdminService_UpdatePasswordAgePolicy_Handler,
		},
		{
			MethodName: "GetLockoutPolicy",
			Handler:    _AdminService_GetLockoutPolicy_Handler,
		},
		{
			MethodName: "UpdateLockoutPolicy",
			Handler:    _AdminService_UpdateLockoutPolicy_Handler,
		},
		{
			MethodName: "GetPrivacyPolicy",
			Handler:    _AdminService_GetPrivacyPolicy_Handler,
		},
		{
			MethodName: "UpdatePrivacyPolicy",
			Handler:    _AdminService_UpdatePrivacyPolicy_Handler,
		},
		{
			MethodName: "AddNotificationPolicy",
			Handler:    _AdminService_AddNotificationPolicy_Handler,
		},
		{
			MethodName: "GetNotificationPolicy",
			Handler:    _AdminService_GetNotificationPolicy_Handler,
		},
		{
			MethodName: "UpdateNotificationPolicy",
			Handler:    _AdminService_UpdateNotificationPolicy_Handler,
		},
		{
			MethodName: "GetDefaultInitMessageText",
			Handler:    _AdminService_GetDefaultInitMessageText_Handler,
		},
		{
			MethodName: "GetCustomInitMessageText",
			Handler:    _AdminService_GetCustomInitMessageText_Handler,
		},
		{
			MethodName: "SetDefaultInitMessageText",
			Handler:    _AdminService_SetDefaultInitMessageText_Handler,
		},
		{
			MethodName: "ResetCustomInitMessageTextToDefault",
			Handler:    _AdminService_ResetCustomInitMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetDefaultPasswordResetMessageText",
			Handler:    _AdminService_GetDefaultPasswordResetMessageText_Handler,
		},
		{
			MethodName: "GetCustomPasswordResetMessageText",
			Handler:    _AdminService_GetCustomPasswordResetMessageText_Handler,
		},
		{
			MethodName: "SetDefaultPasswordResetMessageText",
			Handler:    _AdminService_SetDefaultPasswordResetMessageText_Handler,
		},
		{
			MethodName: "ResetCustomPasswordResetMessageTextToDefault",
			Handler:    _AdminService_ResetCustomPasswordResetMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetDefaultVerifyEmailMessageText",
			Handler:    _AdminService_GetDefaultVerifyEmailMessageText_Handler,
		},
		{
			MethodName: "GetCustomVerifyEmailMessageText",
			Handler:    _AdminService_GetCustomVerifyEmailMessageText_Handler,
		},
		{
			MethodName: "SetDefaultVerifyEmailMessageText",
			Handler:    _AdminService_SetDefaultVerifyEmailMessageText_Handler,
		},
		{
			MethodName: "ResetCustomVerifyEmailMessageTextToDefault",
			Handler:    _AdminService_ResetCustomVerifyEmailMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetDefaultVerifyPhoneMessageText",
			Handler:    _AdminService_GetDefaultVerifyPhoneMessageText_Handler,
		},
		{
			MethodName: "GetCustomVerifyPhoneMessageText",
			Handler:    _AdminService_GetCustomVerifyPhoneMessageText_Handler,
		},
		{
			MethodName: "SetDefaultVerifyPhoneMessageText",
			Handler:    _AdminService_SetDefaultVerifyPhoneMessageText_Handler,
		},
		{
			MethodName: "ResetCustomVerifyPhoneMessageTextToDefault",
			Handler:    _AdminService_ResetCustomVerifyPhoneMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetDefaultVerifySMSOTPMessageText",
			Handler:    _AdminService_GetDefaultVerifySMSOTPMessageText_Handler,
		},
		{
			MethodName: "GetCustomVerifySMSOTPMessageText",
			Handler:    _AdminService_GetCustomVerifySMSOTPMessageText_Handler,
		},
		{
			MethodName: "SetDefaultVerifySMSOTPMessageText",
			Handler:    _AdminService_SetDefaultVerifySMSOTPMessageText_Handler,
		},
		{
			MethodName: "ResetCustomVerifySMSOTPMessageTextToDefault",
			Handler:    _AdminService_ResetCustomVerifySMSOTPMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetDefaultVerifyEmailOTPMessageText",
			Handler:    _AdminService_GetDefaultVerifyEmailOTPMessageText_Handler,
		},
		{
			MethodName: "GetCustomVerifyEmailOTPMessageText",
			Handler:    _AdminService_GetCustomVerifyEmailOTPMessageText_Handler,
		},
		{
			MethodName: "SetDefaultVerifyEmailOTPMessageText",
			Handler:    _AdminService_SetDefaultVerifyEmailOTPMessageText_Handler,
		},
		{
			MethodName: "ResetCustomVerifyEmailOTPMessageTextToDefault",
			Handler:    _AdminService_ResetCustomVerifyEmailOTPMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetDefaultDomainClaimedMessageText",
			Handler:    _AdminService_GetDefaultDomainClaimedMessageText_Handler,
		},
		{
			MethodName: "GetCustomDomainClaimedMessageText",
			Handler:    _AdminService_GetCustomDomainClaimedMessageText_Handler,
		},
		{
			MethodName: "SetDefaultDomainClaimedMessageText",
			Handler:    _AdminService_SetDefaultDomainClaimedMessageText_Handler,
		},
		{
			MethodName: "ResetCustomDomainClaimedMessageTextToDefault",
			Handler:    _AdminService_ResetCustomDomainClaimedMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetDefaultPasswordlessRegistrationMessageText",
			Handler:    _AdminService_GetDefaultPasswordlessRegistrationMessageText_Handler,
		},
		{
			MethodName: "GetCustomPasswordlessRegistrationMessageText",
			Handler:    _AdminService_GetCustomPasswordlessRegistrationMessageText_Handler,
		},
		{
			MethodName: "SetDefaultPasswordlessRegistrationMessageText",
			Handler:    _AdminService_SetDefaultPasswordlessRegistrationMessageText_Handler,
		},
		{
			MethodName: "ResetCustomPasswordlessRegistrationMessageTextToDefault",
			Handler:    _AdminService_ResetCustomPasswordlessRegistrationMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetDefaultPasswordChangeMessageText",
			Handler:    _AdminService_GetDefaultPasswordChangeMessageText_Handler,
		},
		{
			MethodName: "GetCustomPasswordChangeMessageText",
			Handler:    _AdminService_GetCustomPasswordChangeMessageText_Handler,
		},
		{
			MethodName: "SetDefaultPasswordChangeMessageText",
			Handler:    _AdminService_SetDefaultPasswordChangeMessageText_Handler,
		},
		{
			MethodName: "ResetCustomPasswordChangeMessageTextToDefault",
			Handler:    _AdminService_ResetCustomPasswordChangeMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetDefaultInviteUserMessageText",
			Handler:    _AdminService_GetDefaultInviteUserMessageText_Handler,
		},
		{
			MethodName: "GetCustomInviteUserMessageText",
			Handler:    _AdminService_GetCustomInviteUserMessageText_Handler,
		},
		{
			MethodName: "SetDefaultInviteUserMessageText",
			Handler:    _AdminService_SetDefaultInviteUserMessageText_Handler,
		},
		{
			MethodName: "ResetCustomInviteUserMessageTextToDefault",
			Handler:    _AdminService_ResetCustomInviteUserMessageTextToDefault_Handler,
		},
		{
			MethodName: "GetDefaultLoginTexts",
			Handler:    _AdminService_GetDefaultLoginTexts_Handler,
		},
		{
			MethodName: "GetCustomLoginTexts",
			Handler:    _AdminService_GetCustomLoginTexts_Handler,
		},
		{
			MethodName: "SetCustomLoginText",
			Handler:    _AdminService_SetCustomLoginText_Handler,
		},
		{
			MethodName: "ResetCustomLoginTextToDefault",
			Handler:    _AdminService_ResetCustomLoginTextToDefault_Handler,
		},
		{
			MethodName: "ListIAMMemberRoles",
			Handler:    _AdminService_ListIAMMemberRoles_Handler,
		},
		{
			MethodName: "ListIAMMembers",
			Handler:    _AdminService_ListIAMMembers_Handler,
		},
		{
			MethodName: "AddIAMMember",
			Handler:    _AdminService_AddIAMMember_Handler,
		},
		{
			MethodName: "UpdateIAMMember",
			Handler:    _AdminService_UpdateIAMMember_Handler,
		},
		{
			MethodName: "RemoveIAMMember",
			Handler:    _AdminService_RemoveIAMMember_Handler,
		},
		{
			MethodName: "ListViews",
			Handler:    _AdminService_ListViews_Handler,
		},
		{
			MethodName: "ListFailedEvents",
			Handler:    _AdminService_ListFailedEvents_Handler,
		},
		{
			MethodName: "RemoveFailedEvent",
			Handler:    _AdminService_RemoveFailedEvent_Handler,
		},
		{
			MethodName: "ImportData",
			Handler:    _AdminService_ImportData_Handler,
		},
		{
			MethodName: "ExportData",
			Handler:    _AdminService_ExportData_Handler,
		},
		{
			MethodName: "ListEventTypes",
			Handler:    _AdminService_ListEventTypes_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _AdminService_ListEvents_Handler,
		},
		{
			MethodName: "ListAggregateTypes",
			Handler:    _AdminService_ListAggregateTypes_Handler,
		},
		{
			MethodName: "ActivateFeatureLoginDefaultOrg",
			Handler:    _AdminService_ActivateFeatureLoginDefaultOrg_Handler,
		},
		{
			MethodName: "ListMilestones",
			Handler:    _AdminService_ListMilestones_Handler,
		},
		{
			MethodName: "SetRestrictions",
			Handler:    _AdminService_SetRestrictions_Handler,
		},
		{
			MethodName: "GetRestrictions",
			Handler:    _AdminService_GetRestrictions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zitadel/admin.proto",
}
