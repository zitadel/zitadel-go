// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: zitadel/oidc/v2beta/oidc_service.proto

package oidc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OIDCService_GetAuthRequest_FullMethodName = "/zitadel.oidc.v2beta.OIDCService/GetAuthRequest"
	OIDCService_CreateCallback_FullMethodName = "/zitadel.oidc.v2beta.OIDCService/CreateCallback"
)

// OIDCServiceClient is the client API for OIDCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OIDCServiceClient interface {
	GetAuthRequest(ctx context.Context, in *GetAuthRequestRequest, opts ...grpc.CallOption) (*GetAuthRequestResponse, error)
	CreateCallback(ctx context.Context, in *CreateCallbackRequest, opts ...grpc.CallOption) (*CreateCallbackResponse, error)
}

type oIDCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOIDCServiceClient(cc grpc.ClientConnInterface) OIDCServiceClient {
	return &oIDCServiceClient{cc}
}

func (c *oIDCServiceClient) GetAuthRequest(ctx context.Context, in *GetAuthRequestRequest, opts ...grpc.CallOption) (*GetAuthRequestResponse, error) {
	out := new(GetAuthRequestResponse)
	err := c.cc.Invoke(ctx, OIDCService_GetAuthRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oIDCServiceClient) CreateCallback(ctx context.Context, in *CreateCallbackRequest, opts ...grpc.CallOption) (*CreateCallbackResponse, error) {
	out := new(CreateCallbackResponse)
	err := c.cc.Invoke(ctx, OIDCService_CreateCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OIDCServiceServer is the server API for OIDCService service.
// All implementations must embed UnimplementedOIDCServiceServer
// for forward compatibility
type OIDCServiceServer interface {
	GetAuthRequest(context.Context, *GetAuthRequestRequest) (*GetAuthRequestResponse, error)
	CreateCallback(context.Context, *CreateCallbackRequest) (*CreateCallbackResponse, error)
	mustEmbedUnimplementedOIDCServiceServer()
}

// UnimplementedOIDCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOIDCServiceServer struct {
}

func (UnimplementedOIDCServiceServer) GetAuthRequest(context.Context, *GetAuthRequestRequest) (*GetAuthRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthRequest not implemented")
}
func (UnimplementedOIDCServiceServer) CreateCallback(context.Context, *CreateCallbackRequest) (*CreateCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCallback not implemented")
}
func (UnimplementedOIDCServiceServer) mustEmbedUnimplementedOIDCServiceServer() {}

// UnsafeOIDCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OIDCServiceServer will
// result in compilation errors.
type UnsafeOIDCServiceServer interface {
	mustEmbedUnimplementedOIDCServiceServer()
}

func RegisterOIDCServiceServer(s grpc.ServiceRegistrar, srv OIDCServiceServer) {
	s.RegisterService(&OIDCService_ServiceDesc, srv)
}

func _OIDCService_GetAuthRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OIDCServiceServer).GetAuthRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OIDCService_GetAuthRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OIDCServiceServer).GetAuthRequest(ctx, req.(*GetAuthRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OIDCService_CreateCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OIDCServiceServer).CreateCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OIDCService_CreateCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OIDCServiceServer).CreateCallback(ctx, req.(*CreateCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OIDCService_ServiceDesc is the grpc.ServiceDesc for OIDCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OIDCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zitadel.oidc.v2beta.OIDCService",
	HandlerType: (*OIDCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthRequest",
			Handler:    _OIDCService_GetAuthRequest_Handler,
		},
		{
			MethodName: "CreateCallback",
			Handler:    _OIDCService_CreateCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zitadel/oidc/v2beta/oidc_service.proto",
}
