// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/feature/v2/system.proto

package feature

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	v2 "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/object/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetSystemFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginDefaultOrg                     *bool                 `protobuf:"varint,1,opt,name=login_default_org,json=loginDefaultOrg,proto3,oneof" json:"login_default_org,omitempty"`
	OidcTriggerIntrospectionProjections *bool                 `protobuf:"varint,2,opt,name=oidc_trigger_introspection_projections,json=oidcTriggerIntrospectionProjections,proto3,oneof" json:"oidc_trigger_introspection_projections,omitempty"`
	OidcLegacyIntrospection             *bool                 `protobuf:"varint,3,opt,name=oidc_legacy_introspection,json=oidcLegacyIntrospection,proto3,oneof" json:"oidc_legacy_introspection,omitempty"`
	UserSchema                          *bool                 `protobuf:"varint,4,opt,name=user_schema,json=userSchema,proto3,oneof" json:"user_schema,omitempty"`
	OidcTokenExchange                   *bool                 `protobuf:"varint,5,opt,name=oidc_token_exchange,json=oidcTokenExchange,proto3,oneof" json:"oidc_token_exchange,omitempty"`
	Actions                             *bool                 `protobuf:"varint,6,opt,name=actions,proto3,oneof" json:"actions,omitempty"`
	ImprovedPerformance                 []ImprovedPerformance `protobuf:"varint,7,rep,packed,name=improved_performance,json=improvedPerformance,proto3,enum=zitadel.feature.v2.ImprovedPerformance" json:"improved_performance,omitempty"`
	OidcSingleV1SessionTermination      *bool                 `protobuf:"varint,8,opt,name=oidc_single_v1_session_termination,json=oidcSingleV1SessionTermination,proto3,oneof" json:"oidc_single_v1_session_termination,omitempty"`
	DisableUserTokenEvent               *bool                 `protobuf:"varint,9,opt,name=disable_user_token_event,json=disableUserTokenEvent,proto3,oneof" json:"disable_user_token_event,omitempty"`
	EnableBackChannelLogout             *bool                 `protobuf:"varint,10,opt,name=enable_back_channel_logout,json=enableBackChannelLogout,proto3,oneof" json:"enable_back_channel_logout,omitempty"`
	LoginV2                             *LoginV2              `protobuf:"bytes,11,opt,name=login_v2,json=loginV2,proto3,oneof" json:"login_v2,omitempty"`
	PermissionCheckV2                   *bool                 `protobuf:"varint,12,opt,name=permission_check_v2,json=permissionCheckV2,proto3,oneof" json:"permission_check_v2,omitempty"`
}

func (x *SetSystemFeaturesRequest) Reset() {
	*x = SetSystemFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_feature_v2_system_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSystemFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSystemFeaturesRequest) ProtoMessage() {}

func (x *SetSystemFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_feature_v2_system_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSystemFeaturesRequest.ProtoReflect.Descriptor instead.
func (*SetSystemFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_feature_v2_system_proto_rawDescGZIP(), []int{0}
}

func (x *SetSystemFeaturesRequest) GetLoginDefaultOrg() bool {
	if x != nil && x.LoginDefaultOrg != nil {
		return *x.LoginDefaultOrg
	}
	return false
}

func (x *SetSystemFeaturesRequest) GetOidcTriggerIntrospectionProjections() bool {
	if x != nil && x.OidcTriggerIntrospectionProjections != nil {
		return *x.OidcTriggerIntrospectionProjections
	}
	return false
}

func (x *SetSystemFeaturesRequest) GetOidcLegacyIntrospection() bool {
	if x != nil && x.OidcLegacyIntrospection != nil {
		return *x.OidcLegacyIntrospection
	}
	return false
}

func (x *SetSystemFeaturesRequest) GetUserSchema() bool {
	if x != nil && x.UserSchema != nil {
		return *x.UserSchema
	}
	return false
}

func (x *SetSystemFeaturesRequest) GetOidcTokenExchange() bool {
	if x != nil && x.OidcTokenExchange != nil {
		return *x.OidcTokenExchange
	}
	return false
}

func (x *SetSystemFeaturesRequest) GetActions() bool {
	if x != nil && x.Actions != nil {
		return *x.Actions
	}
	return false
}

func (x *SetSystemFeaturesRequest) GetImprovedPerformance() []ImprovedPerformance {
	if x != nil {
		return x.ImprovedPerformance
	}
	return nil
}

func (x *SetSystemFeaturesRequest) GetOidcSingleV1SessionTermination() bool {
	if x != nil && x.OidcSingleV1SessionTermination != nil {
		return *x.OidcSingleV1SessionTermination
	}
	return false
}

func (x *SetSystemFeaturesRequest) GetDisableUserTokenEvent() bool {
	if x != nil && x.DisableUserTokenEvent != nil {
		return *x.DisableUserTokenEvent
	}
	return false
}

func (x *SetSystemFeaturesRequest) GetEnableBackChannelLogout() bool {
	if x != nil && x.EnableBackChannelLogout != nil {
		return *x.EnableBackChannelLogout
	}
	return false
}

func (x *SetSystemFeaturesRequest) GetLoginV2() *LoginV2 {
	if x != nil {
		return x.LoginV2
	}
	return nil
}

func (x *SetSystemFeaturesRequest) GetPermissionCheckV2() bool {
	if x != nil && x.PermissionCheckV2 != nil {
		return *x.PermissionCheckV2
	}
	return false
}

type SetSystemFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *SetSystemFeaturesResponse) Reset() {
	*x = SetSystemFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_feature_v2_system_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSystemFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSystemFeaturesResponse) ProtoMessage() {}

func (x *SetSystemFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_feature_v2_system_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSystemFeaturesResponse.ProtoReflect.Descriptor instead.
func (*SetSystemFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_feature_v2_system_proto_rawDescGZIP(), []int{1}
}

func (x *SetSystemFeaturesResponse) GetDetails() *v2.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type ResetSystemFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetSystemFeaturesRequest) Reset() {
	*x = ResetSystemFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_feature_v2_system_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetSystemFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSystemFeaturesRequest) ProtoMessage() {}

func (x *ResetSystemFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_feature_v2_system_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSystemFeaturesRequest.ProtoReflect.Descriptor instead.
func (*ResetSystemFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_feature_v2_system_proto_rawDescGZIP(), []int{2}
}

type ResetSystemFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v2.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ResetSystemFeaturesResponse) Reset() {
	*x = ResetSystemFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_feature_v2_system_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetSystemFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSystemFeaturesResponse) ProtoMessage() {}

func (x *ResetSystemFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_feature_v2_system_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSystemFeaturesResponse.ProtoReflect.Descriptor instead.
func (*ResetSystemFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_feature_v2_system_proto_rawDescGZIP(), []int{3}
}

func (x *ResetSystemFeaturesResponse) GetDetails() *v2.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetSystemFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSystemFeaturesRequest) Reset() {
	*x = GetSystemFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_feature_v2_system_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSystemFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemFeaturesRequest) ProtoMessage() {}

func (x *GetSystemFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_feature_v2_system_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemFeaturesRequest.ProtoReflect.Descriptor instead.
func (*GetSystemFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_feature_v2_system_proto_rawDescGZIP(), []int{4}
}

type GetSystemFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details                             *v2.Details                     `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	LoginDefaultOrg                     *FeatureFlag                    `protobuf:"bytes,2,opt,name=login_default_org,json=loginDefaultOrg,proto3" json:"login_default_org,omitempty"`
	OidcTriggerIntrospectionProjections *FeatureFlag                    `protobuf:"bytes,3,opt,name=oidc_trigger_introspection_projections,json=oidcTriggerIntrospectionProjections,proto3" json:"oidc_trigger_introspection_projections,omitempty"`
	OidcLegacyIntrospection             *FeatureFlag                    `protobuf:"bytes,4,opt,name=oidc_legacy_introspection,json=oidcLegacyIntrospection,proto3" json:"oidc_legacy_introspection,omitempty"`
	UserSchema                          *FeatureFlag                    `protobuf:"bytes,5,opt,name=user_schema,json=userSchema,proto3" json:"user_schema,omitempty"`
	OidcTokenExchange                   *FeatureFlag                    `protobuf:"bytes,6,opt,name=oidc_token_exchange,json=oidcTokenExchange,proto3" json:"oidc_token_exchange,omitempty"`
	Actions                             *FeatureFlag                    `protobuf:"bytes,7,opt,name=actions,proto3" json:"actions,omitempty"`
	ImprovedPerformance                 *ImprovedPerformanceFeatureFlag `protobuf:"bytes,8,opt,name=improved_performance,json=improvedPerformance,proto3" json:"improved_performance,omitempty"`
	OidcSingleV1SessionTermination      *FeatureFlag                    `protobuf:"bytes,9,opt,name=oidc_single_v1_session_termination,json=oidcSingleV1SessionTermination,proto3" json:"oidc_single_v1_session_termination,omitempty"`
	DisableUserTokenEvent               *FeatureFlag                    `protobuf:"bytes,10,opt,name=disable_user_token_event,json=disableUserTokenEvent,proto3" json:"disable_user_token_event,omitempty"`
	EnableBackChannelLogout             *FeatureFlag                    `protobuf:"bytes,11,opt,name=enable_back_channel_logout,json=enableBackChannelLogout,proto3" json:"enable_back_channel_logout,omitempty"`
	LoginV2                             *LoginV2FeatureFlag             `protobuf:"bytes,12,opt,name=login_v2,json=loginV2,proto3" json:"login_v2,omitempty"`
	PermissionCheckV2                   *FeatureFlag                    `protobuf:"bytes,13,opt,name=permission_check_v2,json=permissionCheckV2,proto3" json:"permission_check_v2,omitempty"`
}

func (x *GetSystemFeaturesResponse) Reset() {
	*x = GetSystemFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_feature_v2_system_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSystemFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemFeaturesResponse) ProtoMessage() {}

func (x *GetSystemFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_feature_v2_system_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemFeaturesResponse.ProtoReflect.Descriptor instead.
func (*GetSystemFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_feature_v2_system_proto_rawDescGZIP(), []int{5}
}

func (x *GetSystemFeaturesResponse) GetDetails() *v2.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *GetSystemFeaturesResponse) GetLoginDefaultOrg() *FeatureFlag {
	if x != nil {
		return x.LoginDefaultOrg
	}
	return nil
}

func (x *GetSystemFeaturesResponse) GetOidcTriggerIntrospectionProjections() *FeatureFlag {
	if x != nil {
		return x.OidcTriggerIntrospectionProjections
	}
	return nil
}

func (x *GetSystemFeaturesResponse) GetOidcLegacyIntrospection() *FeatureFlag {
	if x != nil {
		return x.OidcLegacyIntrospection
	}
	return nil
}

func (x *GetSystemFeaturesResponse) GetUserSchema() *FeatureFlag {
	if x != nil {
		return x.UserSchema
	}
	return nil
}

func (x *GetSystemFeaturesResponse) GetOidcTokenExchange() *FeatureFlag {
	if x != nil {
		return x.OidcTokenExchange
	}
	return nil
}

func (x *GetSystemFeaturesResponse) GetActions() *FeatureFlag {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *GetSystemFeaturesResponse) GetImprovedPerformance() *ImprovedPerformanceFeatureFlag {
	if x != nil {
		return x.ImprovedPerformance
	}
	return nil
}

func (x *GetSystemFeaturesResponse) GetOidcSingleV1SessionTermination() *FeatureFlag {
	if x != nil {
		return x.OidcSingleV1SessionTermination
	}
	return nil
}

func (x *GetSystemFeaturesResponse) GetDisableUserTokenEvent() *FeatureFlag {
	if x != nil {
		return x.DisableUserTokenEvent
	}
	return nil
}

func (x *GetSystemFeaturesResponse) GetEnableBackChannelLogout() *FeatureFlag {
	if x != nil {
		return x.EnableBackChannelLogout
	}
	return nil
}

func (x *GetSystemFeaturesResponse) GetLoginV2() *LoginV2FeatureFlag {
	if x != nil {
		return x.LoginV2
	}
	return nil
}

func (x *GetSystemFeaturesResponse) GetPermissionCheckV2() *FeatureFlag {
	if x != nil {
		return x.PermissionCheckV2
	}
	return nil
}

var File_zitadel_feature_v2_system_proto protoreflect.FileDescriptor

var file_zitadel_feature_v2_system_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x76, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76,
	0x32, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2f,
	0x76, 0x32, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xbf, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xaf, 0x01,
	0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x7e, 0x92, 0x41, 0x7b, 0x32, 0x73,
	0x54, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x55, 0x49, 0x20, 0x77, 0x69, 0x6c,
	0x6c, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x20, 0x6f, 0x72, 0x67, 0x20, 0x28, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66,
	0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x29, 0x20, 0x69, 0x66, 0x20, 0x6e, 0x6f, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x69, 0x73, 0x20,
	0x73, 0x65, 0x74, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x67, 0x88, 0x01, 0x01, 0x12,
	0xb7, 0x03, 0x0a, 0x26, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x42, 0xdc, 0x02, 0x92, 0x41, 0xd8, 0x02, 0x32, 0xcf, 0x02, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x73, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x20, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x61,
	0x63, 0x74, 0x20, 0x61, 0x73, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x62, 0x75, 0x74, 0x20, 0x63, 0x61,
	0x6e, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x20, 0x6f, 0x6e, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x20, 0x57, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x69,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x20, 0x50, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x20, 0x72, 0x61, 0x69, 0x73, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48,
	0x01, 0x52, 0x23, 0x6f, 0x69, 0x64, 0x63, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x6e,
	0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0xb6, 0x02, 0x0a, 0x19, 0x6f, 0x69,
	0x64, 0x63, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0xf4, 0x01,
	0x92, 0x41, 0xf0, 0x01, 0x32, 0xe7, 0x01, 0x57, 0x65, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x66, 0x20, 0x75, 0x6e, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x62, 0x75, 0x67, 0x73, 0x20, 0x61, 0x72, 0x69, 0x73,
	0x65, 0x2e, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x72, 0x61, 0x69, 0x73, 0x65, 0x20,
	0x61, 0x6e, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x20,
	0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x4a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x48, 0x02, 0x52, 0x17, 0x6f, 0x69, 0x64, 0x63, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0xdb, 0x01, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0xb4, 0x01, 0x92, 0x41, 0xb0, 0x01, 0x32,
	0xa7, 0x01, 0x55, 0x73, 0x65, 0x72, 0x20, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x20, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67,
	0x20, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2c, 0x20, 0x79, 0x6f, 0x75,
	0x27, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75,
	0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x41, 0x50, 0x49, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x69, 0x74, 0x73, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e,
	0x20, 0x4e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73,
	0x20, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x61, 0x72,
	0x6c, 0x79, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x2e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48,
	0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x88, 0x01, 0x01,
	0x12, 0xd0, 0x02, 0x0a, 0x13, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x9a,
	0x02, 0x92, 0x41, 0x96, 0x02, 0x32, 0x8d, 0x02, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x20,
	0x60, 0x75, 0x72, 0x6e, 0x3a, 0x69, 0x65, 0x74, 0x66, 0x3a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x3a, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x3a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x3a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x60, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x6c, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6d,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2e, 0x20, 0x53, 0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x74,
	0x6f, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48, 0x04, 0x52, 0x11, 0x6f,
	0x69, 0x64, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0xd6, 0x01, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0xb6, 0x01, 0x92, 0x41, 0xb2, 0x01, 0x32, 0xa9, 0x01, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x6f, 0x20,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20,
	0x69, 0x73, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x27,
	0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x41, 0x50, 0x49, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x69, 0x74, 0x73, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x20,
	0x4e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20,
	0x73, 0x74, 0x69, 0x6c, 0x6c, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x61, 0x72, 0x6c,
	0x79, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x2e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48, 0x05,
	0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0xa9, 0x01, 0x0a,
	0x14, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x32,
	0x2e, 0x49, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x42, 0x4d, 0x92, 0x41, 0x39, 0x32, 0x32, 0x49, 0x6d, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x73, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x4a, 0x03, 0x5b,
	0x31, 0x5d, 0xfa, 0x42, 0x0e, 0x92, 0x01, 0x0b, 0x18, 0x01, 0x22, 0x07, 0x82, 0x01, 0x04, 0x10,
	0x01, 0x20, 0x00, 0x52, 0x13, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xce, 0x03, 0x0a, 0x22, 0x6f, 0x69, 0x64,
	0x63, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x76, 0x31, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0xfc, 0x02, 0x92, 0x41, 0xf8, 0x02, 0x32, 0xef, 0x02, 0x49,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x27, 0x6c, 0x6c, 0x20, 0x62, 0x65,
	0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x20, 0x55, 0x49, 0x20, 0x62, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x69,
	0x6e, 0x67, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x60, 0x73, 0x69, 0x64, 0x60, 0x20, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x20, 0x61, 0x73, 0x20, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x68, 0x69,
	0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x20,
	0x4e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x6c, 0x79, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x28, 0x62, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x29, 0x20, 0x61, 0x72, 0x65, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20,
	0x55, 0x49, 0x2e, 0x20, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x20, 0x61, 0x6c, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x48, 0x06, 0x52, 0x1e, 0x6f, 0x69, 0x64, 0x63, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x56, 0x31, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0xc7, 0x01, 0x0a, 0x18, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x88, 0x01, 0x92,
	0x41, 0x84, 0x01, 0x32, 0x7c, 0x44, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x75, 0x73, 0x68,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x61,
	0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x61, 0x64, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6d,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x20, 0x6f, 0x6e, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x28, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x2d, 0x29, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x73, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48, 0x07, 0x52, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0xdd, 0x01, 0x0a, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x9a, 0x01, 0x92, 0x41, 0x96, 0x01, 0x32,
	0x8d, 0x01, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x69, 0x73,
	0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x27, 0x6c, 0x6c,
	0x20, 0x62, 0x65, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x20, 0x42, 0x61, 0x63, 0x6b, 0x2d, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x62, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x79,
	0x6f, 0x75, 0x72, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x48, 0x08, 0x52, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x95, 0x01, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x76, 0x32,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x56, 0x32, 0x42, 0x58, 0x92, 0x41, 0x55, 0x32, 0x53, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x55, 0x49, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x72, 0x65,
	0x67, 0x61, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x69,
	0x72, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x09, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x56, 0x32, 0x88, 0x01, 0x01, 0x12, 0x99, 0x01, 0x0a, 0x13,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x76, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x64, 0x92, 0x41, 0x61, 0x32, 0x59,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x65, 0x72, 0x2c, 0x20,
	0x6d, 0x6f, 0x72, 0x65, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x74, 0x2c,
	0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x76, 0x32, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x76, 0x33, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x20, 0x41, 0x50, 0x49, 0x73, 0x2e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48,
	0x0a, 0x52, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x56, 0x32, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x72, 0x67, 0x42, 0x29, 0x0a,
	0x27, 0x5f, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6f, 0x69, 0x64,
	0x63, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x69, 0x64, 0x63, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x6f,
	0x69, 0x64, 0x63, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x76, 0x31, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x1d,
	0x0a, 0x1b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x76, 0x32, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x76, 0x32, 0x22, 0x51, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x8f, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0xcb, 0x01, 0x0a, 0x11, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x72, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x7e, 0x92, 0x41, 0x7b, 0x32, 0x73, 0x54, 0x68, 0x65, 0x20,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x55, 0x49, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x75, 0x73,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x72,
	0x67, 0x20, 0x28, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x29, 0x20, 0x69, 0x66,
	0x20, 0x6e, 0x6f, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x4a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4f, 0x72, 0x67, 0x12, 0xd3, 0x03, 0x0a, 0x26, 0x6f, 0x69, 0x64, 0x63, 0x5f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x42, 0xdc, 0x02, 0x92, 0x41, 0xd8, 0x02, 0x32,
	0xcf, 0x02, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x20, 0x64, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x54, 0x68,
	0x69, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x20, 0x61, 0x73, 0x20, 0x77, 0x6f,
	0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x20, 0x62, 0x75, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61,
	0x6e, 0x20, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x20, 0x57, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20,
	0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x72, 0x61, 0x69,
	0x73, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x79,
	0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x23, 0x6f, 0x69, 0x64, 0x63, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xd2, 0x02, 0x0a,
	0x19, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x42, 0xf4, 0x01, 0x92, 0x41, 0xf0, 0x01, 0x32, 0xe7, 0x01, 0x57, 0x65, 0x20, 0x68, 0x61,
	0x76, 0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x20, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x66, 0x20,
	0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x62, 0x75, 0x67, 0x73, 0x20,
	0x61, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x72, 0x61,
	0x69, 0x73, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20,
	0x79, 0x6f, 0x75, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x17, 0x6f, 0x69, 0x64, 0x63, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xf7, 0x01, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65,
	0x6c, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x42, 0xb4, 0x01, 0x92, 0x41, 0xb0, 0x01, 0x32,
	0xa7, 0x01, 0x55, 0x73, 0x65, 0x72, 0x20, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x20, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67,
	0x20, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2c, 0x20, 0x79, 0x6f, 0x75,
	0x27, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75,
	0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x41, 0x50, 0x49, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x69, 0x74, 0x73, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e,
	0x20, 0x4e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73,
	0x20, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x61, 0x72,
	0x6c, 0x79, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x2e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0xec, 0x02, 0x0a, 0x13,
	0x6f, 0x69, 0x64, 0x63, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x9a, 0x02, 0x92, 0x41, 0x96,
	0x02, 0x32, 0x8d, 0x02, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x20, 0x60, 0x75, 0x72, 0x6e,
	0x3a, 0x69, 0x65, 0x74, 0x66, 0x3a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x3a, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x3a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x60, 0x20, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x4f, 0x49, 0x44, 0x43, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x65, 0x72,
	0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2e, 0x20, 0x53, 0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x20, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x11, 0x6f, 0x69, 0x64, 0x63, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0xf5, 0x01, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x42, 0xb9, 0x01,
	0x92, 0x41, 0xb5, 0x01, 0x32, 0xac, 0x01, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x76,
	0x32, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x20, 0x49,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x27, 0x6c, 0x6c, 0x20, 0x62, 0x65,
	0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6e, 0x65, 0x77, 0x20, 0x41, 0x50, 0x49, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x74, 0x73,
	0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x20, 0x4e, 0x6f, 0x74, 0x65, 0x20,
	0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x73, 0x74, 0x69, 0x6c, 0x6c,
	0x20, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x20, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x2e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x14, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x32, 0x32, 0x49, 0x6d, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x73, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x4a, 0x03,
	0x5b, 0x31, 0x5d, 0x52, 0x13, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xea, 0x03, 0x0a, 0x22, 0x6f, 0x69, 0x64,
	0x63, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x76, 0x31, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x42, 0xfc, 0x02, 0x92, 0x41, 0xf8, 0x02, 0x32, 0xef, 0x02,
	0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x69, 0x73, 0x20, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x27, 0x6c, 0x6c, 0x20, 0x62,
	0x65, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x20, 0x55, 0x49, 0x20, 0x62, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x60, 0x73, 0x69, 0x64, 0x60, 0x20, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x20, 0x61, 0x73, 0x20, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x68,
	0x69, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x20, 0x4e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x6c, 0x79, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x28, 0x62, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x29, 0x20, 0x61, 0x72, 0x65, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x20, 0x55, 0x49, 0x2e, 0x20, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x20, 0x61, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x1e, 0x6f, 0x69, 0x64, 0x63, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x56, 0x31, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xe3, 0x01, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x88, 0x01, 0x92, 0x41, 0x84, 0x01,
	0x32, 0x7c, 0x44, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x75, 0x73, 0x68, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x2d, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x61, 0x64, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6d, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6f,
	0x6e, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x28, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x2d, 0x29, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x4a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0xf9, 0x01, 0x0a, 0x1a,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x42, 0x9a, 0x01, 0x92, 0x41, 0x96, 0x01, 0x32, 0x8d, 0x01, 0x49, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x27, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4f, 0x49, 0x44,
	0x43, 0x20, 0x42, 0x61, 0x63, 0x6b, 0x2d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x4c,
	0x6f, 0x67, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x17,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0xba, 0x01, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x76, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x56, 0x32, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x42, 0x77, 0x92, 0x41, 0x74, 0x32, 0x6c, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x66, 0x6c, 0x61, 0x67, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x56, 0x32, 0x20, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64,
	0x6c, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x73, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x56, 0x32, 0x12, 0xaf, 0x01, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x76, 0x32, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x42, 0x5e, 0x92, 0x41, 0x5b, 0x32, 0x59, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x65, 0x72, 0x2c, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x74, 0x2c, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x75, 0x73, 0x65, 0x64,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x76, 0x32, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x33, 0x20, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x41, 0x50,
	0x49, 0x73, 0x2e, 0x52, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x56, 0x32, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x3b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_feature_v2_system_proto_rawDescOnce sync.Once
	file_zitadel_feature_v2_system_proto_rawDescData = file_zitadel_feature_v2_system_proto_rawDesc
)

func file_zitadel_feature_v2_system_proto_rawDescGZIP() []byte {
	file_zitadel_feature_v2_system_proto_rawDescOnce.Do(func() {
		file_zitadel_feature_v2_system_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_feature_v2_system_proto_rawDescData)
	})
	return file_zitadel_feature_v2_system_proto_rawDescData
}

var file_zitadel_feature_v2_system_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_zitadel_feature_v2_system_proto_goTypes = []interface{}{
	(*SetSystemFeaturesRequest)(nil),       // 0: zitadel.feature.v2.SetSystemFeaturesRequest
	(*SetSystemFeaturesResponse)(nil),      // 1: zitadel.feature.v2.SetSystemFeaturesResponse
	(*ResetSystemFeaturesRequest)(nil),     // 2: zitadel.feature.v2.ResetSystemFeaturesRequest
	(*ResetSystemFeaturesResponse)(nil),    // 3: zitadel.feature.v2.ResetSystemFeaturesResponse
	(*GetSystemFeaturesRequest)(nil),       // 4: zitadel.feature.v2.GetSystemFeaturesRequest
	(*GetSystemFeaturesResponse)(nil),      // 5: zitadel.feature.v2.GetSystemFeaturesResponse
	(ImprovedPerformance)(0),               // 6: zitadel.feature.v2.ImprovedPerformance
	(*LoginV2)(nil),                        // 7: zitadel.feature.v2.LoginV2
	(*v2.Details)(nil),                     // 8: zitadel.object.v2.Details
	(*FeatureFlag)(nil),                    // 9: zitadel.feature.v2.FeatureFlag
	(*ImprovedPerformanceFeatureFlag)(nil), // 10: zitadel.feature.v2.ImprovedPerformanceFeatureFlag
	(*LoginV2FeatureFlag)(nil),             // 11: zitadel.feature.v2.LoginV2FeatureFlag
}
var file_zitadel_feature_v2_system_proto_depIdxs = []int32{
	6,  // 0: zitadel.feature.v2.SetSystemFeaturesRequest.improved_performance:type_name -> zitadel.feature.v2.ImprovedPerformance
	7,  // 1: zitadel.feature.v2.SetSystemFeaturesRequest.login_v2:type_name -> zitadel.feature.v2.LoginV2
	8,  // 2: zitadel.feature.v2.SetSystemFeaturesResponse.details:type_name -> zitadel.object.v2.Details
	8,  // 3: zitadel.feature.v2.ResetSystemFeaturesResponse.details:type_name -> zitadel.object.v2.Details
	8,  // 4: zitadel.feature.v2.GetSystemFeaturesResponse.details:type_name -> zitadel.object.v2.Details
	9,  // 5: zitadel.feature.v2.GetSystemFeaturesResponse.login_default_org:type_name -> zitadel.feature.v2.FeatureFlag
	9,  // 6: zitadel.feature.v2.GetSystemFeaturesResponse.oidc_trigger_introspection_projections:type_name -> zitadel.feature.v2.FeatureFlag
	9,  // 7: zitadel.feature.v2.GetSystemFeaturesResponse.oidc_legacy_introspection:type_name -> zitadel.feature.v2.FeatureFlag
	9,  // 8: zitadel.feature.v2.GetSystemFeaturesResponse.user_schema:type_name -> zitadel.feature.v2.FeatureFlag
	9,  // 9: zitadel.feature.v2.GetSystemFeaturesResponse.oidc_token_exchange:type_name -> zitadel.feature.v2.FeatureFlag
	9,  // 10: zitadel.feature.v2.GetSystemFeaturesResponse.actions:type_name -> zitadel.feature.v2.FeatureFlag
	10, // 11: zitadel.feature.v2.GetSystemFeaturesResponse.improved_performance:type_name -> zitadel.feature.v2.ImprovedPerformanceFeatureFlag
	9,  // 12: zitadel.feature.v2.GetSystemFeaturesResponse.oidc_single_v1_session_termination:type_name -> zitadel.feature.v2.FeatureFlag
	9,  // 13: zitadel.feature.v2.GetSystemFeaturesResponse.disable_user_token_event:type_name -> zitadel.feature.v2.FeatureFlag
	9,  // 14: zitadel.feature.v2.GetSystemFeaturesResponse.enable_back_channel_logout:type_name -> zitadel.feature.v2.FeatureFlag
	11, // 15: zitadel.feature.v2.GetSystemFeaturesResponse.login_v2:type_name -> zitadel.feature.v2.LoginV2FeatureFlag
	9,  // 16: zitadel.feature.v2.GetSystemFeaturesResponse.permission_check_v2:type_name -> zitadel.feature.v2.FeatureFlag
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_zitadel_feature_v2_system_proto_init() }
func file_zitadel_feature_v2_system_proto_init() {
	if File_zitadel_feature_v2_system_proto != nil {
		return
	}
	file_zitadel_feature_v2_feature_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zitadel_feature_v2_system_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSystemFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_feature_v2_system_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSystemFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_feature_v2_system_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetSystemFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_feature_v2_system_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetSystemFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_feature_v2_system_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSystemFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_feature_v2_system_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSystemFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_feature_v2_system_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_feature_v2_system_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zitadel_feature_v2_system_proto_goTypes,
		DependencyIndexes: file_zitadel_feature_v2_system_proto_depIdxs,
		MessageInfos:      file_zitadel_feature_v2_system_proto_msgTypes,
	}.Build()
	File_zitadel_feature_v2_system_proto = out.File
	file_zitadel_feature_v2_system_proto_rawDesc = nil
	file_zitadel_feature_v2_system_proto_goTypes = nil
	file_zitadel_feature_v2_system_proto_depIdxs = nil
}
