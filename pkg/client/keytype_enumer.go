// Code generated by "enumer -type KeyType -linecomment -json"; DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _KeyTypeName = "serviceaccountapplication"

var _KeyTypeIndex = [...]uint8{0, 14, 25}

const _KeyTypeLowerName = "serviceaccountapplication"

func (i KeyType) String() string {
	if i < 0 || i >= KeyType(len(_KeyTypeIndex)-1) {
		return fmt.Sprintf("KeyType(%d)", i)
	}
	return _KeyTypeName[_KeyTypeIndex[i]:_KeyTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _KeyTypeNoOp() {
	var x [1]struct{}
	_ = x[ServiceAccountKey-(0)]
	_ = x[ApplicationKey-(1)]
}

var _KeyTypeValues = []KeyType{ServiceAccountKey, ApplicationKey}

var _KeyTypeNameToValueMap = map[string]KeyType{
	_KeyTypeName[0:14]:       ServiceAccountKey,
	_KeyTypeLowerName[0:14]:  ServiceAccountKey,
	_KeyTypeName[14:25]:      ApplicationKey,
	_KeyTypeLowerName[14:25]: ApplicationKey,
}

var _KeyTypeNames = []string{
	_KeyTypeName[0:14],
	_KeyTypeName[14:25],
}

// KeyTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func KeyTypeString(s string) (KeyType, error) {
	if val, ok := _KeyTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _KeyTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to KeyType values", s)
}

// KeyTypeValues returns all values of the enum
func KeyTypeValues() []KeyType {
	return _KeyTypeValues
}

// KeyTypeStrings returns a slice of all String values of the enum
func KeyTypeStrings() []string {
	strs := make([]string, len(_KeyTypeNames))
	copy(strs, _KeyTypeNames)
	return strs
}

// IsAKeyType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i KeyType) IsAKeyType() bool {
	for _, v := range _KeyTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for KeyType
func (i KeyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for KeyType
func (i *KeyType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("KeyType should be a string, got %s", data)
	}

	var err error
	*i, err = KeyTypeString(s)
	return err
}
